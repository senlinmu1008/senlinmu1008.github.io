<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Redlock实现分布式锁</title>
      <link href="Redis%E8%BF%9B%E9%98%B6/Redlock%E5%AE%9E%E7%8E%B0%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/"/>
      <url>Redis%E8%BF%9B%E9%98%B6/Redlock%E5%AE%9E%E7%8E%B0%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>之前使用<code>redisson</code>的普通分布式锁方案不能解决对于集群或者哨兵模式下的主从切换场景导致锁丢失的问题。<code>redisson</code>还对<code>redlock</code>算法进行了封装，可以解决主从切换导致的锁丢失问题。</p><p>需要注意的是，只有充分了解普通分布式锁是如何实现的，才能更好的了解<code>redlock</code>分布式锁的实现，因为<code>redlock</code>分布式锁的实现完全基于普通分布式锁。</p><h2 id="1、Redlock算法"><a href="#1、Redlock算法" class="headerlink" title="1、Redlock算法"></a>1、Redlock算法</h2><p>在Redis的分布式环境中，我们假设有N个完全互相独立的Redis节点，在N个Redis实例上使用与在Redis单实例下相同方法获取锁和释放锁。（可以是N个单机节点，也可以是N个<code>sentinel</code>或者是N个<code>cluster</code>集群）</p><p>现在假设有5个Redis主节点(大于等于3的奇数个)，这样基本保证他们不会同时都宕掉，获取锁和释放锁的过程中，客户端会执行以下操作:</p><ul><li>获取当前Unix时间，以毫秒为单位。</li><li>依次尝试从5个实例，使用相同的key和具有唯一性的value（例如UUID）获取锁。当向Redis请求获取锁时，客户端应该设置一个网络连接和响应超时时间，这个超时时间应该小于锁的失效时间。例如你的锁自动失效时间为10秒，则超时时间应该在5-50毫秒之间。这样可以避免服务器端Redis已经挂掉的情况下，客户端还在死死地等待响应结果。如果服务器端没有在规定时间内响应，客户端应该尽快尝试去另外一个Redis实例请求获取锁。</li><li>客户端使用当前时间减去开始获取锁时间（步骤1记录的时间）就得到获取锁使用的时间。当且仅当从大多数（N/2+1，这里是3个节点）的Redis节点都取到锁，并且使用的时间小于锁失效时间时，锁才算获取成功。</li><li>如果取到了锁，key的真正有效时间等于有效时间减去获取锁所使用的时间（步骤3计算的结果）。</li><li>如果因为某些原因，获取锁失败（没有在至少N/2+1个Redis实例取到锁或者取锁时间已经超过了有效时间），客户端应该在所有的Redis实例上进行解锁（即便某些Redis实例根本就没有加锁成功，防止某些节点获取到锁但是客户端没有得到响应而导致接下来的一段时间不能被重新获取锁）。</li></ul><h2 id="2、Redlock示例"><a href="#2、Redlock示例" class="headerlink" title="2、Redlock示例"></a>2、Redlock示例</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDisLock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 配置多台互相独立的redis单机节点</span></span><br><span class="line">    Config config1 = <span class="keyword">new</span> Config();</span><br><span class="line">    config1.useSingleServer().setAddress(<span class="string">&quot;redis://172.16.122.104:6379&quot;</span>).setDatabase(<span class="number">0</span>);</span><br><span class="line">    Config config2 = <span class="keyword">new</span> Config();</span><br><span class="line">    config2.useSingleServer().setAddress(<span class="string">&quot;redis://172.16.122.104:6380&quot;</span>).setDatabase(<span class="number">0</span>);</span><br><span class="line">    Config config3 = <span class="keyword">new</span> Config();</span><br><span class="line">    config3.useSingleServer().setAddress(<span class="string">&quot;redis://172.16.122.104:6381&quot;</span>).setDatabase(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构建RedissonClient</span></span><br><span class="line">    RedissonClient redissonClient1 = Redisson.create(config1);</span><br><span class="line">    RedissonClient redissonClient2 = Redisson.create(config2);</span><br><span class="line">    RedissonClient redissonClient3 = Redisson.create(config3);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 5个线程并发去获取锁</span></span><br><span class="line">    IntStream.range(<span class="number">0</span>, <span class="number">5</span>).parallel().forEach(i -&gt; tryRedlock(redissonClient1, redissonClient2, redissonClient3));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">tryRedlock</span><span class="params">(RedissonClient... redissonClients)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 构建Redlock对象</span></span><br><span class="line">    RLock[] rLock = <span class="keyword">new</span> RLock[redissonClients.length];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; rLock.length; i++) &#123;</span><br><span class="line">        rLock[i] = redissonClients[i].getLock(<span class="string">&quot;redlock&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    RLock redLock = <span class="keyword">new</span> RedissonRedLock(rLock);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 基于Redlock对象去操作，与redisson实现普通的分布式锁一样</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 获取锁最多等待500ms，10s后key过期自动释放锁</span></span><br><span class="line">        <span class="keyword">boolean</span> tryLock = redLock.tryLock(<span class="number">500</span>, <span class="number">10000</span>, TimeUnit.MILLISECONDS);</span><br><span class="line">        <span class="keyword">if</span> (!tryLock) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;当前线程:[&#123;&#125;]没有获得锁&quot;</span>, Thread.currentThread().getName());</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        log.info(<span class="string">&quot;当前线程:[&#123;&#125;]获得锁&quot;</span>, Thread.currentThread().getName());</span><br><span class="line">        <span class="comment">// 操作资源...</span></span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        log.error(<span class="string">&quot;获取分布式锁失败&quot;</span>, e);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        redLock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>与<code>redisson</code>的普通分布式锁相比，只是会有多个<code>RedissonClient</code>（每个对应1个redis节点）构建出多个<code>RLock</code>对象，再由这多个<code>RLock</code>对象构建成<code>RedissonRedLock</code>对象。由这个对象去获取和释放锁的步骤与用<code>redisson</code>的普通分布式锁步骤一模一样。</p><p>因为<code>redlock</code>是基于多节点的redis来实现的，其中1个节点故障并不影响其它节点持有锁，所以<code>redlock</code>的可靠性来的更高。</p><p>当然这里采用了简单的redis单机模式，在实际生产应用中，为了更好地高可用，可以使用多个<code>sentinel</code>或者多个<code>cluster</code>集群来实现<code>redlock</code>。（不同模式仅仅是构造<code>config</code>的方式不同而已）</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://mp.weixin.qq.com/s/8uhYult2h_YUHT7q7YCKYQ">Redisson实现Redis分布式锁的N种姿势</a></li><li><a href="https://zhuanlan.zhihu.com/p/101216704">基于Redis的分布式锁和Redlock算法</a></li></ul><p>关于Redis分布式锁的安全性问题，在分布式系统专家<code>Martin Kleppmann</code>和redis的作者<code>antirez</code>之间已经发生过一场争论，下面是神仙打架的文章地址：</p><ul><li><a href="https://mp.weixin.qq.com/s/JTsJCDuasgIJ0j95K8Ay8w">基于Redis的分布式锁到底安全吗（上）？</a></li><li><a href="https://mp.weixin.qq.com/s/4CUe7OpM6y1kQRK8TOC_qQ">基于Redis的分布式锁到底安全吗（下）？</a></li></ul><h2 id="代码地址"><a href="#代码地址" class="headerlink" title="代码地址"></a>代码地址</h2><ul><li>github：<a href="https://github.com/senlinmu1008/spring-boot/tree/master/redlock">https://github.com/senlinmu1008/spring-boot/tree/master/redlock</a></li><li>gitee：<a href="https://gitee.com/ppbin/spring-boot/tree/master/redlock">https://gitee.com/ppbin/spring-boot/tree/master/redlock</a><br><br><br></li></ul>]]></content>
      
      
      <categories>
          
          <category> Redis进阶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
            <tag> 分布式锁 </tag>
            
            <tag> Redlock </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redisson实现分布式锁</title>
      <link href="Redis%E8%BF%9B%E9%98%B6/Redisson%E5%AE%9E%E7%8E%B0%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/"/>
      <url>Redis%E8%BF%9B%E9%98%B6/Redisson%E5%AE%9E%E7%8E%B0%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>之前一篇介绍了使用<code>setnx</code>命令实现分布式锁，但是使用这种方式不是那么严谨，需要我们自行做一些额外操作（<code>setnx + lua</code>方式）来保证锁的健壮性。<br><code>redisson</code>为此就做了一些封装，使得我们使用分布式锁时应用就可以简单许多。</p><h2 id="1、Maven依赖"><a href="#1、Maven依赖" class="headerlink" title="1、Maven依赖"></a>1、Maven依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--  最好引用2.13.0 至 3.11.5版本的redisson-spring-boot-starter  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.redisson<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>redisson-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.11.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2、redisson配置"><a href="#2、redisson配置" class="headerlink" title="2、redisson配置"></a>2、redisson配置</h2><h4 id="2-1、yml配置"><a href="#2-1、yml配置" class="headerlink" title="2.1、yml配置"></a>2.1、yml配置</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">30800</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">cluster:</span></span><br><span class="line">      <span class="attr">nodes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="number">148.70</span><span class="number">.153</span><span class="number">.63</span><span class="string">:9426</span></span><br><span class="line">        <span class="bullet">-</span> <span class="number">148.70</span><span class="number">.153</span><span class="number">.63</span><span class="string">:9427</span></span><br><span class="line">        <span class="bullet">-</span> <span class="number">148.70</span><span class="number">.153</span><span class="number">.63</span><span class="string">:9428</span></span><br><span class="line">        <span class="bullet">-</span> <span class="number">148.70</span><span class="number">.153</span><span class="number">.63</span><span class="string">:9429</span></span><br><span class="line">        <span class="bullet">-</span> <span class="number">148.70</span><span class="number">.153</span><span class="number">.63</span><span class="string">:9430</span></span><br><span class="line">        <span class="bullet">-</span> <span class="number">148.70</span><span class="number">.153</span><span class="number">.63</span><span class="string">:9431</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">password</span></span><br><span class="line">    <span class="attr">timeout:</span> <span class="number">2000</span></span><br></pre></td></tr></table></figure><p>这里沿用之前使用<code>RedisTemplate</code>时的配置方式。</p><h4 id="2-2、构建RedissonClient。"><a href="#2-2、构建RedissonClient。" class="headerlink" title="2.2、构建RedissonClient。"></a>2.2、构建<code>RedissonClient</code>。</h4><p>集群<code>Cluster</code>模式下配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DisLockConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisProperties redisProperties;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Cluster集群模式构建 RedissonClient</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RedissonClient <span class="title">clusterRedissonClient</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Config config = <span class="keyword">new</span> Config();</span><br><span class="line">        ClusterServersConfig clusterServersConfig = config.useClusterServers()</span><br><span class="line">                .setPassword(redisProperties.getPassword())</span><br><span class="line">                .setScanInterval(<span class="number">5000</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 注册集群各个节点</span></span><br><span class="line">        <span class="keyword">for</span> (String node : redisProperties.getCluster().getNodes()) &#123;</span><br><span class="line">            clusterServersConfig.addNodeAddress(<span class="string">&quot;redis://&quot;</span>.concat(node));</span><br><span class="line">        &#125;</span><br><span class="line">        RedissonClient redissonClient = Redisson.create(config);</span><br><span class="line">        <span class="keyword">return</span> redissonClient;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在redis的不同模式下，构造<code>config</code>的方式是有区别的。</p><p><strong>单机模式</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> RedissonClient <span class="title">singleRedissonClient</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Config config = <span class="keyword">new</span> Config();</span><br><span class="line">    config.useSingleServer().setAddress(<span class="string">&quot;redis://ip:port&quot;</span>)</span><br><span class="line">            .setPassword(<span class="string">&quot;password&quot;</span>)</span><br><span class="line">            .setDatabase(<span class="number">0</span>);</span><br><span class="line">    RedissonClient redissonClient = Redisson.create(config);</span><br><span class="line">    <span class="keyword">return</span> redissonClient;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>哨兵模式<code>Sentinel</code></strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> RedissonClient <span class="title">sentinelRedissonClient</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Config config = <span class="keyword">new</span> Config();</span><br><span class="line">    config.useSentinelServers().addSentinelAddress(<span class="string">&quot;redis://ip1:port1&quot;</span>,</span><br><span class="line">            <span class="string">&quot;redis://ip2:port2&quot;</span>,</span><br><span class="line">            <span class="string">&quot;redis://ip3:port3&quot;</span>)</span><br><span class="line">            .setMasterName(<span class="string">&quot;mymaster&quot;</span>)</span><br><span class="line">            .setPassword(<span class="string">&quot;password&quot;</span>)</span><br><span class="line">            .setDatabase(<span class="number">0</span>);</span><br><span class="line">    RedissonClient redissonClient = Redisson.create(config);</span><br><span class="line">    <span class="keyword">return</span> redissonClient;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3、锁应用"><a href="#3、锁应用" class="headerlink" title="3、锁应用"></a>3、锁应用</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedissonApplicationTests</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedissonClient redissonClient;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDisLock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 5个线程并发去获取锁</span></span><br><span class="line">        IntStream.range(<span class="number">0</span>, <span class="number">5</span>).parallel().forEach(i -&gt; tryLock());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">tryLock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        RLock disLock = redissonClient.getLock(<span class="string">&quot;disLock&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 获取锁最多等待500ms，10s后key过期自动释放锁</span></span><br><span class="line">            <span class="keyword">boolean</span> tryLock = disLock.tryLock(<span class="number">500</span>, <span class="number">10000</span>, TimeUnit.MILLISECONDS);</span><br><span class="line">            <span class="keyword">if</span> (!tryLock) &#123;</span><br><span class="line">                log.info(<span class="string">&quot;当前线程:[&#123;&#125;]没有获得锁&quot;</span>, Thread.currentThread().getName());</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            log.info(<span class="string">&quot;当前线程:[&#123;&#125;]获得锁&quot;</span>, Thread.currentThread().getName());</span><br><span class="line">            <span class="comment">// 操作资源...</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;获取分布式锁失败&quot;</span>, e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (disLock.isHeldByCurrentThread()) &#123;</span><br><span class="line">                disLock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>获取<code>RLock</code>同时指定key。</li><li>尝试获取锁，同时指定获取锁的最大阻塞时间、锁过期时间。</li><li>获得锁的线程进行资源操作。</li><li>最后一定要释放锁。释放锁的时候最好判断当前线程是否持有锁，否则会抛出异常；</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java.lang.IllegalMonitorStateException: attempt to unlock lock, not locked by current thread by node id: ccfc1238-<span class="number">9411</span>-<span class="number">4f</span>38-b63c-d19f5f6f9e03 thread-id: <span class="number">49</span></span><br></pre></td></tr></table></figure><p>（虽然这里判断是否持有锁和释放锁并非原子操作，在一些非常偶然的情况下，锁在释放前刚好过期，造成解锁抛出异常，其实对于锁的安全性并没有什么影响，但是程序中可能需要预处理下这个异常以免导致业务失败。）</p><p><strong>结果</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">当前线程:[ForkJoinPool.commonPool-worker-11]获得锁</span><br><span class="line">当前线程:[main]获得锁</span><br><span class="line">当前线程:[ForkJoinPool.commonPool-worker-2]没有获得锁</span><br><span class="line">当前线程:[ForkJoinPool.commonPool-worker-13]没有获得锁</span><br><span class="line">当前线程:[ForkJoinPool.commonPool-worker-9]获得锁</span><br></pre></td></tr></table></figure><p>多次测试可以看出，至少会有1个线程可以获取到锁，其它线程能否获取到锁取决于之前的锁是否已经被释放了。</p><p><strong>查看redis</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:9426&gt; hgetall disLock</span><br><span class="line">af0cc1b2-7896-4eb4-ba2b-efe5bbcb403a:53</span><br><span class="line">1</span><br></pre></td></tr></table></figure><p>第一个元素：uuid:线程id。<br>第二个元素：当前线程持有锁的次数，即重入的次数。</p><h2 id="4、锁的重入"><a href="#4、锁的重入" class="headerlink" title="4、锁的重入"></a>4、锁的重入</h2><p><code>redisson</code>支持锁的可重入，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testTryLockAgain</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    RLock disLock = redissonClient.getLock(<span class="string">&quot;disLock&quot;</span>);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 获取锁最多等待500ms，10s后key过期自动释放锁</span></span><br><span class="line">        <span class="keyword">boolean</span> tryLock = disLock.tryLock(<span class="number">500</span>, <span class="number">10000</span>, TimeUnit.MILLISECONDS);</span><br><span class="line">        <span class="keyword">if</span> (!tryLock) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;当前线程:[&#123;&#125;]没有获得锁&quot;</span>, Thread.currentThread().getName());</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        log.info(<span class="string">&quot;当前线程:[&#123;&#125;]获得锁,持有锁次数:[&#123;&#125;]&quot;</span>, Thread.currentThread().getName(), disLock.getHoldCount());</span><br><span class="line">        <span class="comment">// 操作资源...</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 测试可重入，锁过期时间会重新计时</span></span><br><span class="line">        <span class="keyword">boolean</span> tryLockAgain = disLock.tryLock(<span class="number">500</span>, <span class="number">10000</span>, TimeUnit.MILLISECONDS);</span><br><span class="line">        log.info(<span class="string">&quot;当前线程:[&#123;&#125;]是否再次拿到锁:[&#123;&#125;],持有锁次数:[&#123;&#125;]&quot;</span>, Thread.currentThread().getName(), tryLockAgain, disLock.getHoldCount());</span><br><span class="line">        <span class="comment">// 再次操作资源...</span></span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        log.error(<span class="string">&quot;获取分布式锁失败&quot;</span>, e);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (disLock.isHeldByCurrentThread()) &#123;</span><br><span class="line">            disLock.unlock();</span><br><span class="line">            log.info(<span class="string">&quot;当前线程是否持有锁:[&#123;&#125;],持有锁次数:[&#123;&#125;]&quot;</span>, disLock.isHeldByCurrentThread(), disLock.getHoldCount());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>结果</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">当前线程:[main]获得锁,持有锁次数:[1]</span><br><span class="line">当前线程:[main]是否再次拿到锁:[true],持有锁次数:[2]</span><br><span class="line">当前线程是否持有锁:[true],持有锁次数:[1]</span><br></pre></td></tr></table></figure><p>经过测试可以看到，已经拿到锁的线程可以重复拿到锁，并且持有锁的次数会+1；<br>但是在释放锁的时候，发现只释放了一次，并没有完全释放锁。这会导致其他线程不能及时地获取到锁。</p><p>通过查看分析<code>unlock()</code>源码就可以印证测试的结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> RFuture&lt;Boolean&gt; <span class="title">unlockInnerAsync</span><span class="params">(<span class="keyword">long</span> threadId)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> commandExecutor.evalWriteAsync(getName(), LongCodec.INSTANCE, RedisCommands.EVAL_BOOLEAN,</span><br><span class="line">            <span class="comment">// 如果分布式锁存在，但是value不匹配，表示锁已经被占用，那么直接返回</span></span><br><span class="line">            <span class="string">&quot;if (redis.call(&#x27;hexists&#x27;, KEYS[1], ARGV[3]) == 0) then &quot;</span> +</span><br><span class="line">                <span class="string">&quot;return nil;&quot;</span> +</span><br><span class="line">            <span class="string">&quot;end; &quot;</span> +</span><br><span class="line">            <span class="comment">// 如果就是当前线程占有分布式锁，那么将重入次数减1</span></span><br><span class="line">            <span class="string">&quot;local counter = redis.call(&#x27;hincrby&#x27;, KEYS[1], ARGV[3], -1); &quot;</span> +</span><br><span class="line">            <span class="comment">// 重入次数减1后的值如果大于0，表示分布式锁有重入过，那么只设置失效时间，还不能删除</span></span><br><span class="line">            <span class="string">&quot;if (counter &gt; 0) then &quot;</span> +</span><br><span class="line">                <span class="string">&quot;redis.call(&#x27;pexpire&#x27;, KEYS[1], ARGV[2]); &quot;</span> +</span><br><span class="line">                <span class="string">&quot;return 0; &quot;</span> +</span><br><span class="line">            <span class="string">&quot;else &quot;</span> +</span><br><span class="line">                <span class="comment">// 重入次数减1后的值如果为0，表示分布式锁只获取过1次，那么删除这个KEY，并发布解锁消息</span></span><br><span class="line">                <span class="string">&quot;redis.call(&#x27;del&#x27;, KEYS[1]); &quot;</span> +</span><br><span class="line">                <span class="string">&quot;redis.call(&#x27;publish&#x27;, KEYS[2], ARGV[1]); &quot;</span> +</span><br><span class="line">                <span class="string">&quot;return 1; &quot;</span>+</span><br><span class="line">            <span class="string">&quot;end; &quot;</span> +</span><br><span class="line">            <span class="string">&quot;return nil;&quot;</span>,</span><br><span class="line">            Arrays.&lt;Object&gt;asList(getName(), getChannelName()), LockPubSub.UNLOCK_MESSAGE, internalLockLeaseTime, getLockName(threadId));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>改进</strong></p><ol><li>每次重入锁后都执行一次释放锁的操作。</li><li>或者通过<code>forceUnlock()</code>函数强制释放当前线程持有的锁，只需要在最后释放一次即可。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (disLock.isHeldByCurrentThread()) &#123;</span><br><span class="line">    disLock.forceUnlock();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5、总结"><a href="#5、总结" class="headerlink" title="5、总结"></a>5、总结</h2><p>之前使用<code>setnx</code>命令实现分布式锁会有一些问题，比如<strong>不可重入、非阻塞、误解别的线程的锁、未执行完锁就失效、主从切换锁丢失</strong>；其中一些问题我们可以增加代码来解决，但是同样会增加业务代码的复杂度；</p><p><code>redisson</code>则支持<strong>锁的可重入和阻塞获取锁，并在解锁时判断是否是当前线程持有的锁</strong>，对于这些功能<code>redisson</code>已经做好了封装，简化了业务代码。</p><p>但是依旧会有2个问题：</p><ol><li><p><strong>锁过期时间的设置</strong><br>这个问题的场景是，假设设置失效时间10秒，如果由于某些原因导致10秒还没执行完任务，这时候锁自动失效，导致其他线程也会拿到锁。</p><p>这确实是Redis分布式锁最大的问题，不管是<code>setnx+lua</code>，还是<code>redisson</code>，以及<code>Redlock</code>算法分布式锁，都没有解决这个问题。也有一些文章提出了对失效时间续租，即延长失效时间，很明显这又提升了分布式锁的复杂度。我们在使用的时候根据实际情况尽可能地把过期时间设地稍微大点，但不能从根本上杜绝这个问题。另外就笔者了解，目前还没有非常好的方案解决这个问题。</p></li><li><p><strong>主从切换导致的锁丢失</strong><br>这个问题的场景</p><ul><li>在Redis的master节点上拿到了锁；</li><li>但是这个加锁的key还没有同步到slave节点；</li><li>master故障，发生故障转移，slave节点升级为master节点；</li><li>导致锁丢失。</li></ul><p>对于这个问题就可以使用<code>Redlock</code>机制来解决，接下来的文章会介绍到<code>Redlock</code>。</p></li></ol><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://mp.weixin.qq.com/s/8uhYult2h_YUHT7q7YCKYQ">Redisson实现Redis分布式锁的N种姿势</a></li></ul><h2 id="代码地址"><a href="#代码地址" class="headerlink" title="代码地址"></a>代码地址</h2><ul><li>github：<a href="https://github.com/senlinmu1008/spring-boot/tree/master/redisson">https://github.com/senlinmu1008/spring-boot/tree/master/redisson</a></li><li>gitee：<a href="https://gitee.com/ppbin/spring-boot/tree/master/redisson">https://gitee.com/ppbin/spring-boot/tree/master/redisson</a><br><br><br></li></ul>]]></content>
      
      
      <categories>
          
          <category> Redis进阶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
            <tag> 分布式锁 </tag>
            
            <tag> Redisson </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis的Setnx命令实现分布式锁</title>
      <link href="Redis%E8%BF%9B%E9%98%B6/Redis%E7%9A%84Setnx%E5%91%BD%E4%BB%A4%E5%AE%9E%E7%8E%B0%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/"/>
      <url>Redis%E8%BF%9B%E9%98%B6/Redis%E7%9A%84Setnx%E5%91%BD%E4%BB%A4%E5%AE%9E%E7%8E%B0%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>首先，分布式锁和我们平常讲到的锁原理基本一样，目的就是确保在多个线程并发时，只有一个线程在同一刻操作这个业务或者说方法、变量。</p><p>在一个进程中，也就是一个jvm或者说应用中，我们很容易去处理控制，在<code>java.util</code>并发包中已经为我们提供了这些方法去加锁，比如<code>synchronized</code>关键字或者<code>Lock</code>锁，都可以处理。</p><p>但是如果在分布式环境下，要保证多个线程同时只有1个能访问某个资源，就需要用到分布式锁。这里我们将介绍用Redis的<code>setnx</code>命令来实现分布式锁。</p><p>其实目前通常所说的<code>setnx</code>命令，并非单指redis的<code>setnx key value</code>这条命令，这条命令可能会在后期redis版本中删除。</p><p>一般代指redis中对<code>set</code>命令加上<code>nx</code>参数进行使用，<code>set</code>这个命令，目前已经支持这么多参数可选：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SET key value [EX seconds] [PX milliseconds] [NX|XX]</span><br></pre></td></tr></table></figure><p>从 Redis 2.6.12 版本开始， SET 命令的行为可以通过一系列参数来修改：</p><ul><li>EX second ：设置键的过期时间为 second 秒。 SET key value EX second 效果等同于 SETEX key second value 。</li><li>PX millisecond ：设置键的过期时间为 millisecond 毫秒。 SET key value PX millisecond 效果等同于 PSETEX key millisecond value 。</li><li>NX ：只在键不存在时，才对键进行设置操作。 SET key value NX 效果等同于 SETNX key value 。</li><li>XX ：只在键已经存在时，才对键进行设置操作。</li></ul><h2 id="1、示例"><a href="#1、示例" class="headerlink" title="1、示例"></a>1、示例</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSetnx</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    IntStream.range(<span class="number">0</span>, <span class="number">5</span>).parallel().forEach(i -&gt; &#123;</span><br><span class="line">        String uuid = IdUtil.randomUUID();</span><br><span class="line">        Boolean lock = stringOperations.setIfAbsent(<span class="string">&quot;lock&quot;</span>, uuid, <span class="number">10</span>, TimeUnit.SECONDS);</span><br><span class="line">        log.info(<span class="string">&quot;是否获取锁:[&#123;&#125;]&quot;</span>, lock);</span><br><span class="line">        <span class="keyword">if</span>(!lock) <span class="keyword">return</span>;</span><br><span class="line">        <span class="comment">// 获得锁后的操作</span></span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 最后释放锁</span></span><br><span class="line">        redisTemplate.delete(<span class="string">&quot;lock&quot;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里同时启动5个线程并发往redis中存储<code>lock</code>这个key（key可以自定义，但需要一致），同时设置10秒的过期时间。<br><code>setIfAbsent</code>这个函数实现的功能与<code>setnx</code>命令一样，代表如果没有这个key则set成功获取到锁，否则set失败没有获取到锁。<br>获得锁后进行资源的操作，最后释放锁。</p><p><strong>执行效果：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">2020-08-13 22:23:48,200 [INFO] [ForkJoinPool.commonPool-worker-9] [com.zxb.redistemplate.SetnxTest:31] [] 是否获取锁:[true]</span><br><span class="line">2020-08-13 22:23:48,278 [INFO] [ForkJoinPool.commonPool-worker-4] [com.zxb.redistemplate.SetnxTest:31] [] 是否获取锁:[false]</span><br><span class="line">2020-08-13 22:23:48,278 [INFO] [ForkJoinPool.commonPool-worker-2] [com.zxb.redistemplate.SetnxTest:31] [] 是否获取锁:[false]</span><br><span class="line">2020-08-13 22:23:48,278 [INFO] [main] [com.zxb.redistemplate.SetnxTest:31] [] 是否获取锁:[false]</span><br><span class="line">2020-08-13 22:23:48,279 [INFO] [ForkJoinPool.commonPool-worker-11] [com.zxb.redistemplate.SetnxTest:31] [] 是否获取锁:[false]</span><br></pre></td></tr></table></figure><p>可以看到同时只有1个线程能够获取到锁。</p><h2 id="2、总结"><a href="#2、总结" class="headerlink" title="2、总结"></a>2、总结</h2><p>使用<code>setnx</code>命令方式虽然操作比较简单方便，但是会有如下问题：</p><blockquote><p>1.当前线程如果获得了锁就不能再重入了（在锁释放前不能再获得锁）。</p></blockquote><p> 可以在再次获取锁时，如果锁被占用就get值，判断值是否是当前线程存的随机值，如果是则再次执行<code>set</code>命令重新上锁，这里所有操作需要保证原子性所以要用<code>lua</code>脚本来执行这些操作。</p><blockquote><p>2.获取锁方式非阻塞，其它线程没有获取到锁就只能失败返回了，只适合于个别业务场景。</p></blockquote><p> 可以使用<code>while</code>循环重复执行<code>setnx</code>命令。</p><blockquote><p>3.锁过期时间如果设置太短或者拿到锁的线程执行完方法耗时特别长，方法没等执行完，锁就自动释放了，甚至在释放后别的线程获取到锁，第一个拿到锁的等执行完回手就把锁删了，那么就会产生并发安全问题。</p></blockquote><p> 可以在删除锁的时候先get值，判断值是否是当前线程存的随机值，只有相同才执行删锁的操作；当然也要使用<code>lua</code>脚本执行来保证原子性。</p><blockquote><p>4.在<code>Cluster</code>集群模式下，如果redis出现故障，进行主从切换，这个时候主机的锁如果还未同步到从机上，就会导致其他线程同样也可以获取到锁。</p></blockquote><p><strong>分布式锁需要满足的特性</strong></p><ul><li>互斥性。</li><li>锁超时。</li><li>支持阻塞和非阻塞。</li><li>可重入性。</li><li>高可用。</li></ul><p>综上：使用<code>setnx</code>命令来实现分布式锁并不是一个很严谨的方案，我们还可以使用<code>redisson</code>或者<code>redlock</code>机制来实现。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://zhuanlan.zhihu.com/p/51042458">阿里P8架构师谈（分布式系列）：分布式锁的3种实现（数据库、缓存、Zookeeper)</a><br><br><br></li></ul>]]></content>
      
      
      <categories>
          
          <category> Redis进阶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
            <tag> 分布式锁 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Redis实现分布式Session</title>
      <link href="Redis%E5%9F%BA%E7%A1%80/%E4%BD%BF%E7%94%A8Redis%E5%AE%9E%E7%8E%B0%E5%88%86%E5%B8%83%E5%BC%8FSession/"/>
      <url>Redis%E5%9F%BA%E7%A1%80/%E4%BD%BF%E7%94%A8Redis%E5%AE%9E%E7%8E%B0%E5%88%86%E5%B8%83%E5%BC%8FSession/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>在分布式环境中，如果用户在A服务器登录，在下一步操作时如果转发到B服务器，如果这时候没有做Session共享则会导致用户需要再次登录。我们可以使用Redis来缓存Session，然后共享给集群来解决这个问题。</p><h2 id="1、Maven依赖"><a href="#1、Maven依赖" class="headerlink" title="1、Maven依赖"></a>1、Maven依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.session<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-session-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2、应用配置redis"><a href="#2、应用配置redis" class="headerlink" title="2、应用配置redis"></a>2、应用配置redis</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">30600</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">redis-session</span></span><br><span class="line">  <span class="comment"># redis配置</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">cluster:</span></span><br><span class="line">      <span class="attr">nodes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="number">148.70</span><span class="number">.153</span><span class="number">.63</span><span class="string">:9426</span></span><br><span class="line">        <span class="bullet">-</span> <span class="number">148.70</span><span class="number">.153</span><span class="number">.63</span><span class="string">:9427</span></span><br><span class="line">        <span class="bullet">-</span> <span class="number">148.70</span><span class="number">.153</span><span class="number">.63</span><span class="string">:9428</span></span><br><span class="line">        <span class="bullet">-</span> <span class="number">148.70</span><span class="number">.153</span><span class="number">.63</span><span class="string">:9429</span></span><br><span class="line">        <span class="bullet">-</span> <span class="number">148.70</span><span class="number">.153</span><span class="number">.63</span><span class="string">:9430</span></span><br><span class="line">        <span class="bullet">-</span> <span class="number">148.70</span><span class="number">.153</span><span class="number">.63</span><span class="string">:9431</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">password</span></span><br><span class="line">    <span class="attr">timeout:</span> <span class="number">60000</span></span><br></pre></td></tr></table></figure><p>这个时候，就已经完成了Session的分布式共享的配置，我们不需要在应用上做任何操作。因为Spring对于Session的缓存和获取已经做了封装，所以对于应用是无感的。我们只需要在应用层获取Session即可。</p><h2 id="3、测试验证"><a href="#3、测试验证" class="headerlink" title="3、测试验证"></a>3、测试验证</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SessionController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/getSessionId&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSessionId</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">        String sessionId = request.getSession().getId();</span><br><span class="line">        <span class="keyword">return</span> sessionId;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><p>在实际应用中，是由<code>Nginx</code>这种反向代理服务器转发给后面的服务器，客户端访问的地址始终是一样的。这里为了方便演示，分别用2个端口<code>30600</code>、<code>30700</code>启动服务，代表2台不同的服务器。</p></li><li><p>打开浏览器分别访问：<br><code>http://127.0.0.1:30600/getSessionId</code><br><code>http://127.0.0.1:30700/getSessionId</code><br>可以看到获取的SessionId是一样的，说明2个服务已经共享了Session。</p></li></ol><h2 id="4、指定分布式Session过期时间"><a href="#4、指定分布式Session过期时间" class="headerlink" title="4、指定分布式Session过期时间"></a>4、指定分布式Session过期时间</h2><p>原<code>server.session.timeout </code>配置Session过期时间不再生效。<br>需要通过在启动类添加注解<code>@EnableRedisHttpSession</code>来指定Session过期时间。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableRedisHttpSession(maxInactiveIntervalInSeconds = 3600)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisSessionApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(RedisSessionApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br><br></p>]]></content>
      
      
      <categories>
          
          <category> Redis基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringCache使用Redis来缓存热点数据</title>
      <link href="Redis%E5%9F%BA%E7%A1%80/SpringCache%E4%BD%BF%E7%94%A8Redis%E6%9D%A5%E7%BC%93%E5%AD%98%E7%83%AD%E7%82%B9%E6%95%B0%E6%8D%AE/"/>
      <url>Redis%E5%9F%BA%E7%A1%80/SpringCache%E4%BD%BF%E7%94%A8Redis%E6%9D%A5%E7%BC%93%E5%AD%98%E7%83%AD%E7%82%B9%E6%95%B0%E6%8D%AE/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>在很多应用场景中通常是获取前后相同或更新不频繁的数据，比如访问产品信息数据、网页数据。如果没有使用缓存，则访问每次需要重复请求数据库，这会导致大部分时间都耗费在数据库查询和方法调用上，因为数据库进行I/O操作非常耗费时间，这时就可以利用Spring Cache来解决。</p><p>Spring Cache 是Spring提供的一整套缓存解决方案。它本身并不提供缓存实现，而是提供统一的接口和代码规范、配置、注解等，以便整合各种Cache方案，使用户不用关心Cache的细节。</p><p>Spring Cache作用在方法上。当调用一个缓存方法时，会把方法参数和返回结果作为一个“键值对”（key/value）存放在缓存中，下次用同样的参数来调用该方法时将不再执行该方法，而是直接从缓存中获取结果进行返回。所以在使用Spring Cache时，要保证在缓存的方法和方法参数相同时返回相同的结果。</p><h2 id="1、声明式注解"><a href="#1、声明式注解" class="headerlink" title="1、声明式注解"></a>1、声明式注解</h2><table><thead><tr><th align="center">注解</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">@EnableCaching</td><td align="center">启动类声明，用来开启缓存</td></tr><tr><td align="center">@Cacheable</td><td align="center">可以作用在类和方法上，以键值对的方式缓存类或方法的返回值</td></tr><tr><td align="center">@CachePut</td><td align="center">方法被调用，然后结果被缓存</td></tr><tr><td align="center">@CacheEvict</td><td align="center">清空缓存</td></tr><tr><td align="center">@Caching</td><td align="center">用来组合多个注解标签</td></tr></tbody></table><ul><li><code>@Cacheable</code>会先查询是否已有缓存，没有则再执行方法，将返回值缓存起来，key可以有默认策略和自定义策略。用于查询热点数据。</li><li><code>@CachePut</code>每次都会执行方法，并将方法的返回值缓存。用于更新数据。</li></ul><h2 id="2、Maven依赖"><a href="#2、Maven依赖" class="headerlink" title="2、Maven依赖"></a>2、Maven依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3、应用缓存"><a href="#3、应用缓存" class="headerlink" title="3、应用缓存"></a>3、应用缓存</h2><h4 id="3-1、Redis配置类"><a href="#3-1、Redis配置类" class="headerlink" title="3.1、Redis配置类"></a>3.1、Redis配置类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableCaching</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisConfig</span> <span class="keyword">extends</span> <span class="title">CachingConfigurerSupport</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 缓存管理器，适合2.x版本</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> redisConnectionFactory</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CacheManager <span class="title">cacheManager</span><span class="params">(RedisConnectionFactory redisConnectionFactory)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 对于指定的cacheNames设置缓存的过期时长</span></span><br><span class="line">        Map&lt;String, RedisCacheConfiguration&gt; cacheConfigMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        cacheConfigMap.put(<span class="string">&quot;users&quot;</span>, <span class="keyword">this</span>.getCacheConfigurationWithTtl(<span class="number">2</span> * <span class="number">60</span> * <span class="number">60</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 构建CacheManager对象，指定的cacheNames过期时长为2小时，其它默认为1小时</span></span><br><span class="line">        <span class="keyword">return</span> RedisCacheManager.builder(redisConnectionFactory)</span><br><span class="line">                .withInitialCacheConfigurations(cacheConfigMap)</span><br><span class="line">                .cacheDefaults(<span class="keyword">this</span>.getCacheConfigurationWithTtl(<span class="number">1</span> * <span class="number">60</span> * <span class="number">60</span>))</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置缓存过期时长</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> seconds 过期时长</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> RedisCacheConfiguration <span class="title">getCacheConfigurationWithTtl</span><span class="params">(<span class="keyword">long</span> seconds)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 序列化设置</span></span><br><span class="line">        Jackson2JsonRedisSerializer jacksonSeial = <span class="keyword">new</span> Jackson2JsonRedisSerializer(Object.class);</span><br><span class="line">        ObjectMapper om = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">        <span class="comment">// 指定要序列化的域，field,get和set,以及修饰符范围，ANY是都有包括private和public</span></span><br><span class="line">        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</span><br><span class="line">        <span class="comment">// 指定序列化输入的类型，类必须是非final修饰的，final修饰的类，比如String,Integer等会抛出异常</span></span><br><span class="line">        om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL); <span class="comment">// 2.1.x</span></span><br><span class="line"><span class="comment">//        om.activateDefaultTyping(LaissezFaireSubTypeValidator.instance, ObjectMapper.DefaultTyping.NON_FINAL); // 2.2.x</span></span><br><span class="line">        jacksonSeial.setObjectMapper(om);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 基本配置</span></span><br><span class="line">        RedisCacheConfiguration redisCacheConfiguration = RedisCacheConfiguration</span><br><span class="line">                .defaultCacheConfig()</span><br><span class="line">                .serializeKeysWith(RedisSerializationContext.SerializationPair.fromSerializer(<span class="keyword">new</span> StringRedisSerializer()))</span><br><span class="line">                .serializeValuesWith(RedisSerializationContext.SerializationPair.fromSerializer(jacksonSeial))</span><br><span class="line">                <span class="comment">// 不缓存null</span></span><br><span class="line">                .disableCachingNullValues()</span><br><span class="line">                <span class="comment">// 缓存数据保存时长</span></span><br><span class="line">                .entryTtl(Duration.ofSeconds(seconds));</span><br><span class="line">        <span class="keyword">return</span> redisCacheConfiguration;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里主要配置了序列化方式和对于不同缓存的过期时长设置。</p><h4 id="3-2、数据层"><a href="#3-2、数据层" class="headerlink" title="3.2、数据层"></a>3.2、数据层</h4><p>建表语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="keyword">user</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">user</span> (</span><br><span class="line">    <span class="keyword">id</span> <span class="built_in">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">    <span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">64</span>) <span class="keyword">COMMENT</span> <span class="string">&#x27;姓名&#x27;</span>,</span><br><span class="line">    age <span class="built_in">int</span>(<span class="number">4</span>) <span class="keyword">COMMENT</span> <span class="string">&#x27;年龄&#x27;</span>,</span><br><span class="line">    PRIMARY <span class="keyword">KEY</span> (<span class="keyword">id</span>)</span><br><span class="line">)<span class="keyword">COMMENT</span> = <span class="string">&#x27;用户表&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">user</span> <span class="keyword">values</span> (<span class="number">1</span>, <span class="string">&#x27;赵晓斌&#x27;</span>, <span class="number">28</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">user</span> <span class="keyword">values</span> (<span class="number">2</span>, <span class="string">&#x27;李白&#x27;</span>, <span class="number">22</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">user</span> <span class="keyword">values</span> (<span class="number">3</span>, <span class="string">&#x27;宋老三&#x27;</span>, <span class="number">30</span>);</span><br></pre></td></tr></table></figure><p>实体类，一定要实现<code>Serializable</code>接口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">5485617646232613710L</span>;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> == o) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span> || getClass() != o.getClass()) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        User user = (User) o;</span><br><span class="line">        <span class="keyword">return</span> age == user.age &amp;&amp;</span><br><span class="line">                Objects.equals(id, user.id) &amp;&amp;</span><br><span class="line">                Objects.equals(name, user.name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Objects.hash(id, name, age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>缓存层接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserCacheService</span> </span>&#123;</span><br><span class="line">    <span class="function">User <span class="title">findById</span><span class="params">(Long id)</span></span>;</span><br><span class="line">    <span class="function">User <span class="title">updateUserById</span><span class="params">(User user)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">deleteById</span><span class="params">(Long id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里采用Mybatis来操作数据库，具体操作和配置不在这里展开。</p><h4 id="3-3、缓存查询数据"><a href="#3-3、缓存查询数据" class="headerlink" title="3.3、缓存查询数据"></a>3.3、缓存查询数据</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@CacheConfig(cacheNames = &quot;users&quot;)</span> <span class="comment">// 缓存名称，也是key前缀</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserCacheServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserCacheService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Cacheable(key = &quot;#p0&quot;)</span> <span class="comment">// 取第一个参数作为key的一部分，比如users::1</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">findById</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userDao.findById(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据key值查询缓存，如果没有则执行方法查询数据库，将结果缓存起来，下次同样的key查询时直接从缓存取值返回，不再执行方法。</p><ul><li><code>@CacheConfig</code>注解指定缓存key的前缀为<code>users</code>。</li><li><code>@Cacheable</code>等注解指定key时，使用SpEL表达式：<ul><li><code>#p0</code>：表示取第一个参数。</li><li><code>#p0.id</code>：表示取第一个参数的id属性。</li><li><code>#id</code>：表示取参数id。</li></ul></li></ul><h4 id="3-4、更新缓存数据"><a href="#3-4、更新缓存数据" class="headerlink" title="3.4、更新缓存数据"></a>3.4、更新缓存数据</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@CachePut(key = &quot;#p0.id&quot;)</span> <span class="comment">// 访问bean属性</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">updateUserById</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">    userDao.updateUserById(user);</span><br><span class="line">    <span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>每次更新完数据库后，同步更新缓存中的数据。需要保持和缓存时的key相同。</p><h4 id="3-5、删除缓存数据"><a href="#3-5、删除缓存数据" class="headerlink" title="3.5、删除缓存数据"></a>3.5、删除缓存数据</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@CacheEvict(key = &quot;#id&quot;)</span> <span class="comment">// 可以用形参名表示key，allEntries = true 则代表 users:: 开头的键全部删除</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteById</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">    userDao.deleteById(id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在删除完数据库的数据后，同步删除缓存中的数据。也是需要保持和缓存时的key相同。<br>如果需要批量删除某一类key，只需要把<code>@CacheEvict</code>注解中的<code>allEntries</code>属性设为<code>true</code>，那就会清空所有缓存数据（仅限于同一个<code>cacheNames</code>也就是<code>@CacheConfig</code>注解指定的key前缀）。</p><h2 id="4、测试验证"><a href="#4、测试验证" class="headerlink" title="4、测试验证"></a>4、测试验证</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CacheController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserCacheService userCacheService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/findById&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">findById</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userCacheService.findById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/updateUserById&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateUserById</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        userCacheService.updateUserById(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/deleteById&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteById</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        userCacheService.deleteById(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><p>在第一次查询时，可以看到有查询数据库的日志输出。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Creating a new SqlSession</span><br><span class="line">SqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@608e7bd3] was not registered for synchronization because synchronization is not active</span><br><span class="line">JDBC Connection [com.mysql.cj.jdbc.ConnectionImpl@4945f51a] will not be managed by Spring</span><br><span class="line">==&gt;  Preparing: select id, name, age from user where id = ? </span><br><span class="line">==&gt; Parameters: 3(Long)</span><br><span class="line">&lt;==    Columns: id, name, age</span><br><span class="line">&lt;==        Row: 3, ares, 33</span><br><span class="line">&lt;==      Total: 1</span><br><span class="line">Closing non transactional SqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@608e7bd3]</span><br></pre></td></tr></table></figure></li><li><p>查询Redis，可以看到已经有数据缓存了，过期时间就是前面配置中设置的2小时。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:9427&gt; keys *</span><br><span class="line">users::3</span><br><span class="line">127.0.0.1:9427&gt; get users::3</span><br><span class="line">[&quot;com.zxb.cache.domain.User&quot;,&#123;&quot;id&quot;:3,&quot;name&quot;:&quot;ares&quot;,&quot;age&quot;:22&#125;]</span><br><span class="line">127.0.0.1:9427&gt; ttl users::3</span><br><span class="line">7185</span><br></pre></td></tr></table></figure></li><li><p>再次查询，发现依旧可以得到相同结果，但没有查询数据库的日志输出，说明缓存生效了。</p></li><li><p>修改字段更新数据库，然后再查询，可以看到缓存数据也被更新。</p></li><li><p>删除一条数据后，再根据id查询就得到空，说明缓存中的这条数据也已被删除了。</p></li></ol><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://blog.csdn.net/qq_41911570/article/details/107036486">Spring Boot之使用SpringCache和Redis</a></li><li><a href="https://www.jianshu.com/p/c997e2b714b5">Spring cache整合Redis，并给它一个过期时间！</a></li></ul><h2 id="代码地址"><a href="#代码地址" class="headerlink" title="代码地址"></a>代码地址</h2><ul><li>github：<a href="https://github.com/senlinmu1008/spring-boot/tree/master/rediscache">https://github.com/senlinmu1008/spring-boot/tree/master/rediscache</a></li><li>gitee：<a href="https://gitee.com/ppbin/spring-boot/tree/master/rediscache">https://gitee.com/ppbin/spring-boot/tree/master/rediscache</a><br><br><br></li></ul>]]></content>
      
      
      <categories>
          
          <category> Redis基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RedisTemplate应用</title>
      <link href="Redis%E5%9F%BA%E7%A1%80/RedisTemplate%E5%BA%94%E7%94%A8/"/>
      <url>Redis%E5%9F%BA%E7%A1%80/RedisTemplate%E5%BA%94%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>介绍Redis常用的5种数据类型的操作API。</p><h2 id="1、导入依赖"><a href="#1、导入依赖" class="headerlink" title="1、导入依赖"></a>1、导入依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2、添加配置"><a href="#2、添加配置" class="headerlink" title="2、添加配置"></a>2、添加配置</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line"><span class="comment">#    单机配置</span></span><br><span class="line"><span class="comment">#    host: 172.16.122.104</span></span><br><span class="line"><span class="comment">#    port: 6379</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#    集群多节点配置</span></span><br><span class="line">    <span class="attr">cluster:</span></span><br><span class="line">      <span class="attr">nodes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="number">172.16</span><span class="number">.122</span><span class="number">.101</span><span class="string">:6379</span></span><br><span class="line">        <span class="bullet">-</span> <span class="number">172.16</span><span class="number">.122</span><span class="number">.101</span><span class="string">:6380</span></span><br><span class="line">        <span class="bullet">-</span> <span class="number">172.16</span><span class="number">.122</span><span class="number">.102</span><span class="string">:6379</span></span><br><span class="line">        <span class="bullet">-</span> <span class="number">172.16</span><span class="number">.122</span><span class="number">.102</span><span class="string">:6380</span></span><br><span class="line">        <span class="bullet">-</span> <span class="number">172.16</span><span class="number">.122</span><span class="number">.103</span><span class="string">:6379</span></span><br><span class="line">        <span class="bullet">-</span> <span class="number">172.16</span><span class="number">.122</span><span class="number">.103</span><span class="string">:6380</span></span><br><span class="line">    <span class="attr">password:</span></span><br><span class="line">    <span class="attr">timeout:</span> <span class="number">2000</span></span><br></pre></td></tr></table></figure><p><strong>如果redis以单机方式部署，则需要配置<code>host</code>和<code>port</code>节点。</strong><br><strong>如果以cluster方式部署，就需要配置每个节点ip和端口号。</strong></p><h2 id="3、RedisTemplate配置"><a href="#3、RedisTemplate配置" class="headerlink" title="3、RedisTemplate配置"></a>3、RedisTemplate配置</h2><p>SpringBoot是以条件注解来启用默认的<code>RedisTemplate</code>和<code>StringRedisTemplate</code>，具体可以查看<code>RedisAutoConfiguration</code>这个类的源码。如果我们自定义<code>RedisTemplate</code>对象并注入Spring容器，则默认的不会生效。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RedisTemplate&lt;String,Object&gt; <span class="title">redisTemplate</span><span class="params">(RedisConnectionFactory redisConnectionFactory)</span> </span>&#123;</span><br><span class="line">        RedisTemplate&lt;String, Object&gt; template = <span class="keyword">new</span> RedisTemplate&lt;&gt;();</span><br><span class="line">        <span class="comment">// 配置连接工厂</span></span><br><span class="line">        template.setConnectionFactory(redisConnectionFactory);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用Jackson2JsonRedisSerializer来序列化和反序列化redis的value值（默认使用JDK的序列化方式）</span></span><br><span class="line">        Jackson2JsonRedisSerializer jacksonSeial = <span class="keyword">new</span> Jackson2JsonRedisSerializer(Object.class);</span><br><span class="line"></span><br><span class="line">        ObjectMapper om = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">        <span class="comment">// 指定要序列化的域，field,get和set,以及修饰符范围，ANY是都有包括private和public</span></span><br><span class="line">        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</span><br><span class="line">        <span class="comment">// 指定序列化输入的类型，类必须是非final修饰的，final修饰的类，比如String,Integer等会抛出异常</span></span><br><span class="line">        om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL); <span class="comment">// 2.1.x</span></span><br><span class="line"><span class="comment">//        om.activateDefaultTyping(LaissezFaireSubTypeValidator.instance, ObjectMapper.DefaultTyping.NON_FINAL); // 2.2.x</span></span><br><span class="line">        jacksonSeial.setObjectMapper(om);</span><br><span class="line">        <span class="comment">// 使用StringRedisSerializer来序列化和反序列化redis的key值</span></span><br><span class="line">        template.setKeySerializer(<span class="keyword">new</span> StringRedisSerializer());</span><br><span class="line">        <span class="comment">// 值采用json序列化</span></span><br><span class="line">        template.setValueSerializer(jacksonSeial);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置hash key 和value序列化模式</span></span><br><span class="line">        template.setHashKeySerializer(<span class="keyword">new</span> StringRedisSerializer());</span><br><span class="line">        template.setHashValueSerializer(jacksonSeial);</span><br><span class="line">        template.afterPropertiesSet();</span><br><span class="line">        <span class="keyword">return</span> template;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 对redis字符串类型数据操作</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> redisTemplate</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ValueOperations&lt;String, String&gt; <span class="title">stringOperations</span><span class="params">(StringRedisTemplate redisTemplate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForValue();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 对POJO类型序列化和反序列化操作，存储还是以字符串形式</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> redisTemplate</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ValueOperations&lt;String, Object&gt; <span class="title">valueOperations</span><span class="params">(RedisTemplate&lt;String, Object&gt; redisTemplate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForValue();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 对hash类型的数据操作</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> redisTemplate</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> HashOperations&lt;String, String, Object&gt; <span class="title">hashOperations</span><span class="params">(RedisTemplate&lt;String, Object&gt; redisTemplate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 对链表类型的数据操作</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> redisTemplate</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListOperations&lt;String, Object&gt; <span class="title">listOperations</span><span class="params">(RedisTemplate&lt;String, Object&gt; redisTemplate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForList();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 对无序集合类型的数据操作</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> redisTemplate</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SetOperations&lt;String, Object&gt; <span class="title">setOperations</span><span class="params">(RedisTemplate&lt;String, Object&gt; redisTemplate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForSet();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 对有序集合类型的数据操作</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> redisTemplate</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ZSetOperations&lt;String, Object&gt; <span class="title">zSetOperations</span><span class="params">(RedisTemplate&lt;String, Object&gt; redisTemplate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForZSet();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里同时提供6个对象用以对Redis的操作，这6个对象对应Redis的5种数据结构。这里为了使用方便，<code>ValueOperations</code>类型有2个对象，分别操作字符串和POJO。</p><ol><li><strong>stringOperations：</strong>对字符串类型数据操作。</li><li><strong>valueOperations：</strong>对POJO类型序列化和反序列化操作，存储还是以字符串形式。</li><li><strong>hashOperations：</strong>对hash类型的数据操作。</li><li><strong>listOperations：</strong>对链表类型的数据操作。</li><li><strong>setOperations：</strong>对无序集合类型的数据操作。</li><li><strong>zSetOperations：</strong>对有序集合类型的数据操作。</li></ol><h2 id="4、代码示例"><a href="#4、代码示例" class="headerlink" title="4、代码示例"></a>4、代码示例</h2><h4 id="4-1、定义POJO"><a href="#4-1、定义POJO" class="headerlink" title="4.1、定义POJO"></a>4.1、定义POJO</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 密码，序列化时忽略此属性</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@JsonIgnore</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 年龄</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 性别 1=男 2=女 其他=保密</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer sex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-2、测试案例"><a href="#4-2、测试案例" class="headerlink" title="4.2、测试案例"></a>4.2、测试案例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedistemplateApplicationTests</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate&lt;String, Object&gt; redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ValueOperations&lt;String, String&gt; stringOperations;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ValueOperations&lt;String, Object&gt; valueOperations;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> HashOperations&lt;String, String, Object&gt; hashOperations;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ListOperations&lt;String, Object&gt; listOperations;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SetOperations&lt;String, Object&gt; setOperations;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ZSetOperations&lt;String, Object&gt; zSetOperations;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String key = <span class="string">&quot;name&quot;</span>;</span><br><span class="line">        <span class="comment">// set 并设置过期时间</span></span><br><span class="line">        stringOperations.set(key, <span class="string">&quot;李白&quot;</span>, <span class="number">1</span>, TimeUnit.SECONDS);</span><br><span class="line">        <span class="comment">// get</span></span><br><span class="line">        log.info(stringOperations.get(key));</span><br><span class="line">        <span class="comment">// 查询key剩余时间SECONDS</span></span><br><span class="line">        log.info(redisTemplate.getExpire(key, TimeUnit.MILLISECONDS) + <span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="comment">// 删除key</span></span><br><span class="line">        redisTemplate.delete(key);</span><br><span class="line">        <span class="comment">// 判断key是否存在</span></span><br><span class="line">        log.info(redisTemplate.hasKey(key) + <span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 序列化POJO和反序列化</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testPOJO</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String key = <span class="string">&quot;libai&quot;</span>;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setId(<span class="number">1L</span>);</span><br><span class="line">        user.setUsername(<span class="string">&quot;李白&quot;</span>);</span><br><span class="line">        user.setPassword(<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">        user.setAge(<span class="number">28</span>);</span><br><span class="line">        user.setSex(<span class="number">1</span>);</span><br><span class="line">        valueOperations.set(key, user, <span class="number">1</span>, TimeUnit.SECONDS);</span><br><span class="line">        User result = (User) valueOperations.get(key);</span><br><span class="line">        log.info(JSONUtil.toJsonPrettyStr(result));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testHash</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String key = <span class="string">&quot;hashKey&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 单个put</span></span><br><span class="line">        hashOperations.put(key, <span class="string">&quot;name&quot;</span>, <span class="string">&quot;李白&quot;</span>);</span><br><span class="line">        hashOperations.put(key, <span class="string">&quot;age&quot;</span>, <span class="number">30</span>);</span><br><span class="line">        hashOperations.put(key, <span class="string">&quot;gender&quot;</span>, <span class="number">1</span>);</span><br><span class="line">        <span class="comment">// 批量put</span></span><br><span class="line">        Map&lt;String, Object&gt; myMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        myMap.put(<span class="string">&quot;address&quot;</span>, <span class="string">&quot;长安&quot;</span>);</span><br><span class="line">        myMap.put(<span class="string">&quot;salary&quot;</span>, <span class="number">2000.5</span>);</span><br><span class="line">        hashOperations.putAll(key, myMap);</span><br><span class="line">        <span class="comment">// 指定过期时间</span></span><br><span class="line">        redisTemplate.expire(key, <span class="number">10</span>, TimeUnit.SECONDS);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// get指定散列的单个key</span></span><br><span class="line">        log.info(hashOperations.get(key, <span class="string">&quot;name&quot;</span>) + <span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="comment">// 删除指定散列中的某些key</span></span><br><span class="line">        hashOperations.delete(key, <span class="string">&quot;name&quot;</span>, <span class="string">&quot;salary&quot;</span>);</span><br><span class="line">        <span class="comment">// 判断指定散列是否包含某个key</span></span><br><span class="line">        log.info(hashOperations.hasKey(key, <span class="string">&quot;salary&quot;</span>) + <span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取指定的整个散列</span></span><br><span class="line">        Map&lt;String, Object&gt; map = hashOperations.entries(key);</span><br><span class="line">        log.info(JSONUtil.toJsonPrettyStr(map));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取散列所有的key集合</span></span><br><span class="line">        Set&lt;String&gt; keySet = hashOperations.keys(key);</span><br><span class="line">        log.info(JSONUtil.toJsonPrettyStr(keySet));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取散列键值对数</span></span><br><span class="line">        Long size = hashOperations.size(key);</span><br><span class="line">        log.info(size + <span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取散列所有的value列表</span></span><br><span class="line">        List&lt;Object&gt; values = hashOperations.values(key);</span><br><span class="line">        log.info(JSONUtil.toJsonPrettyStr(values));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testlist</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String key = <span class="string">&quot;listKey&quot;</span>;</span><br><span class="line"></span><br><span class="line">        User user1 = <span class="keyword">new</span> User();</span><br><span class="line">        user1.setId(<span class="number">1L</span>);</span><br><span class="line">        user1.setUsername(<span class="string">&quot;aa&quot;</span>);</span><br><span class="line">        user1.setPassword(<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">        user1.setAge(<span class="number">28</span>);</span><br><span class="line">        user1.setSex(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        User user2 = <span class="keyword">new</span> User();</span><br><span class="line">        user2.setId(<span class="number">2L</span>);</span><br><span class="line">        user2.setUsername(<span class="string">&quot;bb&quot;</span>);</span><br><span class="line">        user2.setPassword(<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">        user2.setAge(<span class="number">55</span>);</span><br><span class="line">        user2.setSex(<span class="number">2</span>);</span><br><span class="line">        listOperations.rightPush(key, user1);</span><br><span class="line">        listOperations.rightPush(key, user2);</span><br><span class="line">        <span class="comment">// 指定过期时间</span></span><br><span class="line">        redisTemplate.expire(key, <span class="number">10</span>, TimeUnit.SECONDS);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 遍历列表</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; listOperations.size(key); i++) &#123;</span><br><span class="line">            User user = (User) listOperations.index(key, i); <span class="comment">// 根据下标访问列表中的元素</span></span><br><span class="line"><span class="comment">//            User user = (User) listOperations.leftPop(key); // 出队</span></span><br><span class="line">            log.info(JSONUtil.toJsonPrettyStr(user));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取列表指定范围</span></span><br><span class="line"><span class="comment">//        List&lt;User&gt; userList = (List) listOperations.range(key, 0, listOperations.size(key));</span></span><br><span class="line">        <span class="comment">// 获取所有元素</span></span><br><span class="line">        List&lt;User&gt; userList = (List) listOperations.range(key, <span class="number">0</span>, -<span class="number">1</span>);</span><br><span class="line">        log.info(JSONUtil.toJsonPrettyStr(userList));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 不可重复集合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String key = <span class="string">&quot;setKey&quot;</span>;</span><br><span class="line"></span><br><span class="line">        Long num = setOperations.add(key, <span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>, <span class="string">&quot;b&quot;</span>);</span><br><span class="line">        redisTemplate.expire(key, <span class="number">10</span>, TimeUnit.SECONDS);</span><br><span class="line">        log.info(<span class="string">&quot;存储数量:&#123;&#125;&quot;</span>, num); <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 判断是否成员</span></span><br><span class="line">        log.info(setOperations.isMember(key, <span class="string">&quot;a&quot;</span>) + <span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取整个无序集合</span></span><br><span class="line">        Set&lt;Object&gt; members = setOperations.members(key);</span><br><span class="line">        log.info(JSONUtil.toJsonPrettyStr(members));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 集合每个value需要关联1个double类型的数字</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testZset</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 批量添加</span></span><br><span class="line">        ZSetOperations.TypedTuple&lt;Object&gt; tuple1 = <span class="keyword">new</span> DefaultTypedTuple&lt;&gt;(<span class="string">&quot;libai&quot;</span>, <span class="number">1.1</span>);</span><br><span class="line">        ZSetOperations.TypedTuple&lt;Object&gt; tuple2 = <span class="keyword">new</span> DefaultTypedTuple&lt;&gt;(<span class="string">&quot;zhaoxb&quot;</span>, <span class="number">14.8</span>);</span><br><span class="line">        ZSetOperations.TypedTuple&lt;Object&gt; tuple3 = <span class="keyword">new</span> DefaultTypedTuple&lt;&gt;(<span class="string">&quot;cc&quot;</span>, -<span class="number">3.2</span>);</span><br><span class="line">        Set&lt;ZSetOperations.TypedTuple&lt;Object&gt;&gt; set = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        set.add(tuple1);</span><br><span class="line">        set.add(tuple2);</span><br><span class="line">        set.add(tuple3);</span><br><span class="line">        zSetOperations.add(<span class="string">&quot;zset&quot;</span>, set);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 单个添加</span></span><br><span class="line">        zSetOperations.add(<span class="string">&quot;zset&quot;</span>, <span class="string">&quot;jj&quot;</span>, <span class="number">0.7</span>);</span><br><span class="line">        zSetOperations.add(<span class="string">&quot;zset&quot;</span>, <span class="string">&quot;kk&quot;</span>, <span class="number">3.5</span>);</span><br><span class="line">        log.info(<span class="string">&quot;zset:&#123;&#125;&quot;</span>, zSetOperations.range(<span class="string">&quot;zset&quot;</span>, <span class="number">0</span>, -<span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取元素排名，从0开始</span></span><br><span class="line">        Long rank = zSetOperations.rank(<span class="string">&quot;zset&quot;</span>, <span class="string">&quot;zhaoxb&quot;</span>);</span><br><span class="line">        log.info(<span class="string">&quot;zhaoxb排名:[&#123;&#125;]&quot;</span>, rank);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 根据分数值大小统计范围（包含头尾）</span></span><br><span class="line">        Set&lt;Object&gt; rangeByScore = zSetOperations.rangeByScore(<span class="string">&quot;zset&quot;</span>, <span class="number">0</span>, <span class="number">10</span>);</span><br><span class="line">        Long rangeSize = zSetOperations.count(<span class="string">&quot;zset&quot;</span>, <span class="number">0</span>, <span class="number">10</span>);</span><br><span class="line">        log.info(<span class="string">&quot;截取[0,10]范围内元素zset:&#123;&#125;,共有:[&#123;&#125;]&quot;</span>, rangeByScore, rangeSize);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取指定元素的score</span></span><br><span class="line">        Double score1 = zSetOperations.score(<span class="string">&quot;zset&quot;</span>, <span class="string">&quot;zhaoxb&quot;</span>);</span><br><span class="line">        Double score2 = zSetOperations.score(<span class="string">&quot;zset&quot;</span>, <span class="string">&quot;zxb&quot;</span>);</span><br><span class="line">        log.info(<span class="string">&quot;存在元素的score:[&#123;&#125;],不存在元素的score:[&#123;&#125;]&quot;</span>, score1, score2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 删除指定元素</span></span><br><span class="line">        zSetOperations.remove(<span class="string">&quot;zset&quot;</span>, <span class="string">&quot;jj&quot;</span>, <span class="string">&quot;kk&quot;</span>);</span><br><span class="line">        log.info(<span class="string">&quot;删除指定元素后,zset:&#123;&#125;&quot;</span>, zSetOperations.range(<span class="string">&quot;zset&quot;</span>, <span class="number">0</span>, -<span class="number">1</span>));</span><br><span class="line">        <span class="comment">// 删除score在某一范围内的元素（包含头尾）</span></span><br><span class="line">        zSetOperations.removeRangeByScore(<span class="string">&quot;zset&quot;</span>, -<span class="number">3.2</span>, <span class="number">1.1</span>);</span><br><span class="line">        log.info(<span class="string">&quot;删除score在某一范围内的元素,zset:&#123;&#125;&quot;</span>, zSetOperations.range(<span class="string">&quot;zset&quot;</span>, <span class="number">0</span>, -<span class="number">1</span>));</span><br><span class="line">        <span class="comment">// 删除指定排序范围内的元素</span></span><br><span class="line">        zSetOperations.removeRange(<span class="string">&quot;zset&quot;</span>, <span class="number">0</span>, -<span class="number">1</span>);</span><br><span class="line">        log.info(<span class="string">&quot;删除指定排序范围内的元素,zset:&#123;&#125;&quot;</span>, zSetOperations.range(<span class="string">&quot;zset&quot;</span>, <span class="number">0</span>, -<span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5、设置Lettuce连接池"><a href="#5、设置Lettuce连接池" class="headerlink" title="5、设置Lettuce连接池"></a>5、设置Lettuce连接池</h2><p>Lettuce是基于Netty实现的，1个连接可以同时给多个线程复用并且保证线程安全。如果需要多个连接可以自定义连接池。</p><ol><li><p>导入依赖。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-pool2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>添加配置，可以根据实际需要设置。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">lettuce:</span></span><br><span class="line">      <span class="attr">pool:</span></span><br><span class="line">        <span class="attr">max-active:</span> <span class="number">32</span></span><br><span class="line">        <span class="attr">max-idle:</span> <span class="number">8</span></span><br><span class="line">        <span class="attr">min-idle:</span> <span class="number">2</span></span><br><span class="line">        <span class="attr">max-wait:</span> <span class="number">10000</span>   </span><br></pre></td></tr></table></figure></li></ol><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://www.jianshu.com/p/feef1421ab0b">【SpringBoot2.0系列07】SpringBoot之redis使用（Lettuce版本）</a></li><li><a href="https://www.jianshu.com/p/8d3c70f33727">SpringBoot整合redis——redisTemplate（一）</a></li></ul><h2 id="代码地址"><a href="#代码地址" class="headerlink" title="代码地址"></a>代码地址</h2><ul><li>github：<a href="https://github.com/senlinmu1008/spring-boot/tree/master/redistemplate">https://github.com/senlinmu1008/spring-boot/tree/master/redistemplate</a></li><li>gitee：<a href="https://gitee.com/ppbin/spring-boot/tree/master/redistemplate">https://gitee.com/ppbin/spring-boot/tree/master/redistemplate</a><br><br><br></li></ul>]]></content>
      
      
      <categories>
          
          <category> Redis基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot集成Jedis(二)</title>
      <link href="Redis%E5%9F%BA%E7%A1%80/SpringBoot%E9%9B%86%E6%88%90Jedis(%E4%BA%8C)/"/>
      <url>Redis%E5%9F%BA%E7%A1%80/SpringBoot%E9%9B%86%E6%88%90Jedis(%E4%BA%8C)/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><ul><li>SpringBoot2.1.4</li><li>操作Redis集群。</li></ul><h2 id="1、Spring配置Bean"><a href="#1、Spring配置Bean" class="headerlink" title="1、Spring配置Bean"></a>1、Spring配置Bean</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> JedisCluster <span class="title">jedisCluster</span><span class="params">(JedisPoolConfig jedisPoolConfig)</span> </span>&#123;</span><br><span class="line">    Set&lt;HostAndPort&gt; nodeSet = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">    nodeSet.add(<span class="keyword">new</span> HostAndPort(<span class="string">&quot;172.16.122.101&quot;</span>, <span class="number">6379</span>));</span><br><span class="line">    nodeSet.add(<span class="keyword">new</span> HostAndPort(<span class="string">&quot;172.16.122.101&quot;</span>, <span class="number">6380</span>));</span><br><span class="line">    nodeSet.add(<span class="keyword">new</span> HostAndPort(<span class="string">&quot;172.16.122.102&quot;</span>, <span class="number">6379</span>));</span><br><span class="line">    nodeSet.add(<span class="keyword">new</span> HostAndPort(<span class="string">&quot;172.16.122.102&quot;</span>, <span class="number">6380</span>));</span><br><span class="line">    nodeSet.add(<span class="keyword">new</span> HostAndPort(<span class="string">&quot;172.16.122.103&quot;</span>, <span class="number">6379</span>));</span><br><span class="line">    nodeSet.add(<span class="keyword">new</span> HostAndPort(<span class="string">&quot;172.16.122.103&quot;</span>, <span class="number">6380</span>));</span><br><span class="line">    JedisCluster jedisCluster = <span class="keyword">new</span> JedisCluster(nodeSet, <span class="number">2000</span>, jedisPoolConfig);</span><br><span class="line"></span><br><span class="line">    log.info(<span class="string">&quot;=====创建JedisCluster=====&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> jedisCluster;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2、代码测试示例"><a href="#2、代码测试示例" class="headerlink" title="2、代码测试示例"></a>2、代码测试示例</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> JedisCluster jedisCluster; <span class="comment">// 集群操作</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">TestJedisCluster</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// jedisCluster</span></span><br><span class="line">  jedisCluster.set(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;zxb&quot;</span>);</span><br><span class="line">  jedisCluster.set(<span class="string">&quot;age&quot;</span>, <span class="string">&quot;28&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// get</span></span><br><span class="line">  log.info(jedisCluster.get(<span class="string">&quot;name&quot;</span>));</span><br><span class="line"></span><br><span class="line">  <span class="comment">// exists</span></span><br><span class="line">  log.info(jedisCluster.exists(<span class="string">&quot;age&quot;</span>) + <span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// expire</span></span><br><span class="line">  jedisCluster.expire(<span class="string">&quot;name&quot;</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ttl</span></span><br><span class="line">  log.info(jedisCluster.ttl(<span class="string">&quot;name&quot;</span>) + <span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ++ --</span></span><br><span class="line">  log.info(jedisCluster.incr(<span class="string">&quot;age&quot;</span>) + <span class="string">&quot;&quot;</span>);</span><br><span class="line">  log.info(jedisCluster.decr(<span class="string">&quot;age&quot;</span>) + <span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// del</span></span><br><span class="line">  jedisCluster.del(<span class="string">&quot;age&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="http://doc.redisfans.com/">Redis 命令参考</a></li></ul><h2 id="代码地址"><a href="#代码地址" class="headerlink" title="代码地址"></a>代码地址</h2><ul><li>github：<a href="https://github.com/senlinmu1008/spring-boot/tree/master/jedis">https://github.com/senlinmu1008/spring-boot/tree/master/jedis</a></li><li>gitee：<a href="https://gitee.com/ppbin/spring-boot/tree/master/jedis">https://gitee.com/ppbin/spring-boot/tree/master/jedis</a><br><br><br></li></ul>]]></content>
      
      
      <categories>
          
          <category> Redis基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
            <tag> Jedis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot集成Jedis(一)</title>
      <link href="Redis%E5%9F%BA%E7%A1%80/SpringBoot%E9%9B%86%E6%88%90Jedis(%E4%B8%80)/"/>
      <url>Redis%E5%9F%BA%E7%A1%80/SpringBoot%E9%9B%86%E6%88%90Jedis(%E4%B8%80)/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><ul><li>SpringBoot2.1.4</li><li>操作Redis单机。</li></ul><h2 id="1、导入Jedis依赖"><a href="#1、导入Jedis依赖" class="headerlink" title="1、导入Jedis依赖"></a>1、导入Jedis依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>redis.clients<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2、添加配置"><a href="#2、添加配置" class="headerlink" title="2、添加配置"></a>2、添加配置</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">30300</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">jedis</span></span><br><span class="line">    </span><br><span class="line"><span class="comment"># 这里我们是自己去实例化jedis的相关Bean（JedisPoolConfig、JedisPool...），并没有使用到RedisTemplate</span></span><br><span class="line"><span class="comment"># 所以并不需要像网上一些教程那样配置在spring节点下（spring.redis.jedis.pool.max-active...）</span></span><br><span class="line"><span class="attr">jedis:</span></span><br><span class="line">  <span class="attr">host:</span> <span class="number">172.16</span><span class="number">.122</span><span class="number">.104</span></span><br><span class="line">  <span class="attr">password:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">  <span class="attr">timeout:</span> <span class="number">2000</span></span><br><span class="line">  <span class="attr">maxTotal:</span> <span class="number">15</span> <span class="comment"># 最大连接数</span></span><br><span class="line">  <span class="attr">maxIdle:</span> <span class="number">10</span> <span class="comment"># 最大空闲连接</span></span><br><span class="line">  <span class="attr">minIdle:</span> <span class="number">5</span> <span class="comment"># 最小空闲连接</span></span><br><span class="line">  <span class="attr">maxWaitMillis:</span> <span class="number">10000</span> <span class="comment"># 获取连接最大等待时间</span></span><br><span class="line">  <span class="attr">testOnBorrow:</span> <span class="literal">true</span> <span class="comment"># 获取连接时检测是否可用</span></span><br></pre></td></tr></table></figure><h2 id="3、Spring配置Bean"><a href="#3、Spring配置Bean" class="headerlink" title="3、Spring配置Bean"></a>3、Spring配置Bean</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> JedisPoolConfig <span class="title">jedisPoolConfig</span><span class="params">(<span class="meta">@Value(&quot;$&#123;jedis.maxTotal&#125;&quot;)</span> <span class="keyword">int</span> maxActive,</span></span></span><br><span class="line"><span class="function"><span class="params">                                       <span class="meta">@Value(&quot;$&#123;jedis.maxIdle&#125;&quot;)</span> <span class="keyword">int</span> maxIdle,</span></span></span><br><span class="line"><span class="function"><span class="params">                                       <span class="meta">@Value(&quot;$&#123;jedis.minIdle&#125;&quot;)</span> <span class="keyword">int</span> minIdle,</span></span></span><br><span class="line"><span class="function"><span class="params">                                       <span class="meta">@Value(&quot;$&#123;jedis.maxWaitMillis&#125;&quot;)</span> <span class="keyword">long</span> maxWaitMillis,</span></span></span><br><span class="line"><span class="function"><span class="params">                                       <span class="meta">@Value(&quot;$&#123;jedis.testOnBorrow&#125;&quot;)</span> <span class="keyword">boolean</span> testOnBorrow)</span> </span>&#123;</span><br><span class="line">    JedisPoolConfig jedisPoolConfig = <span class="keyword">new</span> JedisPoolConfig();</span><br><span class="line">    jedisPoolConfig.setMaxTotal(maxActive);</span><br><span class="line">    jedisPoolConfig.setMaxIdle(maxIdle);</span><br><span class="line">    jedisPoolConfig.setMinIdle(minIdle);</span><br><span class="line">    jedisPoolConfig.setMaxWaitMillis(maxWaitMillis);</span><br><span class="line">    jedisPoolConfig.setTestOnBorrow(testOnBorrow);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> jedisPoolConfig;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> JedisPool <span class="title">jedisPool</span><span class="params">(<span class="meta">@Value(&quot;$&#123;jedis.host&#125;&quot;)</span> String host,</span></span></span><br><span class="line"><span class="function"><span class="params">                           <span class="meta">@Value(&quot;$&#123;jedis.password&#125;&quot;)</span> String password,</span></span></span><br><span class="line"><span class="function"><span class="params">                           <span class="meta">@Value(&quot;$&#123;jedis.port&#125;&quot;)</span> <span class="keyword">int</span> port,</span></span></span><br><span class="line"><span class="function"><span class="params">                           <span class="meta">@Value(&quot;$&#123;jedis.timeout&#125;&quot;)</span> <span class="keyword">int</span> timeout, JedisPoolConfig jedisPoolConfig)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    log.info(<span class="string">&quot;=====创建JedisPool连接池=====&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(StringUtils.isNotEmpty(password)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> JedisPool(jedisPoolConfig, host, port, timeout, password);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> JedisPool(jedisPoolConfig, host, port, timeout);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4、代码示例"><a href="#4、代码示例" class="headerlink" title="4、代码示例"></a>4、代码示例</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service(&quot;jedisService&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JedisServiceImpl</span> <span class="keyword">implements</span> <span class="title">JedisService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JedisPool jedisPool;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(String key, String value)</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Cleanup</span> Jedis jedis = jedisPool.getResource();</span><br><span class="line">        jedis.set(key, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">get</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Cleanup</span> Jedis jedis = jedisPool.getResource();</span><br><span class="line">        <span class="keyword">return</span> jedis.get(key);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="http://doc.redisfans.com/">Redis 命令参考</a></li></ul><h2 id="代码地址"><a href="#代码地址" class="headerlink" title="代码地址"></a>代码地址</h2><ul><li>github：<a href="https://github.com/senlinmu1008/spring-boot/tree/master/jedis">https://github.com/senlinmu1008/spring-boot/tree/master/jedis</a></li><li>gitee：<a href="https://gitee.com/ppbin/spring-boot/tree/master/jedis">https://gitee.com/ppbin/spring-boot/tree/master/jedis</a><br><br><br></li></ul>]]></content>
      
      
      <categories>
          
          <category> Redis基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
            <tag> Jedis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Java操作Redis服务端</title>
      <link href="Redis%E5%9F%BA%E7%A1%80/%E4%BD%BF%E7%94%A8Java%E6%93%8D%E4%BD%9CRedis%E6%9C%8D%E5%8A%A1%E7%AB%AF/"/>
      <url>Redis%E5%9F%BA%E7%A1%80/%E4%BD%BF%E7%94%A8Java%E6%93%8D%E4%BD%9CRedis%E6%9C%8D%E5%8A%A1%E7%AB%AF/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><ul><li>Jedis</li><li>JedisCluster</li><li>Lettuce</li><li>RedisTemplate</li></ul><h2 id="1、Redis应用场景"><a href="#1、Redis应用场景" class="headerlink" title="1、Redis应用场景"></a>1、Redis应用场景</h2><ol><li>缓存热点数据，减轻数据库查询压力。</li><li>限时业务用于存储临时数据，比如token、验证码等，减轻数据库读写压力。</li><li>计数器，社交网站的点赞数、转发数、浏览数存储，和对于一些网关应用进行流量统计用于限流等场景，减轻数据库写压力。</li><li>消息的发布与订阅，类似于MQ的机制。</li><li>实现分布式锁。</li><li>分布式Session。</li></ol><h2 id="2、Java客户端"><a href="#2、Java客户端" class="headerlink" title="2、Java客户端"></a>2、Java客户端</h2><ul><li><strong>Jedis：</strong>以前Java基本使用Jedis作为操作Redis的客户端，Jedis在实现上是直接连接的redis server，如果在多线程环境下是非线程安全的，这个时候只有使用连接池，为每个Jedis实例增加物理连接。如果在cluster模式下，需要使用JedisCluster来操作Redis的集群。</li><li><strong>Lettuce：</strong>Lettuce的连接是基于Netty的，连接实例（StatefulRedisConnection）可以在多个线程间并发访问，因为StatefulRedisConnection是线程安全的，所以一个连接实例（StatefulRedisConnection）就可以满足多线程环境下的并发访问，当然这个也是可伸缩的设计，一个连接实例不够的情况也可以按需增加连接实例。</li><li><strong>RedisTemplate：</strong>Spring对于Redis操作的近一次封装，对于一些底层操作的差异进行了屏蔽，提供的API更加灵活方便。在SpringBoot1.x版本中默认使用Jedis作为实现，在2.x版本中则默认使用Lettuce作为实现。</li></ul><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://www.jianshu.com/p/feef1421ab0b">【SpringBoot2.0系列07】SpringBoot之redis使用（Lettuce版本）</a><br><br><br></li></ul>]]></content>
      
      
      <categories>
          
          <category> Redis基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis5.x在云服务器搭建集群</title>
      <link href="Redis%E5%9F%BA%E7%A1%80/Redis5.x%E5%9C%A8%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA%E9%9B%86%E7%BE%A4/"/>
      <url>Redis%E5%9F%BA%E7%A1%80/Redis5.x%E5%9C%A8%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA%E9%9B%86%E7%BE%A4/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><ul><li>腾讯云：CentOS7.6 1台</li><li>Redis版本：5.0.8</li><li>1机6节点、3主3从</li></ul><h2 id="1、准备工作"><a href="#1、准备工作" class="headerlink" title="1、准备工作"></a>1、准备工作</h2><ol><li><p>安装Redis5.0.8版本至<code>/usr/local/redis/</code>目录下。（参考：<a href="https://www.jianshu.com/p/d90da9b760bb">Redis安装</a>）</p></li><li><p>给每个实例创建1个目录，以端口号为区分，用来存放持久化文件和日志等文件。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir /usr/local/redis/<span class="number">900</span>&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;</span><br></pre></td></tr></table></figure></li><li><p>在<code>/usr/local/redis/config/</code>目录下给每个实例拷贝1个redis配置文件，以每个实例的端口号进行区分。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">redis9001.conf</span><br><span class="line">redis9002.conf</span><br><span class="line">redis9003.conf</span><br><span class="line">redis9004.conf</span><br><span class="line">redis9005.conf</span><br><span class="line">redis9006.conf</span><br></pre></td></tr></table></figure><p>每个配置文件在原来的<code>redis.conf</code>的配置基础上更改以下配置，这里以9001为例。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span>-mode no</span><br><span class="line">port <span class="number">9001</span></span><br><span class="line">daemonize yes</span><br><span class="line">pidfile /usr/local/redis/<span class="number">9001</span>/redis_9001.pid</span><br><span class="line">logfile <span class="string">&quot;/usr/local/redis/9001/redis_9001.log&quot;</span></span><br><span class="line">dbfilename dump_9001.rdb</span><br><span class="line">dir /usr/local/redis/<span class="number">9001</span></span><br><span class="line">appendonly yes</span><br><span class="line">appendfilename <span class="string">&quot;appendonly_9001.aof&quot;</span></span><br><span class="line">cluster-enabled yes</span><br><span class="line">cluster-config-file /usr/local/redis/<span class="number">9001</span>/nodes<span class="number">-9001.</span>conf</span><br><span class="line">cluster-node-timeout <span class="number">15000</span></span><br><span class="line">cluster-replica-validity-factor <span class="number">10</span></span><br><span class="line">cluster-migration-barrier <span class="number">1</span></span><br><span class="line">cluster-require-full-coverage no</span><br></pre></td></tr></table></figure></li><li><p>启动redis。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/redis/bin/redis-server /usr/local/redis/config/redis9001.conf</span><br><span class="line">/usr/local/redis/bin/redis-server /usr/local/redis/config/redis9002.conf</span><br><span class="line">/usr/local/redis/bin/redis-server /usr/local/redis/config/redis9003.conf</span><br><span class="line">/usr/local/redis/bin/redis-server /usr/local/redis/config/redis9004.conf</span><br><span class="line">/usr/local/redis/bin/redis-server /usr/local/redis/config/redis9005.conf</span><br><span class="line">/usr/local/redis/bin/redis-server /usr/local/redis/config/redis9006.conf</span><br></pre></td></tr></table></figure></li></ol><h2 id="2、集群搭建"><a href="#2、集群搭建" class="headerlink" title="2、集群搭建"></a>2、集群搭建</h2><ol><li><p>为了能让外网访问，需要云服务器开放端口，这里不仅需要开放<code>9001-9006</code>的端口，还需要开放<code>19001-19006</code>的端口，否则集群搭建不了。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --zone=<span class="keyword">public</span> --add-port=<span class="number">900</span>&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;/tcp --permanent</span><br><span class="line">firewall-cmd --zone=<span class="keyword">public</span> --add-port=<span class="number">1900</span>&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;/tcp --permanent</span><br><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure></li><li><p>创建集群，每个节点以外网ip进行注册。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/redis/bin/redis-cli --cluster create <span class="number">148.70</span><span class="number">.153</span><span class="number">.63</span>:<span class="number">9001</span> <span class="number">148.70</span><span class="number">.153</span><span class="number">.63</span>:<span class="number">9002</span> <span class="number">148.70</span><span class="number">.153</span><span class="number">.63</span>:<span class="number">9003</span> <span class="number">148.70</span><span class="number">.153</span><span class="number">.63</span>:<span class="number">9004</span> <span class="number">148.70</span><span class="number">.153</span><span class="number">.63</span>:<span class="number">9005</span> <span class="number">148.70</span><span class="number">.153</span><span class="number">.63</span>:<span class="number">9006</span> --cluster-replicas <span class="number">1</span></span><br></pre></td></tr></table></figure></li><li><p>验证集群可用性，用如下命令进入客户端，进行get、set操作看是否可以。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./redis-cli -c -p <span class="number">9001</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="3、Java应用"><a href="#3、Java应用" class="headerlink" title="3、Java应用"></a>3、Java应用</h2><ol><li><p>本人在搭完后用SpringBoot2.x版本的RedisTemplate操作Redis发现一个很奇怪的问题：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2020</span>-<span class="number">05</span>-<span class="number">12</span> <span class="number">22</span>:<span class="number">15</span>:<span class="number">31</span>,<span class="number">218</span> [WARN] [lettuce-nioEventLoop-<span class="number">4</span>-<span class="number">7</span>] [io.lettuce.core.cluster.topology.ClusterTopologyRefresh:<span class="number">243</span>] [] Unable to connect to <span class="number">172.27</span>.<span class="number">0.10</span>:<span class="number">9006</span></span><br><span class="line">java.util.concurrent.CompletionException: io.netty.channel.ConnectTimeoutException: connection timed out: /<span class="number">172.27</span>.<span class="number">0.10</span>:<span class="number">9006</span></span><br><span class="line">at java.util.concurrent.CompletableFuture.encodeThrowable(CompletableFuture.java:<span class="number">292</span>)</span><br><span class="line">at java.util.concurrent.CompletableFuture.completeThrowable(CompletableFuture.java:<span class="number">308</span>)</span><br><span class="line">at java.util.concurrent.CompletableFuture.uniApply(CompletableFuture.java:<span class="number">593</span>)</span><br><span class="line">at java.util.concurrent.CompletableFuture$UniApply.tryFire(CompletableFuture.java:<span class="number">577</span>)</span><br><span class="line">at java.util.concurrent.CompletableFuture.postComplete(CompletableFuture.java:<span class="number">474</span>)</span><br><span class="line">at java.util.concurrent.CompletableFuture.completeExceptionally(CompletableFuture.java:<span class="number">1977</span>)</span><br><span class="line">at io.lettuce.core.AbstractRedisClient.lambda$initializeChannelAsync0$<span class="number">4</span>(AbstractRedisClient.java:<span class="number">330281199210082216</span>)</span><br><span class="line">at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:<span class="number">502</span>)</span><br><span class="line">at io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:<span class="number">495</span>)</span><br><span class="line">at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:<span class="number">474</span>)</span><br><span class="line">at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:<span class="number">415</span>)</span><br><span class="line">at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:<span class="number">540</span>)</span><br><span class="line">at io.netty.util.concurrent.DefaultPromise.setFailure0(DefaultPromise.java:<span class="number">533</span>)</span><br><span class="line">at io.netty.util.concurrent.DefaultPromise.tryFailure(DefaultPromise.java:<span class="number">114</span>)</span><br><span class="line">at io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe$<span class="number">1.</span>run(AbstractNioChannel.java:<span class="number">269</span>)</span><br><span class="line">at io.netty.util.concurrent.PromiseTask$RunnableAdapter.call(PromiseTask.java:<span class="number">38</span>)</span><br><span class="line">at io.netty.util.concurrent.ScheduledFutureTask.run(ScheduledFutureTask.java:<span class="number">127</span>)</span><br><span class="line">at io.netty.util.concurrent.AbstractEventExecutor.safeExecute(AbstractEventExecutor.java:<span class="number">163</span>)</span><br><span class="line">at io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:<span class="number">404</span>)</span><br><span class="line">at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:<span class="number">495</span>)</span><br><span class="line">at io.netty.util.concurrent.SingleThreadEventExecutor$<span class="number">5.</span>run(SingleThreadEventExecutor.java:<span class="number">905</span>)</span><br><span class="line">at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:<span class="number">30</span>)</span><br><span class="line">at java.lang.Thread.run(Thread.java:<span class="number">748</span>)</span><br><span class="line">Caused by: io.netty.channel.ConnectTimeoutException: connection timed out: /<span class="number">172.27</span>.<span class="number">0.10</span>:<span class="number">9006</span></span><br><span class="line">at io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe$<span class="number">1.</span>run(AbstractNioChannel.java:<span class="number">267</span>)</span><br><span class="line">... <span class="number">8</span> common frames omitted</span><br></pre></td></tr></table></figure><ul><li>第一次执行操作总是特别慢，有时候执行成功但会提示上述的报错，有时候干脆执行也失败。</li><li>报错提示居然是连接不了我云服务器的内网ip地址，而且我在自己的虚拟机上从来没有过这个问题。</li><li>因为SpringBoot从2.x版本开始默认使用lettuce作为操作redis的实现，我把这个依赖排除然后自行引入jedis包，再次操作发现没有问题。</li></ul></li><li><p>原因排查。<br>查了相关资料，发现整合SpringBoot以后，客户端在连接redis某个节点时，会通过<code>cluster slots</code>命令去获取集群中的槽点信息。通过这个命令返回的每个节点除了自身节点是内网ip外其他节点均为公网ip，而这些节点信息源自于我们之前在配置文件中配的<code>cluster-config-file /usr/local/redis/9001/nodes-9001.conf</code>这个文件。这个文件是由集群创建时生成的，在生成自身节点时读取的ip是网卡ip，而云服务器的网卡ip即为内网ip地址。知道了问题源头就好解决了。</p></li><li><p>故障排除。<br>这里以9001为例，修改<code>/usr/local/redis/9001/nodes-9001.conf</code>这个文件，将内网ip改为外网ip。<br><img src="https://cdn.jsdelivr.net/gh/senlinmu1008/hexo_cdn@main/post/redis/redis-6-1.jpg" alt="-w701"><br>按同样方法依次修改每个节点的node文件，重启redis，这时候再试发现一切都正常了。</p></li></ol><h2 id="4、设置密码"><a href="#4、设置密码" class="headerlink" title="4、设置密码"></a>4、设置密码</h2><ol><li>如果在云服务器搭建的redis，最好修改默认端口并设置强度较高的密码。这里需要设置2个密码：</li></ol><p><strong>requirepass：</strong>对登录权限做限制即校验客户端的连接，主要是在主节点配置。<br><strong>masterauth：</strong>主要是针对master对应的slave节点设置的，在slave节点数据同步的时候用到，主要是在从节点配置。<br>实际上为了运维方便以及考虑到主从切换，一般会为每个节点同时配置这2个参数且密码相同。</p><ol start="2"><li><p>挨个登录每个节点的redis客户端设置密码。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">config <span class="built_in">set</span> requirepass <span class="number">123456</span></span><br><span class="line">config <span class="built_in">set</span> masterauth <span class="number">123456</span></span><br><span class="line">auth  <span class="number">123456</span></span><br><span class="line">config rewrite</span><br></pre></td></tr></table></figure><p>查看配置文件末尾就会发现多了2行配置，就是我们设置的密码。<br>如果直接在<code>redis.conf</code>配置文件上修改则需要重启redis后才会生效。<br>再次登录客户端则需要使用密码。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./redis-cli -c -p <span class="number">9001</span> -a <span class="number">123456</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://www.jianshu.com/p/7fec6d0d0ae0">云服务器部署Redis集群（Cluster模式）及Spring Boot整合问题</a></li><li><a href="https://www.cnblogs.com/xuchen0117/p/11672231.html">设置Redis集群访问密码（不停机设置）</a></li><li><a href="https://blog.csdn.net/damanchen/article/details/100584275">redis集群的密码信息存在哪？是如何更新的？关于requirepass和masterauth的问题</a><br><br><br></li></ul>]]></content>
      
      
      <categories>
          
          <category> Redis基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
            <tag> RedisCluster </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RedisCluster动态缩容</title>
      <link href="Redis%E5%9F%BA%E7%A1%80/RedisCluster%E5%8A%A8%E6%80%81%E7%BC%A9%E5%AE%B9/"/>
      <url>Redis%E5%9F%BA%E7%A1%80/RedisCluster%E5%8A%A8%E6%80%81%E7%BC%A9%E5%AE%B9/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><ul><li>在扩容基础上演示缩容。</li></ul><h2 id="1、下线迁移槽"><a href="#1、下线迁移槽" class="headerlink" title="1、下线迁移槽"></a>1、下线迁移槽</h2><ul><li><code>--cluster-from</code>：要删除的主节点id。</li><li><code>--cluster-to</code>：接收迁移槽的主节点id。</li><li><code>--cluster-slots</code>：迁移槽的数量。</li><li>最后1个是集群现有的任意1个节点。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/redis/bin/redis-cli --cluster reshard --cluster-from <span class="number">6</span>ad45a1a6b276d487a927b9cb7b284edf1690e21 --cluster-to e1e369014d2ffd33f3548cc75d64789048a9b2bf --cluster-slots <span class="number">1365</span> <span class="number">172.16</span><span class="number">.122</span><span class="number">.101</span>:<span class="number">6379</span></span><br><span class="line">/usr/local/redis/bin/redis-cli --cluster reshard --cluster-from <span class="number">6</span>ad45a1a6b276d487a927b9cb7b284edf1690e21 --cluster-to <span class="number">85f</span>496b8891263e334bd6a43816d4ea465fbe8cf --cluster-slots <span class="number">1365</span> <span class="number">172.16</span><span class="number">.122</span><span class="number">.102</span>:<span class="number">6379</span></span><br><span class="line">/usr/local/redis/bin/redis-cli --cluster reshard --cluster-from <span class="number">6</span>ad45a1a6b276d487a927b9cb7b284edf1690e21 --cluster-to <span class="number">1</span>d1ffb6589d25040c3f5d2bbea7d6503dd6a39dc --cluster-slots <span class="number">1366</span> <span class="number">172.16</span><span class="number">.122</span><span class="number">.103</span>:<span class="number">6379</span></span><br></pre></td></tr></table></figure><h2 id="2、删除节点"><a href="#2、删除节点" class="headerlink" title="2、删除节点"></a>2、删除节点</h2><ul><li>需要指定集群现有的任意1个节点。</li><li>最后填写要删除的节点id。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/redis/bin/redis-cli --cluster del-node <span class="number">172.16</span><span class="number">.122</span><span class="number">.101</span>:<span class="number">6379</span> <span class="number">6</span>ad45a1a6b276d487a927b9cb7b284edf1690e21</span><br><span class="line">/usr/local/redis/bin/redis-cli --cluster del-node <span class="number">172.16</span><span class="number">.122</span><span class="number">.101</span>:<span class="number">6379</span> d00cd575adab36b53e6b8cf29664a77807c9ded5</span><br></pre></td></tr></table></figure><ul><li>至此，集群缩容已经完成。<br><br><br></li></ul>]]></content>
      
      
      <categories>
          
          <category> Redis基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
            <tag> RedisCluster </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RedisCluster动态扩容</title>
      <link href="Redis%E5%9F%BA%E7%A1%80/RedisCluster%E5%8A%A8%E6%80%81%E6%89%A9%E5%AE%B9/"/>
      <url>Redis%E5%9F%BA%E7%A1%80/RedisCluster%E5%8A%A8%E6%80%81%E6%89%A9%E5%AE%B9/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><ul><li>集群可水平扩展，据官方文档称可以线性扩展到1000节点。</li><li>这里为了演示方便，主从会在同一台机器上。</li></ul><h2 id="1、启动实例"><a href="#1、启动实例" class="headerlink" title="1、启动实例"></a>1、启动实例</h2><ol><li>按照之前Cluster搭建方式，重新在新的一台机器上启动2个实例，1主1从。</li></ol><h2 id="2、加入节点"><a href="#2、加入节点" class="headerlink" title="2、加入节点"></a>2、加入节点</h2><ol><li><p>利用<code>redis-cli</code>工具增加主节点，第1个节点是需要新加入的主节点，第2个节点是既有集群中的任意1个节点。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/redis/bin/redis-cli --cluster add-node <span class="number">172.16</span><span class="number">.122</span><span class="number">.104</span>:<span class="number">6379</span> <span class="number">172.16</span><span class="number">.122</span><span class="number">.101</span>:<span class="number">6379</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/senlinmu1008/hexo_cdn@main/post/redis/redis-4-1.jpg" alt="Xnip2020-05-01_22-16-05"></p></li><li><p>查看集群节点信息，这里也可以不进入<code>redis-cli</code>客户端去查看。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/redis/bin/redis-cli -p <span class="number">6379</span> cluster nodes</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/senlinmu1008/hexo_cdn@main/post/redis/redis-4-2.jpg" alt="Xnip2020-05-01_22-21-44"></p></li><li><p>增加从节点。需要另外指定<code>--cluster-slave</code>、<code>--cluster-master-id</code>以及主节点id参数。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/redis/bin/redis-cli --cluster add-node <span class="number">172.16</span><span class="number">.122</span><span class="number">.104</span>:<span class="number">6380</span> <span class="number">172.16</span><span class="number">.122</span><span class="number">.101</span>:<span class="number">6379</span> --cluster-slave --cluster-master-id <span class="number">6</span>ad45a1a6b276d487a927b9cb7b284edf1690e21</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/senlinmu1008/hexo_cdn@main/post/redis/redis-4-3.jpg" alt="Xnip2020-05-01_22-18-40"></p></li><li><p>再次查看集群各节点信息。<br><img src="https://cdn.jsdelivr.net/gh/senlinmu1008/hexo_cdn@main/post/redis/redis-4-4.jpg" alt="Xnip2020-05-01_22-22-23"></p></li></ol><h2 id="3、迁移槽位和数据"><a href="#3、迁移槽位和数据" class="headerlink" title="3、迁移槽位和数据"></a>3、迁移槽位和数据</h2><ol><li><p>重新分配槽位。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 最后填写集群中任意<span class="number">1</span>个节点都行。</span><br><span class="line">/usr/local/redis/bin/redis-cli --cluster reshard <span class="number">172.16</span><span class="number">.122</span><span class="number">.101</span>:<span class="number">6379</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/senlinmu1008/hexo_cdn@main/post/redis/redis-4-5.jpg" alt="Xnip2020-05-01_22-30-32"></p><ul><li>指定分配的槽位数量。</li><li>指定获取这些槽位的主节点id。</li><li>填写<code>all</code>表示要迁移的这些槽位由集群中原有的各个主节点平均分摊给新加入的主节点。</li><li>会有一次确认，输入yes即可，稍等一会槽位就会迁移到新的主节点上。</li></ul></li><li><p>再次确认集群各节点信息，可以看到新加入的节点已经获得槽位了。<br><img src="https://cdn.jsdelivr.net/gh/senlinmu1008/hexo_cdn@main/post/redis/redis-4-6.jpg" alt="-w1290"></p></li><li><p>至此，新加入的节点就可以开始正常工作了。</p></li></ol><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://www.bilibili.com/video/BV1RE411y7LV?from=search&seid=16920078600613328845">最详细的redis集群教程-过1024节的程序员必备的面试宝典【鲁班学院】</a><br><br><br></li></ul>]]></content>
      
      
      <categories>
          
          <category> Redis基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
            <tag> RedisCluster </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RedisCluster高可用集群搭建（二）</title>
      <link href="Redis%E5%9F%BA%E7%A1%80/RedisCluster%E9%AB%98%E5%8F%AF%E7%94%A8%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
      <url>Redis%E5%9F%BA%E7%A1%80/RedisCluster%E9%AB%98%E5%8F%AF%E7%94%A8%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><ul><li>这里并非使用原生方式来搭建集群。</li><li>Redis5.x版本使用<code>redis-cli</code>工具搭建集群，不再像Redis4.x版本使用Ruby搭建，会更方便一些。</li><li>如果有特殊的搭建要求，则需要按照原始方式搭建，原生方式采用各个节点先meet再指派槽最后分配主从来完成集群的搭建。</li></ul><h2 id="1、各节点加入集群"><a href="#1、各节点加入集群" class="headerlink" title="1、各节点加入集群"></a>1、各节点加入集群</h2><ol><li><p>3机6节点的主从拓扑，上下对应主从关系且主从节点错开在不同机器上。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">172.16</span><span class="number">.122</span><span class="number">.101</span>:<span class="number">6379</span>（主） <span class="number">172.16</span><span class="number">.122</span><span class="number">.102</span>:<span class="number">6379</span>（主） <span class="number">172.16</span><span class="number">.122</span><span class="number">.103</span>:<span class="number">6379</span>（主）</span><br><span class="line"><span class="number">172.16</span><span class="number">.122</span><span class="number">.102</span>:<span class="number">6380</span>（从） <span class="number">172.16</span><span class="number">.122</span><span class="number">.103</span>:<span class="number">6380</span>（从） <span class="number">172.16</span><span class="number">.122</span><span class="number">.101</span>:<span class="number">6380</span>（从）</span><br></pre></td></tr></table></figure></li><li><p>在任意一台机器上执行以下命令，前3台为主机，后3台为从机，顺序一一对应。根据实际情况需要把ip地址和端口替换一下。<code>--cluster-replicas 1</code>参数表示主从节点是1:1关系。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/redis/bin/redis-cli --cluster create <span class="number">172.16</span><span class="number">.122</span><span class="number">.101</span>:<span class="number">6379</span> <span class="number">172.16</span><span class="number">.122</span><span class="number">.102</span>:<span class="number">6379</span> <span class="number">172.16</span><span class="number">.122</span><span class="number">.103</span>:<span class="number">6379</span> <span class="number">172.16</span><span class="number">.122</span><span class="number">.102</span>:<span class="number">6380</span> <span class="number">172.16</span><span class="number">.122</span><span class="number">.103</span>:<span class="number">6380</span> <span class="number">172.16</span><span class="number">.122</span><span class="number">.101</span>:<span class="number">6380</span> --cluster-replicas <span class="number">1</span></span><br></pre></td></tr></table></figure></li><li><p>手动确认yes<br><img src="https://cdn.jsdelivr.net/gh/senlinmu1008/hexo_cdn@main/post/redis/redis-3-1.jpg" alt="-w571"></p><p>然后会看到下图，表示搭建OK。原生方式的先meet再指派槽最后分配主从的3个步骤现在仅用一行命令就已经完成了。<br><img src="https://cdn.jsdelivr.net/gh/senlinmu1008/hexo_cdn@main/post/redis/redis-3-2.jpg" alt="Xnip2020-04-29_16-49-40"></p></li></ol><h2 id="2、查看集群信息"><a href="#2、查看集群信息" class="headerlink" title="2、查看集群信息"></a>2、查看集群信息</h2><ol><li><p>进入客户端。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/redis/bin/redis-cli -p <span class="number">6379</span></span><br></pre></td></tr></table></figure></li><li><p>查看集群信息，状态已经OK。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; cluster info</span><br><span class="line">cluster_state:ok</span><br><span class="line">cluster_slots_assigned:<span class="number">16384</span></span><br><span class="line">cluster_slots_ok:<span class="number">16384</span></span><br><span class="line">cluster_slots_pfail:<span class="number">0</span></span><br><span class="line">cluster_slots_fail:<span class="number">0</span></span><br><span class="line">cluster_known_nodes:<span class="number">6</span></span><br><span class="line">cluster_size:<span class="number">3</span></span><br><span class="line">cluster_current_epoch:<span class="number">7</span></span><br><span class="line">cluster_my_epoch:<span class="number">7</span></span><br><span class="line">cluster_stats_messages_ping_sent:<span class="number">11979</span></span><br><span class="line">cluster_stats_messages_pong_sent:<span class="number">12091</span></span><br><span class="line">cluster_stats_messages_sent:<span class="number">24070</span></span><br><span class="line">cluster_stats_messages_ping_received:<span class="number">12091</span></span><br><span class="line">cluster_stats_messages_pong_received:<span class="number">11832</span></span><br><span class="line">cluster_stats_messages_received:<span class="number">23923</span></span><br></pre></td></tr></table></figure></li><li><p>查看集群各节点信息，可以看到每个节点的主从关系以及槽点的分配。</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">127.0.0.1</span>:<span class="string">6379&gt; cluster nodes</span></span><br><span class="line"><span class="attr">e1e369014d2ffd33f3548cc75d64789048a9b2bf</span> <span class="string">172.16.122.101:6379@16379 myself,master - 0 1588327299000 9 connected 0-5460</span></span><br><span class="line"><span class="attr">642b908e7c225daf7fa606201b938507cd33393d</span> <span class="string">172.16.122.101:6380@16380 slave 1d1ffb6589d25040c3f5d2bbea7d6503dd6a39dc 0 1588327300414 6 connected</span></span><br><span class="line"><span class="attr">7b639ed82eae9ee6e4b17dfd25b09be1604f280d</span> <span class="string">172.16.122.102:6380@16380 slave e1e369014d2ffd33f3548cc75d64789048a9b2bf 0 1588327299000 9 connected</span></span><br><span class="line"><span class="attr">639af5949611f931584a7dfc72f8841ff09d9ffd</span> <span class="string">172.16.122.103:6380@16380 slave 85f496b8891263e334bd6a43816d4ea465fbe8cf 0 1588327300000 5 connected</span></span><br><span class="line"><span class="attr">1d1ffb6589d25040c3f5d2bbea7d6503dd6a39dc</span> <span class="string">172.16.122.103:6379@16379 master - 0 1588327300000 3 connected 10923-16383</span></span><br><span class="line"><span class="attr">85f496b8891263e334bd6a43816d4ea465fbe8cf</span> <span class="string">172.16.122.102:6379@16379 master - 0 1588327301419 2 connected 5461-10922</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="3、简单操作"><a href="#3、简单操作" class="headerlink" title="3、简单操作"></a>3、简单操作</h2><ol><li><p>set key</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; <span class="built_in">set</span> hello world</span><br><span class="line">(error) MOVED <span class="number">866</span> <span class="number">172.16</span><span class="number">.122</span><span class="number">.101</span>:<span class="number">6379</span></span><br></pre></td></tr></table></figure><ul><li>可能成功也有可能会报错，报错是因为redis根据crc16算法算出存储该key的槽位不属于当前节点。<code>exit</code>或<code>quit</code>命令退出客户端，我们需要以下命令重新进入客户端。（如果需要支持中文则要再加上<code>--raw</code>参数）</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/redis/bin/redis-cli -p <span class="number">6379</span> -c</span><br></pre></td></tr></table></figure><ul><li>再执行就OK了，并且会提示重定向到槽位所属的节点。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; <span class="built_in">set</span> hello world</span><br><span class="line">-&gt; Redirected to slot [<span class="number">866</span>] located at <span class="number">172.16</span><span class="number">.122</span><span class="number">.101</span>:<span class="number">6379</span></span><br><span class="line">OK</span><br><span class="line"><span class="number">172.16</span><span class="number">.122</span><span class="number">.101</span>:<span class="number">6379</span>&gt;</span><br></pre></td></tr></table></figure></li><li><p>get key</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">172.16</span><span class="number">.122</span><span class="number">.101</span>:<span class="number">6379</span>&gt; get hello</span><br><span class="line"><span class="string">&quot;world&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>del key</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">172.16</span><span class="number">.122</span><span class="number">.101</span>:<span class="number">6379</span>&gt; del hello</span><br><span class="line">(integer) <span class="number">1</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="4、启停集群"><a href="#4、启停集群" class="headerlink" title="4、启停集群"></a>4、启停集群</h2><ol><li><p>关闭1台机器的所有实例。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pkill redis</span><br></pre></td></tr></table></figure></li><li><p>挨个关闭1台机器的实例。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/redis/bin/redis-cli -p <span class="number">6379</span> shutdown</span><br><span class="line">/usr/local/redis/bin/redis-cli -p <span class="number">6380</span> shutdown</span><br></pre></td></tr></table></figure></li><li><p>再次重启时不需要再搭起集群，redis会读取保留集群信息的文件恢复集群关系。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/redis/nodes<span class="number">-6379.</span>conf</span><br><span class="line">/usr/local/redis/nodes<span class="number">-6380.</span>conf</span><br></pre></td></tr></table></figure></li></ol><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://blog.csdn.net/chendaike/article/details/97235828">CentOS7下搭建 Redis-5.0.5集群环境</a></li><li><a href="https://www.bilibili.com/video/BV1RE411y7LV?from=search&seid=16920078600613328845">最详细的redis集群教程-过1024节的程序员必备的面试宝典【鲁班学院】</a><br><br><br></li></ul>]]></content>
      
      
      <categories>
          
          <category> Redis基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
            <tag> RedisCluster </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RedisCluster高可用集群搭建（一）</title>
      <link href="Redis%E5%9F%BA%E7%A1%80/RedisCluster%E9%AB%98%E5%8F%AF%E7%94%A8%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>Redis%E5%9F%BA%E7%A1%80/RedisCluster%E9%AB%98%E5%8F%AF%E7%94%A8%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><ul><li>Linux版本：CentOS7.7</li><li>Redis版本：5.0.8</li><li>方案：3机6节点，分别是3主3从，主从错开在不同机器上。</li></ul><h2 id="1、Redis集群演进过程"><a href="#1、Redis集群演进过程" class="headerlink" title="1、Redis集群演进过程"></a>1、Redis集群演进过程</h2><ol><li><strong>单机版：</strong>持久化是最简单的高可用方法（有时甚至不被归为高可用的手段），主要作用是数据备份，即将数据存储在硬盘， 保证数据不会因进程退出而丢失。</li><li><strong>主从复制：</strong>复制主要实现了数据的多机备份，以及对于读操作的负载均衡和简单的故障恢复。缺陷是故障恢复无法自动化；写操作无法负载均衡；存储能力受到单机的限制。</li><li><strong>哨兵（Sentinel）：</strong>在复制的基础上，哨兵实现了自动化的故障恢复。缺陷是写操作无法负载均衡；存储能力受到单机的限制。</li><li><strong>Cluster集群：</strong>通过集群，Redis解决了写操作无法负载均衡，以及存储能力受到单机限制的问题，而且也具有故障迁移（主从切换）的功能。实现了较为完善的高可用方案。</li></ol><h2 id="2、Cluster集群架构"><a href="#2、Cluster集群架构" class="headerlink" title="2、Cluster集群架构"></a>2、Cluster集群架构</h2><p><img src="https://cdn.jsdelivr.net/gh/senlinmu1008/hexo_cdn@main/post/redis/redis-2-1.jpg" alt="-w949"></p><ol><li>Redis在存储时会根据key进行crc16算法，将算法的结果对16384取模，最后的结果即对应存储的槽位。</li><li>Redis共有16384个槽位，在集群搭建时需要把这些槽位分配给每个主节点，可以根据机器性能以及存储能力按权重分配，一般是平均分配。</li><li>各个主节点之间不会进行数据同步，只存储对应槽位的数据。各从节点备份对应主节点的数据，所以主从需要错开在不同机器上。</li></ol><h2 id="3、修改配置文件"><a href="#3、修改配置文件" class="headerlink" title="3、修改配置文件"></a>3、修改配置文件</h2><ol><li><p>在<code>/usr/local/redis/config</code>目录下准备2个原始的<code>redis.conf</code>文件，分别给2个实例启动使用。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">redis6379.conf</span><br><span class="line">redis6380.conf</span><br></pre></td></tr></table></figure></li><li><p>修改<code>redis6379.conf</code>文件的部分配置。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># bind 127.0.0.1</span></span><br><span class="line"><span class="keyword">protected</span>-mode no</span><br><span class="line">port <span class="number">6379</span></span><br><span class="line">daemonize yes</span><br><span class="line">pidfile /usr/local/redis/redis_6379.pid</span><br><span class="line">logfile <span class="string">&quot;/usr/local/redis/redis_6379.log&quot;</span></span><br><span class="line">dbfilename dump_6379.rdb</span><br><span class="line">dir /usr/local/redis/</span><br><span class="line">appendonly yes</span><br><span class="line">appendfilename <span class="string">&quot;appendonly_6379.aof&quot;</span></span><br><span class="line">cluster-enabled yes</span><br><span class="line">cluster-config-file /usr/local/redis/nodes<span class="number">-6379.</span>conf</span><br><span class="line">cluster-node-timeout <span class="number">15000</span></span><br><span class="line">cluster-replica-validity-factor <span class="number">10</span></span><br><span class="line">cluster-migration-barrier <span class="number">1</span></span><br><span class="line">cluster-require-full-coverage no</span><br></pre></td></tr></table></figure></li><li><p>修改<code>redis6380.conf</code>文件的部分配置。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># bind 127.0.0.1</span></span><br><span class="line"><span class="keyword">protected</span>-mode no</span><br><span class="line">port <span class="number">6380</span></span><br><span class="line">daemonize yes</span><br><span class="line">pidfile /usr/local/redis/redis_6380.pid</span><br><span class="line">logfile <span class="string">&quot;/usr/local/redis/redis_6380.log&quot;</span></span><br><span class="line">dbfilename dump_6380.rdb</span><br><span class="line">dir /usr/local/redis/</span><br><span class="line">appendonly yes</span><br><span class="line">appendfilename <span class="string">&quot;appendonly_6380.aof&quot;</span></span><br><span class="line">cluster-enabled yes</span><br><span class="line">cluster-config-file /usr/local/redis/nodes<span class="number">-6380.</span>conf</span><br><span class="line">cluster-node-timeout <span class="number">15000</span></span><br><span class="line">cluster-replica-validity-factor <span class="number">10</span></span><br><span class="line">cluster-migration-barrier <span class="number">1</span></span><br><span class="line">cluster-require-full-coverage no</span><br></pre></td></tr></table></figure></li><li><p>这里开启了RDB和AOF混合持久化的模式，如果是Redis4.x版本需要改以下配置，Redis5.x版本默认开启混合持久化模式。另外<code>redis.conf</code>配置的中文版会在文末贴出。</p></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aof-use-rdb-preamble yes</span><br></pre></td></tr></table></figure><h2 id="4、启动实例"><a href="#4、启动实例" class="headerlink" title="4、启动实例"></a>4、启动实例</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/redis/bin/redis-server /usr/local/redis/config/redis6379.conf</span><br><span class="line">/usr/local/redis/bin/redis-server /usr/local/redis/config/redis6380.conf</span><br></pre></td></tr></table></figure><p><strong>按以上方式如法炮制，给另外2台机器安装好Redis并启动相应实例，查看每台机器进程是否启动。</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ps aux|grep redis</span><br><span class="line">root       <span class="number">2308</span>  <span class="number">0.2</span>  <span class="number">0.6</span> <span class="number">160552</span>  <span class="number">3352</span> ?        Ssl  <span class="number">14</span>:<span class="number">20</span>   <span class="number">0</span>:<span class="number">13</span> /usr/local/redis/bin/redis-server *:<span class="number">6379</span> [cluster]</span><br><span class="line">root       <span class="number">2313</span>  <span class="number">0.1</span>  <span class="number">0.6</span> <span class="number">156968</span>  <span class="number">3328</span> ?        Ssl  <span class="number">14</span>:<span class="number">20</span>   <span class="number">0</span>:<span class="number">13</span> /usr/local/redis/bin/redis-server *:<span class="number">6380</span> [cluster]</span><br></pre></td></tr></table></figure><h2 id="5、查看集群信息"><a href="#5、查看集群信息" class="headerlink" title="5、查看集群信息"></a>5、查看集群信息</h2><ol><li><p>进入Redis客户端，<code>-p</code> 参数是指定实例的启动端口，不加此参数默认就是6379端口。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/redis/bin/redis-cli -p <span class="number">6379</span></span><br></pre></td></tr></table></figure></li><li><p>查看集群信息，因为集群还未搭建完成，所以状态是失败的。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; cluster info</span><br><span class="line">cluster_state:fail</span><br><span class="line">cluster_slots_assigned:<span class="number">0</span></span><br><span class="line">cluster_slots_ok:<span class="number">0</span></span><br><span class="line">cluster_slots_pfail:<span class="number">0</span></span><br><span class="line">cluster_slots_fail:<span class="number">0</span></span><br><span class="line">cluster_known_nodes:<span class="number">1</span></span><br><span class="line">cluster_size:<span class="number">0</span></span><br><span class="line">cluster_current_epoch:<span class="number">0</span></span><br><span class="line">cluster_my_epoch:<span class="number">0</span></span><br><span class="line">cluster_stats_messages_sent:<span class="number">0</span></span><br><span class="line">cluster_stats_messages_received:<span class="number">0</span></span><br></pre></td></tr></table></figure></li><li><p>尝试写入数据，应该会报错。</p></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; <span class="built_in">set</span> hello world</span><br><span class="line">(error) CLUSTERDOWN The cluster is down</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://blog.csdn.net/chendaike/article/details/97235828">CentOS7下搭建 Redis-5.0.5集群环境</a></li><li><a href="https://www.bilibili.com/video/BV1RE411y7LV?from=search&seid=16920078600613328845">最详细的redis集群教程-过1024节的程序员必备的面试宝典【鲁班学院】</a></li></ul><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><ul><li>Redis配置中文版</li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br><span class="line">747</span><br><span class="line">748</span><br><span class="line">749</span><br><span class="line">750</span><br><span class="line">751</span><br><span class="line">752</span><br><span class="line">753</span><br><span class="line">754</span><br><span class="line">755</span><br><span class="line">756</span><br><span class="line">757</span><br><span class="line">758</span><br><span class="line">759</span><br><span class="line">760</span><br><span class="line">761</span><br><span class="line">762</span><br><span class="line">763</span><br><span class="line">764</span><br><span class="line">765</span><br><span class="line">766</span><br><span class="line">767</span><br><span class="line">768</span><br><span class="line">769</span><br><span class="line">770</span><br><span class="line">771</span><br><span class="line">772</span><br><span class="line">773</span><br><span class="line">774</span><br><span class="line">775</span><br><span class="line">776</span><br><span class="line">777</span><br><span class="line">778</span><br><span class="line">779</span><br><span class="line">780</span><br><span class="line">781</span><br><span class="line">782</span><br><span class="line">783</span><br><span class="line">784</span><br><span class="line">785</span><br><span class="line">786</span><br><span class="line">787</span><br><span class="line">788</span><br><span class="line">789</span><br><span class="line">790</span><br><span class="line">791</span><br><span class="line">792</span><br><span class="line">793</span><br><span class="line">794</span><br><span class="line">795</span><br><span class="line">796</span><br><span class="line">797</span><br><span class="line">798</span><br><span class="line">799</span><br><span class="line">800</span><br><span class="line">801</span><br><span class="line">802</span><br><span class="line">803</span><br><span class="line">804</span><br><span class="line">805</span><br><span class="line">806</span><br><span class="line">807</span><br><span class="line">808</span><br><span class="line">809</span><br><span class="line">810</span><br><span class="line">811</span><br><span class="line">812</span><br><span class="line">813</span><br><span class="line">814</span><br><span class="line">815</span><br><span class="line">816</span><br><span class="line">817</span><br><span class="line">818</span><br><span class="line">819</span><br><span class="line">820</span><br><span class="line">821</span><br><span class="line">822</span><br><span class="line">823</span><br><span class="line">824</span><br><span class="line">825</span><br><span class="line">826</span><br><span class="line">827</span><br><span class="line">828</span><br><span class="line">829</span><br><span class="line">830</span><br><span class="line">831</span><br><span class="line">832</span><br><span class="line">833</span><br><span class="line">834</span><br><span class="line">835</span><br><span class="line">836</span><br><span class="line">837</span><br><span class="line">838</span><br><span class="line">839</span><br><span class="line">840</span><br><span class="line">841</span><br><span class="line">842</span><br><span class="line">843</span><br><span class="line">844</span><br><span class="line">845</span><br><span class="line">846</span><br><span class="line">847</span><br><span class="line">848</span><br><span class="line">849</span><br><span class="line">850</span><br><span class="line">851</span><br><span class="line">852</span><br><span class="line">853</span><br><span class="line">854</span><br><span class="line">855</span><br><span class="line">856</span><br><span class="line">857</span><br><span class="line">858</span><br><span class="line">859</span><br><span class="line">860</span><br><span class="line">861</span><br><span class="line">862</span><br><span class="line">863</span><br><span class="line">864</span><br><span class="line">865</span><br><span class="line">866</span><br><span class="line">867</span><br><span class="line">868</span><br><span class="line">869</span><br><span class="line">870</span><br><span class="line">871</span><br><span class="line">872</span><br><span class="line">873</span><br><span class="line">874</span><br><span class="line">875</span><br><span class="line">876</span><br><span class="line">877</span><br><span class="line">878</span><br><span class="line">879</span><br><span class="line">880</span><br><span class="line">881</span><br><span class="line">882</span><br><span class="line">883</span><br><span class="line">884</span><br><span class="line">885</span><br><span class="line">886</span><br><span class="line">887</span><br><span class="line">888</span><br><span class="line">889</span><br><span class="line">890</span><br><span class="line">891</span><br><span class="line">892</span><br><span class="line">893</span><br><span class="line">894</span><br><span class="line">895</span><br><span class="line">896</span><br><span class="line">897</span><br><span class="line">898</span><br><span class="line">899</span><br><span class="line">900</span><br><span class="line">901</span><br><span class="line">902</span><br><span class="line">903</span><br><span class="line">904</span><br><span class="line">905</span><br><span class="line">906</span><br><span class="line">907</span><br><span class="line">908</span><br><span class="line">909</span><br><span class="line">910</span><br><span class="line">911</span><br><span class="line">912</span><br><span class="line">913</span><br><span class="line">914</span><br><span class="line">915</span><br><span class="line">916</span><br><span class="line">917</span><br><span class="line">918</span><br><span class="line">919</span><br><span class="line">920</span><br><span class="line">921</span><br><span class="line">922</span><br><span class="line">923</span><br><span class="line">924</span><br><span class="line">925</span><br><span class="line">926</span><br><span class="line">927</span><br><span class="line">928</span><br><span class="line">929</span><br><span class="line">930</span><br><span class="line">931</span><br><span class="line">932</span><br><span class="line">933</span><br><span class="line">934</span><br><span class="line">935</span><br><span class="line">936</span><br><span class="line">937</span><br><span class="line">938</span><br><span class="line">939</span><br><span class="line">940</span><br><span class="line">941</span><br><span class="line">942</span><br><span class="line">943</span><br><span class="line">944</span><br><span class="line">945</span><br><span class="line">946</span><br><span class="line">947</span><br><span class="line">948</span><br><span class="line">949</span><br><span class="line">950</span><br><span class="line">951</span><br><span class="line">952</span><br><span class="line">953</span><br><span class="line">954</span><br><span class="line">955</span><br><span class="line">956</span><br><span class="line">957</span><br><span class="line">958</span><br><span class="line">959</span><br><span class="line">960</span><br><span class="line">961</span><br><span class="line">962</span><br><span class="line">963</span><br><span class="line">964</span><br><span class="line">965</span><br><span class="line">966</span><br><span class="line">967</span><br><span class="line">968</span><br><span class="line">969</span><br><span class="line">970</span><br><span class="line">971</span><br><span class="line">972</span><br><span class="line">973</span><br><span class="line">974</span><br><span class="line">975</span><br><span class="line">976</span><br><span class="line">977</span><br><span class="line">978</span><br><span class="line">979</span><br><span class="line">980</span><br><span class="line">981</span><br><span class="line">982</span><br><span class="line">983</span><br><span class="line">984</span><br><span class="line">985</span><br><span class="line">986</span><br><span class="line">987</span><br><span class="line">988</span><br><span class="line">989</span><br><span class="line">990</span><br><span class="line">991</span><br><span class="line">992</span><br><span class="line">993</span><br><span class="line">994</span><br><span class="line">995</span><br><span class="line">996</span><br><span class="line">997</span><br><span class="line">998</span><br><span class="line">999</span><br><span class="line">1000</span><br><span class="line">1001</span><br><span class="line">1002</span><br><span class="line">1003</span><br><span class="line">1004</span><br><span class="line">1005</span><br><span class="line">1006</span><br><span class="line">1007</span><br><span class="line">1008</span><br><span class="line">1009</span><br><span class="line">1010</span><br><span class="line">1011</span><br><span class="line">1012</span><br><span class="line">1013</span><br><span class="line">1014</span><br><span class="line">1015</span><br><span class="line">1016</span><br><span class="line">1017</span><br><span class="line">1018</span><br><span class="line">1019</span><br><span class="line">1020</span><br><span class="line">1021</span><br><span class="line">1022</span><br><span class="line">1023</span><br><span class="line">1024</span><br><span class="line">1025</span><br><span class="line">1026</span><br><span class="line">1027</span><br><span class="line">1028</span><br><span class="line">1029</span><br><span class="line">1030</span><br><span class="line">1031</span><br><span class="line">1032</span><br><span class="line">1033</span><br><span class="line">1034</span><br><span class="line">1035</span><br><span class="line">1036</span><br><span class="line">1037</span><br><span class="line">1038</span><br><span class="line">1039</span><br><span class="line">1040</span><br><span class="line">1041</span><br><span class="line">1042</span><br><span class="line">1043</span><br><span class="line">1044</span><br><span class="line">1045</span><br><span class="line">1046</span><br><span class="line">1047</span><br><span class="line">1048</span><br><span class="line">1049</span><br><span class="line">1050</span><br><span class="line">1051</span><br><span class="line">1052</span><br><span class="line">1053</span><br><span class="line">1054</span><br><span class="line">1055</span><br><span class="line">1056</span><br><span class="line">1057</span><br><span class="line">1058</span><br><span class="line">1059</span><br><span class="line">1060</span><br><span class="line">1061</span><br><span class="line">1062</span><br><span class="line">1063</span><br><span class="line">1064</span><br><span class="line">1065</span><br><span class="line">1066</span><br><span class="line">1067</span><br><span class="line">1068</span><br><span class="line">1069</span><br><span class="line">1070</span><br><span class="line">1071</span><br><span class="line">1072</span><br><span class="line">1073</span><br><span class="line">1074</span><br><span class="line">1075</span><br><span class="line">1076</span><br><span class="line">1077</span><br><span class="line">1078</span><br><span class="line">1079</span><br><span class="line">1080</span><br><span class="line">1081</span><br><span class="line">1082</span><br><span class="line">1083</span><br><span class="line">1084</span><br><span class="line">1085</span><br><span class="line">1086</span><br><span class="line">1087</span><br><span class="line">1088</span><br><span class="line">1089</span><br><span class="line">1090</span><br><span class="line">1091</span><br><span class="line">1092</span><br><span class="line">1093</span><br><span class="line">1094</span><br><span class="line">1095</span><br><span class="line">1096</span><br><span class="line">1097</span><br><span class="line">1098</span><br><span class="line">1099</span><br><span class="line">1100</span><br><span class="line">1101</span><br><span class="line">1102</span><br><span class="line">1103</span><br><span class="line">1104</span><br><span class="line">1105</span><br><span class="line">1106</span><br><span class="line">1107</span><br><span class="line">1108</span><br><span class="line">1109</span><br><span class="line">1110</span><br><span class="line">1111</span><br><span class="line">1112</span><br><span class="line">1113</span><br><span class="line">1114</span><br><span class="line">1115</span><br><span class="line">1116</span><br><span class="line">1117</span><br><span class="line">1118</span><br><span class="line">1119</span><br><span class="line">1120</span><br><span class="line">1121</span><br><span class="line">1122</span><br><span class="line">1123</span><br><span class="line">1124</span><br><span class="line">1125</span><br><span class="line">1126</span><br><span class="line">1127</span><br><span class="line">1128</span><br><span class="line">1129</span><br><span class="line">1130</span><br><span class="line">1131</span><br><span class="line">1132</span><br><span class="line">1133</span><br><span class="line">1134</span><br><span class="line">1135</span><br><span class="line">1136</span><br><span class="line">1137</span><br><span class="line">1138</span><br><span class="line">1139</span><br><span class="line">1140</span><br><span class="line">1141</span><br><span class="line">1142</span><br><span class="line">1143</span><br><span class="line">1144</span><br><span class="line">1145</span><br><span class="line">1146</span><br><span class="line">1147</span><br><span class="line">1148</span><br><span class="line">1149</span><br><span class="line">1150</span><br><span class="line">1151</span><br><span class="line">1152</span><br><span class="line">1153</span><br><span class="line">1154</span><br><span class="line">1155</span><br><span class="line">1156</span><br><span class="line">1157</span><br><span class="line">1158</span><br><span class="line">1159</span><br><span class="line">1160</span><br><span class="line">1161</span><br><span class="line">1162</span><br><span class="line">1163</span><br><span class="line">1164</span><br><span class="line">1165</span><br><span class="line">1166</span><br><span class="line">1167</span><br><span class="line">1168</span><br><span class="line">1169</span><br><span class="line">1170</span><br><span class="line">1171</span><br><span class="line">1172</span><br><span class="line">1173</span><br><span class="line">1174</span><br><span class="line">1175</span><br><span class="line">1176</span><br><span class="line">1177</span><br><span class="line">1178</span><br><span class="line">1179</span><br><span class="line">1180</span><br><span class="line">1181</span><br><span class="line">1182</span><br><span class="line">1183</span><br><span class="line">1184</span><br><span class="line">1185</span><br><span class="line">1186</span><br><span class="line">1187</span><br><span class="line">1188</span><br><span class="line">1189</span><br><span class="line">1190</span><br><span class="line">1191</span><br><span class="line">1192</span><br><span class="line">1193</span><br><span class="line">1194</span><br><span class="line">1195</span><br><span class="line">1196</span><br><span class="line">1197</span><br><span class="line">1198</span><br><span class="line">1199</span><br><span class="line">1200</span><br><span class="line">1201</span><br><span class="line">1202</span><br><span class="line">1203</span><br><span class="line">1204</span><br><span class="line">1205</span><br><span class="line">1206</span><br><span class="line">1207</span><br><span class="line">1208</span><br><span class="line">1209</span><br><span class="line">1210</span><br><span class="line">1211</span><br><span class="line">1212</span><br><span class="line">1213</span><br><span class="line">1214</span><br><span class="line">1215</span><br><span class="line">1216</span><br><span class="line">1217</span><br><span class="line">1218</span><br><span class="line">1219</span><br><span class="line">1220</span><br><span class="line">1221</span><br><span class="line">1222</span><br><span class="line">1223</span><br><span class="line">1224</span><br><span class="line">1225</span><br><span class="line">1226</span><br><span class="line">1227</span><br><span class="line">1228</span><br><span class="line">1229</span><br><span class="line">1230</span><br><span class="line">1231</span><br><span class="line">1232</span><br><span class="line">1233</span><br><span class="line">1234</span><br><span class="line">1235</span><br><span class="line">1236</span><br><span class="line">1237</span><br><span class="line">1238</span><br><span class="line">1239</span><br><span class="line">1240</span><br><span class="line">1241</span><br><span class="line">1242</span><br><span class="line">1243</span><br><span class="line">1244</span><br><span class="line">1245</span><br><span class="line">1246</span><br><span class="line">1247</span><br><span class="line">1248</span><br><span class="line">1249</span><br><span class="line">1250</span><br><span class="line">1251</span><br><span class="line">1252</span><br><span class="line">1253</span><br><span class="line">1254</span><br><span class="line">1255</span><br><span class="line">1256</span><br><span class="line">1257</span><br><span class="line">1258</span><br><span class="line">1259</span><br><span class="line">1260</span><br><span class="line">1261</span><br><span class="line">1262</span><br><span class="line">1263</span><br><span class="line">1264</span><br><span class="line">1265</span><br><span class="line">1266</span><br><span class="line">1267</span><br><span class="line">1268</span><br><span class="line">1269</span><br><span class="line">1270</span><br><span class="line">1271</span><br><span class="line">1272</span><br><span class="line">1273</span><br><span class="line">1274</span><br><span class="line">1275</span><br><span class="line">1276</span><br><span class="line">1277</span><br><span class="line">1278</span><br><span class="line">1279</span><br><span class="line">1280</span><br><span class="line">1281</span><br><span class="line">1282</span><br><span class="line">1283</span><br><span class="line">1284</span><br><span class="line">1285</span><br><span class="line">1286</span><br><span class="line">1287</span><br><span class="line">1288</span><br><span class="line">1289</span><br><span class="line">1290</span><br><span class="line">1291</span><br><span class="line">1292</span><br><span class="line">1293</span><br><span class="line">1294</span><br><span class="line">1295</span><br><span class="line">1296</span><br><span class="line">1297</span><br><span class="line">1298</span><br><span class="line">1299</span><br><span class="line">1300</span><br><span class="line">1301</span><br><span class="line">1302</span><br><span class="line">1303</span><br><span class="line">1304</span><br><span class="line">1305</span><br><span class="line">1306</span><br><span class="line">1307</span><br><span class="line">1308</span><br><span class="line">1309</span><br><span class="line">1310</span><br><span class="line">1311</span><br><span class="line">1312</span><br><span class="line">1313</span><br><span class="line">1314</span><br><span class="line">1315</span><br><span class="line">1316</span><br><span class="line">1317</span><br><span class="line">1318</span><br><span class="line">1319</span><br><span class="line">1320</span><br><span class="line">1321</span><br><span class="line">1322</span><br><span class="line">1323</span><br><span class="line">1324</span><br><span class="line">1325</span><br><span class="line">1326</span><br><span class="line">1327</span><br><span class="line">1328</span><br><span class="line">1329</span><br><span class="line">1330</span><br><span class="line">1331</span><br><span class="line">1332</span><br><span class="line">1333</span><br><span class="line">1334</span><br><span class="line">1335</span><br><span class="line">1336</span><br><span class="line">1337</span><br><span class="line">1338</span><br><span class="line">1339</span><br><span class="line">1340</span><br><span class="line">1341</span><br><span class="line">1342</span><br><span class="line">1343</span><br><span class="line">1344</span><br><span class="line">1345</span><br><span class="line">1346</span><br><span class="line">1347</span><br><span class="line">1348</span><br><span class="line">1349</span><br><span class="line">1350</span><br><span class="line">1351</span><br><span class="line">1352</span><br><span class="line">1353</span><br><span class="line">1354</span><br><span class="line">1355</span><br><span class="line">1356</span><br><span class="line">1357</span><br><span class="line">1358</span><br><span class="line">1359</span><br><span class="line">1360</span><br><span class="line">1361</span><br><span class="line">1362</span><br><span class="line">1363</span><br><span class="line">1364</span><br><span class="line">1365</span><br><span class="line">1366</span><br><span class="line">1367</span><br><span class="line">1368</span><br><span class="line">1369</span><br><span class="line">1370</span><br><span class="line">1371</span><br><span class="line">1372</span><br><span class="line">1373</span><br><span class="line">1374</span><br><span class="line">1375</span><br><span class="line">1376</span><br><span class="line">1377</span><br><span class="line">1378</span><br><span class="line">1379</span><br><span class="line">1380</span><br><span class="line">1381</span><br><span class="line">1382</span><br><span class="line">1383</span><br><span class="line">1384</span><br><span class="line">1385</span><br><span class="line">1386</span><br><span class="line">1387</span><br><span class="line">1388</span><br><span class="line">1389</span><br><span class="line">1390</span><br><span class="line">1391</span><br><span class="line">1392</span><br><span class="line">1393</span><br><span class="line">1394</span><br><span class="line">1395</span><br><span class="line">1396</span><br><span class="line">1397</span><br><span class="line">1398</span><br><span class="line">1399</span><br><span class="line">1400</span><br><span class="line">1401</span><br><span class="line">1402</span><br><span class="line">1403</span><br><span class="line">1404</span><br><span class="line">1405</span><br><span class="line">1406</span><br><span class="line">1407</span><br><span class="line">1408</span><br><span class="line">1409</span><br><span class="line">1410</span><br><span class="line">1411</span><br><span class="line">1412</span><br><span class="line">1413</span><br><span class="line">1414</span><br><span class="line">1415</span><br><span class="line">1416</span><br><span class="line">1417</span><br><span class="line">1418</span><br><span class="line">1419</span><br><span class="line">1420</span><br><span class="line">1421</span><br><span class="line">1422</span><br><span class="line">1423</span><br><span class="line">1424</span><br><span class="line">1425</span><br><span class="line">1426</span><br><span class="line">1427</span><br><span class="line">1428</span><br><span class="line">1429</span><br><span class="line">1430</span><br><span class="line">1431</span><br><span class="line">1432</span><br><span class="line">1433</span><br><span class="line">1434</span><br><span class="line">1435</span><br><span class="line">1436</span><br><span class="line">1437</span><br><span class="line">1438</span><br><span class="line">1439</span><br><span class="line">1440</span><br><span class="line">1441</span><br><span class="line">1442</span><br><span class="line">1443</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Redis configuration file example.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Note that in order to read the configuration file, Redis must be</span></span><br><span class="line"><span class="comment"># started with the file path as first argument:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># ./redis-server /path/to/redis.conf</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Note on units: when memory size is needed, it is possible to specify</span></span><br><span class="line"><span class="comment"># it in the usual form of 1k 5GB 4M and so forth:</span></span><br><span class="line"><span class="comment"># 配置大小单位,开头定义了一些基本的度量单位，只支持bytes，不支持bit  对大小写不敏感</span></span><br><span class="line"><span class="comment"># 1k =&gt; 1000 bytes</span></span><br><span class="line"><span class="comment"># 1kb =&gt; 1024 bytes</span></span><br><span class="line"><span class="comment"># 1m =&gt; 1000000 bytes</span></span><br><span class="line"><span class="comment"># 1mb =&gt; 1024*1024 bytes</span></span><br><span class="line"><span class="comment"># 1g =&gt; 1000000000 bytes</span></span><br><span class="line"><span class="comment"># 1gb =&gt; 1024*1024*1024 bytes</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># units are case insensitive so 1GB 1Gb 1gB are all the same.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">################################## INCLUDES ###################################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Include one or more other config files here.  This is useful if you</span></span><br><span class="line"><span class="comment"># have a standard template that goes to all Redis servers but also need</span></span><br><span class="line"><span class="comment"># to customize a few per-server settings.  Include files can include</span></span><br><span class="line"><span class="comment"># other files, so use this wisely.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Notice option &quot;include&quot; won&#x27;t be rewritten by command &quot;CONFIG REWRITE&quot;</span></span><br><span class="line"><span class="comment"># from admin or Redis Sentinel. Since Redis always uses the last processed</span></span><br><span class="line"><span class="comment"># line as value of a configuration directive, you&#x27;d better put includes</span></span><br><span class="line"><span class="comment"># at the beginning of this file to avoid overwriting config change at runtime.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># If instead you are interested in using includes to override configuration</span></span><br><span class="line"><span class="comment"># options, it is better to use include as the last line.</span></span><br><span class="line"><span class="comment"># 引入其他文件</span></span><br><span class="line"><span class="comment"># include /path/to/local.conf</span></span><br><span class="line"><span class="comment"># include /path/to/other.conf</span></span><br><span class="line"></span><br><span class="line"><span class="comment">################################## MODULES #####################################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Load modules at startup. If the server is not able to load modules</span></span><br><span class="line"><span class="comment"># it will abort. It is possible to use multiple loadmodule directives.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># loadmodule /path/to/my_module.so</span></span><br><span class="line"><span class="comment"># loadmodule /path/to/other_module.so</span></span><br><span class="line"></span><br><span class="line"><span class="comment">################################## NETWORK #####################################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># By default, if no &quot;bind&quot; configuration directive is specified, Redis listens</span></span><br><span class="line"><span class="comment"># for connections from all the network interfaces available on the server.</span></span><br><span class="line"><span class="comment"># It is possible to listen to just one or multiple selected interfaces using</span></span><br><span class="line"><span class="comment"># the &quot;bind&quot; configuration directive, followed by one or more IP addresses.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Examples:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># bind 192.168.1.100 10.0.0.1</span></span><br><span class="line"><span class="comment"># bind 127.0.0.1 ::1</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># ~~~ WARNING ~~~ If the computer running Redis is directly exposed to the</span></span><br><span class="line"><span class="comment"># internet, binding to all the interfaces is dangerous and will expose the</span></span><br><span class="line"><span class="comment"># instance to everybody on the internet. So by default we uncomment the</span></span><br><span class="line"><span class="comment"># following bind directive, that will force Redis to listen only into</span></span><br><span class="line"><span class="comment"># the IPv4 loopback interface address (this means Redis will be able to</span></span><br><span class="line"><span class="comment"># accept connections only from clients running into the same computer it</span></span><br><span class="line"><span class="comment"># is running).</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># IF YOU ARE SURE YOU WANT YOUR INSTANCE TO LISTEN TO ALL THE INTERFACES</span></span><br><span class="line"><span class="comment"># JUST COMMENT THE FOLLOWING LINE.</span></span><br><span class="line"><span class="comment"># ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span></span><br><span class="line"><span class="comment"># 绑定Ip   指定可以连接本实例Redis的ip  如果注释（删掉）则任意IP都可以连接</span></span><br><span class="line"><span class="attr">bind</span> <span class="string">127.0.0.1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Protected mode is a layer of security protection, in order to avoid that</span></span><br><span class="line"><span class="comment"># Redis instances left open on the internet are accessed and exploited.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># When protected mode is on and if:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 1) The server is not binding explicitly to a set of addresses using the</span></span><br><span class="line"><span class="comment">#    &quot;bind&quot; directive.</span></span><br><span class="line"><span class="comment"># 2) No password is configured.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># The server only accepts connections from clients connecting from the</span></span><br><span class="line"><span class="comment"># IPv4 and IPv6 loopback addresses 127.0.0.1 and ::1, and from Unix domain</span></span><br><span class="line"><span class="comment"># sockets.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># By default protected mode is enabled. You should disable it only if</span></span><br><span class="line"><span class="comment"># you are sure you want clients from other hosts to connect to Redis</span></span><br><span class="line"><span class="comment"># even if no authentication is configured, nor a specific set of interfaces</span></span><br><span class="line"><span class="comment"># are explicitly listed using the &quot;bind&quot; directive.</span></span><br><span class="line"><span class="comment">#禁止外网访问redis，如果启用了，即使注释掉了bind 127.0.0.1，再访问redis的时候还是无法连接的</span></span><br><span class="line"><span class="comment">#它启用的条件有两个，第一是没有使用bind，第二是没有设置访问密码。</span></span><br><span class="line"><span class="meta">protected-mode</span> <span class="string">yes</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Accept connections on the specified port, default is 6379 (IANA #815344).</span></span><br><span class="line"><span class="comment"># If port 0 is specified Redis will not listen on a TCP socket.</span></span><br><span class="line"><span class="comment">#指定Redis的端口</span></span><br><span class="line"><span class="attr">port</span> <span class="string">6379</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># TCP listen() backlog.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># In high requests-per-second environments you need an high backlog in order</span></span><br><span class="line"><span class="comment"># to avoid slow clients connections issues. Note that the Linux kernel</span></span><br><span class="line"><span class="comment"># will silently truncate it to the value of /proc/sys/net/core/somaxconn so</span></span><br><span class="line"><span class="comment"># make sure to raise both the value of somaxconn and tcp_max_syn_backlog</span></span><br><span class="line"><span class="comment"># in order to get the desired effect.</span></span><br><span class="line"><span class="comment"># 此参数确定了TCP连接中已完成队列(完成三次握手之后)的长度， </span></span><br><span class="line"><span class="comment"># 当然此值必须不大于Linux系统定义的/proc/sys/net/core/somaxconn值，默认是511，</span></span><br><span class="line"><span class="comment"># 而Linux的默认参数值是128。当系统并发量大并且客户端速度缓慢的时候，可以将这二个参数一起参考设定。</span></span><br><span class="line"><span class="comment"># 在高并发环境下你需要一个高backlog值来避免慢客户端连接问题</span></span><br><span class="line"><span class="meta">tcp-backlog</span> <span class="string">511</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Unix socket.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Specify the path for the Unix socket that will be used to listen for</span></span><br><span class="line"><span class="comment"># incoming connections. There is no default, so Redis will not listen</span></span><br><span class="line"><span class="comment"># on a unix socket when not specified.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># unixsocket /tmp/redis.sock</span></span><br><span class="line"><span class="comment"># unixsocketperm 700</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Close the connection after a client is idle for N seconds (0 to disable)</span></span><br><span class="line"><span class="comment"># 当客户端闲置多长时间后关闭连接，如果指定为0，表示关闭该功能</span></span><br><span class="line"><span class="attr">timeout</span> <span class="string">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># TCP keepalive.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># If non-zero, use SO_KEEPALIVE to send TCP ACKs to clients in absence</span></span><br><span class="line"><span class="comment"># of communication. This is useful for two reasons:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 1) Detect dead peers.</span></span><br><span class="line"><span class="comment"># 2) Take the connection alive from the point of view of network</span></span><br><span class="line"><span class="comment">#    equipment in the middle.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># On Linux, the specified value (in seconds) is the period used to send ACKs.</span></span><br><span class="line"><span class="comment"># Note that to close the connection the double of the time is needed.</span></span><br><span class="line"><span class="comment"># On other kernels the period depends on the kernel configuration.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># A reasonable value for this option is 300 seconds, which is the new</span></span><br><span class="line"><span class="comment"># Redis default starting with Redis 3.2.1.</span></span><br><span class="line"><span class="comment"># 设置多长时间检测死连接 单位为秒，如果设置为0，则不会进行Keepalive检测</span></span><br><span class="line"><span class="meta">tcp-keepalive</span> <span class="string">300</span></span><br><span class="line"></span><br><span class="line"><span class="comment">################################# GENERAL #####################################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># By default Redis does not run as a daemon. Use &#x27;yes&#x27; if you need it.</span></span><br><span class="line"><span class="comment"># Note that Redis will write a pid file in /var/run/redis.pid when daemonized.</span></span><br><span class="line"><span class="comment"># 是否以守护进程启动</span></span><br><span class="line"><span class="attr">daemonize</span> <span class="string">no</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># If you run Redis from upstart or systemd, Redis can interact with your</span></span><br><span class="line"><span class="comment"># supervision tree. Options:</span></span><br><span class="line"><span class="comment">#   supervised no      - no supervision interaction</span></span><br><span class="line"><span class="comment">#   supervised upstart - signal upstart by putting Redis into SIGSTOP mode</span></span><br><span class="line"><span class="comment">#   supervised systemd - signal systemd by writing READY=1 to $NOTIFY_SOCKET</span></span><br><span class="line"><span class="comment">#   supervised auto    - detect upstart or systemd method based on</span></span><br><span class="line"><span class="comment">#                        UPSTART_JOB or NOTIFY_SOCKET environment variables</span></span><br><span class="line"><span class="comment"># <span class="doctag">Note:</span> these supervision methods only signal &quot;process is ready.&quot;</span></span><br><span class="line"><span class="comment">#       They do not enable continuous liveness pings back to your supervisor.</span></span><br><span class="line"><span class="comment">#可以通过upstart和systemd管理Redis守护进程，这个参数是和具体的操作系统相关的。</span></span><br><span class="line"><span class="attr">supervised</span> <span class="string">no</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># If a pid file is specified, Redis writes it where specified at startup</span></span><br><span class="line"><span class="comment"># and removes it at exit.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># When the server runs non daemonized, no pid file is created if none is</span></span><br><span class="line"><span class="comment"># specified in the configuration. When the server is daemonized, the pid file</span></span><br><span class="line"><span class="comment"># is used even if not specified, defaulting to &quot;/var/run/redis.pid&quot;.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Creating a pid file is best effort: if Redis is not able to create it</span></span><br><span class="line"><span class="comment"># nothing bad happens, the server will start and run normally.</span></span><br><span class="line"><span class="comment">#当Redis以守护进程方式运行时，Redis默认会把pid写入/var/run/redis.pid文件，可以通过pidfile指定</span></span><br><span class="line"><span class="attr">pidfile</span> <span class="string">/var/run/redis_6379.pid</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Specify the server verbosity level.</span></span><br><span class="line"><span class="comment"># This can be one of:</span></span><br><span class="line"><span class="comment"># debug (a lot of information, useful for development/testing)</span></span><br><span class="line"><span class="comment"># verbose (many rarely useful info, but not a mess like the debug level)</span></span><br><span class="line"><span class="comment"># notice (moderately verbose, what you want in production probably)</span></span><br><span class="line"><span class="comment"># warning (only very important / critical messages are logged)</span></span><br><span class="line"><span class="comment">#设置日志的级别  debug、verbose、notice、warning，默认为verbose</span></span><br><span class="line"><span class="attr">loglevel</span> <span class="string">notice</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Specify the log file name. Also the empty string can be used to force</span></span><br><span class="line"><span class="comment"># Redis to log on the standard output. Note that if you use standard</span></span><br><span class="line"><span class="comment"># output for logging but daemonize, logs will be sent to /dev/null</span></span><br><span class="line"><span class="comment">#日志文件的位置，当指定为空字符串时，为标准输出，如果redis已守护进程模式运行，那么日志将会输出到  /dev/null 。</span></span><br><span class="line"><span class="attr">logfile</span> <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># To enable logging to the system logger, just set &#x27;syslog-enabled&#x27; to yes,</span></span><br><span class="line"><span class="comment"># and optionally update the other syslog parameters to suit your needs.</span></span><br><span class="line"><span class="comment"># syslog-enabled no</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Specify the syslog identity.</span></span><br><span class="line"><span class="comment"># syslog-ident redis</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Specify the syslog facility. Must be USER or between LOCAL0-LOCAL7.</span></span><br><span class="line"><span class="comment"># syslog-facility local0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Set the number of databases. The default database is DB 0, you can select</span></span><br><span class="line"><span class="comment"># a different one on a per-connection basis using SELECT &lt;dbid&gt; where</span></span><br><span class="line"><span class="comment"># dbid is a number between 0 and &#x27;databases&#x27;-1</span></span><br><span class="line"><span class="comment"># 设置数据库的数目。默认的数据库是DB 0 ，可以在每个连接上使用select  &lt;dbid&gt; 命令选择一个不同的数据库，dbid是一个介于0到databases - 1 之间的数值。</span></span><br><span class="line"><span class="attr">databases</span> <span class="string">16</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># By default Redis shows an ASCII art logo only when started to log to the</span></span><br><span class="line"><span class="comment"># standard output and if the standard output is a TTY. Basically this means</span></span><br><span class="line"><span class="comment"># that normally a logo is displayed only in interactive sessions.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># However it is possible to force the pre-4.0 behavior and always show a</span></span><br><span class="line"><span class="comment"># ASCII art logo in startup logs by setting the following option to yes.</span></span><br><span class="line"><span class="meta">always-show-logo</span> <span class="string">yes</span></span><br><span class="line"></span><br><span class="line"><span class="comment">################################ SNAPSHOTTING  ################################</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Save the DB on disk:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#   save &lt;seconds&gt; &lt;changes&gt;</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#   Will save the DB if both the given number of seconds and the given</span></span><br><span class="line"><span class="comment">#   number of write operations against the DB occurred.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#   In the example below the behaviour will be to save:</span></span><br><span class="line"><span class="comment">#   after 900 sec (15 min) if at least 1 key changed</span></span><br><span class="line"><span class="comment">#   after 300 sec (5 min) if at least 10 keys changed</span></span><br><span class="line"><span class="comment">#   after 60 sec if at least 10000 keys changed</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#   <span class="doctag">Note:</span> you can disable saving completely by commenting out all &quot;save&quot; lines.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#   It is also possible to remove all the previously configured save</span></span><br><span class="line"><span class="comment">#   points by adding a save directive with a single empty string argument</span></span><br><span class="line"><span class="comment">#   like in the following example:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#   save &quot;&quot;</span></span><br><span class="line"><span class="comment"># 指定在多长时间内，有多少次更新操作，就将数据同步到数据文件，可以多个条件配合</span></span><br><span class="line"><span class="comment"># 这里表示900秒（15分钟）内有1个更改，300秒（5分钟）内有10个更改以及60秒内有10000个更改</span></span><br><span class="line"><span class="comment"># 如果想禁用RDB持久化的策略，只要不设置任何save指令，或者给save传入一个空字符串参数也可以</span></span><br><span class="line"><span class="attr">save</span> <span class="string">900 1</span></span><br><span class="line"><span class="attr">save</span> <span class="string">300 10</span></span><br><span class="line"><span class="attr">save</span> <span class="string">60 10000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># By default Redis will stop accepting writes if RDB snapshots are enabled</span></span><br><span class="line"><span class="comment"># (at least one save point) and the latest background save failed.</span></span><br><span class="line"><span class="comment"># This will make the user aware (in a hard way) that data is not persisting</span></span><br><span class="line"><span class="comment"># on disk properly, otherwise chances are that no one will notice and some</span></span><br><span class="line"><span class="comment"># disaster will happen.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># If the background saving process will start working again Redis will</span></span><br><span class="line"><span class="comment"># automatically allow writes again.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># However if you have setup your proper monitoring of the Redis server</span></span><br><span class="line"><span class="comment"># and persistence, you may want to disable this feature so that Redis will</span></span><br><span class="line"><span class="comment"># continue to work as usual even if there are problems with disk,</span></span><br><span class="line"><span class="comment"># permissions, and so forth.</span></span><br><span class="line"><span class="comment"># 默认情况下，如果 redis 最后一次的后台保存失败，redis 将停止接受写操作，这样以一种强硬的方式让用户知道数据不能正确的持久化到磁盘， </span></span><br><span class="line"><span class="comment"># 否则就会没人注意到灾难的发生。 如果后台保存进程重新启动工作了，redis 也将自动的允许写操作。</span></span><br><span class="line"><span class="comment"># 如果配置成no，表示你不在乎数据不一致或者有其他的手段发现和控制</span></span><br><span class="line"><span class="meta">stop-writes-on-bgsave-error</span> <span class="string">yes</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Compress string objects using LZF when dump .rdb databases?</span></span><br><span class="line"><span class="comment"># For default that&#x27;s set to &#x27;yes&#x27; as it&#x27;s almost always a win.</span></span><br><span class="line"><span class="comment"># If you want to save some CPU in the saving child set it to &#x27;no&#x27; but</span></span><br><span class="line"><span class="comment"># the dataset will likely be bigger if you have compressible values or keys.</span></span><br><span class="line"><span class="comment"># 对于存储到磁盘中的快照(rdb)，可以设置是否进行压缩存储。如果是的话，redis会采用</span></span><br><span class="line"><span class="comment"># LZF算法进行压缩。如果你不想消耗CPU来进行压缩的话，可以设置为关闭此功能</span></span><br><span class="line"><span class="attr">rdbcompression</span> <span class="string">yes</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Since version 5 of RDB a CRC64 checksum is placed at the end of the file.</span></span><br><span class="line"><span class="comment"># This makes the format more resistant to corruption but there is a performance</span></span><br><span class="line"><span class="comment"># hit to pay (around 10%) when saving and loading RDB files, so you can disable it</span></span><br><span class="line"><span class="comment"># for maximum performances.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># RDB files created with checksum disabled have a checksum of zero that will</span></span><br><span class="line"><span class="comment"># tell the loading code to skip the check.</span></span><br><span class="line"><span class="comment"># 在存储快照后，还可以让redis使用CRC64算法来进行数据校验，但是这样做会增加大约</span></span><br><span class="line"><span class="comment"># 10%的性能消耗，如果希望获取到最大的性能提升，可以关闭此功能</span></span><br><span class="line"><span class="attr">rdbchecksum</span> <span class="string">yes</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># The filename where to dump the DB</span></span><br><span class="line"><span class="comment">#rdb文件的名字。</span></span><br><span class="line"><span class="attr">dbfilename</span> <span class="string">dump.rdb</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># The working directory.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># The DB will be written inside this directory, with the filename specified</span></span><br><span class="line"><span class="comment"># above using the &#x27;dbfilename&#x27; configuration directive.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># The Append Only File will also be created inside this directory.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Note that you must specify a directory here, not a file name.</span></span><br><span class="line"><span class="comment"># dbfilename文件存放目录。必须是一个目录，aof文件也会保存到该目录下。</span></span><br><span class="line"><span class="attr">dir</span> <span class="string">./</span></span><br><span class="line"></span><br><span class="line"><span class="comment">################################# REPLICATION #################################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Master-Replica replication. Use replicaof to make a Redis instance a copy of</span></span><br><span class="line"><span class="comment"># another Redis server. A few things to understand ASAP about Redis replication.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#   +------------------+      +---------------+</span></span><br><span class="line"><span class="comment">#   |      Master      | ---&gt; |    Replica    |</span></span><br><span class="line"><span class="comment">#   | (receive writes) |      |  (exact copy) |</span></span><br><span class="line"><span class="comment">#   +------------------+      +---------------+</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 1) Redis replication is asynchronous, but you can configure a master to</span></span><br><span class="line"><span class="comment">#    stop accepting writes if it appears to be not connected with at least</span></span><br><span class="line"><span class="comment">#    a given number of replicas.</span></span><br><span class="line"><span class="comment"># 2) Redis replicas are able to perform a partial resynchronization with the</span></span><br><span class="line"><span class="comment">#    master if the replication link is lost for a relatively small amount of</span></span><br><span class="line"><span class="comment">#    time. You may want to configure the replication backlog size (see the next</span></span><br><span class="line"><span class="comment">#    sections of this file) with a sensible value depending on your needs.</span></span><br><span class="line"><span class="comment"># 3) Replication is automatic and does not need user intervention. After a</span></span><br><span class="line"><span class="comment">#    network partition replicas automatically try to reconnect to masters</span></span><br><span class="line"><span class="comment">#    and resynchronize with them.</span></span><br><span class="line"><span class="comment">#设置当本机为slave服务时，设置master服务的IP地址及端口，在Redis启动时，它会自动从master进行数据同步</span></span><br><span class="line"><span class="comment"># replicaof &lt;masterip&gt; &lt;masterport&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># If the master is password protected (using the &quot;requirepass&quot; configuration</span></span><br><span class="line"><span class="comment"># directive below) it is possible to tell the replica to authenticate before</span></span><br><span class="line"><span class="comment"># starting the replication synchronization process, otherwise the master will</span></span><br><span class="line"><span class="comment"># refuse the replica request.</span></span><br><span class="line"><span class="comment">#当master服务设置了密码保护时，slave服务连接master的密码</span></span><br><span class="line"><span class="comment"># masterauth &lt;master-password&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># When a replica loses its connection with the master, or when the replication</span></span><br><span class="line"><span class="comment"># is still in progress, the replica can act in two different ways:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 1) if replica-serve-stale-data is set to &#x27;yes&#x27; (the default) the replica will</span></span><br><span class="line"><span class="comment">#    still reply to client requests, possibly with out of date data, or the</span></span><br><span class="line"><span class="comment">#    data set may just be empty if this is the first synchronization.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 2) if replica-serve-stale-data is set to &#x27;no&#x27; the replica will reply with</span></span><br><span class="line"><span class="comment">#    an error &quot;SYNC with master in progress&quot; to all the kind of commands</span></span><br><span class="line"><span class="comment">#    but to INFO, replicaOF, AUTH, PING, SHUTDOWN, REPLCONF, ROLE, CONFIG,</span></span><br><span class="line"><span class="comment">#    SUBSCRIBE, UNSUBSCRIBE, PSUBSCRIBE, PUNSUBSCRIBE, PUBLISH, PUBSUB,</span></span><br><span class="line"><span class="comment">#    COMMAND, POST, HOST: and LATENCY.</span></span><br><span class="line"><span class="comment">#当一个slave与master失去联系时，或者复制正在进行的时候，slave应对请求的行为: </span></span><br><span class="line"><span class="comment">#如果为 yes（默认值） ，slave 仍然会应答客户端请求，但返回的数据可能是过时，或者数据可能是空的在第一次同步的时候</span></span><br><span class="line"><span class="comment">#如果为 no ，在你执行除了 info 和 salveof 之外的其他命令时，slave 都将返回一个 &quot;SYNC with master in progress&quot; 的错误。</span></span><br><span class="line"><span class="meta">replica-serve-stale-data</span> <span class="string">yes</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># You can configure a replica instance to accept writes or not. Writing against</span></span><br><span class="line"><span class="comment"># a replica instance may be useful to store some ephemeral data (because data</span></span><br><span class="line"><span class="comment"># written on a replica will be easily deleted after resync with the master) but</span></span><br><span class="line"><span class="comment"># may also cause problems if clients are writing to it because of a</span></span><br><span class="line"><span class="comment"># misconfiguration.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Since Redis 2.6 by default replicas are read-only.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># <span class="doctag">Note:</span> read only replicas are not designed to be exposed to untrusted clients</span></span><br><span class="line"><span class="comment"># on the internet. It&#x27;s just a protection layer against misuse of the instance.</span></span><br><span class="line"><span class="comment"># Still a read only replica exports by default all the administrative commands</span></span><br><span class="line"><span class="comment"># such as CONFIG, DEBUG, and so forth. To a limited extent you can improve</span></span><br><span class="line"><span class="comment"># security of read only replicas using &#x27;rename-command&#x27; to shadow all the</span></span><br><span class="line"><span class="comment"># administrative / dangerous commands.</span></span><br><span class="line"><span class="comment">#设置slave是否是只读的。从2.6版起，slave默认是只读的。</span></span><br><span class="line"><span class="meta">replica-read-only</span> <span class="string">yes</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Replication SYNC strategy: disk or socket.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># -------------------------------------------------------</span></span><br><span class="line"><span class="comment"># WARNING: DISKLESS REPLICATION IS EXPERIMENTAL CURRENTLY</span></span><br><span class="line"><span class="comment"># -------------------------------------------------------</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># New replicas and reconnecting replicas that are not able to continue the replication</span></span><br><span class="line"><span class="comment"># process just receiving differences, need to do what is called a &quot;full</span></span><br><span class="line"><span class="comment"># synchronization&quot;. An RDB file is transmitted from the master to the replicas.</span></span><br><span class="line"><span class="comment"># The transmission can happen in two different ways:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 1) Disk-backed: The Redis master creates a new process that writes the RDB</span></span><br><span class="line"><span class="comment">#                 file on disk. Later the file is transferred by the parent</span></span><br><span class="line"><span class="comment">#                 process to the replicas incrementally.</span></span><br><span class="line"><span class="comment"># 2) Diskless: The Redis master creates a new process that directly writes the</span></span><br><span class="line"><span class="comment">#              RDB file to replica sockets, without touching the disk at all.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># With disk-backed replication, while the RDB file is generated, more replicas</span></span><br><span class="line"><span class="comment"># can be queued and served with the RDB file as soon as the current child producing</span></span><br><span class="line"><span class="comment"># the RDB file finishes its work. With diskless replication instead once</span></span><br><span class="line"><span class="comment"># the transfer starts, new replicas arriving will be queued and a new transfer</span></span><br><span class="line"><span class="comment"># will start when the current one terminates.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># When diskless replication is used, the master waits a configurable amount of</span></span><br><span class="line"><span class="comment"># time (in seconds) before starting the transfer in the hope that multiple replicas</span></span><br><span class="line"><span class="comment"># will arrive and the transfer can be parallelized.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># With slow disks and fast (large bandwidth) networks, diskless replication</span></span><br><span class="line"><span class="comment"># works better.</span></span><br><span class="line"><span class="comment"># 主从数据复制是否使用无硬盘复制功能。</span></span><br><span class="line"><span class="meta">repl-diskless-sync</span> <span class="string">no</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># When diskless replication is enabled, it is possible to configure the delay</span></span><br><span class="line"><span class="comment"># the server waits in order to spawn the child that transfers the RDB via socket</span></span><br><span class="line"><span class="comment"># to the replicas.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># This is important since once the transfer starts, it is not possible to serve</span></span><br><span class="line"><span class="comment"># new replicas arriving, that will be queued for the next RDB transfer, so the server</span></span><br><span class="line"><span class="comment"># waits a delay in order to let more replicas arrive.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># The delay is specified in seconds, and by default is 5 seconds. To disable</span></span><br><span class="line"><span class="comment"># it entirely just set it to 0 seconds and the transfer will start ASAP.</span></span><br><span class="line"><span class="meta">repl-diskless-sync-delay</span> <span class="string">5</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Replicas send PINGs to server in a predefined interval. It&#x27;s possible to change</span></span><br><span class="line"><span class="comment"># this interval with the repl_ping_replica_period option. The default value is 10</span></span><br><span class="line"><span class="comment"># seconds.</span></span><br><span class="line"><span class="comment"># 指定slave定期ping master的周期，默认10秒钟。</span></span><br><span class="line"><span class="comment"># repl-ping-replica-period 10</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># The following option sets the replication timeout for:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 1) Bulk transfer I/O during SYNC, from the point of view of replica.</span></span><br><span class="line"><span class="comment"># 2) Master timeout from the point of view of replicas (data, pings).</span></span><br><span class="line"><span class="comment"># 3) Replica timeout from the point of view of masters (REPLCONF ACK pings).</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># It is important to make sure that this value is greater than the value</span></span><br><span class="line"><span class="comment"># specified for repl-ping-replica-period otherwise a timeout will be detected</span></span><br><span class="line"><span class="comment"># every time there is low traffic between the master and the replica.</span></span><br><span class="line"><span class="comment">#设置主库批量数据传输时间或者ping回复时间间隔，默认值是60秒 。</span></span><br><span class="line"><span class="comment"># repl-timeout 60</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Disable TCP_NODELAY on the replica socket after SYNC?</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># If you select &quot;yes&quot; Redis will use a smaller number of TCP packets and</span></span><br><span class="line"><span class="comment"># less bandwidth to send data to replicas. But this can add a delay for</span></span><br><span class="line"><span class="comment"># the data to appear on the replica side, up to 40 milliseconds with</span></span><br><span class="line"><span class="comment"># Linux kernels using a default configuration.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># If you select &quot;no&quot; the delay for data to appear on the replica side will</span></span><br><span class="line"><span class="comment"># be reduced but more bandwidth will be used for replication.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># By default we optimize for low latency, but in very high traffic conditions</span></span><br><span class="line"><span class="comment"># or when the master and replicas are many hops away, turning this to &quot;yes&quot; may</span></span><br><span class="line"><span class="comment"># be a good idea.</span></span><br><span class="line"><span class="comment">#指定向slave同步数据时，是否禁用socket的NO_DELAY选项。</span></span><br><span class="line"><span class="comment">#若配置为“yes”，则禁用NO_DELAY，则TCP协议栈会合并小包统一发送，这样可以减少主从节点间的包数量并节省带宽，但会增加数据同步到 slave的时间。</span></span><br><span class="line"><span class="comment">#若配置为“no”，表明启用NO_DELAY，则TCP协议栈不会延迟小包的发送时机，这样数据同步的延时会减少，但需要更大的带宽。 </span></span><br><span class="line"><span class="comment">#通常情况下，应该配置为no以降低同步延时，但在主从节点间网络负载已经很高的情况下，可以配置为yes。</span></span><br><span class="line"><span class="meta">repl-disable-tcp-nodelay</span> <span class="string">no</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Set the replication backlog size. The backlog is a buffer that accumulates</span></span><br><span class="line"><span class="comment"># replica data when replicas are disconnected for some time, so that when a replica</span></span><br><span class="line"><span class="comment"># wants to reconnect again, often a full resync is not needed, but a partial</span></span><br><span class="line"><span class="comment"># resync is enough, just passing the portion of data the replica missed while</span></span><br><span class="line"><span class="comment"># disconnected.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># The bigger the replication backlog, the longer the time the replica can be</span></span><br><span class="line"><span class="comment"># disconnected and later be able to perform a partial resynchronization.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># The backlog is only allocated once there is at least a replica connected.</span></span><br><span class="line"><span class="comment"># 设置主从复制backlog容量大小。这个 backlog 是一个用来在 slaves 被断开连接时存放 slave 数据的 buffer，</span></span><br><span class="line"><span class="comment"># 所以当一个 slave 想要重新连接，通常不希望全部重新同步，只是部分同步就够了，仅仅传递 slave 在断开连接时丢失的这部分数据。</span></span><br><span class="line"><span class="comment"># 这个值越大，salve 可以断开连接的时间就越长。</span></span><br><span class="line"><span class="comment"># repl-backlog-size 1mb</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># After a master has no longer connected replicas for some time, the backlog</span></span><br><span class="line"><span class="comment"># will be freed. The following option configures the amount of seconds that</span></span><br><span class="line"><span class="comment"># need to elapse, starting from the time the last replica disconnected, for</span></span><br><span class="line"><span class="comment"># the backlog buffer to be freed.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Note that replicas never free the backlog for timeout, since they may be</span></span><br><span class="line"><span class="comment"># promoted to masters later, and should be able to correctly &quot;partially</span></span><br><span class="line"><span class="comment"># resynchronize&quot; with the replicas: hence they should always accumulate backlog.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># A value of 0 means to never release the backlog.</span></span><br><span class="line"><span class="comment">#配置当master和slave失去联系多少秒之后，清空backlog释放空间。当配置成0时，表示永远不清空。</span></span><br><span class="line"><span class="comment"># repl-backlog-ttl 3600</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># The replica priority is an integer number published by Redis in the INFO output.</span></span><br><span class="line"><span class="comment"># It is used by Redis Sentinel in order to select a replica to promote into a</span></span><br><span class="line"><span class="comment"># master if the master is no longer working correctly.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># A replica with a low priority number is considered better for promotion, so</span></span><br><span class="line"><span class="comment"># for instance if there are three replicas with priority 10, 100, 25 Sentinel will</span></span><br><span class="line"><span class="comment"># pick the one with priority 10, that is the lowest.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># However a special priority of 0 marks the replica as not able to perform the</span></span><br><span class="line"><span class="comment"># role of master, so a replica with priority of 0 will never be selected by</span></span><br><span class="line"><span class="comment"># Redis Sentinel for promotion.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># By default the priority is 100.</span></span><br><span class="line"><span class="comment">#当 master 不能正常工作的时候，Redis Sentinel 会从 slaves 中选出一个新的 master，这个值越小，就越会被优先选中，但是如果是 0 ， 那是意味着这个 slave 不可能被选中。 默认优先级为 100。</span></span><br><span class="line"><span class="meta">replica-priority</span> <span class="string">100</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># It is possible for a master to stop accepting writes if there are less than</span></span><br><span class="line"><span class="comment"># N replicas connected, having a lag less or equal than M seconds.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># The N replicas need to be in &quot;online&quot; state.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># The lag in seconds, that must be &lt;= the specified value, is calculated from</span></span><br><span class="line"><span class="comment"># the last ping received from the replica, that is usually sent every second.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># This option does not GUARANTEE that N replicas will accept the write, but</span></span><br><span class="line"><span class="comment"># will limit the window of exposure for lost writes in case not enough replicas</span></span><br><span class="line"><span class="comment"># are available, to the specified number of seconds.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># For example to require at least 3 replicas with a lag &lt;= 10 seconds use:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># min-replicas-to-write 3</span></span><br><span class="line"><span class="comment"># min-replicas-max-lag 10</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Setting one or the other to 0 disables the feature.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># By default min-replicas-to-write is set to 0 (feature disabled) and</span></span><br><span class="line"><span class="comment"># min-replicas-max-lag is set to 10.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># A Redis master is able to list the address and port of the attached</span></span><br><span class="line"><span class="comment"># replicas in different ways. For example the &quot;INFO replication&quot; section</span></span><br><span class="line"><span class="comment"># offers this information, which is used, among other tools, by</span></span><br><span class="line"><span class="comment"># Redis Sentinel in order to discover replica instances.</span></span><br><span class="line"><span class="comment"># Another place where this info is available is in the output of the</span></span><br><span class="line"><span class="comment"># &quot;ROLE&quot; command of a master.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># The listed IP and address normally reported by a replica is obtained</span></span><br><span class="line"><span class="comment"># in the following way:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#   IP: The address is auto detected by checking the peer address</span></span><br><span class="line"><span class="comment">#   of the socket used by the replica to connect with the master.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#   Port: The port is communicated by the replica during the replication</span></span><br><span class="line"><span class="comment">#   handshake, and is normally the port that the replica is using to</span></span><br><span class="line"><span class="comment">#   listen for connections.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># However when port forwarding or Network Address Translation (NAT) is</span></span><br><span class="line"><span class="comment"># used, the replica may be actually reachable via different IP and port</span></span><br><span class="line"><span class="comment"># pairs. The following two options can be used by a replica in order to</span></span><br><span class="line"><span class="comment"># report to its master a specific set of IP and port, so that both INFO</span></span><br><span class="line"><span class="comment"># and ROLE will report those values.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># There is no need to use both the options if you need to override just</span></span><br><span class="line"><span class="comment"># the port or the IP address.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># replica-announce-ip 5.5.5.5</span></span><br><span class="line"><span class="comment"># replica-announce-port 1234</span></span><br><span class="line"></span><br><span class="line"><span class="comment">################################## SECURITY ###################################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Require clients to issue AUTH &lt;PASSWORD&gt; before processing any other</span></span><br><span class="line"><span class="comment"># commands.  This might be useful in environments in which you do not trust</span></span><br><span class="line"><span class="comment"># others with access to the host running redis-server.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># This should stay commented out for backward compatibility and because most</span></span><br><span class="line"><span class="comment"># people do not need auth (e.g. they run their own servers).</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Warning: since Redis is pretty fast an outside user can try up to</span></span><br><span class="line"><span class="comment"># 150k passwords per second against a good box. This means that you should</span></span><br><span class="line"><span class="comment"># use a very strong password otherwise it will be very easy to break.</span></span><br><span class="line"><span class="comment"># 设置Redis连接密码，如果配置了连接密码，客户端在连接Redis时需要通过AUTH &lt;password&gt;命令提供密码，默认关闭</span></span><br><span class="line"><span class="comment"># requirepass foobared</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Command renaming.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># It is possible to change the name of dangerous commands in a shared</span></span><br><span class="line"><span class="comment"># environment. For instance the CONFIG command may be renamed into something</span></span><br><span class="line"><span class="comment"># hard to guess so that it will still be available for internal-use tools</span></span><br><span class="line"><span class="comment"># but not available for general clients.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Example:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># rename-command CONFIG b840fc02d524045429941cc15f59e41cb7be6c52</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># It is also possible to completely kill a command by renaming it into</span></span><br><span class="line"><span class="comment"># an empty string:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># rename-command CONFIG &quot;&quot;</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Please note that changing the name of commands that are logged into the</span></span><br><span class="line"><span class="comment"># AOF file or transmitted to replicas may cause problems.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">################################### CLIENTS ####################################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Set the max number of connected clients at the same time. By default</span></span><br><span class="line"><span class="comment"># this limit is set to 10000 clients, however if the Redis server is not</span></span><br><span class="line"><span class="comment"># able to configure the process file limit to allow for the specified limit</span></span><br><span class="line"><span class="comment"># the max number of allowed clients is set to the current file limit</span></span><br><span class="line"><span class="comment"># minus 32 (as Redis reserves a few file descriptors for internal uses).</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Once the limit is reached Redis will close all the new connections sending</span></span><br><span class="line"><span class="comment"># an error &#x27;max number of clients reached&#x27;.</span></span><br><span class="line"><span class="comment">#设置同一时间最大客户端连接数，Redis可以同时打开的客户端连接数为Redis进程可以打开的最大文件描述符数，</span></span><br><span class="line"><span class="comment">#如果设置 maxclients 0，表示不作限制。当客户端连接数到达限制时，Redis会关闭新的连接并向客户端返回max number of clients reached错误信息</span></span><br><span class="line"><span class="comment"># maxclients 10000</span></span><br><span class="line"></span><br><span class="line"><span class="comment">############################## MEMORY MANAGEMENT ################################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Set a memory usage limit to the specified amount of bytes.</span></span><br><span class="line"><span class="comment"># When the memory limit is reached Redis will try to remove keys</span></span><br><span class="line"><span class="comment"># according to the eviction policy selected (see maxmemory-policy).</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># If Redis can&#x27;t remove keys according to the policy, or if the policy is</span></span><br><span class="line"><span class="comment"># set to &#x27;noeviction&#x27;, Redis will start to reply with errors to commands</span></span><br><span class="line"><span class="comment"># that would use more memory, like SET, LPUSH, and so on, and will continue</span></span><br><span class="line"><span class="comment"># to reply to read-only commands like GET.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># This option is usually useful when using Redis as an LRU or LFU cache, or to</span></span><br><span class="line"><span class="comment"># set a hard memory limit for an instance (using the &#x27;noeviction&#x27; policy).</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># WARNING: If you have replicas attached to an instance with maxmemory on,</span></span><br><span class="line"><span class="comment"># the size of the output buffers needed to feed the replicas are subtracted</span></span><br><span class="line"><span class="comment"># from the used memory count, so that network problems / resyncs will</span></span><br><span class="line"><span class="comment"># not trigger a loop where keys are evicted, and in turn the output</span></span><br><span class="line"><span class="comment"># buffer of replicas is full with DELs of keys evicted triggering the deletion</span></span><br><span class="line"><span class="comment"># of more keys, and so forth until the database is completely emptied.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># In short... if you have replicas attached it is suggested that you set a lower</span></span><br><span class="line"><span class="comment"># limit for maxmemory so that there is some free RAM on the system for replica</span></span><br><span class="line"><span class="comment"># output buffers (but this is not needed if the policy is &#x27;noeviction&#x27;).</span></span><br><span class="line"><span class="comment"># 指定Redis最大内存限制，Redis在启动时会把数据加载到内存中，达到最大内存后，Redis会先尝试清除已到期或即将到期的Key，</span></span><br><span class="line"><span class="comment"># 当此方法处理后，仍然到达最大内存设置，将无法再进行写入操作，但仍然可以进行读取操作。</span></span><br><span class="line"><span class="comment"># Redis新的vm机制，会把Key存放内存，Value会存放在swap区</span></span><br><span class="line"><span class="comment"># maxmemory &lt;bytes&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># MAXMEMORY POLICY: how Redis will select what to remove when maxmemory</span></span><br><span class="line"><span class="comment"># is reached. You can select among five behaviors:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># volatile-lru -&gt; Evict using approximated LRU among the keys with an expire set.</span></span><br><span class="line"><span class="comment"># allkeys-lru -&gt; Evict any key using approximated LRU.</span></span><br><span class="line"><span class="comment"># volatile-lfu -&gt; Evict using approximated LFU among the keys with an expire set.</span></span><br><span class="line"><span class="comment"># allkeys-lfu -&gt; Evict any key using approximated LFU.</span></span><br><span class="line"><span class="comment"># volatile-random -&gt; Remove a random key among the ones with an expire set.</span></span><br><span class="line"><span class="comment"># allkeys-random -&gt; Remove a random key, any key.</span></span><br><span class="line"><span class="comment"># volatile-ttl -&gt; Remove the key with the nearest expire time (minor TTL)</span></span><br><span class="line"><span class="comment"># noeviction -&gt; Don&#x27;t evict anything, just return an error on write operations.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># LRU means Least Recently Used</span></span><br><span class="line"><span class="comment"># LFU means Least Frequently Used</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Both LRU, LFU and volatile-ttl are implemented using approximated</span></span><br><span class="line"><span class="comment"># randomized algorithms.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># <span class="doctag">Note:</span> with any of the above policies, Redis will return an error on write</span></span><br><span class="line"><span class="comment">#       operations, when there are no suitable keys for eviction.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#       At the date of writing these commands are: set setnx setex syc</span></span><br><span class="line"><span class="comment">#       incr decr rpush lpush rpushx lpushx linsert lset rpoplpush sadd</span></span><br><span class="line"><span class="comment">#       sinter sinterstore sunion sunionstore sdiff sdiffstore zadd zincrby</span></span><br><span class="line"><span class="comment">#       zunionstore zinterstore hset hsetnx hmset hincrby incrby decrby</span></span><br><span class="line"><span class="comment">#       getset mset msetnx exec sort</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># The default is:</span></span><br><span class="line"><span class="comment">#当内存使用达到最大值时，redis使用的清除策略。有以下几种可以选择（明明有6种，官方配置文件里却说有5种可以选择？）：</span></span><br><span class="line"><span class="comment"># 1）volatile-lru   利用LRU算法移除设置过过期时间的key (LRU:最近使用 Least Recently Used ) </span></span><br><span class="line"><span class="comment"># 2）allkeys-lru   利用LRU算法移除任何key </span></span><br><span class="line"><span class="comment"># 3）volatile-random 移除设置过过期时间的随机key </span></span><br><span class="line"><span class="comment"># 4）allkeys-random  移除随机key </span></span><br><span class="line"><span class="comment"># 5）volatile-ttl   移除即将过期的key(minor TTL) </span></span><br><span class="line"><span class="comment"># 6）noeviction  不移除任何key，只是返回一个写错误 。默认选项</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># maxmemory-policy noeviction</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># LRU, LFU and minimal TTL algorithms are not precise algorithms but approximated</span></span><br><span class="line"><span class="comment"># algorithms (in order to save memory), so you can tune it for speed or</span></span><br><span class="line"><span class="comment"># accuracy. For default Redis will check five keys and pick the one that was</span></span><br><span class="line"><span class="comment"># used less recently, you can change the sample size using the following</span></span><br><span class="line"><span class="comment"># configuration directive.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># The default of 5 produces good enough results. 10 Approximates very closely</span></span><br><span class="line"><span class="comment"># true LRU but costs more CPU. 3 is faster but not very accurate.</span></span><br><span class="line"><span class="comment"># LRU 和 minimal TTL 算法都不是精准的算法，但是相对精确的算法(为了节省内存)，随意你可以选择样本大小进行检测。redis默认选择5个样本进行检测，你可以通过maxmemory-samples进行设置样本数。</span></span><br><span class="line"><span class="comment"># maxmemory-samples 5</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Starting from Redis 5, by default a replica will ignore its maxmemory setting</span></span><br><span class="line"><span class="comment"># (unless it is promoted to master after a failover or manually). It means</span></span><br><span class="line"><span class="comment"># that the eviction of keys will be just handled by the master, sending the</span></span><br><span class="line"><span class="comment"># DEL commands to the replica as keys evict in the master side.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># This behavior ensures that masters and replicas stay consistent, and is usually</span></span><br><span class="line"><span class="comment"># what you want, however if your replica is writable, or you want the replica to have</span></span><br><span class="line"><span class="comment"># a different memory setting, and you are sure all the writes performed to the</span></span><br><span class="line"><span class="comment"># replica are idempotent, then you may change this default (but be sure to understand</span></span><br><span class="line"><span class="comment"># what you are doing).</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Note that since the replica by default does not evict, it may end using more</span></span><br><span class="line"><span class="comment"># memory than the one set via maxmemory (there are certain buffers that may</span></span><br><span class="line"><span class="comment"># be larger on the replica, or data structures may sometimes take more memory and so</span></span><br><span class="line"><span class="comment"># forth). So make sure you monitor your replicas and make sure they have enough</span></span><br><span class="line"><span class="comment"># memory to never hit a real out-of-memory condition before the master hits</span></span><br><span class="line"><span class="comment"># the configured maxmemory setting.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># replica-ignore-maxmemory yes</span></span><br><span class="line"></span><br><span class="line"><span class="comment">############################# LAZY FREEING ####################################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Redis has two primitives to delete keys. One is called DEL and is a blocking</span></span><br><span class="line"><span class="comment"># deletion of the object. It means that the server stops processing new commands</span></span><br><span class="line"><span class="comment"># in order to reclaim all the memory associated with an object in a synchronous</span></span><br><span class="line"><span class="comment"># way. If the key deleted is associated with a small object, the time needed</span></span><br><span class="line"><span class="comment"># in order to execute the DEL command is very small and comparable to most other</span></span><br><span class="line"><span class="comment"># O(1) or O(log_N) commands in Redis. However if the key is associated with an</span></span><br><span class="line"><span class="comment"># aggregated value containing millions of elements, the server can block for</span></span><br><span class="line"><span class="comment"># a long time (even seconds) in order to complete the operation.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># For the above reasons Redis also offers non blocking deletion primitives</span></span><br><span class="line"><span class="comment"># such as UNLINK (non blocking DEL) and the ASYNC option of FLUSHALL and</span></span><br><span class="line"><span class="comment"># FLUSHDB commands, in order to reclaim memory in background. Those commands</span></span><br><span class="line"><span class="comment"># are executed in constant time. Another thread will incrementally free the</span></span><br><span class="line"><span class="comment"># object in the background as fast as possible.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># DEL, UNLINK and ASYNC option of FLUSHALL and FLUSHDB are user-controlled.</span></span><br><span class="line"><span class="comment"># It&#x27;s up to the design of the application to understand when it is a good</span></span><br><span class="line"><span class="comment"># idea to use one or the other. However the Redis server sometimes has to</span></span><br><span class="line"><span class="comment"># delete keys or flush the whole database as a side effect of other operations.</span></span><br><span class="line"><span class="comment"># Specifically Redis deletes objects independently of a user call in the</span></span><br><span class="line"><span class="comment"># following scenarios:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 1) On eviction, because of the maxmemory and maxmemory policy configurations,</span></span><br><span class="line"><span class="comment">#    in order to make room for new data, without going over the specified</span></span><br><span class="line"><span class="comment">#    memory limit.</span></span><br><span class="line"><span class="comment"># 2) Because of expire: when a key with an associated time to live (see the</span></span><br><span class="line"><span class="comment">#    EXPIRE command) must be deleted from memory.</span></span><br><span class="line"><span class="comment"># 3) Because of a side effect of a command that stores data on a key that may</span></span><br><span class="line"><span class="comment">#    already exist. For example the RENAME command may delete the old key</span></span><br><span class="line"><span class="comment">#    content when it is replaced with another one. Similarly SUNIONSTORE</span></span><br><span class="line"><span class="comment">#    or SORT with STORE option may delete existing keys. The SET command</span></span><br><span class="line"><span class="comment">#    itself removes any old content of the specified key in order to replace</span></span><br><span class="line"><span class="comment">#    it with the specified string.</span></span><br><span class="line"><span class="comment"># 4) During replication, when a replica performs a full resynchronization with</span></span><br><span class="line"><span class="comment">#    its master, the content of the whole database is removed in order to</span></span><br><span class="line"><span class="comment">#    load the RDB file just transferred.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># In all the above cases the default is to delete objects in a blocking way,</span></span><br><span class="line"><span class="comment"># like if DEL was called. However you can configure each case specifically</span></span><br><span class="line"><span class="comment"># in order to instead release memory in a non-blocking way like if UNLINK</span></span><br><span class="line"><span class="comment"># was called, using the following configuration directives:</span></span><br><span class="line"></span><br><span class="line"><span class="meta">lazyfree-lazy-eviction</span> <span class="string">no</span></span><br><span class="line"><span class="meta">lazyfree-lazy-expire</span> <span class="string">no</span></span><br><span class="line"><span class="meta">lazyfree-lazy-server-del</span> <span class="string">no</span></span><br><span class="line"><span class="meta">replica-lazy-flush</span> <span class="string">no</span></span><br><span class="line"></span><br><span class="line"><span class="comment">############################## APPEND ONLY MODE ###############################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># By default Redis asynchronously dumps the dataset on disk. This mode is</span></span><br><span class="line"><span class="comment"># good enough in many applications, but an issue with the Redis process or</span></span><br><span class="line"><span class="comment"># a power outage may result into a few minutes of writes lost (depending on</span></span><br><span class="line"><span class="comment"># the configured save points).</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># The Append Only File is an alternative persistence mode that provides</span></span><br><span class="line"><span class="comment"># much better durability. For instance using the default data fsync policy</span></span><br><span class="line"><span class="comment"># (see later in the config file) Redis can lose just one second of writes in a</span></span><br><span class="line"><span class="comment"># dramatic event like a server power outage, or a single write if something</span></span><br><span class="line"><span class="comment"># wrong with the Redis process itself happens, but the operating system is</span></span><br><span class="line"><span class="comment"># still running correctly.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># AOF and RDB persistence can be enabled at the same time without problems.</span></span><br><span class="line"><span class="comment"># If the AOF is enabled on startup Redis will load the AOF, that is the file</span></span><br><span class="line"><span class="comment"># with the better durability guarantees.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Please check http://redis.io/topics/persistence for more information.</span></span><br><span class="line"><span class="comment"># 是否启用aof持久化方式 。否在每次更新操作后进行日志记录，Redis在默认情况下是异步的把数据写入磁盘，如果不开启，可能会在断电时导致一段时间内的数据丢失。</span></span><br><span class="line"><span class="comment"># 因为 redis本身同步数据文件是按上面save条件来同步的，所以有的数据会在一段时间内只存在于内存中。默认为no</span></span><br><span class="line"><span class="attr">appendonly</span> <span class="string">no</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># The name of the append only file (default: &quot;appendonly.aof&quot;)</span></span><br><span class="line"><span class="comment"># 指定更新日志（aof）文件名，默认为appendonly.aof</span></span><br><span class="line"><span class="attr">appendfilename</span> <span class="string">&quot;appendonly.aof&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># The fsync() call tells the Operating System to actually write data on disk</span></span><br><span class="line"><span class="comment"># instead of waiting for more data in the output buffer. Some OS will really flush</span></span><br><span class="line"><span class="comment"># data on disk, some other OS will just try to do it ASAP.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Redis supports three different modes:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># no: don&#x27;t fsync, just let the OS flush the data when it wants. Faster.</span></span><br><span class="line"><span class="comment"># always: fsync after every write to the append only log. Slow, Safest.</span></span><br><span class="line"><span class="comment"># everysec: fsync only one time every second. Compromise.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># The default is &quot;everysec&quot;, as that&#x27;s usually the right compromise between</span></span><br><span class="line"><span class="comment"># speed and data safety. It&#x27;s up to you to understand if you can relax this to</span></span><br><span class="line"><span class="comment"># &quot;no&quot; that will let the operating system flush the output buffer when</span></span><br><span class="line"><span class="comment"># it wants, for better performances (but if you can live with the idea of</span></span><br><span class="line"><span class="comment"># some data loss consider the default persistence mode that&#x27;s snapshotting),</span></span><br><span class="line"><span class="comment"># or on the contrary, use &quot;always&quot; that&#x27;s very slow but a bit safer than</span></span><br><span class="line"><span class="comment"># everysec.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># More details please check the following article:</span></span><br><span class="line"><span class="comment"># http://antirez.com/post/redis-persistence-demystified.html</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># If unsure, use &quot;everysec&quot;.</span></span><br><span class="line"><span class="comment">#指定更新日志条件，共有3个可选值： </span></span><br><span class="line"><span class="comment">#  no：表示等操作系统进行数据缓存同步到磁盘（快，持久化没保证） </span></span><br><span class="line"><span class="comment">#  always：同步持久化，每次发生数据变更时，立即记录到磁盘（慢，安全） </span></span><br><span class="line"><span class="comment">#  everysec：表示每秒同步一次（默认值,很快，但可能会丢失一秒以内的数据）</span></span><br><span class="line"><span class="comment"># appendfsync always</span></span><br><span class="line"><span class="attr">appendfsync</span> <span class="string">everysec</span></span><br><span class="line"><span class="comment"># appendfsync no</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># When the AOF fsync policy is set to always or everysec, and a background</span></span><br><span class="line"><span class="comment"># saving process (a background save or AOF log background rewriting) is</span></span><br><span class="line"><span class="comment"># performing a lot of I/O against the disk, in some Linux configurations</span></span><br><span class="line"><span class="comment"># Redis may block too long on the fsync() call. Note that there is no fix for</span></span><br><span class="line"><span class="comment"># this currently, as even performing fsync in a different thread will block</span></span><br><span class="line"><span class="comment"># our synchronous write(2) call.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># In order to mitigate this problem it&#x27;s possible to use the following option</span></span><br><span class="line"><span class="comment"># that will prevent fsync() from being called in the main process while a</span></span><br><span class="line"><span class="comment"># BGSAVE or BGREWRITEAOF is in progress.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># This means that while another child is saving, the durability of Redis is</span></span><br><span class="line"><span class="comment"># the same as &quot;appendfsync none&quot;. In practical terms, this means that it is</span></span><br><span class="line"><span class="comment"># possible to lose up to 30 seconds of log in the worst scenario (with the</span></span><br><span class="line"><span class="comment"># default Linux settings).</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># If you have latency problems turn this to &quot;yes&quot;. Otherwise leave it as</span></span><br><span class="line"><span class="comment"># &quot;no&quot; that is the safest pick from the point of view of durability.</span></span><br><span class="line"><span class="comment"># 指定是否在后台aof文件rewrite期间调用fsync，默认为no，表示要调用fsync（无论后台是否有子进程在刷盘）。</span></span><br><span class="line"><span class="comment"># Redis在后台写RDB文件或重写AOF文件期间会存在大量磁盘IO，此时，在某些linux系统中，调用fsync可能会阻塞。</span></span><br><span class="line"><span class="comment">#如果应用系统无法忍受延迟，而可以容忍少量的数据丢失，则设置为yes。如果应用系统无法忍受数据丢失，则设置为no。</span></span><br><span class="line"><span class="meta">no-appendfsync-on-rewrite</span> <span class="string">no</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Automatic rewrite of the append only file.</span></span><br><span class="line"><span class="comment"># Redis is able to automatically rewrite the log file implicitly calling</span></span><br><span class="line"><span class="comment"># BGREWRITEAOF when the AOF log size grows by the specified percentage.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># This is how it works: Redis remembers the size of the AOF file after the</span></span><br><span class="line"><span class="comment"># latest rewrite (if no rewrite has happened since the restart, the size of</span></span><br><span class="line"><span class="comment"># the AOF at startup is used).</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># This base size is compared to the current size. If the current size is</span></span><br><span class="line"><span class="comment"># bigger than the specified percentage, the rewrite is triggered. Also</span></span><br><span class="line"><span class="comment"># you need to specify a minimal size for the AOF file to be rewritten, this</span></span><br><span class="line"><span class="comment"># is useful to avoid rewriting the AOF file even if the percentage increase</span></span><br><span class="line"><span class="comment"># is reached but it is still pretty small.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Specify a percentage of zero in order to disable the automatic AOF</span></span><br><span class="line"><span class="comment"># rewrite feature.</span></span><br><span class="line"><span class="comment">#当AOF文件增长到一定大小的时候Redis能够调用 BGREWRITEAOF 对日志文件进行重写 。当AOF文件大小的增长率大于该配置项时自动开启重写。</span></span><br><span class="line"><span class="meta">auto-aof-rewrite-percentage</span> <span class="string">100</span></span><br><span class="line"><span class="comment">#当AOF文件增长到一定大小的时候Redis能够调用 BGREWRITEAOF 对日志文件进行重写 。当AOF文件大小大于该配置项时自动开启重写</span></span><br><span class="line"><span class="meta">auto-aof-rewrite-min-size</span> <span class="string">64mb</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># An AOF file may be found to be truncated at the end during the Redis</span></span><br><span class="line"><span class="comment"># startup process, when the AOF data gets loaded back into memory.</span></span><br><span class="line"><span class="comment"># This may happen when the system where Redis is running</span></span><br><span class="line"><span class="comment"># crashes, especially when an ext4 filesystem is mounted without the</span></span><br><span class="line"><span class="comment"># data=ordered option (however this can&#x27;t happen when Redis itself</span></span><br><span class="line"><span class="comment"># crashes or aborts but the operating system still works correctly).</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Redis can either exit with an error when this happens, or load as much</span></span><br><span class="line"><span class="comment"># data as possible (the default now) and start if the AOF file is found</span></span><br><span class="line"><span class="comment"># to be truncated at the end. The following option controls this behavior.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># If aof-load-truncated is set to yes, a truncated AOF file is loaded and</span></span><br><span class="line"><span class="comment"># the Redis server starts emitting a log to inform the user of the event.</span></span><br><span class="line"><span class="comment"># Otherwise if the option is set to no, the server aborts with an error</span></span><br><span class="line"><span class="comment"># and refuses to start. When the option is set to no, the user requires</span></span><br><span class="line"><span class="comment"># to fix the AOF file using the &quot;redis-check-aof&quot; utility before to restart</span></span><br><span class="line"><span class="comment"># the server.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Note that if the AOF file will be found to be corrupted in the middle</span></span><br><span class="line"><span class="comment"># the server will still exit with an error. This option only applies when</span></span><br><span class="line"><span class="comment"># Redis will try to read more data from the AOF file but not enough bytes</span></span><br><span class="line"><span class="comment"># will be found.</span></span><br><span class="line"><span class="comment">#redis在启动时可以加载被截断的AOF文件，而不需要先执行redis-check-aof 工具。</span></span><br><span class="line"><span class="meta">aof-load-truncated</span> <span class="string">yes</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># When rewriting the AOF file, Redis is able to use an RDB preamble in the</span></span><br><span class="line"><span class="comment"># AOF file for faster rewrites and recoveries. When this option is turned</span></span><br><span class="line"><span class="comment"># on the rewritten AOF file is composed of two different stanzas:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#   [RDB file][AOF tail]</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># When loading Redis recognizes that the AOF file starts with the &quot;REDIS&quot;</span></span><br><span class="line"><span class="comment"># string and loads the prefixed RDB file, and continues loading the AOF</span></span><br><span class="line"><span class="comment"># tail.</span></span><br><span class="line"><span class="comment">#是否开启混合持久化</span></span><br><span class="line"><span class="meta">aof-use-rdb-preamble</span> <span class="string">yes</span></span><br><span class="line"></span><br><span class="line"><span class="comment">################################ LUA SCRIPTING  ###############################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Max execution time of a Lua script in milliseconds.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># If the maximum execution time is reached Redis will log that a script is</span></span><br><span class="line"><span class="comment"># still in execution after the maximum allowed time and will start to</span></span><br><span class="line"><span class="comment"># reply to queries with an error.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># When a long running script exceeds the maximum execution time only the</span></span><br><span class="line"><span class="comment"># SCRIPT KILL and SHUTDOWN NOSAVE commands are available. The first can be</span></span><br><span class="line"><span class="comment"># used to stop a script that did not yet called write commands. The second</span></span><br><span class="line"><span class="comment"># is the only way to shut down the server in the case a write command was</span></span><br><span class="line"><span class="comment"># already issued by the script but the user doesn&#x27;t want to wait for the natural</span></span><br><span class="line"><span class="comment"># termination of the script.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Set it to 0 or a negative value for unlimited execution without warnings.</span></span><br><span class="line"><span class="comment">#一个Lua脚本最长的执行时间，单位为毫秒，如果为0或负数表示无限执行时间</span></span><br><span class="line"><span class="meta">lua-time-limit</span> <span class="string">5000</span></span><br><span class="line"></span><br><span class="line"><span class="comment">################################ REDIS CLUSTER  ###############################</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++</span></span><br><span class="line"><span class="comment"># WARNING EXPERIMENTAL: Redis Cluster is considered to be stable code, however</span></span><br><span class="line"><span class="comment"># in order to mark it as &quot;mature&quot; we need to wait for a non trivial percentage</span></span><br><span class="line"><span class="comment"># of users to deploy it in production.</span></span><br><span class="line"><span class="comment"># ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Normal Redis instances can&#x27;t be part of a Redis Cluster; only nodes that are</span></span><br><span class="line"><span class="comment"># started as cluster nodes can. In order to start a Redis instance as a</span></span><br><span class="line"><span class="comment"># cluster node enable the cluster support uncommenting the following:</span></span><br><span class="line"><span class="comment"># 是否开启cluster集群模式 如果配置yes则开启集群功能，此redis实例作为集群的一个节点，否则，它是一个普通的单一的redis实例。</span></span><br><span class="line"><span class="comment"># cluster-enabled yes</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Every cluster node has a cluster configuration file. This file is not</span></span><br><span class="line"><span class="comment"># intended to be edited by hand. It is created and updated by Redis nodes.</span></span><br><span class="line"><span class="comment"># Every Redis Cluster node requires a different cluster configuration file.</span></span><br><span class="line"><span class="comment"># Make sure that instances running in the same system do not have</span></span><br><span class="line"><span class="comment"># overlapping cluster configuration file names.</span></span><br><span class="line"><span class="comment">#虽然此配置的名字叫&quot;集群配置文件&quot;，但是此配置文件不能人工编辑，它是集群节点自动维护的文件，</span></span><br><span class="line"><span class="comment">#主要用于记录集群中有哪些节点、他们的状态以及一些持久化参数等，方便在重启时恢复这些状态。通常是在收到请求之后这个文件就会被更新。</span></span><br><span class="line"><span class="comment"># cluster-config-file nodes-6379.conf</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Cluster node timeout is the amount of milliseconds a node must be unreachable</span></span><br><span class="line"><span class="comment"># for it to be considered in failure state.</span></span><br><span class="line"><span class="comment"># Most other internal time limits are multiple of the node timeout.</span></span><br><span class="line"><span class="comment">#这是集群中的节点能够失联的最大时间，超过这个时间，该节点就会被认为故障。如果主节点超过这个时间还是不可达，则用它的从节点将启动故障迁移，升级成主节点。</span></span><br><span class="line"><span class="comment"># cluster-node-timeout 15000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># A replica of a failing master will avoid to start a failover if its data</span></span><br><span class="line"><span class="comment"># looks too old.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># There is no simple way for a replica to actually have an exact measure of</span></span><br><span class="line"><span class="comment"># its &quot;data age&quot;, so the following two checks are performed:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 1) If there are multiple replicas able to failover, they exchange messages</span></span><br><span class="line"><span class="comment">#    in order to try to give an advantage to the replica with the best</span></span><br><span class="line"><span class="comment">#    replication offset (more data from the master processed).</span></span><br><span class="line"><span class="comment">#    Replicas will try to get their rank by offset, and apply to the start</span></span><br><span class="line"><span class="comment">#    of the failover a delay proportional to their rank.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 2) Every single replica computes the time of the last interaction with</span></span><br><span class="line"><span class="comment">#    its master. This can be the last ping or command received (if the master</span></span><br><span class="line"><span class="comment">#    is still in the &quot;connected&quot; state), or the time that elapsed since the</span></span><br><span class="line"><span class="comment">#    disconnection with the master (if the replication link is currently down).</span></span><br><span class="line"><span class="comment">#    If the last interaction is too old, the replica will not try to failover</span></span><br><span class="line"><span class="comment">#    at all.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># The point &quot;2&quot; can be tuned by user. Specifically a replica will not perform</span></span><br><span class="line"><span class="comment"># the failover if, since the last interaction with the master, the time</span></span><br><span class="line"><span class="comment"># elapsed is greater than:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#   (node-timeout * replica-validity-factor) + repl-ping-replica-period</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># So for example if node-timeout is 30 seconds, and the replica-validity-factor</span></span><br><span class="line"><span class="comment"># is 10, and assuming a default repl-ping-replica-period of 10 seconds, the</span></span><br><span class="line"><span class="comment"># replica will not try to failover if it was not able to talk with the master</span></span><br><span class="line"><span class="comment"># for longer than 310 seconds.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># A large replica-validity-factor may allow replicas with too old data to failover</span></span><br><span class="line"><span class="comment"># a master, while a too small value may prevent the cluster from being able to</span></span><br><span class="line"><span class="comment"># elect a replica at all.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># For maximum availability, it is possible to set the replica-validity-factor</span></span><br><span class="line"><span class="comment"># to a value of 0, which means, that replicas will always try to failover the</span></span><br><span class="line"><span class="comment"># master regardless of the last time they interacted with the master.</span></span><br><span class="line"><span class="comment"># (However they&#x27;ll always try to apply a delay proportional to their</span></span><br><span class="line"><span class="comment"># offset rank).</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Zero is the only value able to guarantee that when all the partitions heal</span></span><br><span class="line"><span class="comment"># the cluster will always be able to continue.</span></span><br><span class="line"><span class="comment">#如果设置成０，则无论从节点与主节点失联多久，从节点都会尝试升级成主节点。</span></span><br><span class="line"><span class="comment">#如果设置成正数，则cluster-node-timeout乘以cluster-slave-validity-factor得到的时间，是从节点与主节点失联后，</span></span><br><span class="line"><span class="comment">#此从节点数据有效的最长时间，超过这个时间，从节点不会启动故障迁移。</span></span><br><span class="line"><span class="comment">#假设cluster-node-timeout=5，cluster-slave-validity-factor=10，则如果从节点跟主节点失联超过50秒，此从节点不能成为主节点。</span></span><br><span class="line"><span class="comment">#注意，如果此参数配置为非0，将可能出现由于某主节点失联却没有从节点能顶上的情况，从而导致集群不能正常工作，</span></span><br><span class="line"><span class="comment">#在这种情况下，只有等到原来的主节点重新回归到集群，集群才恢复运作。</span></span><br><span class="line"><span class="comment"># cluster-replica-validity-factor 10</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Cluster replicas are able to migrate to orphaned masters, that are masters</span></span><br><span class="line"><span class="comment"># that are left without working replicas. This improves the cluster ability</span></span><br><span class="line"><span class="comment"># to resist to failures as otherwise an orphaned master can&#x27;t be failed over</span></span><br><span class="line"><span class="comment"># in case of failure if it has no working replicas.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Replicas migrate to orphaned masters only if there are still at least a</span></span><br><span class="line"><span class="comment"># given number of other working replicas for their old master. This number</span></span><br><span class="line"><span class="comment"># is the &quot;migration barrier&quot;. A migration barrier of 1 means that a replica</span></span><br><span class="line"><span class="comment"># will migrate only if there is at least 1 other working replica for its master</span></span><br><span class="line"><span class="comment"># and so forth. It usually reflects the number of replicas you want for every</span></span><br><span class="line"><span class="comment"># master in your cluster.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Default is 1 (replicas migrate only if their masters remain with at least</span></span><br><span class="line"><span class="comment"># one replica). To disable migration just set it to a very large value.</span></span><br><span class="line"><span class="comment"># A value of 0 can be set but is useful only for debugging and dangerous</span></span><br><span class="line"><span class="comment"># in production.</span></span><br><span class="line"><span class="comment">#master的slave数量大于该值，slave才能迁移到其他孤立master上，如这个参数若被设为2，那么只有当一个主节点拥有2 个可工作的从节点时，它的一个从节点会尝试迁移。</span></span><br><span class="line"><span class="comment">#不建议设置为0</span></span><br><span class="line"><span class="comment">#想禁用可以设置一个非常大的值</span></span><br><span class="line"><span class="comment">#如果小于0则启动失败</span></span><br><span class="line"><span class="comment"># cluster-migration-barrier 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># By default Redis Cluster nodes stop accepting queries if they detect there</span></span><br><span class="line"><span class="comment"># is at least an hash slot uncovered (no available node is serving it).</span></span><br><span class="line"><span class="comment"># This way if the cluster is partially down (for example a range of hash slots</span></span><br><span class="line"><span class="comment"># are no longer covered) all the cluster becomes, eventually, unavailable.</span></span><br><span class="line"><span class="comment"># It automatically returns available as soon as all the slots are covered again.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># However sometimes you want the subset of the cluster which is working,</span></span><br><span class="line"><span class="comment"># to continue to accept queries for the part of the key space that is still</span></span><br><span class="line"><span class="comment"># covered. In order to do so, just set the cluster-require-full-coverage</span></span><br><span class="line"><span class="comment"># option to no.</span></span><br><span class="line"><span class="comment"># 表示当负责一个插槽的主库下线且没有相应的从库进行故障恢复时，是否整个集群不可用？</span></span><br><span class="line"><span class="comment"># cluster-require-full-coverage yes</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># This option, when set to yes, prevents replicas from trying to failover its</span></span><br><span class="line"><span class="comment"># master during master failures. However the master can still perform a</span></span><br><span class="line"><span class="comment"># manual failover, if forced to do so.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># This is useful in different scenarios, especially in the case of multiple</span></span><br><span class="line"><span class="comment"># data center operations, where we want one side to never be promoted if not</span></span><br><span class="line"><span class="comment"># in the case of a total DC failure.</span></span><br><span class="line"><span class="comment"># cluster-replica-no-failover no</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># In order to setup your cluster make sure to read the documentation</span></span><br><span class="line"><span class="comment"># available at http://redis.io web site.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">########################## CLUSTER DOCKER/NAT support  ########################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># In certain deployments, Redis Cluster nodes address discovery fails, because</span></span><br><span class="line"><span class="comment"># addresses are NAT-ted or because ports are forwarded (the typical case is</span></span><br><span class="line"><span class="comment"># Docker and other containers).</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># In order to make Redis Cluster working in such environments, a static</span></span><br><span class="line"><span class="comment"># configuration where each node knows its public address is needed. The</span></span><br><span class="line"><span class="comment"># following two options are used for this scope, and are:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># * cluster-announce-ip</span></span><br><span class="line"><span class="comment"># * cluster-announce-port</span></span><br><span class="line"><span class="comment"># * cluster-announce-bus-port</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Each instruct the node about its address, client port, and cluster message</span></span><br><span class="line"><span class="comment"># bus port. The information is then published in the header of the bus packets</span></span><br><span class="line"><span class="comment"># so that other nodes will be able to correctly map the address of the node</span></span><br><span class="line"><span class="comment"># publishing the information.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># If the above options are not used, the normal Redis Cluster auto-detection</span></span><br><span class="line"><span class="comment"># will be used instead.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Note that when remapped, the bus port may not be at the fixed offset of</span></span><br><span class="line"><span class="comment"># clients port + 10000, so you can specify any port and bus-port depending</span></span><br><span class="line"><span class="comment"># on how they get remapped. If the bus-port is not set, a fixed offset of</span></span><br><span class="line"><span class="comment"># 10000 will be used as usually.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Example:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># cluster-announce-ip 10.1.1.5</span></span><br><span class="line"><span class="comment"># cluster-announce-port 6379</span></span><br><span class="line"><span class="comment"># cluster-announce-bus-port 6380</span></span><br><span class="line"></span><br><span class="line"><span class="comment">################################## SLOW LOG ###################################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># The Redis Slow Log is a system to log queries that exceeded a specified</span></span><br><span class="line"><span class="comment"># execution time. The execution time does not include the I/O operations</span></span><br><span class="line"><span class="comment"># like talking with the client, sending the reply and so forth,</span></span><br><span class="line"><span class="comment"># but just the time needed to actually execute the command (this is the only</span></span><br><span class="line"><span class="comment"># stage of command execution where the thread is blocked and can not serve</span></span><br><span class="line"><span class="comment"># other requests in the meantime).</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># You can configure the slow log with two parameters: one tells Redis</span></span><br><span class="line"><span class="comment"># what is the execution time, in microseconds, to exceed in order for the</span></span><br><span class="line"><span class="comment"># command to get logged, and the other parameter is the length of the</span></span><br><span class="line"><span class="comment"># slow log. When a new command is logged the oldest one is removed from the</span></span><br><span class="line"><span class="comment"># queue of logged commands.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># The following time is expressed in microseconds, so 1000000 is equivalent</span></span><br><span class="line"><span class="comment"># to one second. Note that a negative number disables the slow log, while</span></span><br><span class="line"><span class="comment"># a value of zero forces the logging of every command.</span></span><br><span class="line"><span class="meta">slowlog-log-slower-than</span> <span class="string">10000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># There is no limit to this length. Just be aware that it will consume memory.</span></span><br><span class="line"><span class="comment"># You can reclaim memory used by the slow log with SLOWLOG RESET.</span></span><br><span class="line"><span class="meta">slowlog-max-len</span> <span class="string">128</span></span><br><span class="line"></span><br><span class="line"><span class="comment">################################ LATENCY MONITOR ##############################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># The Redis latency monitoring subsystem samples different operations</span></span><br><span class="line"><span class="comment"># at runtime in order to collect data related to possible sources of</span></span><br><span class="line"><span class="comment"># latency of a Redis instance.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Via the LATENCY command this information is available to the user that can</span></span><br><span class="line"><span class="comment"># print graphs and obtain reports.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># The system only logs operations that were performed in a time equal or</span></span><br><span class="line"><span class="comment"># greater than the amount of milliseconds specified via the</span></span><br><span class="line"><span class="comment"># latency-monitor-threshold configuration directive. When its value is set</span></span><br><span class="line"><span class="comment"># to zero, the latency monitor is turned off.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># By default latency monitoring is disabled since it is mostly not needed</span></span><br><span class="line"><span class="comment"># if you don&#x27;t have latency issues, and collecting data has a performance</span></span><br><span class="line"><span class="comment"># impact, that while very small, can be measured under big load. Latency</span></span><br><span class="line"><span class="comment"># monitoring can easily be enabled at runtime using the command</span></span><br><span class="line"><span class="comment"># &quot;CONFIG SET latency-monitor-threshold &lt;milliseconds&gt;&quot; if needed.</span></span><br><span class="line"><span class="meta">latency-monitor-threshold</span> <span class="string">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">############################# EVENT NOTIFICATION ##############################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Redis can notify Pub/Sub clients about events happening in the key space.</span></span><br><span class="line"><span class="comment"># This feature is documented at http://redis.io/topics/notifications</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># For instance if keyspace events notification is enabled, and a client</span></span><br><span class="line"><span class="comment"># performs a DEL operation on key &quot;foo&quot; stored in the Database 0, two</span></span><br><span class="line"><span class="comment"># messages will be published via Pub/Sub:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># PUBLISH __keyspace@0__:foo del</span></span><br><span class="line"><span class="comment"># PUBLISH __keyevent@0__:del foo</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># It is possible to select the events that Redis will notify among a set</span></span><br><span class="line"><span class="comment"># of classes. Every class is identified by a single character:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#  K     Keyspace events, published with __keyspace@&lt;db&gt;__ prefix.</span></span><br><span class="line"><span class="comment">#  E     Keyevent events, published with __keyevent@&lt;db&gt;__ prefix.</span></span><br><span class="line"><span class="comment">#  g     Generic commands (non-type specific) like DEL, EXPIRE, RENAME, ...</span></span><br><span class="line"><span class="comment">#  $     String commands</span></span><br><span class="line"><span class="comment">#  l     List commands</span></span><br><span class="line"><span class="comment">#  s     Set commands</span></span><br><span class="line"><span class="comment">#  h     Hash commands</span></span><br><span class="line"><span class="comment">#  z     Sorted set commands</span></span><br><span class="line"><span class="comment">#  x     Expired events (events generated every time a key expires)</span></span><br><span class="line"><span class="comment">#  e     Evicted events (events generated when a key is evicted for maxmemory)</span></span><br><span class="line"><span class="comment">#  A     Alias for g$lshzxe, so that the &quot;AKE&quot; string means all the events.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#  The &quot;notify-keyspace-events&quot; takes as argument a string that is composed</span></span><br><span class="line"><span class="comment">#  of zero or multiple characters. The empty string means that notifications</span></span><br><span class="line"><span class="comment">#  are disabled.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#  Example: to enable list and generic events, from the point of view of the</span></span><br><span class="line"><span class="comment">#           event name, use:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#  notify-keyspace-events Elg</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#  Example 2: to get the stream of the expired keys subscribing to channel</span></span><br><span class="line"><span class="comment">#             name __keyevent@0__:expired use:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#  notify-keyspace-events Ex</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#  By default all notifications are disabled because most users don&#x27;t need</span></span><br><span class="line"><span class="comment">#  this feature and the feature has some overhead. Note that if you don&#x27;t</span></span><br><span class="line"><span class="comment">#  specify at least one of K or E, no events will be delivered.</span></span><br><span class="line"><span class="meta">notify-keyspace-events</span> <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">############################### ADVANCED CONFIG ###############################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Hashes are encoded using a memory efficient data structure when they have a</span></span><br><span class="line"><span class="comment"># small number of entries, and the biggest entry does not exceed a given</span></span><br><span class="line"><span class="comment"># threshold. These thresholds can be configured using the following directives.</span></span><br><span class="line"><span class="meta">hash-max-ziplist-entries</span> <span class="string">512</span></span><br><span class="line"><span class="meta">hash-max-ziplist-value</span> <span class="string">64</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Lists are also encoded in a special way to save a lot of space.</span></span><br><span class="line"><span class="comment"># The number of entries allowed per internal list node can be specified</span></span><br><span class="line"><span class="comment"># as a fixed maximum size or a maximum number of elements.</span></span><br><span class="line"><span class="comment"># For a fixed maximum size, use -5 through -1, meaning:</span></span><br><span class="line"><span class="comment"># -5: max size: 64 Kb  &lt;-- not recommended for normal workloads</span></span><br><span class="line"><span class="comment"># -4: max size: 32 Kb  &lt;-- not recommended</span></span><br><span class="line"><span class="comment"># -3: max size: 16 Kb  &lt;-- probably not recommended</span></span><br><span class="line"><span class="comment"># -2: max size: 8 Kb   &lt;-- good</span></span><br><span class="line"><span class="comment"># -1: max size: 4 Kb   &lt;-- good</span></span><br><span class="line"><span class="comment"># Positive numbers mean store up to _exactly_ that number of elements</span></span><br><span class="line"><span class="comment"># per list node.</span></span><br><span class="line"><span class="comment"># The highest performing option is usually -2 (8 Kb size) or -1 (4 Kb size),</span></span><br><span class="line"><span class="comment"># but if your use case is unique, adjust the settings as necessary.</span></span><br><span class="line"><span class="meta">list-max-ziplist-size</span> <span class="string">-2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Lists may also be compressed.</span></span><br><span class="line"><span class="comment"># Compress depth is the number of quicklist ziplist nodes from *each* side of</span></span><br><span class="line"><span class="comment"># the list to *exclude* from compression.  The head and tail of the list</span></span><br><span class="line"><span class="comment"># are always uncompressed for fast push/pop operations.  Settings are:</span></span><br><span class="line"><span class="comment"># 0: disable all list compression</span></span><br><span class="line"><span class="comment"># 1: depth 1 means &quot;don&#x27;t start compressing until after 1 node into the list,</span></span><br><span class="line"><span class="comment">#    going from either the head or tail&quot;</span></span><br><span class="line"><span class="comment">#    So: [head]-&gt;node-&gt;node-&gt;...-&gt;node-&gt;[tail]</span></span><br><span class="line"><span class="comment">#    [head], [tail] will always be uncompressed; inner nodes will compress.</span></span><br><span class="line"><span class="comment"># 2: [head]-&gt;[next]-&gt;node-&gt;node-&gt;...-&gt;node-&gt;[prev]-&gt;[tail]</span></span><br><span class="line"><span class="comment">#    2 here means: don&#x27;t compress head or head-&gt;next or tail-&gt;prev or tail,</span></span><br><span class="line"><span class="comment">#    but compress all nodes between them.</span></span><br><span class="line"><span class="comment"># 3: [head]-&gt;[next]-&gt;[next]-&gt;node-&gt;node-&gt;...-&gt;node-&gt;[prev]-&gt;[prev]-&gt;[tail]</span></span><br><span class="line"><span class="comment"># etc.</span></span><br><span class="line"><span class="meta">list-compress-depth</span> <span class="string">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Sets have a special encoding in just one case: when a set is composed</span></span><br><span class="line"><span class="comment"># of just strings that happen to be integers in radix 10 in the range</span></span><br><span class="line"><span class="comment"># of 64 bit signed integers.</span></span><br><span class="line"><span class="comment"># The following configuration setting sets the limit in the size of the</span></span><br><span class="line"><span class="comment"># set in order to use this special memory saving encoding.</span></span><br><span class="line"><span class="meta">set-max-intset-entries</span> <span class="string">512</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Similarly to hashes and lists, sorted sets are also specially encoded in</span></span><br><span class="line"><span class="comment"># order to save a lot of space. This encoding is only used when the length and</span></span><br><span class="line"><span class="comment"># elements of a sorted set are below the following limits:</span></span><br><span class="line"><span class="meta">zset-max-ziplist-entries</span> <span class="string">128</span></span><br><span class="line"><span class="meta">zset-max-ziplist-value</span> <span class="string">64</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># HyperLogLog sparse representation bytes limit. The limit includes the</span></span><br><span class="line"><span class="comment"># 16 bytes header. When an HyperLogLog using the sparse representation crosses</span></span><br><span class="line"><span class="comment"># this limit, it is converted into the dense representation.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># A value greater than 16000 is totally useless, since at that point the</span></span><br><span class="line"><span class="comment"># dense representation is more memory efficient.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># The suggested value is ~ 3000 in order to have the benefits of</span></span><br><span class="line"><span class="comment"># the space efficient encoding without slowing down too much PFADD,</span></span><br><span class="line"><span class="comment"># which is O(N) with the sparse encoding. The value can be raised to</span></span><br><span class="line"><span class="comment"># ~ 10000 when CPU is not a concern, but space is, and the data set is</span></span><br><span class="line"><span class="comment"># composed of many HyperLogLogs with cardinality in the 0 - 15000 range.</span></span><br><span class="line"><span class="meta">hll-sparse-max-bytes</span> <span class="string">3000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Streams macro node max size / items. The stream data structure is a radix</span></span><br><span class="line"><span class="comment"># tree of big nodes that encode multiple items inside. Using this configuration</span></span><br><span class="line"><span class="comment"># it is possible to configure how big a single node can be in bytes, and the</span></span><br><span class="line"><span class="comment"># maximum number of items it may contain before switching to a new node when</span></span><br><span class="line"><span class="comment"># appending new stream entries. If any of the following settings are set to</span></span><br><span class="line"><span class="comment"># zero, the limit is ignored, so for instance it is possible to set just a</span></span><br><span class="line"><span class="comment"># max entires limit by setting max-bytes to 0 and max-entries to the desired</span></span><br><span class="line"><span class="comment"># value.</span></span><br><span class="line"><span class="meta">stream-node-max-bytes</span> <span class="string">4096</span></span><br><span class="line"><span class="meta">stream-node-max-entries</span> <span class="string">100</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Active rehashing uses 1 millisecond every 100 milliseconds of CPU time in</span></span><br><span class="line"><span class="comment"># order to help rehashing the main Redis hash table (the one mapping top-level</span></span><br><span class="line"><span class="comment"># keys to values). The hash table implementation Redis uses (see dict.c)</span></span><br><span class="line"><span class="comment"># performs a lazy rehashing: the more operation you run into a hash table</span></span><br><span class="line"><span class="comment"># that is rehashing, the more rehashing &quot;steps&quot; are performed, so if the</span></span><br><span class="line"><span class="comment"># server is idle the rehashing is never complete and some more memory is used</span></span><br><span class="line"><span class="comment"># by the hash table.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># The default is to use this millisecond 10 times every second in order to</span></span><br><span class="line"><span class="comment"># actively rehash the main dictionaries, freeing memory when possible.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># If unsure:</span></span><br><span class="line"><span class="comment"># use &quot;activerehashing no&quot; if you have hard latency requirements and it is</span></span><br><span class="line"><span class="comment"># not a good thing in your environment that Redis can reply from time to time</span></span><br><span class="line"><span class="comment"># to queries with 2 milliseconds delay.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># use &quot;activerehashing yes&quot; if you don&#x27;t have such hard requirements but</span></span><br><span class="line"><span class="comment"># want to free memory asap when possible.</span></span><br><span class="line"><span class="attr">activerehashing</span> <span class="string">yes</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># The client output buffer limits can be used to force disconnection of clients</span></span><br><span class="line"><span class="comment"># that are not reading data from the server fast enough for some reason (a</span></span><br><span class="line"><span class="comment"># common reason is that a Pub/Sub client can&#x27;t consume messages as fast as the</span></span><br><span class="line"><span class="comment"># publisher can produce them).</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># The limit can be set differently for the three different classes of clients:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># normal -&gt; normal clients including MONITOR clients</span></span><br><span class="line"><span class="comment"># replica  -&gt; replica clients</span></span><br><span class="line"><span class="comment"># pubsub -&gt; clients subscribed to at least one pubsub channel or pattern</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># The syntax of every client-output-buffer-limit directive is the following:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># client-output-buffer-limit &lt;class&gt; &lt;hard limit&gt; &lt;soft limit&gt; &lt;soft seconds&gt;</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># A client is immediately disconnected once the hard limit is reached, or if</span></span><br><span class="line"><span class="comment"># the soft limit is reached and remains reached for the specified number of</span></span><br><span class="line"><span class="comment"># seconds (continuously).</span></span><br><span class="line"><span class="comment"># So for instance if the hard limit is 32 megabytes and the soft limit is</span></span><br><span class="line"><span class="comment"># 16 megabytes / 10 seconds, the client will get disconnected immediately</span></span><br><span class="line"><span class="comment"># if the size of the output buffers reach 32 megabytes, but will also get</span></span><br><span class="line"><span class="comment"># disconnected if the client reaches 16 megabytes and continuously overcomes</span></span><br><span class="line"><span class="comment"># the limit for 10 seconds.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># By default normal clients are not limited because they don&#x27;t receive data</span></span><br><span class="line"><span class="comment"># without asking (in a push way), but just after a request, so only</span></span><br><span class="line"><span class="comment"># asynchronous clients may create a scenario where data is requested faster</span></span><br><span class="line"><span class="comment"># than it can read.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Instead there is a default limit for pubsub and replica clients, since</span></span><br><span class="line"><span class="comment"># subscribers and replicas receive data in a push fashion.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Both the hard or the soft limit can be disabled by setting them to zero.</span></span><br><span class="line"><span class="meta">client-output-buffer-limit</span> <span class="string">normal 0 0 0</span></span><br><span class="line"><span class="meta">client-output-buffer-limit</span> <span class="string">replica 256mb 64mb 60</span></span><br><span class="line"><span class="meta">client-output-buffer-limit</span> <span class="string">pubsub 32mb 8mb 60</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Client query buffers accumulate new commands. They are limited to a fixed</span></span><br><span class="line"><span class="comment"># amount by default in order to avoid that a protocol desynchronization (for</span></span><br><span class="line"><span class="comment"># instance due to a bug in the client) will lead to unbound memory usage in</span></span><br><span class="line"><span class="comment"># the query buffer. However you can configure it here if you have very special</span></span><br><span class="line"><span class="comment"># needs, such us huge multi/exec requests or alike.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># client-query-buffer-limit 1gb</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># In the Redis protocol, bulk requests, that are, elements representing single</span></span><br><span class="line"><span class="comment"># strings, are normally limited ot 512 mb. However you can change this limit</span></span><br><span class="line"><span class="comment"># here.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># proto-max-bulk-len 512mb</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Redis calls an internal function to perform many background tasks, like</span></span><br><span class="line"><span class="comment"># closing connections of clients in timeout, purging expired keys that are</span></span><br><span class="line"><span class="comment"># never requested, and so forth.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Not all tasks are performed with the same frequency, but Redis checks for</span></span><br><span class="line"><span class="comment"># tasks to perform according to the specified &quot;hz&quot; value.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># By default &quot;hz&quot; is set to 10. Raising the value will use more CPU when</span></span><br><span class="line"><span class="comment"># Redis is idle, but at the same time will make Redis more responsive when</span></span><br><span class="line"><span class="comment"># there are many keys expiring at the same time, and timeouts may be</span></span><br><span class="line"><span class="comment"># handled with more precision.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># The range is between 1 and 500, however a value over 100 is usually not</span></span><br><span class="line"><span class="comment"># a good idea. Most users should use the default of 10 and raise this up to</span></span><br><span class="line"><span class="comment"># 100 only in environments where very low latency is required.</span></span><br><span class="line"><span class="attr">hz</span> <span class="string">10</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Normally it is useful to have an HZ value which is proportional to the</span></span><br><span class="line"><span class="comment"># number of clients connected. This is useful in order, for instance, to</span></span><br><span class="line"><span class="comment"># avoid too many clients are processed for each background task invocation</span></span><br><span class="line"><span class="comment"># in order to avoid latency spikes.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Since the default HZ value by default is conservatively set to 10, Redis</span></span><br><span class="line"><span class="comment"># offers, and enables by default, the ability to use an adaptive HZ value</span></span><br><span class="line"><span class="comment"># which will temporary raise when there are many connected clients.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># When dynamic HZ is enabled, the actual configured HZ will be used as</span></span><br><span class="line"><span class="comment"># as a baseline, but multiples of the configured HZ value will be actually</span></span><br><span class="line"><span class="comment"># used as needed once more clients are connected. In this way an idle</span></span><br><span class="line"><span class="comment"># instance will use very little CPU time while a busy instance will be</span></span><br><span class="line"><span class="comment"># more responsive.</span></span><br><span class="line"><span class="meta">dynamic-hz</span> <span class="string">yes</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># When a child rewrites the AOF file, if the following option is enabled</span></span><br><span class="line"><span class="comment"># the file will be fsync-ed every 32 MB of data generated. This is useful</span></span><br><span class="line"><span class="comment"># in order to commit the file to the disk more incrementally and avoid</span></span><br><span class="line"><span class="comment"># big latency spikes.</span></span><br><span class="line"><span class="meta">aof-rewrite-incremental-fsync</span> <span class="string">yes</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># When redis saves RDB file, if the following option is enabled</span></span><br><span class="line"><span class="comment"># the file will be fsync-ed every 32 MB of data generated. This is useful</span></span><br><span class="line"><span class="comment"># in order to commit the file to the disk more incrementally and avoid</span></span><br><span class="line"><span class="comment"># big latency spikes.</span></span><br><span class="line"><span class="meta">rdb-save-incremental-fsync</span> <span class="string">yes</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Redis LFU eviction (see maxmemory setting) can be tuned. However it is a good</span></span><br><span class="line"><span class="comment"># idea to start with the default settings and only change them after investigating</span></span><br><span class="line"><span class="comment"># how to improve the performances and how the keys LFU change over time, which</span></span><br><span class="line"><span class="comment"># is possible to inspect via the OBJECT FREQ command.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># There are two tunable parameters in the Redis LFU implementation: the</span></span><br><span class="line"><span class="comment"># counter logarithm factor and the counter decay time. It is important to</span></span><br><span class="line"><span class="comment"># understand what the two parameters mean before changing them.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># The LFU counter is just 8 bits per key, it&#x27;s maximum value is 255, so Redis</span></span><br><span class="line"><span class="comment"># uses a probabilistic increment with logarithmic behavior. Given the value</span></span><br><span class="line"><span class="comment"># of the old counter, when a key is accessed, the counter is incremented in</span></span><br><span class="line"><span class="comment"># this way:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 1. A random number R between 0 and 1 is extracted.</span></span><br><span class="line"><span class="comment"># 2. A probability P is calculated as 1/(old_value*lfu_log_factor+1).</span></span><br><span class="line"><span class="comment"># 3. The counter is incremented only if R &lt; P.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># The default lfu-log-factor is 10. This is a table of how the frequency</span></span><br><span class="line"><span class="comment"># counter changes with a different number of accesses with different</span></span><br><span class="line"><span class="comment"># logarithmic factors:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># +--------+------------+------------+------------+------------+------------+</span></span><br><span class="line"><span class="comment"># | factor | 100 hits   | 1000 hits  | 100K hits  | 1M hits    | 10M hits   |</span></span><br><span class="line"><span class="comment"># +--------+------------+------------+------------+------------+------------+</span></span><br><span class="line"><span class="comment"># | 0      | 104        | 255        | 255        | 255        | 255        |</span></span><br><span class="line"><span class="comment"># +--------+------------+------------+------------+------------+------------+</span></span><br><span class="line"><span class="comment"># | 1      | 18         | 49         | 255        | 255        | 255        |</span></span><br><span class="line"><span class="comment"># +--------+------------+------------+------------+------------+------------+</span></span><br><span class="line"><span class="comment"># | 10     | 10         | 18         | 142        | 255        | 255        |</span></span><br><span class="line"><span class="comment"># +--------+------------+------------+------------+------------+------------+</span></span><br><span class="line"><span class="comment"># | 100    | 8          | 11         | 49         | 143        | 255        |</span></span><br><span class="line"><span class="comment"># +--------+------------+------------+------------+------------+------------+</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># <span class="doctag">NOTE:</span> The above table was obtained by running the following commands:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#   redis-benchmark -n 1000000 incr foo</span></span><br><span class="line"><span class="comment">#   redis-cli object freq foo</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># NOTE 2: The counter initial value is 5 in order to give new objects a chance</span></span><br><span class="line"><span class="comment"># to accumulate hits.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># The counter decay time is the time, in minutes, that must elapse in order</span></span><br><span class="line"><span class="comment"># for the key counter to be divided by two (or decremented if it has a value</span></span><br><span class="line"><span class="comment"># less &lt;= 10).</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># The default value for the lfu-decay-time is 1. A Special value of 0 means to</span></span><br><span class="line"><span class="comment"># decay the counter every time it happens to be scanned.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># lfu-log-factor 10</span></span><br><span class="line"><span class="comment"># lfu-decay-time 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">########################### ACTIVE DEFRAGMENTATION #######################</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># WARNING THIS FEATURE IS EXPERIMENTAL. However it was stress tested</span></span><br><span class="line"><span class="comment"># even in production and manually tested by multiple engineers for some</span></span><br><span class="line"><span class="comment"># time.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># What is active defragmentation?</span></span><br><span class="line"><span class="comment"># -------------------------------</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Active (online) defragmentation allows a Redis server to compact the</span></span><br><span class="line"><span class="comment"># spaces left between small allocations and deallocations of data in memory,</span></span><br><span class="line"><span class="comment"># thus allowing to reclaim back memory.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Fragmentation is a natural process that happens with every allocator (but</span></span><br><span class="line"><span class="comment"># less so with Jemalloc, fortunately) and certain workloads. Normally a server</span></span><br><span class="line"><span class="comment"># restart is needed in order to lower the fragmentation, or at least to flush</span></span><br><span class="line"><span class="comment"># away all the data and create it again. However thanks to this feature</span></span><br><span class="line"><span class="comment"># implemented by Oran Agra for Redis 4.0 this process can happen at runtime</span></span><br><span class="line"><span class="comment"># in an &quot;hot&quot; way, while the server is running.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Basically when the fragmentation is over a certain level (see the</span></span><br><span class="line"><span class="comment"># configuration options below) Redis will start to create new copies of the</span></span><br><span class="line"><span class="comment"># values in contiguous memory regions by exploiting certain specific Jemalloc</span></span><br><span class="line"><span class="comment"># features (in order to understand if an allocation is causing fragmentation</span></span><br><span class="line"><span class="comment"># and to allocate it in a better place), and at the same time, will release the</span></span><br><span class="line"><span class="comment"># old copies of the data. This process, repeated incrementally for all the keys</span></span><br><span class="line"><span class="comment"># will cause the fragmentation to drop back to normal values.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Important things to understand:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 1. This feature is disabled by default, and only works if you compiled Redis</span></span><br><span class="line"><span class="comment">#    to use the copy of Jemalloc we ship with the source code of Redis.</span></span><br><span class="line"><span class="comment">#    This is the default with Linux builds.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 2. You never need to enable this feature if you don&#x27;t have fragmentation</span></span><br><span class="line"><span class="comment">#    issues.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 3. Once you experience fragmentation, you can enable this feature when</span></span><br><span class="line"><span class="comment">#    needed with the command &quot;CONFIG SET activedefrag yes&quot;.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># The configuration parameters are able to fine tune the behavior of the</span></span><br><span class="line"><span class="comment"># defragmentation process. If you are not sure about what they mean it is</span></span><br><span class="line"><span class="comment"># a good idea to leave the defaults untouched.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Enabled active defragmentation</span></span><br><span class="line"><span class="comment"># activedefrag yes</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Minimum amount of fragmentation waste to start active defrag</span></span><br><span class="line"><span class="comment"># active-defrag-ignore-bytes 100mb</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Minimum percentage of fragmentation to start active defrag</span></span><br><span class="line"><span class="comment"># active-defrag-threshold-lower 10</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Maximum percentage of fragmentation at which we use maximum effort</span></span><br><span class="line"><span class="comment"># active-defrag-threshold-upper 100</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Minimal effort for defrag in CPU percentage</span></span><br><span class="line"><span class="comment"># active-defrag-cycle-min 5</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Maximal effort for defrag in CPU percentage</span></span><br><span class="line"><span class="comment"># active-defrag-cycle-max 75</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Maximum number of set/hash/zset/list fields that will be processed from</span></span><br><span class="line"><span class="comment"># the main dictionary scan</span></span><br><span class="line"><span class="comment"># active-defrag-max-scan-fields 1000</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Redis基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
            <tag> RedisCluster </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis安装</title>
      <link href="Redis%E5%9F%BA%E7%A1%80/Redis%E5%AE%89%E8%A3%85/"/>
      <url>Redis%E5%9F%BA%E7%A1%80/Redis%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><ul><li>Linux版本：CentOS7.7</li><li>Redis版本：5.0.8</li></ul><h2 id="1、下载Redis"><a href="#1、下载Redis" class="headerlink" title="1、下载Redis"></a>1、下载Redis</h2><ul><li>方式一：官方下载地址 <a href="http://download.redis.io/releases/">http://download.redis.io/releases/</a> 选择对应版本下载后上传服务器。</li><li>方式二：<code>wget http://download.redis.io/releases/redis-5.0.8.tar.gz</code></li></ul><h2 id="2、解压安装"><a href="#2、解压安装" class="headerlink" title="2、解压安装"></a>2、解压安装</h2><ol><li><p>解压并编译。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tar -xvf redis-5.0.8.tar.gz</span><br><span class="line">cd redis-5.0.8</span><br><span class="line">make</span><br></pre></td></tr></table></figure><p>make如果报错，则需要安装gcc环境 <code>yum install gcc-c++</code></p></li><li><p>安装到<code>/usr/local/redis/</code>目录下，并复制配置文件。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cd src</span><br><span class="line">make install PREFIX=/usr/local/redis</span><br><span class="line">cd ../</span><br><span class="line">mkdir /usr/local/redis/config</span><br><span class="line">cp ./redis.conf /usr/local/redis/config/</span><br></pre></td></tr></table></figure></li></ol><h2 id="3、修改配置"><a href="#3、修改配置" class="headerlink" title="3、修改配置"></a>3、修改配置</h2><ol><li><p><code>vi /usr/local/redis/config/redis.conf</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 去除本地访问限制</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">bind</span> 127.0.0.1</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 关闭保护模式，否则外网不能访问Redis</span></span><br><span class="line">protected-mode no</span><br><span class="line"><span class="meta">#</span><span class="bash"> 是否以守护进程启动</span></span><br><span class="line">daemonize yes</span><br></pre></td></tr></table></figure></li><li><p><code>port</code>端口可改可不改，主要看有没有端口冲突。</p></li></ol><h2 id="4、启动Redis"><a href="#4、启动Redis" class="headerlink" title="4、启动Redis"></a>4、启动Redis</h2><ol><li>使用命令 <code>/usr/local/redis/bin/redis-server /usr/local/redis/config/redis.conf</code> 启动Redis。</li><li>查看进程 <code>ps aux|grep redis</code></li><li>查看端口 <code>netstat -tnlp|grep 6379</code></li></ol><h2 id="5、停Redis"><a href="#5、停Redis" class="headerlink" title="5、停Redis"></a>5、停Redis</h2><ul><li>使用<code>pkill redis</code>命令或者<code>/usr/local/redis/bin/redis-cli shutdown</code>来平滑关闭Redis进程。</li><li>一般不建议使用kill命令直接杀进程，可能会导致数据丢失。</li></ul><h2 id="6、卸载Redis"><a href="#6、卸载Redis" class="headerlink" title="6、卸载Redis"></a>6、卸载Redis</h2><ul><li>只需要删除安装目录即可 <code>rm -rf /usr/local/redis</code></li></ul><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://www.jianshu.com/p/564b0c1ccf53">Linux安装redis 完整步骤</a><br><br><br></li></ul>]]></content>
      
      
      <categories>
          
          <category> Redis基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
