<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>【图解】透彻Java线程状态转换（转载）</title>
      <link href="Java%E5%BC%80%E5%8F%91/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/%E3%80%90%E5%9B%BE%E8%A7%A3%E3%80%91%E9%80%8F%E5%BD%BBJava%E7%BA%BF%E7%A8%8B%E7%8A%B6%E6%80%81%E8%BD%AC%E6%8D%A2%EF%BC%88%E8%BD%AC%E8%BD%BD%EF%BC%89/"/>
      <url>Java%E5%BC%80%E5%8F%91/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/%E3%80%90%E5%9B%BE%E8%A7%A3%E3%80%91%E9%80%8F%E5%BD%BBJava%E7%BA%BF%E7%A8%8B%E7%8A%B6%E6%80%81%E8%BD%AC%E6%8D%A2%EF%BC%88%E8%BD%AC%E8%BD%BD%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><blockquote><p>转载自：<a href="https://mp.weixin.qq.com/s/VDFANBzOG6GlSWCwW-vfGQ">https://mp.weixin.qq.com/s/VDFANBzOG6GlSWCwW-vfGQ</a></p></blockquote><h1 id="线程状态"><a href="#线程状态" class="headerlink" title="线程状态"></a>线程状态</h1><p>先来个开场四连问</p><ul><li><code>Java</code>线程状态有几个？</li><li><code>Java</code>线程状态是如何转换？</li><li><code>Java</code>线程状态转换什么情况会进入锁的等待队列？</li><li><code>Java</code>线程状态转换什么情况会进入锁的同步队列？</li></ul><p>一提到<code>Java</code>线程状态，不少读者立马想到线程状态转换图，但细想，印象又不深刻，只记得有那么几个状态。</p><p>再要你说出<code>Java</code>线程状态是如何转换的，脑子里可能就如下图一样，已经是一团浆糊了。</p><p><img src="https://zhaoxiaobin.coding.net/p/blog/d/zhaoxiaobin_img/git/raw/master/post/Java/16264141917872/16264143521616.jpg"></p><p>别慌，阿星为了帮读者大大们理清楚上面的问题，会一步一步的把<strong>线程状态转换图</strong>给画出来，让读者大大们真正的理解<strong>Java线程状态转换</strong>。</p><p>首先线程的状态可以分为<code>6</code>态或<code>7</code>态，具体状态如下</p><p><strong>6态</strong></p><ul><li><code>New</code>：新建状态</li><li><code>Runnable</code>：可运行状态</li><li><code>Terminated</code>：终止状态</li><li><code>Waiting</code>：等待状态</li><li><code>TimedWaiting</code>：超时等待状态</li><li><code>Blocked</code>：阻塞状态</li></ul><p><strong>7态</strong></p><ul><li><code>New</code>：新建状态</li><li><code>Ready</code>：就绪状态</li><li><code>Running</code>：运行状态</li><li><code>Terminated</code>：终止状态</li><li><code>Waiting</code>：等待状态</li><li><code>TimedWaiting</code>：超时等待状态</li><li><code>Blocked</code>：阻塞状态</li></ul><p>其实6态与7态差别不大，只不过<code>7</code>态把<code>Runnable</code>可运行状态，拆解成了<code>Ready</code>就绪状态与<code>Running</code>运行状态。</p><p>阿星以<code>7</code>态为例，来逐步讲解它们之间是如何转换的。</p><h2 id="新建状态（New）"><a href="#新建状态（New）" class="headerlink" title="新建状态（New）"></a>新建状态（New）</h2><p>我们可以通过实现<code>Runnable</code>接口或继承<code>Thread</code>声明一个线程类，<code>new</code>一个实例后，线程就进入了新建状态。</p><p><img src="https://zhaoxiaobin.coding.net/p/blog/d/zhaoxiaobin_img/git/raw/master/post/Java/16264141917872/16264143632009.jpg"></p><blockquote><p>一个刚诞生的线程，处于新建状态。</p></blockquote><h2 id="就绪状态（Ready）"><a href="#就绪状态（Ready）" class="headerlink" title="就绪状态（Ready）"></a>就绪状态（Ready）</h2><p>线程对象创建成功后，调用该线程的<code>start()</code>函数，线程进入就绪状态，该状态的线程进入可运行线程池中，等待获取<code>C P U</code>的使用权。</p><p><img src="https://zhaoxiaobin.coding.net/p/blog/d/zhaoxiaobin_img/git/raw/master/post/Java/16264141917872/16264143738069.jpg"></p><blockquote><p>线程表示，我已经准备好了，此时我是就绪状态，快选我吧~</p></blockquote><h2 id="运行状态（Running"><a href="#运行状态（Running" class="headerlink" title="运行状态（Running)"></a>运行状态（Running)</h2><p>此时线程调度程序正在从<strong>可运行线程池</strong>中选择一个线程，该线程进入运行状态。</p><p>换句话说，线程获取到了<code>C P U</code>时间片。</p><p><img src="https://zhaoxiaobin.coding.net/p/blog/d/zhaoxiaobin_img/git/raw/master/post/Java/16264141917872/16264143828482.jpg"></p><p>还没完呢，当线程时间片用完或调用的<code>yield()</code>函数，该线程回到就绪状态。</p><p><img src="https://zhaoxiaobin.coding.net/p/blog/d/zhaoxiaobin_img/git/raw/master/post/Java/16264141917872/16264143911656.jpg"></p><blockquote><p>作为一名运气好的线程，我进入了运行状态，但是运气用完了，我还得回到就绪状态。</p></blockquote><h2 id="终止状态（Terminated）"><a href="#终止状态（Terminated）" class="headerlink" title="终止状态（Terminated）"></a>终止状态（Terminated）</h2><p>线程继续运行，直到执行结束或执行过程中因异常意外终止都会使线程进入终止状态。</p><p>线程一旦终止，就不能复生，这是不可逆的过程。</p><p><img src="https://zhaoxiaobin.coding.net/p/blog/d/zhaoxiaobin_img/git/raw/master/post/Java/16264141917872/16264144004463.jpg"></p><blockquote><p>线程的人生迎来了终点，可能一帆风顺过完一生，也可能英年早逝令人惋惜。</p></blockquote><h2 id="等待状态（Waiting）"><a href="#等待状态（Waiting）" class="headerlink" title="等待状态（Waiting）"></a>等待状态（Waiting）</h2><p>运行状态的线程执行wait()、join()、LockSupport.park()任意函数，该线程进入等待状态。</p><p>其中<code>wait()</code>与<code>join()</code>函数会让<code>JVM</code>把该线程放入锁等待队列。</p><p>处于这种状态的线程不会被分配<code>CPU</code>执行时间，它们要等待被<strong>主动唤醒</strong>，否则会一直处于等待状态。</p><p><img src="https://zhaoxiaobin.coding.net/p/blog/d/zhaoxiaobin_img/git/raw/master/post/Java/16264141917872/16264144127808.jpg"></p><p>如果我们要唤醒线程怎么办呢？</p><p>执行<code>LockSupport.unpark(t)</code>函数唤醒指定线程，该线程回到就绪状态。</p><p>而通过<code>notify()、notifyAll()、join线程执行完毕</code>方式，会唤醒锁等待队列的线程，出队的线程回到就绪状态。</p><p><img src="https://zhaoxiaobin.coding.net/p/blog/d/zhaoxiaobin_img/git/raw/master/post/Java/16264141917872/16264144222547.jpg"></p><blockquote><p>线程的人生迎来了劫难，听信小人之言，跑去菲律宾做打工，结果被黑工厂扣下，只希望警察叔叔能早日解救我出去。</p></blockquote><h2 id="超时等待状态（Timed-waiting）"><a href="#超时等待状态（Timed-waiting）" class="headerlink" title="超时等待状态（Timed waiting）"></a>超时等待状态（Timed waiting）</h2><p>超时等待与等待状态一样，唯一的区别就是多了超时机制，不会一直等待被其他线程主动唤醒，而是到达指定时间后会<strong>自动唤醒</strong>。</p><p>以下函数会触发进入超时等待状态</p><ul><li><strong>wait(long)</strong></li><li><strong>join(long)</strong></li><li><strong>LockSupport.parkNanos(long)</strong></li><li><strong>LockSupport.parkUtil(long)</strong></li><li><strong>sleep(long)</strong></li></ul><p>其中<code>wait(long)、join(long)</code>函数会让<code>JVM</code>把线程放入锁等待队列。</p><p><img src="https://zhaoxiaobin.coding.net/p/blog/d/zhaoxiaobin_img/git/raw/master/post/Java/16264141917872/16264144447651.jpg"></p><p>后面的唤醒剧情就和等待状态如出一辙，就多了超时时间到了，自动唤醒的动作。</p><p><img src="https://zhaoxiaobin.coding.net/p/blog/d/zhaoxiaobin_img/git/raw/master/post/Java/16264141917872/16264144666784.jpg"></p><blockquote><p>从菲律宾回国后的线程，也做起了违法的勾当，最终被警察抓捕，好在只判了5年，熬一熬就可以出来了。</p></blockquote><h2 id="阻塞状态（Blocked）"><a href="#阻塞状态（Blocked）" class="headerlink" title="阻塞状态（Blocked）"></a>阻塞状态（Blocked）</h2><p>运行状态的线程获取同步锁失败或发出<code>I/O</code>请求，该线程进入阻塞状态。</p><p>如果是获取同步锁失败<code>JVM</code>还会把该线程放入锁的同步队列。</p><p><img src="https://zhaoxiaobin.coding.net/p/blog/d/zhaoxiaobin_img/git/raw/master/post/Java/16264141917872/16264144868640.jpg"></p><p>同步锁被释放时，锁的同步队列会出队所有线程，进入就绪状态。</p><p><code>I/O</code>处理完毕时，该线程重新回到就绪状态。</p><p><img src="https://zhaoxiaobin.coding.net/p/blog/d/zhaoxiaobin_img/git/raw/master/post/Java/16264141917872/16264144960773.jpg"></p><blockquote><p>出狱后的线程，后面的人生一直都是磕磕碰碰，就没顺利过，大家要引以为戒。</p></blockquote><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>相信读者大大们跟着阿星的思路来，已经掌握了线程状态的知识，以后面试官问这类问题，也可以吊打一番，最后放一张简化的线程转换图为本文画上句号。</p><p><img src="https://zhaoxiaobin.coding.net/p/blog/d/zhaoxiaobin_img/git/raw/master/post/Java/16264141917872/16264145042332.jpg"><br><br><br></p>]]></content>
      
      
      <categories>
          
          <category> 并发编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 并发编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何从0到1构建一个稳定、高性能的Redis集群？（转载）</title>
      <link href="Redis/%E5%A6%82%E4%BD%95%E4%BB%8E0%E5%88%B01%E6%9E%84%E5%BB%BA%E4%B8%80%E4%B8%AA%E7%A8%B3%E5%AE%9A%E3%80%81%E9%AB%98%E6%80%A7%E8%83%BD%E7%9A%84Redis%E9%9B%86%E7%BE%A4%EF%BC%9F%EF%BC%88%E8%BD%AC%E8%BD%BD%EF%BC%89/"/>
      <url>Redis/%E5%A6%82%E4%BD%95%E4%BB%8E0%E5%88%B01%E6%9E%84%E5%BB%BA%E4%B8%80%E4%B8%AA%E7%A8%B3%E5%AE%9A%E3%80%81%E9%AB%98%E6%80%A7%E8%83%BD%E7%9A%84Redis%E9%9B%86%E7%BE%A4%EF%BC%9F%EF%BC%88%E8%BD%AC%E8%BD%BD%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><blockquote><p>转载自：<a href="https://mp.weixin.qq.com/s/q79ji-cgfUMo7H0p254QRg">https://mp.weixin.qq.com/s/q79ji-cgfUMo7H0p254QRg</a></p></blockquote><p>这篇文章我想和你聊一聊 Redis 的架构演化之路。</p><p>现如今 Redis 变得越来越流行，几乎在很多项目中都要被用到，不知道你在使用 Redis 时，有没有思考过，Redis 到底是如何稳定、高性能地提供服务的？</p><p>你也可以尝试回答一下以下这些问题：</p><ul><li>我使用 Redis 的场景很简单，只使用单机版 Redis 会有什么问题吗？</li><li>我的 Redis 故障宕机了，数据丢失了怎么办？如何能保证我的业务应用不受影响？</li><li>为什么需要主从集群？它有什么优势？</li><li>什么是分片集群？我真的需要分片集群吗？</li><li>…</li></ul><p>如果你对 Redis 已经有些了解，肯定也听说过<strong>数据持久化、主从复制、哨兵</strong>这些概念，它们之间又有什么区别和联系呢？</p><p>如果你存在这样的疑惑，这篇文章，我会从 0 到 1，再从 1 到 N，带你一步步构建出一个稳定、高性能的 Redis 集群。</p><p>在这个过程中，你可以了解到 Redis 为了做到稳定、高性能，都采取了哪些优化方案，以及为什么要这么做？</p><p>掌握了这些原理，这样平时你在使用 Redis 时，就能够做到「游刃有余」。</p><p>这篇文章干货很多，希望你可以耐心读完。</p><p><img src="https://zhaoxiaobin.coding.net/p/blog/d/zhaoxiaobin_img/git/raw/master/post/redis/16263301119967/16263302138270.jpg"></p><h1 id="从最简单的开始：单机版-Redis"><a href="#从最简单的开始：单机版-Redis" class="headerlink" title="从最简单的开始：单机版 Redis"></a>从最简单的开始：单机版 Redis</h1><p>首先，我们从最简单的场景开始。</p><p>假设现在你有一个业务应用，需要引入 Redis 来提高应用的性能，此时你可以选择部署一个单机版的 Redis 来使用，就像这样：</p><p><img src="https://zhaoxiaobin.coding.net/p/blog/d/zhaoxiaobin_img/git/raw/master/post/redis/16263301119967/16263302453021.jpg"></p><p>这个架构非常简单，你的业务应用可以把 Redis 当做缓存来使用，从 MySQL 中查询数据，然后写入到 Redis 中，之后业务应用再从 Redis 中读取这些数据，由于 Redis 的数据都存储在内存中，所以这个速度飞快。</p><p>如果你的业务体量并不大，那这样的架构模型基本可以满足你的需求。是不是很简单？</p><p>随着时间的推移，你的业务体量逐渐发展起来了，Redis 中存储的数据也越来越多，此时你的业务应用对 Redis 的依赖也越来越重。</p><p>但是，突然有一天，你的 Redis 因为某些原因宕机了，这时你的所有业务流量，都会打到后端 MySQL 上，这会导致你的 MySQL 压力剧增，严重的话甚至会压垮 MySQL。</p><p><img src="https://zhaoxiaobin.coding.net/p/blog/d/zhaoxiaobin_img/git/raw/master/post/redis/16263301119967/16263302777906.jpg"></p><p>这时你应该怎么办？</p><p>我猜你的方案肯定是，赶紧重启 Redis，让它可以继续提供服务。</p><p>但是，因为之前 Redis 中的数据都在内存中，尽管你现在把 Redis 重启了，之前的数据也都丢失了。重启后的 Redis 虽然可以正常工作，但是由于 Redis 中没有任何数据，业务流量还是都会打到后端 MySQL 上，MySQL 的压力还是很大。</p><p>这可怎么办？你陷入了沉思。</p><p>有没有什么好的办法解决这个问题？</p><p>既然 Redis 只把数据存储在内存中，那是否可以把这些数据也写一份到磁盘上呢？</p><p>如果采用这种方式，当 Redis 重启时，我们把磁盘中的数据快速<strong>恢复</strong>到内存中，这样它就可以继续正常提供服务了。</p><p>是的，这是一个很好的解决方案，这个把内存数据写到磁盘上的过程，就是「数据持久化」。</p><h1 id="数据持久化：有备无患"><a href="#数据持久化：有备无患" class="headerlink" title="数据持久化：有备无患"></a>数据持久化：有备无患</h1><p>现在，你设想的 Redis 数据持久化是这样的：</p><p><img src="https://zhaoxiaobin.coding.net/p/blog/d/zhaoxiaobin_img/git/raw/master/post/redis/16263301119967/16263302909228.jpg"></p><p>但是，数据持久化具体应该怎么做呢？</p><p>我猜你最容易想到的一个方案是，Redis 每一次执行写操作，除了写内存之外，同时也写一份到磁盘上，就像这样：</p><p><img src="https://zhaoxiaobin.coding.net/p/blog/d/zhaoxiaobin_img/git/raw/master/post/redis/16263301119967/16263303001981.jpg"></p><p>没错，这是最简单直接的方案。</p><p>但仔细想一下，这个方案有个问题：客户端的每次写操作，既需要写内存，又需要写磁盘，而写磁盘的耗时相比于写内存来说，肯定要慢很多！这势必会影响到 Redis 的性能。</p><p>如何规避这个问题？</p><p>我们可以这样优化：Redis 写内存由主线程来做，写内存完成后就给客户端返回结果，然后 Redis 用另一个线程去写磁盘，这样就可以避免主线程写磁盘对性能的影响。</p><p>这确实是一个好方案。除此之外，我们可以换个角度，思考一下还有什么方式可以持久化数据？</p><p>这时你就要结合 Redis 的使用场景来考虑了。</p><p>回忆一下，我们在使用 Redis 时，通常把它用作什么场景？</p><p>是的，缓存。</p><p>把 Redis 当做缓存来用，意味着尽管 Redis 中没有保存全量数据，对于不在缓存中的数据，我们的业务应用依旧可以通过查询后端数据库得到结果，只不过查询后端数据的速度会慢一点而已，但对业务结果其实是没有影响的。</p><p>基于这个特点，我们的 Redis 数据持久化还可以用「数据快照」的方式来做。</p><p>那什么是数据快照呢？</p><p>简单来讲，你可以这么理解：</p><ol><li>你把 Redis 想象成一个水杯，向 Redis 写入数据，就相当于往这个杯子里倒水</li><li>此时你拿一个相机给这个水杯拍一张照片，拍照的这一瞬间，照片中记录到这个水杯中水的容量，就是水杯的数据快照</li></ol><p><img src="https://zhaoxiaobin.coding.net/p/blog/d/zhaoxiaobin_img/git/raw/master/post/redis/16263301119967/16263303158542.jpg"></p><p>也就是说，Redis 的数据快照，是记录某一时刻下 Redis 中的数据，然后只需要把这个数据快照写到磁盘上就可以了。</p><p>它的优势在于，只在需要持久化时，把数据「一次性」写入磁盘，其它时间都不需要操作磁盘。</p><p>基于这个方案，我们可以<strong>定时</strong>给 Redis 做数据快照，把数据持久化到磁盘上。</p><p><img src="https://zhaoxiaobin.coding.net/p/blog/d/zhaoxiaobin_img/git/raw/master/post/redis/16263301119967/16263303258913.jpg"></p><p>其实，上面说的这些持久化方案，就是 Redis 的「RDB」和「AOF」：</p><ul><li>RDB：只持久化某一时刻的数据快照到磁盘上（创建一个子进程来做）</li><li>AOF：每一次写操作都持久到磁盘（主线程写内存，根据策略可以配置由主线程还是子线程进行数据持久化）</li></ul><p>它们的区别除了上面讲到的，还有以下特点：</p><ol><li>RDB 采用二进制 + 数据压缩的方式写磁盘，这样文件体积小，数据恢复速度也快</li><li>AOF 记录的是每一次写命令，数据最全，但文件体积大，数据恢复速度慢</li></ol><p>如果让你来选择持久化方案，你可以这样选择：</p><ol><li>如果你的业务对于数据丢失不敏感，采用 RDB 方案持久化数据</li><li>如果你的业务对数据完整性要求比较高，采用 AOF 方案持久化数据</li></ol><p>假设你的业务对 Redis 数据完整性要求比较高，选择了 AOF 方案，那此时你又会遇到这些问题：</p><ol><li>AOF 记录每一次写操作，随着时间增长，AOF 文件体积会越来越大</li><li>这么大的 AOF 文件，在数据恢复时变得非常慢</li></ol><p>这怎么办？数据完整性要求变高了，恢复数据也变困难了？有没有什么方法，可以缩小文件体积？提升恢复速度呢？</p><p>我们继续来分析 AOF 的特点。</p><p>由于 AOF 文件中记录的都是每一次写操作，但对于同一个 key 可能会发生多次修改，我们只保留最后一次被修改的值，是不是也可以？</p><p>是的，这就是我们经常听到的「AOF rewrite」，你也可以把它理解为 AOF 「瘦身」。</p><p>我们可以对 AOF 文件定时 rewrite，避免这个文件体积持续膨胀，这样在恢复时就可以缩短恢复时间了。</p><p><img src="https://zhaoxiaobin.coding.net/p/blog/d/zhaoxiaobin_img/git/raw/master/post/redis/16263301119967/16263303400038.jpg"></p><p>再进一步思考一下，还有没有办法继续缩小 AOF 文件？</p><p>回顾一下我们前面讲到的，RDB 和 AOF 各自的特点：</p><ol><li>RDB 以二进制 + 数据压缩方式存储，文件体积小</li><li>AOF 记录每一次写命令，数据最全</li></ol><p>我们可否利用它们各自的优势呢？</p><p>当然可以，这就是 Redis 的「混合持久化」。</p><p>具体来说，当 AOF rewrite 时，Redis 先以 RDB 格式在 AOF 文件中写入一个数据快照，再把在这期间产生的每一个写命令，追加到 AOF 文件中。因为 RDB 是二进制压缩写入的，这样 AOF 文件体积就变得更小了。</p><p><img src="https://zhaoxiaobin.coding.net/p/blog/d/zhaoxiaobin_img/git/raw/master/post/redis/16263301119967/16263303501119.jpg"></p><p>此时，你在使用 AOF 文件恢复数据时，这个恢复时间就会更短了！</p><blockquote><p>Redis 4.0 以上版本才支持混合持久化。</p></blockquote><p>这么一番优化，你的 Redis 再也不用担心实例宕机了，当发生宕机时，你就可以用持久化文件快速恢复 Redis 中的数据。</p><p>但这样就没问题了吗？</p><p>仔细想一下，虽然我们已经把持久化的文件优化到最小了，但在恢复数据时依旧是需要时间的，在这期间你的业务应用还是会受到影响，这怎么办？</p><p>我们来分析有没有更好的方案。</p><p>一个实例宕机，只能用恢复数据来解决，那我们是否可以部署多个 Redis 实例，然后让这些实例数据保持实时同步，这样当一个实例宕机时，我们在剩下的实例中选择一个继续提供服务就好了。</p><p>没错，这个方案就是接下来要讲的「主从复制：多副本」。</p><h1 id="主从复制：多副本"><a href="#主从复制：多副本" class="headerlink" title="主从复制：多副本"></a>主从复制：多副本</h1><p>此时，你可以部署多个 Redis 实例，架构模型就变成了这样：</p><p><img src="https://zhaoxiaobin.coding.net/p/blog/d/zhaoxiaobin_img/git/raw/master/post/redis/16263301119967/16263303674081.jpg"></p><p>我们这里把实时读写的节点叫做 master，另一个实时同步数据的节点叫做 slave。</p><p>采用多副本的方案，它的优势是：</p><ol><li>缩短不可用时间：master 发生宕机，我们可以手动把 slave 提升为 master 继续提供服务</li><li>提升读性能：让 slave 分担一部分读请求，提升应用的整体性能</li></ol><p><img src="https://zhaoxiaobin.coding.net/p/blog/d/zhaoxiaobin_img/git/raw/master/post/redis/16263301119967/16263303785232.jpg"></p><p>这个方案不错，不仅节省了数据恢复的时间，还能提升性能，那它有什么问题吗？</p><p>你可以思考一下。</p><p>其实，它的问题在于：当 master 宕机时，我们需要「手动」把 slave 提升为 master，这个过程也是需要花费时间的。</p><p>虽然比恢复数据要快得多，但还是需要人工介入处理。一旦需要人工介入，就必须要算上人的反应时间、操作时间，所以，在这期间你的业务应用依旧会受到影响。</p><p>怎么解决这个问题？我们是否可以把这个切换的过程，变成自动化呢？</p><p>对于这种情况，我们需要一个「故障自动切换」机制，这就是我们经常听到的「哨兵」所具备的能力。</p><h1 id="哨兵：故障自动切换"><a href="#哨兵：故障自动切换" class="headerlink" title="哨兵：故障自动切换"></a>哨兵：故障自动切换</h1><p>现在，我们可以引入一个「观察者」，让这个观察者去实时监测 master 的健康状态，这个观察者就是「哨兵」。</p><p>具体如何做？</p><ol><li>哨兵每间隔一段时间，询问 master 是否正常</li><li>master 正常回复，表示状态正常，回复超时表示异常</li><li>哨兵发现异常，发起主从切换</li></ol><p><img src="https://zhaoxiaobin.coding.net/p/blog/d/zhaoxiaobin_img/git/raw/master/post/redis/16263301119967/16263303905377.jpg"></p><p>有了这个方案，就不需要人去介入处理了，一切就变得自动化了，是不是很爽？</p><p>但这里还有一个问题，如果 master 状态正常，但这个哨兵在询问 master 时，它们之间的网络发生了问题，那这个哨兵可能会误判。</p><p><img src="https://zhaoxiaobin.coding.net/p/blog/d/zhaoxiaobin_img/git/raw/master/post/redis/16263301119967/16263303990475.jpg"></p><p>这个问题怎么解决？</p><p>答案是，我们可以部署多个哨兵，让它们分布在不同的机器上，它们一起监测 master 的状态，流程就变成了这样：</p><ol><li>多个哨兵每间隔一段时间，询问 master 是否正常</li><li>master 正常回复，表示状态正常，回复超时表示异常</li><li>一旦有一个哨兵判定 master 异常（不管是否是网络问题），就询问其它哨兵，如果多个哨兵（设置一个阈值）都认为 master 异常了，这才判定 master 确实发生了故障</li><li>多个哨兵经过协商后，判定 master 故障，则发起主从切换</li></ol><p>所以，我们用多个哨兵互相协商来判定 master 的状态，这样一来，就可以大大降低误判的概率。</p><p>哨兵协商判定 master 异常后，这里还有一个问题：<strong>由哪个哨兵来发起主从切换呢？</strong></p><p>答案是，选出一个哨兵「领导者」，由这个领导者进行主从切换。</p><p>问题又来了，这个领导者怎么选？</p><p>想象一下，在现实生活中，选举是怎么做的？</p><p>是的，投票。</p><p>在选举哨兵领导者时，我们可以制定这样一个选举规则：</p><ol><li>每个哨兵都询问其它哨兵，请求对方为自己投票</li><li>每个哨兵只投票给第一个请求投票的哨兵，且只能投票一次</li><li>首先拿到超过半数投票的哨兵，当选为领导者，发起主从切换</li></ol><p>其实，这个选举的过程就是我们经常听到的：分布式系统领域中的「共识算法」。</p><p>什么是共识算法？</p><p>我们在多个机器部署哨兵，它们需要共同协作完成一项任务，所以它们就组成了一个「分布式系统」。</p><p>在分布式系统领域，多个节点如何就一个问题达成共识的算法，就叫共识算法。</p><p>在这个场景下，多个哨兵共同协商，选举出一个都认可的领导者，就是使用共识算法完成的。</p><p>这个算法还规定节点的数量必须是奇数个，这样可以保证系统中即使有节点发生了故障，剩余超过「半数」的节点状态正常，依旧可以提供正确的结果，也就是说，这个算法还兼容了存在故障节点的情况。</p><blockquote><p>共识算法在分布式系统领域有很多，例如 Paxos、Raft，哨兵选举领导者这个场景，使用的是 Raft 共识算法，因为它足够简单，且易于实现。</p></blockquote><p>现在，我们用多个哨兵共同监测 Redis 的状态，这样一来，就可以避免误判的问题了，架构模型就变成了这样：</p><p><img src="https://zhaoxiaobin.coding.net/p/blog/d/zhaoxiaobin_img/git/raw/master/post/redis/16263301119967/16263304099124.jpg"></p><p>好了，到这里我们先小结一下。</p><p>你的 Redis 从最简单的单机版，经过数据持久化、主从多副本、哨兵集群，这一路优化下来，你的 Redis 不管是性能还是稳定性，都越来越高，就算节点发生故障，也不用担心了。</p><p>你的 Redis 以这样的架构模式部署，基本上就可以稳定运行很长时间了。</p><p>…</p><p>随着时间的发展，你的业务体量开始迎来了爆炸性增长，此时你的架构模型，还能够承担这么大的流量吗？</p><p>我们一起来分析一下：</p><ol><li>稳定性：Redis 故障宕机，我们有哨兵 + 副本，可以自动完成主从切换</li><li>性能：读请求量增长，我们可以再部署多个 slave，读写分离，分担读压力</li><li>性能：写请求量增长，但我们只有一个 master 实例，这个实例达到瓶颈怎么办？</li></ol><p>看到了么，当你的写请求量越来越大时，一个 master 实例可能就无法承担这么大的写流量了。</p><p>要想完美解决这个问题，此时你就需要考虑使用「分片集群」了。</p><h1 id="分片集群：横向扩展"><a href="#分片集群：横向扩展" class="headerlink" title="分片集群：横向扩展"></a>分片集群：横向扩展</h1><p>什么是「分片集群」？</p><p>简单来讲，一个实例扛不住写压力，那我们是否可以部署多个实例，然后把这些实例按照一定规则组织起来，把它们当成一个整体，对外提供服务，这样不就可以解决集中写一个实例的瓶颈问题吗？</p><p>所以，现在的架构模型就变成了这样：</p><p><img src="https://zhaoxiaobin.coding.net/p/blog/d/zhaoxiaobin_img/git/raw/master/post/redis/16263301119967/16263304214265.jpg"></p><p>现在问题又来了，这么多实例如何组织呢？</p><p>我们制定规则如下：</p><ol><li>每个节点各自存储一部分数据，所有节点数据之和才是全量数据</li><li>制定一个路由规则，对于不同的 key，把它路由到固定一个实例上进行读写</li></ol><p>而分片集群根据路由规则所在位置的不同，还可以分为两大类：</p><ol><li>客户端分片</li><li>服务端分片</li></ol><p>客户端分片指的是，key 的路由规则放在客户端来做，就是下面这样：</p><p><img src="https://zhaoxiaobin.coding.net/p/blog/d/zhaoxiaobin_img/git/raw/master/post/redis/16263301119967/16263304313454.jpg"></p><p>这个方案的缺点是，客户端需要维护这个路由规则，也就是说，你需要把路由规则写到你的业务代码中。</p><p>如何做到不把路由规则耦合在业务代码中呢？</p><p>你可以这样优化，把这个路由规则封装成一个模块，当需要使用时，集成这个模块就可以了。</p><p>这就是 Redis Cluster 的采用的方案。</p><p><img src="https://zhaoxiaobin.coding.net/p/blog/d/zhaoxiaobin_img/git/raw/master/post/redis/16263301119967/16263304418922.jpg"></p><blockquote><p>Redis Cluster 内置了哨兵逻辑，无需再部署哨兵。</p></blockquote><p>当你使用 Redis Cluster 时，你的业务应用需要使用配套的 Redis SDK，这个 SDK 内就集成好了路由规则，不需要你自己编写了。</p><p>再来看服务端分片。</p><p>这种方案指的是，路由规则不放在客户端来做，而是在客户端和服务端之间增加一个「中间代理层」，这个代理就是我们经常听到的 Proxy。</p><p>而数据的路由规则，就放在这个 Proxy 层来维护。</p><p>这样一来，你就无需关心服务端有多少个 Redis 节点了，只需要和这个 Proxy 交互即可。</p><p>Proxy 会把你的请求根据路由规则，转发到对应的 Redis 节点上，而且，当集群实例不足以支撑更大的流量请求时，还可以横向扩容，添加新的 Redis 实例提升性能，这一切对于你的客户端来说，都是透明无感知的。</p><p>业界开源的 Redis 分片集群方案，例如 Twemproxy、Codis 就是采用的这种方案。</p><p><img src="https://zhaoxiaobin.coding.net/p/blog/d/zhaoxiaobin_img/git/raw/master/post/redis/16263301119967/16263304534937.jpg"></p><blockquote><p>分片集群在数据扩容时，还涉及到了很多细节，这块内容不是本文章重点，所以暂不详述。</p></blockquote><p>至此，当你使用分片集群后，对于未来更大的流量压力，都可以从容面对了！</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>好了，我们来总结一下，我们是如何一步步构建一个稳定、高性能的 Redis 集群的。</p><p>首先，在使用最简单的单机版 Redis 时，我们发现当 Redis 故障宕机后，数据无法恢复的问题，因此我们想到了「数据持久化」，把内存中的数据也持久化到磁盘上一份，这样 Redis 重启后就可以从磁盘上快速恢复数据。</p><p>在进行数据持久化时，我们又面临如何更高效地将数据持久化到磁盘的问题。之后我们发现 Redis 提供了 RDB 和 AOF 两种方案，分别对应了数据快照和实时的命令记录。当我们对数据完整性要求不高时，可以选择 RDB 持久化方案。如果对于数据完整性要求较高，那么可以选择 AOF 持久化方案。</p><p>但是我们又发现，AOF 文件体积会随着时间增长变得越来越大，此时我们想到的优化方案是，使用 AOF rewrite 的方式对其进行瘦身，减小文件体积，再后来，我们发现可以结合 RDB 和 AOF 各自的优势，在 AOF rewrite 时使用两者结合的「混合持久化」方式，又进一步减小了 AOF 文件体积。</p><p>之后，我们发现尽管可以通过数据恢复的方式还原数据，但恢复数据也是需要花费时间的，这意味着业务应用还是会受到影响。我们进一步优化，采用「多副本」的方案，让多个实例保持实时同步，当一个实例故障时，可以手动把其它实例提升上来继续提供服务。</p><p>但是这样也有问题，手动提升实例上来，需要人工介入，人工介入操作也需要时间，我们开始想办法把这个流程变得自动化，所以我们又引入了「哨兵」集群，哨兵集群通过互相协商的方式，发现故障节点，并可以自动完成切换，这样就大幅降低了对业务应用的影响。</p><p>最后，我们把关注点聚焦在如何支撑更大的写流量上，所以，我们又引入了「分片集群」来解决这个问题，让多个 Redis 实例分摊写压力，未来面对更大的流量，我们还可以添加新的实例，横向扩展，进一步提升集群的性能。</p><p>至此，我们的 Redis 集群才得以长期稳定、高性能的为我们的业务提供服务。</p><p>这里我画了一个思维导图，方便你更好地去理解它们之间的关系，以及演化的过程。</p><p><img src="https://zhaoxiaobin.coding.net/p/blog/d/zhaoxiaobin_img/git/raw/master/post/redis/16263301119967/16263304658240.jpg"></p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>看到这里，我想你对如何构建一个稳定、高性能的 Redis 集群问题时，应该会有自己的见解了。</p><p>其实，这篇文章所讲的优化思路，围绕的主题就是「架构设计」的核心思想：</p><ul><li>高性能：读写分离、分片集群</li><li>高可用：数据持久化、多副本、故障自动切换</li><li>易扩展：分片集群、横向扩展</li></ul><p>当我们讲到哨兵集群、分片集群时，这还涉及到了「分布式系统」相关的知识：</p><ul><li>分布式共识：哨兵领导者选举</li><li>负载均衡：分片集群数据分片、数据路由</li></ul><p>当然，除了 Redis 之外，对于构建任何一个数据集群，你都可以沿用这个思路去思考、去优化，看看它们到底是如何做的。</p><p>例如当你在使用 MySQL 时，你可以思考一下 MySQL 与 Redis 有哪些不同？MySQL 为了做到高性能、高可用，又是如何做的？其实思路都是类似的。</p><p>我们现在到处可见分布式系统、数据集群，我希望通过这篇文章，你可以理解这些软件是如何一步步演化过来的，在演化过程中，它们遇到了哪些问题，为了解决这些问题，这些软件的设计者设计了怎样的方案，做了哪些取舍？</p><p>你只有了解了其中的原理，掌握了分析问题、解决问题的能力，这样在以后的开发过程中，或是学习其它优秀软件时，就能快速地找到「重点」，在最短的时间掌握它，并能在实际应用中发挥它们的优势。</p><p>其实这个思考过程，也是做「架构设计」的思路。在做软件架构设计时，你面临的场景就是发现问题、分析问题、解决问题，一步步去演化、升级你的架构，最后在性能、可靠性方面达到一个平衡。虽然各种软件层出不穷，但架构设计的思想不会变，我希望你真正吸收的是这些思想，这样才可以做到以不变应万变。<br><br><br></p>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>拒绝躺平，如何使用AOP的环绕通知实现分布式锁</title>
      <link href="Redis/%E6%8B%92%E7%BB%9D%E8%BA%BA%E5%B9%B3%EF%BC%8C%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8AOP%E7%9A%84%E7%8E%AF%E7%BB%95%E9%80%9A%E7%9F%A5%E5%AE%9E%E7%8E%B0%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/"/>
      <url>Redis/%E6%8B%92%E7%BB%9D%E8%BA%BA%E5%B9%B3%EF%BC%8C%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8AOP%E7%9A%84%E7%8E%AF%E7%BB%95%E9%80%9A%E7%9F%A5%E5%AE%9E%E7%8E%B0%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>如何在分布式环境下，像用<code>synchronized</code>关键字那样使用分布式锁。比如开发一个注解，叫<code>@DistributionLock</code>，作用于一个方法函数上，每次调方法前加锁，调完之后自动释放锁。</p><p>可以利用Spring AOP中环绕通知的特性，完全满足上面的要求。</p><h2 id="1、Maven依赖"><a href="#1、Maven依赖" class="headerlink" title="1、Maven依赖"></a>1、Maven依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.redisson<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>redisson-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.11.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这里采用<code>redisson</code>这个第三方库来做<code>redis</code>的分布式锁，<code>redis</code>配置不在这里展开，可以参考文末贴出的代码地址或具体可以看这篇 <a href="https://zhaoxiaobin.net/Redis/Redisson%E5%AE%9E%E7%8E%B0%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/">https://zhaoxiaobin.net/Redis/Redisson实现分布式锁/</a></p><h2 id="2、开发自定义注解"><a href="#2、开发自定义注解" class="headerlink" title="2、开发自定义注解"></a>2、开发自定义注解</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(ElementType.METHOD)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> DistributionLock &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 分布式锁key</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span> <span class="keyword">default</span> &quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取分布式锁的等待时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">waitTime</span><span class="params">()</span> <span class="keyword">default</span> 5 * 1000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 分布式锁key所在参数列表中的位置</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">index</span><span class="params">()</span> <span class="keyword">default</span> -1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里按照锁的粗细粒度分为两种模式：</p><ol><li>粗粒度：由注解中的<code>value</code>字段指定，编译阶段就确定了，同一个方法（业务）共享该锁。不管是谁调这个方法，都是按串行执行。</li><li>细粒度：方法的参数列表中的一个参数作为锁的<code>key</code>值，比如一个编号、一个流水号等等业务唯一参数。主要应用在如果同一个（同一组）交易允许不同人同时做，但同一个人必须串行执行的场景；由<code>index</code>指定作为<code>key</code>的形参位置。</li></ol><h2 id="3、开发切面"><a href="#3、开发切面" class="headerlink" title="3、开发切面"></a>3、开发切面</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Order(Integer.MIN_VALUE + 1)</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DistributionLockAspect</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedissonClient redissonClient;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around(&quot;@annotation(distributionLock)&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">doAround</span><span class="params">(ProceedingJoinPoint point, DistributionLock distributionLock)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        String methodName = point.getSignature().getName();</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isNotBlank(distributionLock.value())) &#123;</span><br><span class="line">            <span class="comment">// 锁粒度较粗，由目标方法上的DistributionLock注解中指定锁的名称，由同一个方法（业务）共享该锁</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.tryLock(point, distributionLock.value(), distributionLock.waitTime());</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (distributionLock.index() &gt;= <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="comment">// 锁粒度较细，由目标方法的第x个参数作为锁名称，可以是一个业务上的编号、名称等等</span></span><br><span class="line">            Object[] args = point.getArgs(); <span class="comment">// 参数列表</span></span><br><span class="line">            <span class="keyword">int</span> index = distributionLock.index(); <span class="comment">// 参数列表中第几个参数作为分布式锁的key</span></span><br><span class="line">            <span class="keyword">if</span> (args.length &lt;= index) &#123;</span><br><span class="line">                log.error(<span class="string">&quot;目标方法:&#123;&#125;上没有第:&#123;&#125;参数&quot;</span>, methodName, index);</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;目标方法:&quot;</span> + methodName + <span class="string">&quot;上没有第:&quot;</span> + index + <span class="string">&quot;参数&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            String key = args[index].toString();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.tryLock(point, key, distributionLock.waitTime());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            log.error(<span class="string">&quot;没有配置具体分布式锁的key,目标方法:&#123;&#125;&quot;</span>, methodName);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;没有配置具体分布式锁的key,目标方法:&quot;</span> + methodName);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 只获取、释放锁，不处理任何异常，原样抛出异常</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> point    切入点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key      分布式锁的key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> waitTime 获取锁等待时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Throwable</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Object <span class="title">tryLock</span><span class="params">(ProceedingJoinPoint point, String key, <span class="keyword">int</span> waitTime)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        RLock disLock = redissonClient.getLock(key);</span><br><span class="line">        <span class="comment">// 默认30秒后自动过期，每隔30/3=10秒，看门狗（守护线程）会去续期锁，重设为30秒</span></span><br><span class="line">        <span class="keyword">boolean</span> tryLock = disLock.tryLock(waitTime, TimeUnit.MILLISECONDS);</span><br><span class="line">        <span class="keyword">if</span> (!tryLock) &#123;</span><br><span class="line">            <span class="comment">// 由具体业务决定是抛异常还是返回null或其他业务对象</span></span><br><span class="line"><span class="comment">//            throw new RuntimeException(&quot;获取分布式锁失败&quot;);</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> point.proceed(point.getArgs());</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                disLock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4、模拟测试扣库存"><a href="#4、模拟测试扣库存" class="headerlink" title="4、模拟测试扣库存"></a>4、模拟测试扣库存</h2><p><strong>业务操作</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DistributionLockDemo</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 库存</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> count = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">increment</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (count &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            count--;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>模拟发起交易</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DistributionLockTests</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DistributionLockDemo distributionLockDemo;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 多线程并行处理500个请求，扣库存</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDistributionLock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> successCount = IntStream.range(<span class="number">0</span>, <span class="number">500</span>).parallel().filter(j -&gt; distributionLockDemo.increment()).count();</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">&quot;成功数:&#123;&#125;&quot;</span>, successCount);</span><br><span class="line">        log.info(<span class="string">&quot;剩余库存:&#123;&#125;&quot;</span>, distributionLockDemo.get());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里用<code>Java8</code>的并行流并发去发50个交易来模拟扣20的库存，不加锁的情况下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2021</span>-<span class="number">06</span>-<span class="number">30</span> <span class="number">18</span>:<span class="number">10</span>:<span class="number">20</span>,<span class="number">942</span> [INFO] [main] [net.zhaoxiaobin.redisson.DistributionLockTests:<span class="number">35</span>] [] 成功数:<span class="number">27</span></span><br><span class="line"><span class="number">2021</span>-<span class="number">06</span>-<span class="number">30</span> <span class="number">18</span>:<span class="number">10</span>:<span class="number">20</span>,<span class="number">942</span> [INFO] [main] [net.zhaoxiaobin.redisson.DistributionLockTests:<span class="number">36</span>] [] 剩余库存:<span class="number">0</span></span><br></pre></td></tr></table></figure><p>给<code>increment</code>方法加上分布式锁注解，再测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@DistributionLock(value = &quot;incrementLock&quot;, waitTime = 1000)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">increment</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (count &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        count--;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2021</span>-<span class="number">06</span>-<span class="number">30</span> <span class="number">18</span>:<span class="number">11</span>:<span class="number">30</span>,<span class="number">722</span> [INFO] [main] [net.zhaoxiaobin.redisson.DistributionLockTests:<span class="number">35</span>] [] 成功数:<span class="number">20</span></span><br><span class="line"><span class="number">2021</span>-<span class="number">06</span>-<span class="number">30</span> <span class="number">18</span>:<span class="number">11</span>:<span class="number">30</span>,<span class="number">722</span> [INFO] [main] [net.zhaoxiaobin.redisson.DistributionLockTests:<span class="number">36</span>] [] 剩余库存:<span class="number">0</span></span><br></pre></td></tr></table></figure><p>以上案例不是太严谨，为了测试方便，只是测了单机并没有测集群的效果。有条件可以连上数据库并起多个服务去扣库里的数据，看分布式锁效果如何。</p><h2 id="5、分布式锁的安全性"><a href="#5、分布式锁的安全性" class="headerlink" title="5、分布式锁的安全性"></a>5、分布式锁的安全性</h2><p>相信有不少同学都知道<code>Redis</code>的分布式锁不是那么的万无一失；比如主从切换导致锁丢失，还有NPC等问题影响锁的安全性，具体可以参考这篇 <a href="https://zhaoxiaobin.net/Redis/Redis%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E7%9C%9F%E7%9A%84%E5%AE%89%E5%85%A8%E5%90%97%EF%BC%9F%E8%AE%B2%E7%9A%84%E6%9C%80%E8%AF%A6%E7%BB%86%E7%9A%84%E4%B8%80%E7%AF%87%EF%BC%88%E8%BD%AC%E8%BD%BD%EF%BC%89/">https://zhaoxiaobin.net/Redis/Redis分布式锁真的安全吗？讲的最详细的一篇（转载）/</a></p><p><strong>建议</strong>：</p><ol><li>对于要求数据绝对正确的业务，在资源层一定要做好「兜底」，比如数据库的乐观锁、类似<code>CAS</code>等操作。</li><li>使用分布式锁，在上层完成「互斥」目的，虽然极端情况下锁会失效，但它可以最大程度把并发请求阻挡在最上层，减轻操作资源层的压力。</li></ol><h2 id="代码地址"><a href="#代码地址" class="headerlink" title="代码地址"></a>代码地址</h2><ul><li>github：<a href="https://github.com/senlinmu1008/redis-action/tree/master/redisson">https://github.com/senlinmu1008/redis-action/tree/master/redisson</a></li><li>gitee：<a href="https://gitee.com/ppbin/redis-action/tree/master/redisson">https://gitee.com/ppbin/redis-action/tree/master/redisson</a><br><br><br></li></ul>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
            <tag> 分布式锁 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用Linux命令大全</title>
      <link href="%E5%85%B6%E5%AE%83/%E5%B8%B8%E7%94%A8Linux%E5%91%BD%E4%BB%A4%E5%A4%A7%E5%85%A8/"/>
      <url>%E5%85%B6%E5%AE%83/%E5%B8%B8%E7%94%A8Linux%E5%91%BD%E4%BB%A4%E5%A4%A7%E5%85%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="关机-重启-注销"><a href="#关机-重启-注销" class="headerlink" title="关机/重启/注销"></a>关机/重启/注销</h2><table><thead><tr><th align="center">常用命令</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">shutdown -h now</td><td align="center">即刻关机</td></tr><tr><td align="center">shutdown -h 10</td><td align="center">10分钟后关机</td></tr><tr><td align="center">shutdown -h 11:00</td><td align="center">11：00关机</td></tr><tr><td align="center">shutdown -h +10</td><td align="center">预定时间关机（10分钟后）</td></tr><tr><td align="center">shutdown -c</td><td align="center">取消指定时间关机</td></tr><tr><td align="center">shutdown -r now</td><td align="center">重启</td></tr><tr><td align="center">shutdown -r 10</td><td align="center">10分钟之后重启</td></tr><tr><td align="center">shutdown -r 11:00</td><td align="center">定时重启</td></tr><tr><td align="center">reboot</td><td align="center">重启</td></tr><tr><td align="center">init 6</td><td align="center">重启</td></tr><tr><td align="center">init 0</td><td align="center">⽴刻关机</td></tr><tr><td align="center">telinit 0</td><td align="center">关机</td></tr><tr><td align="center">poweroff</td><td align="center">⽴刻关机</td></tr><tr><td align="center">halt</td><td align="center">关机</td></tr><tr><td align="center">sync</td><td align="center">buff数据同步到磁盘</td></tr><tr><td align="center">logout</td><td align="center">退出登录Shell</td></tr><tr><td align="center">…</td><td align="center">…</td></tr></tbody></table><h2 id="系统信息和性能查看"><a href="#系统信息和性能查看" class="headerlink" title="系统信息和性能查看"></a>系统信息和性能查看</h2><table><thead><tr><th align="center">常用命令</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">uname -a</td><td align="center">查看内核/OS/CPU信息</td></tr><tr><td align="center">uname -r</td><td align="center">查看内核版本</td></tr><tr><td align="center">uname -m</td><td align="center">查看处理器架构</td></tr><tr><td align="center">arch</td><td align="center">查看处理器架构</td></tr><tr><td align="center">hostname</td><td align="center">查看计算机名</td></tr><tr><td align="center">who</td><td align="center">显示当前登录系统的⽤户</td></tr><tr><td align="center">who am i</td><td align="center">显示登录时的⽤户名</td></tr><tr><td align="center">whoami</td><td align="center">显示当前⽤户名</td></tr><tr><td align="center">cat /proc/version</td><td align="center">查看linux版本信息</td></tr><tr><td align="center">cat /proc/cpuinfo</td><td align="center">查看CPU信息</td></tr><tr><td align="center">cat /proc/interrupts</td><td align="center">查看中断</td></tr><tr><td align="center">cat /proc/loadavg</td><td align="center">查看系统负载</td></tr><tr><td align="center">uptime</td><td align="center">查看系统运⾏时间、⽤户数、负载</td></tr><tr><td align="center">env</td><td align="center">查看系统的环境变量</td></tr><tr><td align="center">lsusb -tv</td><td align="center">查看系统USB设备信息</td></tr><tr><td align="center">lspci -tv</td><td align="center">查看系统PCI设备信息</td></tr><tr><td align="center">lsmod</td><td align="center">查看已加载的系统模块</td></tr><tr><td align="center">grep MemTotal /proc/meminfo</td><td align="center">查看内存总量</td></tr><tr><td align="center">grep MemFree /proc/meminfo</td><td align="center">查看空闲内存量</td></tr><tr><td align="center">free -m</td><td align="center">查看内存⽤量和交换区⽤量</td></tr><tr><td align="center">date</td><td align="center">显示系统⽇期时间</td></tr><tr><td align="center">cal 2021</td><td align="center">显示2021⽇历表</td></tr><tr><td align="center">top</td><td align="center">动态显示cpu/内存/进程等情况</td></tr><tr><td align="center">vmstat 1 20</td><td align="center">每1秒采⼀次系统状态，采20次</td></tr><tr><td align="center">export LANG=zh_CN.utf-8</td><td align="center">设置编码</td></tr><tr><td align="center">…</td><td align="center">…</td></tr></tbody></table><h2 id="磁盘和分区"><a href="#磁盘和分区" class="headerlink" title="磁盘和分区"></a>磁盘和分区</h2><table><thead><tr><th align="center">常用命令</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">fdisk -l</td><td align="center">查看所有磁盘分区</td></tr><tr><td align="center">swapon -s</td><td align="center">查看所有交换分区</td></tr><tr><td align="center">df -h</td><td align="center">查看磁盘使⽤情况及挂载点</td></tr><tr><td align="center">df -hl</td><td align="center">同上</td></tr><tr><td align="center">du -sh /dir</td><td align="center">查看指定某个⽬录的⼤⼩</td></tr><tr><td align="center">du -sk * | sort -rn</td><td align="center">从⾼到低依次显示⽂件和⽬录⼤⼩</td></tr><tr><td align="center">mount /dev/hda2 /mnt/hda2</td><td align="center">挂载hda2盘</td></tr><tr><td align="center">mount -t ntfs /dev/sdc1 /mnt/usbhd1</td><td align="center">指定⽂件系统类型挂载（如ntfs）</td></tr><tr><td align="center">mount -o loop xxx.iso /mnt/cdrom</td><td align="center">挂载iso⽂件</td></tr><tr><td align="center">mount /dev/sda1 /mnt/usbdisk</td><td align="center">挂载usb盘/闪存设备</td></tr><tr><td align="center">umount -v /dev/sda1</td><td align="center">通过设备名卸载</td></tr><tr><td align="center">umount -v /mnt/mymnt</td><td align="center">通过挂载点卸载</td></tr><tr><td align="center">fuser -km /mnt/hda1</td><td align="center">强制卸载(慎⽤)</td></tr><tr><td align="center">…</td><td align="center">…</td></tr></tbody></table><h2 id="⽤户和⽤户组"><a href="#⽤户和⽤户组" class="headerlink" title="⽤户和⽤户组"></a>⽤户和⽤户组</h2><table><thead><tr><th align="center">常用命令</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">useradd zhaoxiaobin</td><td align="center">创建⽤户</td></tr><tr><td align="center">userdel -r zhaoxiaobin</td><td align="center">删除⽤户</td></tr><tr><td align="center">usermod -g group_name user_name</td><td align="center">修改⽤户的组</td></tr><tr><td align="center">usermod -aG group_name user_name</td><td align="center">将⽤户添加到组</td></tr><tr><td align="center">usermod -s /bin/ksh -d /home/zhaoxiaobin –g dev zhaoxiaobin</td><td align="center">修改⽤户zhaoxiaobin的登录Shell、 主⽬录以及⽤户组</td></tr><tr><td align="center">groups test</td><td align="center">查看test⽤户所在的组</td></tr><tr><td align="center">groupadd group_name</td><td align="center">创建⽤户组</td></tr><tr><td align="center">groupdel group_name</td><td align="center">删除⽤户组</td></tr><tr><td align="center">groupmod -n new_name old_name</td><td align="center">重命名⽤户组</td></tr><tr><td align="center">su - user_name</td><td align="center">完整切换到⼀个⽤户环境</td></tr><tr><td align="center">passwd</td><td align="center">修改⼝令</td></tr><tr><td align="center">passwd zhaoxiaobin</td><td align="center">修改某⽤户的⼝令</td></tr><tr><td align="center">w</td><td align="center">查看活动⽤户</td></tr><tr><td align="center">id zhaoxiaobin</td><td align="center">查看指定⽤户zhaoxiaobin信息</td></tr><tr><td align="center">last</td><td align="center">查看⽤户登录⽇志</td></tr><tr><td align="center">crontab -l</td><td align="center">查看当前⽤户的计划任务</td></tr><tr><td align="center">cut -d: -f1 /etc/passwd</td><td align="center">查看系统所有⽤户</td></tr><tr><td align="center">cut -d: -f1 /etc/group</td><td align="center">查看系统所有组</td></tr><tr><td align="center">…</td><td align="center">…</td></tr></tbody></table><h2 id="⽹络和进程管理"><a href="#⽹络和进程管理" class="headerlink" title="⽹络和进程管理"></a>⽹络和进程管理</h2><table><thead><tr><th align="center">常用命令</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">ifconfig</td><td align="center">查看⽹络接⼝属性</td></tr><tr><td align="center">ifconfig eth0</td><td align="center">查看某⽹卡的配置</td></tr><tr><td align="center">route -n</td><td align="center">查看路由表</td></tr><tr><td align="center">netstat -lntp</td><td align="center">查看所有监听端⼝</td></tr><tr><td align="center">netstat -antp</td><td align="center">查看已经建⽴的TCP连接</td></tr><tr><td align="center">netstat -lutp</td><td align="center">查看TCP/UDP的状态信息</td></tr><tr><td align="center">ifup eth0</td><td align="center">启⽤eth0⽹络设备</td></tr><tr><td align="center">ifdown eth0</td><td align="center">禁⽤eth0⽹络设备</td></tr><tr><td align="center">iptables -L</td><td align="center">查看iptables规则</td></tr><tr><td align="center">ifconfig eth0 192.168.1.1 netmask 255.255.255.0</td><td align="center">配置ip地址</td></tr><tr><td align="center">dhclient eth0</td><td align="center">以dhcp模式启⽤eth0</td></tr><tr><td align="center">route add -net 0/0 gw Gateway_IP</td><td align="center">配置默认⽹关</td></tr><tr><td align="center">route add -net 192.168.0.0 netmask 255.255.0.0 gw 192.168.1.1</td><td align="center">配置静态路由到达⽹ 络’192.168.0.0/16’</td></tr><tr><td align="center">route del 0/0 gw Gateway_IP</td><td align="center">删除静态路由</td></tr><tr><td align="center">host <a href="http://www.zhaoxiaobin.net/">www.zhaoxiaobin.net</a></td><td align="center">解析主机名</td></tr><tr><td align="center">nslookup <a href="http://www.zhaoxiaobin.net/">www.zhaoxiaobin.net</a></td><td align="center">查询DNS记录，查看域名解 析是否正常</td></tr><tr><td align="center">ps -ef</td><td align="center">查看所有进程</td></tr><tr><td align="center">ps -ef | grep redis</td><td align="center">过滤出你需要的进程</td></tr><tr><td align="center">kill -s name</td><td align="center">kill指定名称的进程</td></tr><tr><td align="center">kill -s pid</td><td align="center">kill指定pid的进程</td></tr><tr><td align="center">…</td><td align="center">…</td></tr></tbody></table><h2 id="常⻅系统服务命令"><a href="#常⻅系统服务命令" class="headerlink" title="常⻅系统服务命令"></a>常⻅系统服务命令</h2><table><thead><tr><th align="center">常用命令</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">chkconfig –list</td><td align="center">列出系统服务</td></tr><tr><td align="center">service &lt;服务名&gt; status</td><td align="center">查看某个服务</td></tr><tr><td align="center">service &lt;服务名&gt; start</td><td align="center">启动某个服务</td></tr><tr><td align="center">service &lt;服务名&gt; stop</td><td align="center">终⽌某个服务</td></tr><tr><td align="center">service &lt;服务名&gt; restart</td><td align="center">重启某个服务</td></tr><tr><td align="center">systemctl status &lt;服务名&gt;</td><td align="center">查看某个服务</td></tr><tr><td align="center">systemctl start &lt;服务名&gt;</td><td align="center">启动某个服务</td></tr><tr><td align="center">systemctl stop &lt;服务名&gt;</td><td align="center">终⽌某个服务</td></tr><tr><td align="center">systemctl restart &lt;服务名&gt;</td><td align="center">重启某个服务</td></tr><tr><td align="center">systemctl enable &lt;服务名&gt;</td><td align="center">开启⾃启动</td></tr><tr><td align="center">systemctl disable &lt;服务名&gt;</td><td align="center">关闭⾃启动</td></tr><tr><td align="center">…</td><td align="center">…</td></tr></tbody></table><h2 id="⽂件和⽬录操作"><a href="#⽂件和⽬录操作" class="headerlink" title="⽂件和⽬录操作"></a>⽂件和⽬录操作</h2><table><thead><tr><th align="center">常用命令</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">ls -F</td><td align="center">查看⽬录中内容（显示是⽂件还是⽬录）</td></tr><tr><td align="center">ls -lSr</td><td align="center">查看⽂件和⽬录列表（以⽂件⼤⼩升序查看）</td></tr><tr><td align="center">tree</td><td align="center">查看⽂件和⽬录的树形结构</td></tr><tr><td align="center">mkdir dir1 dir2</td><td align="center">同时创建两个⽬录</td></tr><tr><td align="center">mkdir -p /tmp/dir1/dir2</td><td align="center">创建多个目录（包括父级）</td></tr><tr><td align="center">rmdir dir1</td><td align="center">删除’dir1’⽬录</td></tr><tr><td align="center">mv old_dir new_dir</td><td align="center">重命名/移动⽬录</td></tr><tr><td align="center">cp file1 file2</td><td align="center">复制⽂件</td></tr><tr><td align="center">cp dir/* .</td><td align="center">复制某⽬录下的所有⽂件⾄当前⽬录</td></tr><tr><td align="center">cp -a dir1 dir2</td><td align="center">复制⽬录</td></tr><tr><td align="center">cp -a /tmp/dir1 .</td><td align="center">复制⼀个⽬录⾄当前⽬录</td></tr><tr><td align="center">ln -s file1 link1</td><td align="center">创建指向⽂件/⽬录的软链接</td></tr><tr><td align="center">ln file1 lnk1</td><td align="center">创建指向⽂件/⽬录的物理链接</td></tr><tr><td align="center">find / -name file1</td><td align="center">从跟⽬录开始搜索⽂件/⽬录</td></tr><tr><td align="center">find / -user user1</td><td align="center">搜索⽤户user1的⽂件/⽬录</td></tr><tr><td align="center">find /dir -name *.bin</td><td align="center">在⽬录/dir中搜带有.bin后缀的⽂件</td></tr><tr><td align="center">find ~ -name “test*”</td><td align="center">按文件名在指定目录下查找</td></tr><tr><td align="center">locate &lt;关键词&gt;</td><td align="center">快速定位⽂件</td></tr><tr><td align="center">locate *.mp4</td><td align="center">寻找.mp4结尾的⽂件</td></tr><tr><td align="center">whereis &lt;关键词&gt;</td><td align="center">显示某⼆进制⽂件/可执⾏⽂件的路径</td></tr><tr><td align="center">which &lt;关键词&gt;</td><td align="center">查找系统⽬录下某的⼆进制⽂件</td></tr><tr><td align="center">chmod ugo+rwx dir1</td><td align="center">设置⽬录所有者(u)、群组(g)及其他⼈(o)的读（r）写 (w)执⾏(x)权限</td></tr><tr><td align="center">chmod go-rwx dir1</td><td align="center">移除群组(g)与其他⼈(o)对⽬录的读写执⾏权限</td></tr><tr><td align="center">chown user1 file1</td><td align="center">改变⽂件的所有者属性</td></tr><tr><td align="center">chown -R user1 dir1</td><td align="center">改变⽬录的所有者属性</td></tr><tr><td align="center">chgrp group1 file1</td><td align="center">改变⽂件群组</td></tr><tr><td align="center">chown user1:group1 file1</td><td align="center">改变⽂件的所有⼈和群组</td></tr><tr><td align="center">scp start.sh <a href="mailto:&#x7a;&#120;&#x62;&#x40;&#x31;&#52;&#57;&#x2e;&#x37;&#48;&#46;&#x31;&#53;&#51;&#46;&#x36;&#51;">&#x7a;&#120;&#x62;&#x40;&#x31;&#52;&#57;&#x2e;&#x37;&#48;&#46;&#x31;&#53;&#51;&#46;&#x36;&#51;</a>:/home/zxb</td><td align="center">上传文件</td></tr><tr><td align="center">scp -r testdir <a href="mailto:&#122;&#120;&#x62;&#x40;&#49;&#x34;&#57;&#x2e;&#55;&#x30;&#46;&#x31;&#x35;&#51;&#x2e;&#54;&#51;">&#122;&#120;&#x62;&#x40;&#49;&#x34;&#57;&#x2e;&#55;&#x30;&#46;&#x31;&#x35;&#51;&#x2e;&#54;&#51;</a>:/home/zxb</td><td align="center">上传目录</td></tr><tr><td align="center">scp <a href="mailto:&#122;&#120;&#x62;&#64;&#49;&#x33;&#56;&#x2e;&#57;&#x2e;&#49;&#50;&#55;&#46;&#x31;&#x37;&#x32;">&#122;&#120;&#x62;&#64;&#49;&#x33;&#56;&#x2e;&#57;&#x2e;&#49;&#50;&#55;&#46;&#x31;&#x37;&#x32;</a>:/home/zxb/start.sh /home/zxb</td><td align="center">下载文件</td></tr><tr><td align="center">scp -r <a href="mailto:&#x7a;&#120;&#x62;&#64;&#x31;&#51;&#56;&#46;&#x39;&#x2e;&#x31;&#50;&#55;&#x2e;&#49;&#55;&#50;">&#x7a;&#120;&#x62;&#64;&#x31;&#51;&#56;&#46;&#x39;&#x2e;&#x31;&#50;&#55;&#x2e;&#49;&#55;&#50;</a>:/home/zxb/testdir /home/zxb</td><td align="center">下载目录</td></tr><tr><td align="center">…</td><td align="center">…</td></tr></tbody></table><h2 id="⽂件查看和处理"><a href="#⽂件查看和处理" class="headerlink" title="⽂件查看和处理"></a>⽂件查看和处理</h2><table><thead><tr><th align="center">常用命令</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">cat file1</td><td align="center">查看⽂件内容</td></tr><tr><td align="center">cat -n file1</td><td align="center">查看内容并标示⾏数</td></tr><tr><td align="center">tac file1</td><td align="center">从最后⼀⾏开始反看⽂件内容</td></tr><tr><td align="center">more file1</td><td align="center">查看⼀个⻓⽂件的内容</td></tr><tr><td align="center">less file1</td><td align="center">类似more命令，但允许反向操作</td></tr><tr><td align="center">head -2 file1</td><td align="center">查看⽂件前两⾏</td></tr><tr><td align="center">tail -2 file1</td><td align="center">查看⽂件后两⾏</td></tr><tr><td align="center">tail -f /log/msg</td><td align="center">实时查看添加到⽂件中的内容</td></tr><tr><td align="center">grep hello hello.txt</td><td align="center">在⽂件hello.txt中查找关键词hello</td></tr><tr><td align="center">grep ^hello hello.txt</td><td align="center">在⽂件hello.txt中查找以hello开头的内容</td></tr><tr><td align="center">grep [0-9] hello.txt</td><td align="center">选择hello.txt⽂件中所有包含数字的⾏</td></tr><tr><td align="center">grep -r “str” ./</td><td align="center">在指定目录下查找字符串 -c统计出现次数</td></tr><tr><td align="center">sed ‘s/s1/s2/g’ hello.txt</td><td align="center">将hello.txt⽂件中的s1替换成s2</td></tr><tr><td align="center">sed ‘/^$/d’ hello.txt</td><td align="center">从hello.txt⽂件中删除所有空⽩⾏</td></tr><tr><td align="center">sed ‘/ *#/d; /^$/d’ hello.txt</td><td align="center">从hello.txt⽂件中删除所有注释和空⽩⾏</td></tr><tr><td align="center">sed -e ‘1d’ hello.txt</td><td align="center">从⽂件hello.txt 中排除第⼀⾏</td></tr><tr><td align="center">sed -n ‘/s1/p’ hello.txt</td><td align="center">查看只包含关键词”s1”的⾏</td></tr><tr><td align="center">sed -e ‘s/ *$//‘ hello.txt</td><td align="center">删除每⼀⾏最后的空⽩字符</td></tr><tr><td align="center">sed -e ‘s/s1//g’ hello.txt</td><td align="center">从⽂档中只删除词汇s1并保留剩余全部</td></tr><tr><td align="center">sed -n ‘1,5p;5q’ hello.txt</td><td align="center">查看从第⼀⾏到第5⾏内容</td></tr><tr><td align="center">sed -n ‘5p;5q’ hello.txt</td><td align="center">查看第5⾏</td></tr><tr><td align="center">paste file1 file2</td><td align="center">合并两个⽂件或两栏的内容</td></tr><tr><td align="center">paste -d ‘+’ file1 file2</td><td align="center">合并两个⽂件或两栏的内容，中间⽤”+”区分</td></tr><tr><td align="center">sort file1 file2</td><td align="center">排序两个⽂件的内容</td></tr><tr><td align="center">comm -1 file1 file2</td><td align="center">⽐较两个⽂件的内容(去除’file1’所含内容)</td></tr><tr><td align="center">comm -2 file1 file2</td><td align="center">⽐较两个⽂件的内容(去除’file2’所含内容)</td></tr><tr><td align="center">comm -3 file1 file2</td><td align="center">⽐较两个⽂件的内容(去除两⽂件共有部分)</td></tr><tr><td align="center">…</td><td align="center">…</td></tr></tbody></table><h2 id="打包和解压"><a href="#打包和解压" class="headerlink" title="打包和解压"></a>打包和解压</h2><table><thead><tr><th align="center">常用命令</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">zip xxx.zip file</td><td align="center">压缩⾄zip包</td></tr><tr><td align="center">zip -r xxx.zip file1 file2 dir1</td><td align="center">将多个⽂件+⽬录压成zip包</td></tr><tr><td align="center">unzip swagger-1.0.jar.zip -d ../</td><td align="center">解压文件到指定目录</td></tr><tr><td align="center">tar -cvf xxx.tar file</td><td align="center">创建⾮压缩tar包</td></tr><tr><td align="center">tar -cvf xxx.tar file1 file2 dir1</td><td align="center">将多个⽂件+⽬录打tar包</td></tr><tr><td align="center">tar -tf xxx.tar</td><td align="center">查看tar包的内容</td></tr><tr><td align="center">tar -xvf xxx.tar</td><td align="center">解压tar包</td></tr><tr><td align="center">tar -xvf xxx.tar -C /dir</td><td align="center">将tar包解压⾄指定⽬录</td></tr><tr><td align="center">tar -jcvf xxx.tar.bz2 dir</td><td align="center">创建bz2压缩包</td></tr><tr><td align="center">tar -jxvf xxx.tar.bz2</td><td align="center">解压bz2压缩包</td></tr><tr><td align="center">tar -zcvf xxx.tar.gz dir</td><td align="center">创建gzip压缩包</td></tr><tr><td align="center">tar -zxvf xxx.tar.gz</td><td align="center">解压gzip压缩包</td></tr><tr><td align="center">bunzip2 xxx.bz2</td><td align="center">解压bz2压缩包</td></tr><tr><td align="center">bzip2 filename</td><td align="center">压缩⽂件</td></tr><tr><td align="center">gunzip xxx.gz</td><td align="center">解压gzip压缩包</td></tr><tr><td align="center">gzip filename</td><td align="center">压缩⽂件</td></tr><tr><td align="center">gzip -9 filename</td><td align="center">最⼤程度压缩</td></tr><tr><td align="center">…</td><td align="center">…</td></tr></tbody></table><h2 id="防火墙"><a href="#防火墙" class="headerlink" title="防火墙"></a>防火墙</h2><table><thead><tr><th align="center">常用命令</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">firewall-cmd –zone=public –add-port=xxxx/tcp –permanent</td><td align="center">开启端口</td></tr><tr><td align="center">firewall-cmd –zone=public –add-port=xxxx-xxxx/tcp –permanent</td><td align="center">批量开启指定范围内的端口</td></tr><tr><td align="center">firewall-cmd –zone= public –remove-port=xxxx/tcp –permanent</td><td align="center">删除端口</td></tr><tr><td align="center">firewall-cmd –query-port=xxxx/tcp</td><td align="center">查询端口号是否开启</td></tr><tr><td align="center">firewall-cmd –reload</td><td align="center">重启防火墙</td></tr><tr><td align="center">firewall-cmd –list-port</td><td align="center">查询有哪些端口是开启的</td></tr><tr><td align="center">service firewalld start</td><td align="center">启动防火墙</td></tr><tr><td align="center">service firewalld stop</td><td align="center">关闭防火墙</td></tr><tr><td align="center">service firewalld status</td><td align="center">查看防火墙状态</td></tr><tr><td align="center">systemctl enable firewalld</td><td align="center">开机启动防火墙</td></tr><tr><td align="center">systemctl disable firewalld</td><td align="center">禁止开机启动防火墙</td></tr><tr><td align="center">…</td><td align="center">…</td></tr></tbody></table><h2 id="crontab"><a href="#crontab" class="headerlink" title="crontab"></a>crontab</h2><table><thead><tr><th align="center">常用命令</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">crontab -e</td><td align="center">编辑某个用户的crontab服务</td></tr><tr><td align="center">0 0 * * * sh $HOME/nginx/logs/clear_nginx_log.sh</td><td align="center">每天凌晨执行脚本</td></tr><tr><td align="center">crontab -l</td><td align="center">列出某个用户cron服务的详细内容</td></tr><tr><td align="center">service crond status</td><td align="center">查看cron服务状态</td></tr><tr><td align="center">…</td><td align="center">…</td></tr></tbody></table><h2 id="RPM包管理命令"><a href="#RPM包管理命令" class="headerlink" title="RPM包管理命令"></a>RPM包管理命令</h2><table><thead><tr><th align="center">常用命令</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">rpm -qa</td><td align="center">查看已安装的rpm包</td></tr><tr><td align="center">rpm -q pkg_name</td><td align="center">查询某个rpm包</td></tr><tr><td align="center">rpm -q –whatprovides xx</td><td align="center">显示xxx功能是由哪个包提供的</td></tr><tr><td align="center">rpm -q –whatrequires xxx</td><td align="center">显示xxx功能被哪个程序包依赖的</td></tr><tr><td align="center">rpm -q –changelog xxx</td><td align="center">显示xxx包的更改记录</td></tr><tr><td align="center">rpm -qi pkg_name</td><td align="center">查看⼀个包的详细信息</td></tr><tr><td align="center">rpm -qd pkg_name</td><td align="center">查询⼀个包所提供的⽂档</td></tr><tr><td align="center">rpm -qc pkg_name</td><td align="center">查看已安装rpm包提供的配置⽂件</td></tr><tr><td align="center">rpm -ql pkg_name</td><td align="center">查看⼀个包安装了哪些⽂件</td></tr><tr><td align="center">rpm -qf filename</td><td align="center">查看某个⽂件属于哪个包</td></tr><tr><td align="center">rpm -qR pkg_name</td><td align="center">查询包的依赖关系</td></tr><tr><td align="center">rpm -ivh xxx.rpm</td><td align="center">安装rpm包</td></tr><tr><td align="center">rpm -ivh –test xxx.rpm</td><td align="center">测试安装rpm包</td></tr><tr><td align="center">rpm -ivh –nodeps xxx.rpm</td><td align="center">安装rpm包时忽略依赖关系</td></tr><tr><td align="center">rpm -e xxx</td><td align="center">卸载程序包</td></tr><tr><td align="center">rpm -Fvh pkg_name</td><td align="center">升级确定已安装的rpm包</td></tr><tr><td align="center">rpm -Uvh pkg_name</td><td align="center">升级rpm包(若未安装则会安装)</td></tr><tr><td align="center">rpm -V pkg_name</td><td align="center">RPM包详细信息校验</td></tr><tr><td align="center">…</td><td align="center">…</td></tr></tbody></table><h2 id="YUM包管理命令"><a href="#YUM包管理命令" class="headerlink" title="YUM包管理命令"></a>YUM包管理命令</h2><table><thead><tr><th align="center">常用命令</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">yum repolist enabled</td><td align="center">显示可⽤的源仓库</td></tr><tr><td align="center">yum search pkg_name</td><td align="center">搜索软件包</td></tr><tr><td align="center">yum install pkg_name</td><td align="center">下载并安装软件包</td></tr><tr><td align="center">yum install pkg_name</td><td align="center">只下载不安装</td></tr><tr><td align="center">yum list</td><td align="center">显示所有程序包</td></tr><tr><td align="center">yum list installed</td><td align="center">查看当前系统已安装包</td></tr><tr><td align="center">yum list updates</td><td align="center">查看可以更新的包列表</td></tr><tr><td align="center">yum check-update</td><td align="center">查看可升级的软件包</td></tr><tr><td align="center">yum update</td><td align="center">更新所有软件包</td></tr><tr><td align="center">yum update pkg_name</td><td align="center">升级指定软件包</td></tr><tr><td align="center">yum deplist pkg_name</td><td align="center">列出软件包依赖关系</td></tr><tr><td align="center">yum remove pkg_name</td><td align="center">删除软件包</td></tr><tr><td align="center">yum clean all</td><td align="center">清除缓存</td></tr><tr><td align="center">yum clean packages</td><td align="center">清除缓存的软件包</td></tr><tr><td align="center">yum clean headers</td><td align="center">清除缓存的header</td></tr><tr><td align="center">…</td><td align="center">…</td></tr></tbody></table><h2 id="APT软件⼯具"><a href="#APT软件⼯具" class="headerlink" title="APT软件⼯具"></a>APT软件⼯具</h2><table><thead><tr><th align="center">常用命令</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">apt-cache search pkg_name</td><td align="center">搜索程序包</td></tr><tr><td align="center">apt-cache show pkg_name</td><td align="center">获取包的概览信息</td></tr><tr><td align="center">apt-get install pkg_namee</td><td align="center">安装/升级软件包</td></tr><tr><td align="center">apt-get purge pkg_name</td><td align="center">卸载软件（包括配置）</td></tr><tr><td align="center">apt-get remove pkg_name</td><td align="center">卸载软件（不包括配置）</td></tr><tr><td align="center">apt-get update</td><td align="center">更新包索引信息</td></tr><tr><td align="center">apt-get upgrade</td><td align="center">更新已安装软件包</td></tr><tr><td align="center">apt-get clean</td><td align="center">清理缓存</td></tr><tr><td align="center">…</td><td align="center">…</td></tr></tbody></table><p><br><br></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis分布式锁真的安全吗？讲的最详细的一篇（转载）</title>
      <link href="Redis/Redis%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E7%9C%9F%E7%9A%84%E5%AE%89%E5%85%A8%E5%90%97%EF%BC%9F%E8%AE%B2%E7%9A%84%E6%9C%80%E8%AF%A6%E7%BB%86%E7%9A%84%E4%B8%80%E7%AF%87%EF%BC%88%E8%BD%AC%E8%BD%BD%EF%BC%89/"/>
      <url>Redis/Redis%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E7%9C%9F%E7%9A%84%E5%AE%89%E5%85%A8%E5%90%97%EF%BC%9F%E8%AE%B2%E7%9A%84%E6%9C%80%E8%AF%A6%E7%BB%86%E7%9A%84%E4%B8%80%E7%AF%87%EF%BC%88%E8%BD%AC%E8%BD%BD%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><blockquote><p>转载自：<a href="https://juejin.cn/post/6971240328581873701">https://juejin.cn/post/6971240328581873701</a></p></blockquote><p>这篇文章我想和你聊一聊，关于 Redis 分布式锁的「安全性」问题。</p><p>Redis 分布式锁的话题，很多文章已经写烂了，我为什么还要写这篇文章呢？</p><p>因为我发现网上 99% 的文章，并没有把这个问题真正讲清楚。导致很多读者看了很多文章，依旧云里雾里。例如下面这些问题，你能清晰地回答上来吗？</p><ul><li>基于 Redis 如何实现一个分布式锁？</li><li>Redis 分布式锁真的安全吗？</li><li>Redis 的 Redlock 有什么问题？一定安全吗？</li><li>业界争论 Redlock，到底在争论什么？哪种观点是对的？</li><li>分布式锁到底用 Redis 还是 Zookeeper？</li><li>实现一个有「容错性」的分布式锁，都需要考虑哪些问题？</li></ul><p>这篇文章，我就来把这些问题彻底讲清楚。</p><p>读完这篇文章，你不仅可以彻底了解分布式锁，还会对「分布式系统」有更加深刻的理解。</p><p><strong>文章有点长，但干货很多，希望你可以耐心读完。</strong></p><p><img src="https://zhaoxiaobin.coding.net/p/blog/d/zhaoxiaobin_img/git/raw/master/post/redis/16241786766613/16241791740608.jpg"></p><h2 id="为什么需要分布式锁？"><a href="#为什么需要分布式锁？" class="headerlink" title="为什么需要分布式锁？"></a>为什么需要分布式锁？</h2><p>在开始讲分布式锁之前，有必要简单介绍一下，为什么需要分布式锁？</p><p>与分布式锁相对应的是「单机锁」，我们在写多线程程序时，避免同时操作一个共享变量产生数据问题，通常会使用一把锁来「互斥」，以保证共享变量的正确性，其使用范围是在「同一个进程」中。</p><p>如果换做是多个进程，需要同时操作一个共享资源，如何互斥呢？</p><p>例如，现在的业务应用通常都是微服务架构，这也意味着一个应用会部署多个进程，那这多个进程如果需要修改 MySQL 中的同一行记录时，为了避免操作乱序导致数据错误，此时，我们就需要引入「分布式锁」来解决这个问题了。</p><p><img src="https://zhaoxiaobin.coding.net/p/blog/d/zhaoxiaobin_img/git/raw/master/post/redis/16241786766613/16241791865110.jpg"></p><p>想要实现分布式锁，必须借助一个外部系统，所有进程都去这个系统上申请「加锁」。</p><p>而这个外部系统，必须要实现「互斥」的能力，即两个请求同时进来，只会给一个进程返回成功，另一个返回失败（或等待）。</p><p>这个外部系统，可以是 MySQL，也可以是 Redis 或 Zookeeper。但为了追求更好的性能，我们通常会选择使用 Redis 或 Zookeeper 来做。</p><p>下面我就以 Redis 为主线，由浅入深，带你深度剖析一下，分布式锁的各种「安全性」问题，帮你彻底理解分布式锁。</p><h2 id="分布式锁怎么实现？"><a href="#分布式锁怎么实现？" class="headerlink" title="分布式锁怎么实现？"></a>分布式锁怎么实现？</h2><p>我们从最简单的开始讲起。</p><p>想要实现分布式锁，必须要求 Redis 有「互斥」的能力，我们可以使用 SETNX 命令，这个命令表示<strong>SET</strong> if <strong>N</strong>ot e<strong>X</strong>ists，即如果 key 不存在，才会设置它的值，否则什么也不做。</p><p>两个客户端进程可以执行这个命令，达到互斥，就可以实现一个分布式锁。</p><p>客户端 1 申请加锁，加锁成功：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; SETNX lock <span class="number">1</span></span><br><span class="line">(integer) <span class="number">1</span>     <span class="comment">// 客户端1，加锁成功</span></span><br></pre></td></tr></table></figure><p>客户端 2 申请加锁，因为它后到达，加锁失败：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; SETNX lock <span class="number">1</span></span><br><span class="line">(integer) <span class="number">0</span>     <span class="comment">// 客户端2，加锁失败</span></span><br></pre></td></tr></table></figure><p>此时，加锁成功的客户端，就可以去操作「共享资源」，例如，修改 MySQL 的某一行数据，或者调用一个 API 请求。</p><p>操作完成后，还要及时释放锁，给后来者让出操作共享资源的机会。如何释放锁呢？</p><p>也很简单，直接使用 DEL 命令删除这个 key 即可：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; DEL lock <span class="comment">// 释放锁</span></span><br><span class="line">(integer) <span class="number">1</span></span><br></pre></td></tr></table></figure><p>这个逻辑非常简单，整体的路程就是这样：</p><p><img src="https://zhaoxiaobin.coding.net/p/blog/d/zhaoxiaobin_img/git/raw/master/post/redis/16241786766613/16241792046226.jpg"></p><p>但是，它存在一个很大的问题，当客户端 1 拿到锁后，如果发生下面的场景，就会造成「死锁」：</p><ol><li>程序处理业务逻辑异常，没及时释放锁</li><li>进程挂了，没机会释放锁</li></ol><p>这时，这个客户端就会一直占用这个锁，而其它客户端就「永远」拿不到这把锁了。</p><p>怎么解决这个问题呢？</p><h2 id="如何避免死锁？"><a href="#如何避免死锁？" class="headerlink" title="如何避免死锁？"></a>如何避免死锁？</h2><p>我们很容易想到的方案是，在申请锁时，给这把锁设置一个「租期」。</p><p>在 Redis 中实现时，就是给这个 key 设置一个「过期时间」。这里我们假设，操作共享资源的时间不会超过 10s，那么在加锁时，给这个 key 设置 10s 过期即可：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; SETNX lock <span class="number">1</span>    <span class="comment">// 加锁</span></span><br><span class="line">(integer) <span class="number">1</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; EXPIRE lock <span class="number">10</span>  <span class="comment">// 10s后自动过期</span></span><br><span class="line">(integer) <span class="number">1</span></span><br></pre></td></tr></table></figure><p>这样一来，无论客户端是否异常，这个锁都可以在 10s 后被「自动释放」，其它客户端依旧可以拿到锁。</p><p>但这样真的没问题吗？</p><p>还是有问题。</p><p>现在的操作，加锁、设置过期是 2 条命令，有没有可能只执行了第一条，第二条却「来不及」执行的情况发生呢？例如：</p><ol><li>SETNX 执行成功，执行 EXPIRE 时由于网络问题，执行失败</li><li>SETNX 执行成功，Redis 异常宕机，EXPIRE 没有机会执行</li><li>SETNX 执行成功，客户端异常崩溃，EXPIRE 也没有机会执行</li></ol><p>总之，这两条命令不能保证是原子操作（一起成功），就有潜在的风险导致过期时间设置失败，依旧发生「死锁」问题。</p><p>怎么办？</p><p>在 Redis 2.6.12 版本之前，我们需要想尽办法，保证 SETNX 和 EXPIRE 原子性执行，还要考虑各种异常情况如何处理。</p><p>但在 Redis 2.6.12 之后，Redis 扩展了 SET 命令的参数，用这一条命令就可以了：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 一条命令保证原子性执行</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; SET lock <span class="number">1</span> EX <span class="number">10</span> NX</span><br><span class="line">OK</span><br></pre></td></tr></table></figure><p>这样就解决了死锁问题，也比较简单。</p><p>我们再来看分析下，它还有什么问题？</p><p>试想这样一种场景：</p><ol><li>客户端 1 加锁成功，开始操作共享资源</li><li>客户端 1 操作共享资源的时间，「超过」了锁的过期时间，锁被「自动释放」</li><li>客户端 2 加锁成功，开始操作共享资源</li><li>客户端 1 操作共享资源完成，释放锁（但释放的是客户端 2 的锁）</li></ol><p>看到了么，这里存在两个严重的问题：</p><ol><li><strong>锁过期</strong>：客户端 1 操作共享资源耗时太久，导致锁被自动释放，之后被客户端 2 持有</li><li><strong>释放别人的锁</strong>：客户端 1 操作共享资源完成后，却又释放了客户端 2 的锁</li></ol><p>导致这两个问题的原因是什么？我们一个个来看。</p><p><strong>第一个问题，可能是我们评估操作共享资源的时间不准确导致的。</strong></p><p>例如，操作共享资源的时间「最慢」可能需要 15s，而我们却只设置了 10s 过期，那这就存在锁提前过期的风险。</p><p>过期时间太短，那增大冗余时间，例如设置过期时间为 20s，这样总可以了吧？</p><p>这样确实可以「缓解」这个问题，降低出问题的概率，但依旧无法「彻底解决」问题。</p><p>为什么？</p><p>原因在于，客户端在拿到锁之后，在操作共享资源时，遇到的场景有可能是很复杂的，例如，程序内部发生异常、网络请求超时等等。</p><p>既然是「预估」时间，也只能是大致计算，除非你能预料并覆盖到所有导致耗时变长的场景，但这其实很难。</p><p>有什么更好的解决方案吗？</p><p>别急，关于这个问题，我会在后面详细来讲对应的解决方案。</p><p>我们继续来看第二个问题。</p><p><strong>第二个问题在于，一个客户端释放了其它客户端持有的锁。</strong></p><p>想一下，导致这个问题的关键点在哪？</p><p>重点在于，每个客户端在释放锁时，都是「无脑」操作，并没有检查这把锁是否还「归自己持有」，所以就会发生释放别人锁的风险，这样的解锁流程，很不「严谨」！</p><p>如何解决这个问题呢？</p><h2 id="锁被别人释放怎么办"><a href="#锁被别人释放怎么办" class="headerlink" title="锁被别人释放怎么办?"></a>锁被别人释放怎么办?</h2><p>解决办法是：客户端在加锁时，设置一个只有自己知道的「唯一标识」进去。</p><p>例如，可以是自己的线程 ID，也可以是一个 UUID（随机且唯一），这里我们以 UUID 举例：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 锁的VALUE设置为UUID</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; SET lock $uuid EX <span class="number">20</span> NX</span><br><span class="line">OK</span><br></pre></td></tr></table></figure><blockquote><p>这里假设 20s 操作共享时间完全足够，先不考虑锁自动过期的问题。</p></blockquote><p>之后，在释放锁时，要先判断这把锁是否还归自己持有，伪代码可以这么写：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 锁是自己的，才释放</span></span><br><span class="line"><span class="keyword">if</span> redis.get(<span class="string">&quot;lock&quot;</span>) == $uuid:</span><br><span class="line">    redis.del(<span class="string">&quot;lock&quot;</span>)</span><br></pre></td></tr></table></figure><p>这里释放锁使用的是 GET + DEL 两条命令，这时，又会遇到我们前面讲的原子性问题了。</p><ol><li>客户端 1 执行 GET，判断锁是自己的</li><li>客户端 2 执行了 SET 命令，强制获取到锁（虽然发生概率比较低，但我们需要严谨地考虑锁的安全性模型）</li><li>客户端 1 执行 DEL，却释放了客户端 2 的锁</li></ol><p>由此可见，这两个命令还是必须要原子执行才行。</p><p>怎样原子执行呢？Lua 脚本。</p><p>我们可以把这个逻辑，写成 Lua 脚本，让 Redis 来执行。</p><p>因为 Redis 处理每一个请求是「单线程」执行的，在执行一个 Lua 脚本时，其它请求必须等待，直到这个 Lua 脚本处理完成，这样一来，GET + DEL 之间就不会插入其它命令了。</p><p><img src="https://zhaoxiaobin.coding.net/p/blog/d/zhaoxiaobin_img/git/raw/master/post/redis/16241786766613/16241792317068.jpg"></p><p>安全释放锁的 Lua 脚本如下：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// 判断锁是自己的，才释放</span><br><span class="line"><span class="keyword">if</span> redis.call(<span class="string">&quot;GET&quot;</span>,KEYS[<span class="number">1</span>]) == ARGV[<span class="number">1</span>]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    <span class="keyword">return</span> redis.call(<span class="string">&quot;DEL&quot;</span>,KEYS[<span class="number">1</span>])</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>好了，这样一路优化，整个的加锁、解锁的流程就更「严谨」了。</p><p>这里我们先小结一下，基于 Redis 实现的分布式锁，一个严谨的的流程如下：</p><ol><li>加锁：<code>SET lock_key $unique_id EX $expire_time NX</code></li><li>操作共享资源</li><li>释放锁：Lua 脚本，先 GET 判断锁是否归属自己，再 DEL 释放锁</li></ol><p><img src="https://zhaoxiaobin.coding.net/p/blog/d/zhaoxiaobin_img/git/raw/master/post/redis/16241786766613/16241792428382.jpg"></p><p>好，有了这个完整的锁模型，让我们重新回到前面提到的第一个问题。</p><p>锁过期时间不好评估怎么办？</p><h2 id="锁过期时间不好评估怎么办？"><a href="#锁过期时间不好评估怎么办？" class="headerlink" title="锁过期时间不好评估怎么办？"></a>锁过期时间不好评估怎么办？</h2><p>前面我们提到，锁的过期时间如果评估不好，这个锁就会有「提前」过期的风险。</p><p>当时给的妥协方案是，尽量「冗余」过期时间，降低锁提前过期的概率。</p><p>这个方案其实也不能完美解决问题，那怎么办呢？</p><p>是否可以设计这样的方案：<strong>加锁时，先设置一个过期时间，然后我们开启一个「守护线程」，定时去检测这个锁的失效时间，如果锁快要过期了，操作共享资源还未完成，那么就自动对锁进行「续期」，重新设置过期时间。</strong></p><p>这确实一种比较好的方案。</p><p>如果你是 Java 技术栈，幸运的是，已经有一个库把这些工作都封装好了：<strong>Redisson</strong>。</p><p>Redisson 是一个 Java 语言实现的 Redis SDK 客户端，在使用分布式锁时，它就采用了「自动续期」的方案来避免锁过期，这个守护线程我们一般也把它叫做「看门狗」线程。</p><p><img src="https://zhaoxiaobin.coding.net/p/blog/d/zhaoxiaobin_img/git/raw/master/post/redis/16241786766613/16241792557494.jpg"></p><p>除此之外，这个 SDK 还封装了很多易用的功能：</p><ul><li>可重入锁</li><li>乐观锁</li><li>公平锁</li><li>读写锁</li><li>Redlock（红锁，下面会详细讲）</li></ul><p>这个 SDK 提供的 API 非常友好，它可以像操作本地锁的方式，操作分布式锁。如果你是 Java 技术栈，可以直接把它用起来。</p><blockquote><p>这里不重点介绍 Redisson 的使用，大家可以看官方 Github 学习如何使用，比较简单。</p></blockquote><p>到这里我们再小结一下，基于 Redis 的实现分布式锁，前面遇到的问题，以及对应的解决方案：</p><ul><li><strong>死锁</strong>：设置过期时间</li><li><strong>过期时间评估不好，锁提前过期</strong>：守护线程，自动续期</li><li><strong>锁被别人释放</strong>：锁写入唯一标识，释放锁先检查标识，再释放</li></ul><p>还有哪些问题场景，会危害 Redis 锁的安全性呢？</p><p>之前分析的场景都是，锁在「单个」Redis 实例中可能产生的问题，并没有涉及到 Redis 的部署架构细节。</p><p>而我们在使用 Redis 时，一般会采用<strong>主从集群 + 哨兵</strong>的模式部署，这样做的好处在于，当主库异常宕机时，哨兵可以实现「故障自动切换」，把从库提升为主库，继续提供服务，以此保证可用性。</p><p><strong>那当「主从发生切换」时，这个分布锁会依旧安全吗？</strong></p><p>试想这样的场景：</p><ol><li>客户端 1 在主库上执行 SET 命令，加锁成功</li><li>此时，主库异常宕机，SET 命令还未同步到从库上（主从复制是异步的）</li><li>从库被哨兵提升为新主库，这个锁在新的主库上，丢失了！</li></ol><p><img src="https://zhaoxiaobin.coding.net/p/blog/d/zhaoxiaobin_img/git/raw/master/post/redis/16241786766613/16241792789228.jpg"></p><p>可见，当引入 Redis 副本后，分布锁还是可能会受到影响。</p><p>怎么解决这个问题？</p><p>为此，Redis 的作者提出一种解决方案，就是我们经常听到的 <strong>Redlock（红锁）</strong>。</p><p>它真的可以解决上面这个问题吗？</p><h2 id="Redlock-真的安全吗？"><a href="#Redlock-真的安全吗？" class="headerlink" title="Redlock 真的安全吗？"></a>Redlock 真的安全吗？</h2><p>好，终于到了这篇文章的重头戏。啊？上面讲的那么多问题，难道只是基础？</p><p>是的，那些只是开胃菜，真正的硬菜，从这里刚刚开始。</p><p>如果上面讲的内容，你还没有理解，我建议你重新阅读一遍，先理清整个加锁、解锁的基本流程。</p><p>如果你已经对 Redlock 有所了解，这里可以跟着我再复习一遍，如果你不了解 Redlock，没关系，我会带你重新认识它。</p><p>值得提醒你的是，<strong>后面我不仅仅是讲 Redlock 的原理，还会引出有关「分布式系统」中的很多问题，你最好跟紧我的思路，在脑中一起分析问题的答案。</strong></p><p>现在我们来看，Redis 作者提出的 Redlock 方案，是如何解决主从切换后，锁失效问题的。</p><p>Redlock 的方案基于 2 个前提：</p><ol><li>不再需要部署<strong>从库</strong>和<strong>哨兵</strong>实例，只部署<strong>主库</strong></li><li>但主库要部署多个，官方推荐至少 5 个实例</li></ol><p>也就是说，想用使用 Redlock，你至少要部署 5 个 Redis 实例，而且都是主库，它们之间没有任何关系，都是一个个孤立的实例。</p><blockquote><p><strong>注意：不是部署 Redis Cluster，就是部署 5 个简单的 Redis 实例。</strong></p></blockquote><p><img src="https://zhaoxiaobin.coding.net/p/blog/d/zhaoxiaobin_img/git/raw/master/post/redis/16241786766613/16241792977607.jpg"></p><p>Redlock 具体如何使用呢？</p><p>整体的流程是这样的，一共分为 5 步：</p><ol><li>客户端先获取「当前时间戳T1」</li><li>客户端依次向这 5 个 Redis 实例发起加锁请求（用前面讲到的 SET 命令），且每个请求会设置超时时间（毫秒级，要远小于锁的有效时间），如果某一个实例加锁失败（包括网络超时、锁被其它人持有等各种异常情况），就立即向下一个 Redis 实例申请加锁</li><li>如果客户端从 &gt;=3 个（大多数）以上 Redis 实例加锁成功，则再次获取「当前时间戳T2」，如果 T2 - T1 &lt; 锁的过期时间，此时，认为客户端加锁成功，否则认为加锁失败</li><li>加锁成功，去操作共享资源（例如修改 MySQL 某一行，或发起一个 API 请求）</li><li>加锁失败，向「全部节点」发起释放锁请求（前面讲到的 Lua 脚本释放锁）</li></ol><p>我简单帮你总结一下，有 4 个重点：</p><ol><li>客户端在多个 Redis 实例上申请加锁</li><li>必须保证大多数节点加锁成功</li><li>大多数节点加锁的总耗时，要小于锁设置的过期时间</li><li>释放锁，要向全部节点发起释放锁请求</li></ol><blockquote><p>第一次看可能不太容易理解，建议你把上面的文字多看几遍，加深记忆。</p><p>然后，记住这 5 步，非常重要，下面会根据这个流程，剖析各种可能导致锁失效的问题假设。</p></blockquote><p>好，明白了 Redlock 的流程，我们来看 Redlock 为什么要这么做。</p><p><strong>1) 为什么要在多个实例上加锁？</strong></p><p>本质上是为了「容错」，部分实例异常宕机，剩余的实例加锁成功，整个锁服务依旧可用。</p><p><strong>2) 为什么大多数加锁成功，才算成功？</strong></p><p>多个 Redis 实例一起来用，其实就组成了一个「分布式系统」。</p><p>在分布式系统中，总会出现「异常节点」，所以，在谈论分布式系统问题时，需要考虑异常节点达到多少个，也依旧不会影响整个系统的「正确性」。</p><p>这是一个分布式系统「容错」问题，这个问题的结论是：<strong>如果只存在「故障」节点，只要大多数节点正常，那么整个系统依旧是可以提供正确服务的。</strong></p><blockquote><p>这个问题的模型，就是我们经常听到的「拜占庭将军」问题，感兴趣可以去看算法的推演过程。</p></blockquote><p><strong>3) 为什么步骤 3 加锁成功后，还要计算加锁的累计耗时？</strong></p><p>因为操作的是多个节点，所以耗时肯定会比操作单个实例耗时更久，而且，因为是网络请求，网络情况是复杂的，有可能存在<strong>延迟、丢包、超时</strong>等情况发生，网络请求越多，异常发生的概率就越大。</p><p>所以，即使大多数节点加锁成功，但如果加锁的累计耗时已经「超过」了锁的过期时间，那此时有些实例上的锁可能已经失效了，这个锁就没有意义了。</p><p><strong>4) 为什么释放锁，要操作所有节点？</strong></p><p>在某一个 Redis 节点加锁时，可能因为「网络原因」导致加锁失败。</p><p>例如，客户端在一个 Redis 实例上加锁成功，但在读取响应结果时，网络问题导致<strong>读取失败</strong>，那这把锁其实已经在 Redis 上加锁成功了。</p><p>所以，释放锁时，不管之前有没有加锁成功，需要释放「所有节点」的锁，以保证清理节点上「残留」的锁。</p><p>好了，明白了 Redlock 的流程和相关问题，看似 Redlock 确实解决了 Redis 节点异常宕机锁失效的问题，保证了锁的「安全性」。</p><p>但事实真的如此吗？</p><h2 id="Redlock-的争论谁对谁错？"><a href="#Redlock-的争论谁对谁错？" class="headerlink" title="Redlock 的争论谁对谁错？"></a>Redlock 的争论谁对谁错？</h2><p>Redis 作者把这个方案一经提出，就马上受到业界著名的分布式系统专家的<strong>质疑</strong>！</p><p>这个专家叫 <strong>Martin</strong>，是英国剑桥大学的一名分布式系统研究员。在此之前他曾是软件工程师和企业家，从事大规模数据基础设施相关的工作。它还经常在大会做演讲，写博客，写书，也是开源贡献者。</p><p><img src="https://zhaoxiaobin.coding.net/p/blog/d/zhaoxiaobin_img/git/raw/master/post/redis/16241786766613/16241793108814.jpg"></p><p>他马上写了篇文章，质疑这个 Redlock 的算法模型是有问题的，并对分布式锁的设计，提出了自己的看法。</p><p>之后，Redis 作者 Antirez 面对质疑，不甘示弱，也写了一篇文章，反驳了对方的观点，并详细剖析了 Redlock 算法模型的更多设计细节。</p><p>而且，关于这个问题的争论，在当时互联网上也引起了非常激烈的讨论。</p><p><strong>二人思路清晰，论据充分，这是一场高手过招，也是分布式系统领域非常好的一次思想的碰撞！双方都是分布式系统领域的专家，却对同一个问题提出很多相反的论断，究竟是怎么回事？</strong></p><p>下面我会从他们的争论文章中，提取重要的观点，整理呈现给你。</p><blockquote><p>提醒：后面的信息量极大，可能不宜理解，最好放慢速度阅读。</p></blockquote><h3 id="分布式专家-Martin-对于-Relock-的质疑"><a href="#分布式专家-Martin-对于-Relock-的质疑" class="headerlink" title="分布式专家 Martin 对于 Relock 的质疑"></a>分布式专家 Martin 对于 Relock 的质疑</h3><p>在他的文章中，主要阐述了 4 个论点：</p><p><strong>1) 分布式锁的目的是什么？</strong></p><p>Martin 表示，你必须先清楚你在使用分布式锁的目的是什么？</p><p>他认为有两个目的。</p><p><strong>第一，效率。</strong></p><p>使用分布式锁的互斥能力，是避免不必要地做同样的两次工作（例如一些昂贵的计算任务）。如果锁失效，并不会带来「恶性」的后果，例如发了 2 次邮件等，无伤大雅。</p><p><strong>第二，正确性。</strong></p><p>使用锁用来防止并发进程互相干扰。如果锁失效，会造成多个进程同时操作同一条数据，产生的后果是<strong>数据严重错误、永久性不一致、数据丢失</strong>等恶性问题，就像给患者服用了重复剂量的药物，后果很严重。</p><p>他认为，如果你是为了前者——效率，那么使用单机版 Redis 就可以了，即使偶尔发生锁失效（宕机、主从切换），都不会产生严重的后果。而使用 Redlock 太重了，没必要。</p><p><strong>而如果是为了正确性，Martin 认为 Redlock 根本达不到安全性的要求，也依旧存在锁失效的问题！</strong></p><p><strong>2) 锁在分布式系统中会遇到的问题</strong></p><p>Martin 表示，一个分布式系统，更像一个复杂的「野兽」，存在着你想不到的各种异常情况。</p><p>这些异常场景主要包括三大块，这也是分布式系统会遇到的三座大山：<strong>NPC</strong>。</p><ul><li>N：Network Delay，网络延迟</li><li>P：Process Pause，进程暂停（GC）</li><li>C：Clock Drift，时钟漂移</li></ul><p>Martin 用一个进程暂停（GC）的例子，指出了 Redlock 安全性问题：</p><ol><li>客户端 1 请求锁定节点 A、B、C、D、E</li><li>客户端 1 的拿到锁后，进入 GC（时间比较久）</li><li>所有 Redis 节点上的锁都过期了</li><li>客户端 2 获取到了 A、B、C、D、E 上的锁</li><li>客户端 1 GC 结束，认为成功获取锁</li><li>客户端 2 也认为获取到了锁，发生「冲突」</li></ol><p><img src="https://zhaoxiaobin.coding.net/p/blog/d/zhaoxiaobin_img/git/raw/master/post/redis/16241786766613/16241793244902.jpg"></p><p>Martin 认为，GC 可能发生在程序的任意时刻，而且执行时间是不可控的。</p><blockquote><p>注：当然，即使是使用没有 GC 的编程语言，在发生网络延迟、时钟漂移时，也都有可能导致 Redlock 出现问题，这里 Martin 只是拿 GC 举例。</p></blockquote><p><strong>3) 假设时钟正确的是不合理的</strong></p><p>又或者，当多个 Redis 节点「时钟」发生问题时，也会导致 Redlock <strong>锁失效</strong>。</p><ol><li>客户端 1 获取节点 A、B、C 上的锁，但由于网络问题，无法访问 D 和 E</li><li>节点 C 上的时钟「向前跳跃」，导致锁到期</li><li>客户端 2 获取节点 C、D、E 上的锁，由于网络问题，无法访问 A 和 B</li><li>客户端 1 和 2 现在都相信它们持有了锁（冲突）</li></ol><p>Martin 觉得，Redlock 必须「强依赖」多个节点的时钟是保持同步的，一旦有节点时钟发生错误，那这个算法模型就失效了。</p><blockquote><p>即使 C 不是时钟跳跃，而是「崩溃后立即重启」，也会发生类似的问题。</p></blockquote><p>Martin 继续阐述，机器的时钟发生错误，是很有可能发生的：</p><ul><li>系统管理员「手动修改」了机器时钟</li><li>机器时钟在同步 NTP 时间时，发生了大的「跳跃」</li></ul><p>总之，Martin 认为，Redlock 的算法是建立在「同步模型」基础上的，有大量资料研究表明，同步模型的假设，在分布式系统中是有问题的。</p><p>在混乱的分布式系统的中，你不能假设系统时钟就是对的，所以，你必须非常小心你的假设。</p><p><strong>4) 提出 fecing token 的方案，保证正确性</strong></p><p>相对应的，Martin 提出一种被叫作 fecing token 的方案，保证分布式锁的正确性。</p><p>这个模型流程如下：</p><ol><li>客户端在获取锁时，锁服务可以提供一个「递增」的 token</li><li>客户端拿着这个 token 去操作共享资源</li><li>共享资源可以根据 token 拒绝「后来者」的请求</li></ol><p><img src="https://zhaoxiaobin.coding.net/p/blog/d/zhaoxiaobin_img/git/raw/master/post/redis/16241786766613/16241793369300.jpg"></p><p>这样一来，无论 NPC 哪种异常情况发生，都可以保证分布式锁的安全性，因为它是建立在「异步模型」上的。</p><p>而 Redlock 无法提供类似 fecing token 的方案，所以它无法保证安全性。</p><p>他还表示，<strong>一个好的分布式锁，无论 NPC 怎么发生，可以不在规定时间内给出结果，但并不会给出一个错误的结果。也就是只会影响到锁的「性能」（或称之为活性），而不会影响它的「正确性」。</strong></p><p>Martin 的结论：</p><p><strong>1、Redlock 不伦不类</strong>：它对于效率来讲，Redlock 比较重，没必要这么做，而对于正确性来说，Redlock 是不够安全的。</p><p><strong>2、时钟假设不合理</strong>：该算法对系统时钟做出了危险的假设（假设多个节点机器时钟都是一致的），如果不满足这些假设，锁就会失效。</p><p><strong>3、无法保证正确性</strong>：Redlock 不能提供类似 fencing token 的方案，所以解决不了正确性的问题。为了正确性，请使用有「共识系统」的软件，例如 Zookeeper。</p><p>好了，以上就是 Martin 反对使用 Redlock 的观点，看起来有理有据。</p><p>下面我们来看 Redis 作者 Antirez 是如何反驳的。</p><h3 id="Redis-作者-Antirez-的反驳"><a href="#Redis-作者-Antirez-的反驳" class="headerlink" title="Redis 作者 Antirez 的反驳"></a>Redis 作者 Antirez 的反驳</h3><p>在 Redis 作者的文章中，重点有 3 个：</p><p><strong>1) 解释时钟问题</strong></p><p>首先，Redis 作者一眼就看穿了对方提出的最为核心的问题：<strong>时钟问题</strong>。</p><p>Redis 作者表示，Redlock 并不需要完全一致的时钟，只需要大体一致就可以了，允许有「误差」。</p><p>例如要计时 5s，但实际可能记了 4.5s，之后又记了 5.5s，有一定误差，但只要不超过「误差范围」锁失效时间即可，这种对于时钟的精度要求并不是很高，而且这也符合现实环境。</p><p>对于对方提到的「时钟修改」问题，Redis 作者反驳到：</p><ol><li><strong>手动修改时钟</strong>：不要这么做就好了，否则你直接修改 Raft 日志，那 Raft 也会无法工作…</li><li><strong>时钟跳跃</strong>：通过「恰当的运维」，保证机器时钟不会大幅度跳跃（每次通过微小的调整来完成），实际上这是可以做到的</li></ol><blockquote><p>为什么 Redis 作者优先解释时钟问题？因为在后面的反驳过程中，需要依赖这个基础做进一步解释。</p></blockquote><p><strong>2) 解释网络延迟、GC 问题</strong></p><p>之后，Redis 作者对于对方提出的，网络延迟、进程 GC 可能导致 Redlock 失效的问题，也做了反驳：</p><p>我们重新回顾一下，Martin 提出的问题假设：</p><ol><li>客户端 1 请求锁定节点 A、B、C、D、E</li><li>客户端 1 的拿到锁后，进入 GC</li><li>所有 Redis 节点上的锁都过期了</li><li>客户端 2 获取节点 A、B、C、D、E 上的锁</li><li>客户端 1 GC 结束，认为成功获取锁</li><li>客户端 2 也认为获取到锁，发生「冲突」</li></ol><p><img src="https://zhaoxiaobin.coding.net/p/blog/d/zhaoxiaobin_img/git/raw/master/post/redis/16241786766613/16241793531405.jpg"></p><p>Redis 作者反驳到，这个假设其实是有问题的，Redlock 是可以保证锁安全的。</p><p>这是怎么回事呢？</p><p>还记得前面介绍 Redlock 流程的那 5 步吗？这里我再拿过来让你复习一下。</p><ol><li>客户端先获取「当前时间戳T1」</li><li>客户端依次向这 5 个 Redis 实例发起加锁请求（用前面讲到的 SET 命令），且每个请求会设置超时时间（毫秒级，要远小于锁的有效时间），如果某一个实例加锁失败（包括网络超时、锁被其它人持有等各种异常情况），就立即向下一个 Redis 实例申请加锁</li><li>如果客户端从 3 个（大多数）以上 Redis 实例加锁成功，则再次获取「当前时间戳T2」，如果 T2 - T1 &lt; 锁的过期时间，此时，认为客户端加锁成功，否则认为加锁失败</li><li>加锁成功，去操作共享资源（例如修改 MySQL 某一行，或发起一个 API 请求）</li><li>加锁失败，向「全部节点」发起释放锁请求（前面讲到的 Lua 脚本释放锁）</li></ol><p><strong>注意，重点是 1-3，在步骤 3，加锁成功后为什么要重新获取「当前时间戳T2」？还用 T2 - T1 的时间，与锁的过期时间做比较？</strong></p><p>Redis 作者强调：如果在 1-3 发生了网络延迟、进程 GC 等耗时长的异常情况，那在第 3 步 T2 - T1，是可以检测出来的，如果超出了锁设置的过期时间，那这时就认为加锁会失败，之后释放所有节点的锁就好了！</p><p>Redis 作者继续论述，如果对方认为，发生网络延迟、进程 GC 是在步骤 3 之后，也就是客户端确认拿到了锁，去操作共享资源的途中发生了问题，导致锁失效，那这<strong>不止是 Redlock 的问题，任何其它锁服务例如 Zookeeper，都有类似的问题，这不在讨论范畴内。</strong></p><p>这里我举个例子解释一下这个问题：</p><ol><li>客户端通过 Redlock 成功获取到锁（通过了大多数节点加锁成功、加锁耗时检查逻辑）</li><li>客户端开始操作共享资源，此时发生网络延迟、进程 GC 等耗时很长的情况</li><li>此时，锁过期自动释放</li><li>客户端开始操作 MySQL（此时的锁可能会被别人拿到，锁失效）</li></ol><p>Redis 作者这里的结论就是：</p><ul><li>客户端在拿到锁之前，无论经历什么耗时长问题，Redlock 都能够在第 3 步检测出来</li><li>客户端在拿到锁之后，发生 NPC，那 Redlock、Zookeeper 都无能为力</li></ul><p>所以，Redis 作者认为 Redlock 在保证时钟正确的基础上，是可以保证正确性的。</p><p><strong>3) 质疑 fencing token 机制</strong></p><p>Redis 作者对于对方提出的 fecing token 机制，也提出了质疑，主要分为 2 个问题，这里最不宜理解，请跟紧我的思路。</p><p><strong>第一</strong>，这个方案必须要求要操作的「共享资源服务器」有拒绝「旧 token」的能力。</p><p>例如，要操作 MySQL，从锁服务拿到一个递增数字的 token，然后客户端要带着这个 token 去改 MySQL 的某一行，这就需要利用 MySQL 的「事物隔离性」来做。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// 两个客户端必须利用事物和隔离性达到目的</span><br><span class="line">// 注意 token 的判断条件</span><br><span class="line"><span class="keyword">UPDATE</span> <span class="keyword">table</span> T <span class="keyword">SET</span> val = $new_val <span class="keyword">WHERE</span> <span class="keyword">id</span> = $<span class="keyword">id</span> <span class="keyword">AND</span> current_token &lt; $token</span><br></pre></td></tr></table></figure><p>但如果操作的不是 MySQL 呢？例如向磁盘上写一个文件，或发起一个 HTTP 请求，那这个方案就无能为力了，这对要操作的资源服务器，提出了更高的要求。</p><p>也就是说，大部分要操作的资源服务器，都是没有这种互斥能力的。</p><p><strong>再者，既然资源服务器都有了「互斥」能力，那还要分布式锁干什么？</strong></p><p>所以，Redis 作者认为这个方案是站不住脚的。</p><p><strong>第二</strong>，退一步讲，即使 Redlock 没有提供 fecing token 的能力，但 Redlock 已经提供了随机值（就是前面讲的 UUID），利用这个随机值，也可以达到与 fecing token 同样的效果。</p><p>如何做呢？</p><blockquote><p>Redis 作者只是提到了可以完成 fecing token 类似的功能，但却没有展开相关细节，根据我查阅的资料，大概流程应该如下，如有错误，欢迎交流~</p></blockquote><ol><li>客户端使用 Redlock 拿到锁</li><li>客户端在操作共享资源之前，先把这个锁的 VALUE，在要操作的共享资源上做标记</li><li>客户端处理业务逻辑，最后，在修改共享资源时，判断这个标记是否与之前一样，一样才修改（类似 CAS 的思路）</li></ol><p>还是以 MySQL 为例，举个例子就是这样的：</p><ol><li>客户端使用 Redlock 拿到锁</li><li>客户端要修改 MySQL 表中的某一行数据之前，先把锁的 VALUE 更新到这一行的某个字段中（这里假设为 current_token 字段)</li><li>客户端处理业务逻辑</li><li>客户端修改 MySQL 的这一行数据，把 VALUE 当做 WHERE 条件，再修改</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> <span class="keyword">table</span> T <span class="keyword">SET</span> val = $new_val <span class="keyword">WHERE</span> <span class="keyword">id</span> = $<span class="keyword">id</span> <span class="keyword">AND</span> current_token = $redlock_value</span><br></pre></td></tr></table></figure><p>可见，这种方案依赖 MySQL 的事物机制，也达到对方提到的 fecing token 一样的效果。</p><p>但这里还有个小问题，是网友参与问题讨论时提出的：<strong>两个客户端通过这种方案，先「标记」再「检查+修改」共享资源，那这两个客户端的操作顺序无法保证啊？</strong></p><p>而用 Martin 提到的 fecing token，因为这个 token 是单调递增的数字，资源服务器可以拒绝小的 token 请求，保证了操作的「顺序性」！</p><p>Redis 作者对这问题做了不同的解释，我觉得很有道理，他解释道：<strong>分布式锁的本质，是为了「互斥」，只要能保证两个客户端在并发时，一个成功，一个失败就好了，不需要关心「顺序性」。</strong></p><blockquote><p>前面 Martin 的质疑中，一直很关心这个顺序性问题，但 Redis 的作者的看法却不同。</p></blockquote><p>综上，Redis 作者的结论：</p><p><strong>1、作者同意对方关于「时钟跳跃」对 Redlock 的影响，但认为时钟跳跃是可以避免的，取决于基础设施和运维。</strong></p><p><strong>2、Redlock 在设计时，充分考虑了 NPC 问题，在 Redlock 步骤 3 之前出现 NPC，可以保证锁的正确性，但在步骤 3 之后发生 NPC，不止是 Redlock 有问题，其它分布式锁服务同样也有问题，所以不在讨论范畴内。</strong></p><p>是不是觉得很有意思？</p><p>在分布式系统中，一个小小的锁，居然可能会遇到这么多问题场景，影响它的安全性！</p><p>不知道你看完双方的观点，更赞同哪一方的说法呢？</p><p>别急，后面我还会综合以上论点，谈谈自己的理解。</p><p>好，讲完了双方对于 Redis 分布锁的争论，你可能也注意到了，Martin 在他的文章中，推荐使用 Zookeeper 实现分布式锁，认为它更安全，确实如此吗？</p><h2 id="基于-Zookeeper-的锁安全吗？"><a href="#基于-Zookeeper-的锁安全吗？" class="headerlink" title="基于 Zookeeper 的锁安全吗？"></a>基于 Zookeeper 的锁安全吗？</h2><p>如果你有了解过 Zookeeper，基于它实现的分布式锁是这样的：</p><ol><li>客户端 1 和 2 都尝试创建「临时节点」，例如 /lock</li><li>假设客户端 1 先到达，则加锁成功，客户端 2 加锁失败</li><li>客户端 1 操作共享资源</li><li>客户端 1 删除 /lock 节点，释放锁</li></ol><p>你应该也看到了，Zookeeper 不像 Redis 那样，需要考虑锁的过期时间问题，它是采用了「临时节点」，保证客户端 1 拿到锁后，只要连接不断，就可以一直持有锁。</p><p>而且，如果客户端 1 异常崩溃了，那么这个临时节点会自动删除，保证了锁一定会被释放。</p><p><strong>不错，没有锁过期的烦恼，还能在异常时自动释放锁，是不是觉得很完美？</strong></p><p>其实不然。</p><p>思考一下，客户端 1 创建临时节点后，Zookeeper 是如何保证让这个客户端一直持有锁呢？</p><p>原因就在于，<strong>客户端 1 此时会与 Zookeeper 服务器维护一个 Session，这个 Session 会依赖客户端「定时心跳」来维持连接。</strong></p><p>如果 Zookeeper 长时间收不到客户端的心跳，就认为这个 Session 过期了，也会把这个临时节点删除。</p><p><img src="https://zhaoxiaobin.coding.net/p/blog/d/zhaoxiaobin_img/git/raw/master/post/redis/16241786766613/16241794043321.jpg"></p><p>同样地，基于此问题，我们也讨论一下 GC 问题对 Zookeeper 的锁有何影响：</p><ol><li>客户端 1 创建临时节点 /lock 成功，拿到了锁</li><li>客户端 1 发生长时间 GC</li><li>客户端 1 无法给 Zookeeper 发送心跳，Zookeeper 把临时节点「删除」</li><li>客户端 2 创建临时节点 /lock 成功，拿到了锁</li><li>客户端 1 GC 结束，它仍然认为自己持有锁（冲突）</li></ol><p>可见，即使是使用 Zookeeper，也无法保证进程 GC、网络延迟异常场景下的安全性。</p><p><strong>这就是前面 Redis 作者在反驳的文章中提到的：如果客户端已经拿到了锁，但客户端与锁服务器发生「失联」（例如 GC），那不止 Redlock 有问题，其它锁服务都有类似的问题，Zookeeper 也是一样！</strong></p><p>所以，这里我们就能得出结论了：<strong>一个分布式锁，在极端情况下，不一定是安全的。</strong></p><p>如果你的业务数据非常敏感，在使用分布式锁时，一定要注意这个问题，不能假设分布式锁 100% 安全。</p><p>好，现在我们来总结一下 Zookeeper 在使用分布式锁时优劣：</p><p>Zookeeper 的优点：</p><ol><li>不需要考虑锁的过期时间</li><li>watch 机制，加锁失败，可以 watch 等待锁释放，实现乐观锁</li></ol><p>但它的劣势是：</p><ol><li>性能不如 Redis</li><li>部署和运维成本高</li><li>客户端与 Zookeeper 的长时间失联，锁被释放问题</li></ol><h2 id="我对分布式锁的理解"><a href="#我对分布式锁的理解" class="headerlink" title="我对分布式锁的理解"></a>我对分布式锁的理解</h2><p>好了，前面详细介绍了基于 Redis 的 Redlock 和 Zookeeper 实现的分布锁，在各种异常情况下的安全性问题，下面我想和你聊一聊我的看法，仅供参考，不喜勿喷。</p><p><strong>1) 到底要不要用 Redlock？</strong></p><p>前面也分析了，Redlock 只有建立在「时钟正确」的前提下，才能正常工作，如果你可以保证这个前提，那么可以拿来使用。</p><p>但保证时钟正确，我认为并不是你想的那么简单就能做到的。</p><p><strong>第一，从硬件角度来说</strong>，时钟发生偏移是时有发生，无法避免。</p><p>例如，CPU 温度、机器负载、芯片材料都是有可能导致时钟发生偏移的。</p><p><strong>第二，从我的工作经历来说</strong>，曾经就遇到过时钟错误、运维暴力修改时钟的情况发生，进而影响了系统的正确性，所以，人为错误也是很难完全避免的。</p><p>所以，我对 Redlock 的个人看法是，尽量不用它，而且它的性能不如单机版 Redis，部署成本也高，我还是会优先考虑使用主从+ 哨兵的模式 实现分布式锁。</p><p>那正确性如何保证呢？第二点给你答案。</p><p><strong>2) 如何正确使用分布式锁？</strong></p><p>在分析 Martin 观点时，它提到了 fecing token 的方案，给我了很大的启发，虽然这种方案有很大的局限性，但对于保证「正确性」的场景，是一个非常好的思路。</p><p>所以，我们可以把这两者结合起来用：</p><p><strong>1、使用分布式锁，在上层完成「互斥」目的，虽然极端情况下锁会失效，但它可以最大程度把并发请求阻挡在最上层，减轻操作资源层的压力。</strong></p><p><strong>2、但对于要求数据绝对正确的业务，在资源层一定要做好「兜底」，设计思路可以借鉴 fecing token 的方案来做。</strong></p><p>两种思路结合，我认为对于大多数业务场景，已经可以满足要求了。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>好了，总结一下。</p><p>这篇文章，我们主要探讨了基于 Redis 实现的分布式锁，究竟是否安全这个问题。</p><p>从最简单分布式锁的实现，到处理各种异常场景，再到引出 Redlock，以及两个分布式专家的辩论，得出了 Redlock 的适用场景。</p><p>最后，我们还对比了 Zookeeper 在做分布式锁时，可能会遇到的问题，以及与 Redis 的差异。</p><p>这里我把这些内容总结成了思维导图，方便你理解。</p><p><img src="https://zhaoxiaobin.coding.net/p/blog/d/zhaoxiaobin_img/git/raw/master/post/redis/16241786766613/16241794185927.jpg"></p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>这篇文章的信息量其实是非常大的，我觉得应该把分布锁的问题，彻底讲清楚了。</p><p>如果你没有理解，我建议你多读几遍，并在脑海中构建各种假定的场景，反复思辨。</p><p>在写这篇文章时，我又重新研读了两位大神关于 Redlock 争辩的这两篇文章，可谓是是收获满满，在这里也分享一些心得给你。</p><p>1、在分布式系统环境下，看似完美的设计方案，可能并不是那么「严丝合缝」，如果稍加推敲，就会发现各种问题。所以，在思考分布式系统问题时，一定要<strong>谨慎再谨慎</strong>。</p><p>2、从 Redlock 的争辩中，我们不要过多关注对错，而是要多学习大神的思考方式，以及对一个问题严格审查的严谨精神。</p><p>最后，用 Martin 在对于 Redlock 争论过后，写下的感悟来结尾：</p><p>“<strong>前人已经为我们创造出了许多伟大的成果：站在巨人的肩膀上，我们可以才得以构建更好的软件。无论如何，通过争论和检查它们是否经得起别人的详细审查，这是学习过程的一部分。但目标应该是获取知识，而不是为了说服别人，让别人相信你是对的。有时候，那只是意味着停下来，好好地想一想。</strong>”</p><p>共勉。</p><p><br><br></p>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
            <tag> 分布式锁 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>什么是动态代理？（转载）</title>
      <link href="%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E4%BB%80%E4%B9%88%E6%98%AF%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%EF%BC%9F%EF%BC%88%E8%BD%AC%E8%BD%BD%EF%BC%89/"/>
      <url>%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E4%BB%80%E4%B9%88%E6%98%AF%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%EF%BC%9F%EF%BC%88%E8%BD%AC%E8%BD%BD%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><blockquote><p>转载自：<a href="https://mp.weixin.qq.com/s/GT1-yrxJ5KF0xeMydbJDCQ#">https://mp.weixin.qq.com/s/GT1-yrxJ5KF0xeMydbJDCQ#</a></p></blockquote><h2 id="1、代理模式"><a href="#1、代理模式" class="headerlink" title="1、代理模式"></a>1、代理模式</h2><p>代理模式是一种设计模式，提供了对目标对象额外的访问方式，即通过代理对象访问目标对象，这样可以在不修改原目标对象的前提下，提供额外的功能操作，扩展目标对象的功能。</p><p><strong>一个比方：在租房的时候，有的人会通过房东直租，有的人会通过中介租房。</strong></p><p>这两种情况哪种比较方便呢？当然是通过中介更加方便。</p><p>这里的中介就相当于代理，用户通过中介完成租房的一系列操作（看房、交押金、租房、清扫卫生）代理模式可以有效的将具体的实现与调用方进行解耦，通过面向接口进行编码完全将具体的实现隐藏在内部。</p><p><img src="https://zhaoxiaobin.coding.net/p/blog/d/zhaoxiaobin_img/git/raw/master/post/pattern/16240783386440/16240785474549.jpg"></p><p><strong>分类：</strong></p><p><strong>静态代理：</strong> 在编译时就已经实现，编译完成后代理类是一个实际的class文件。</p><p><strong>动态代理：</strong> 在运行时动态生成的，即编译完成后没有实际的class文件，而是<strong>在运行时动态生成类字节码，并加载到JVM中</strong>。</p><h2 id="2、静态代理"><a href="#2、静态代理" class="headerlink" title="2、静态代理"></a>2、静态代理</h2><p><strong>使用方式</strong></p><p>创建一个接口，然后创建被代理的类实现该接口并且实现该接口中的抽象方法。之后再创建一个代理类，同时使其也实现这个接口。在代理类中持有一个被代理对象的引用，而后在代理类方法中调用该对象的方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDao</span> </span>&#123;    </span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">save</span><span class="params">()</span></span>;     </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;正在保存用户...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TransactionHandler</span> <span class="keyword">implements</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="comment">//目标代理对象</span></span><br><span class="line">    <span class="keyword">private</span> UserDao target;</span><br><span class="line">    <span class="comment">//构造代理对象时传入目标对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TransactionHandler</span><span class="params">(UserDao target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.target = target;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//调用目标方法前的处理</span></span><br><span class="line">        System.out.println(<span class="string">&quot;开启事务控制...&quot;</span>);</span><br><span class="line">        <span class="comment">//调用目标对象的方法</span></span><br><span class="line">        target.save();</span><br><span class="line">        <span class="comment">//调用目标方法后的处理</span></span><br><span class="line">        System.out.println(<span class="string">&quot;关闭事务控制...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//新建目标对象</span></span><br><span class="line">        UserDaoImpl target = <span class="keyword">new</span> UserDaoImpl();</span><br><span class="line">        <span class="comment">//创建代理对象, 并使用接口对其进行引用</span></span><br><span class="line">        UserDao userDao = <span class="keyword">new</span> TransactionHandler(target);</span><br><span class="line">        <span class="comment">//针对接口进行调用</span></span><br><span class="line">        userDao.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用JDK静态代理很容易就完成了对一个类的代理操作。但是<code>JDK</code>静态代理的缺点也暴露了出来：由于代理只能为一个类服务，如果需要    代理的类很多，那么就需要编写大量的代理类，比较繁琐。</p><h2 id="3、JDK动态代理"><a href="#3、JDK动态代理" class="headerlink" title="3、JDK动态代理"></a>3、JDK动态代理</h2><p><strong>使用JDK动态代理的五大步骤：</strong></p><ol><li>通过实现InvocationHandler接口来自定义自己的InvocationHandler；</li><li>通过<code>Proxy.getProxyClass</code>获得动态代理类；</li><li>通过反射机制获得代理类的构造方法，方法签名为<code>getConstructor(InvocationHandler.class)</code>；</li><li>通过构造函数获得代理对象并将自定义的<code>InvocationHandler</code>实例对象传为参数传入；</li><li>通过代理对象调用目标方法；</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IHello</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sayHello</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloImpl</span> <span class="keyword">implements</span> <span class="title">IHello</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello world!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyInvocationHandler</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/** 目标对象 */</span></span><br><span class="line">    <span class="keyword">private</span> Object target;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyInvocationHandler</span><span class="params">(Object target)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.target = target;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;------插入前置通知代码-------------&quot;</span>);</span><br><span class="line">        <span class="comment">// 执行相应的目标方法</span></span><br><span class="line">        Object rs = method.invoke(target,args);</span><br><span class="line">        System.out.println(<span class="string">&quot;------插入后置处理代码-------------&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> rs;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyProxyTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> NoSuchMethodException, IllegalAccessException, InstantiationException, InvocationTargetException </span>&#123;</span><br><span class="line">        <span class="comment">// =========================第一种==========================</span></span><br><span class="line">        <span class="comment">// 1、生成$Proxy0的class文件</span></span><br><span class="line">        System.getProperties().put(<span class="string">&quot;sun.misc.ProxyGenerator.saveGeneratedFiles&quot;</span>, <span class="string">&quot;true&quot;</span>);</span><br><span class="line">        <span class="comment">// 2、获取动态代理类</span></span><br><span class="line">        Class proxyClazz = Proxy.getProxyClass(IHello.class.getClassLoader(),IHello.class);</span><br><span class="line">        <span class="comment">// 3、获得代理类的构造函数，并传入参数类型InvocationHandler.class</span></span><br><span class="line">        Constructor constructor = proxyClazz.getConstructor(InvocationHandler.class);</span><br><span class="line">        <span class="comment">// 4、通过构造函数来创建动态代理对象，将自定义的InvocationHandler实例传入</span></span><br><span class="line">        IHello iHello1 = (IHello) constructor.newInstance(<span class="keyword">new</span> MyInvocationHandler(<span class="keyword">new</span> HelloImpl()));</span><br><span class="line">        <span class="comment">// 5、通过代理对象调用目标方法</span></span><br><span class="line">        iHello1.sayHello();</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// ==========================第二种=============================</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Proxy类中还有个将2~4步骤封装好的简便方法来创建动态代理对象，</span></span><br><span class="line"><span class="comment">         *其方法签名为：newProxyInstance(ClassLoader loader,Class&lt;?&gt;[] instance, InvocationHandler h)</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        IHello  iHello2 = (IHello) Proxy.newProxyInstance(IHello.class.getClassLoader(), <span class="comment">// 加载接口的类加载器</span></span><br><span class="line">                <span class="keyword">new</span> Class[]&#123;IHello.class&#125;, <span class="comment">// 一组接口</span></span><br><span class="line">                <span class="keyword">new</span> MyInvocationHandler(<span class="keyword">new</span> HelloImpl())); <span class="comment">// 自定义的InvocationHandler</span></span><br><span class="line">        iHello2.sayHello();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>JDK静态代理与JDK动态代理之间有些许相似，比如说都要创建代理类，以及代理类都要实现接口等。</p><p><strong>不同之处：</strong> 在静态代理中我们需要对哪个接口和哪个被代理类创建代理类，所以我们在编译前就需要代理类实现与被代理类相同的接口，并且直接在实现的方法中调用被代理类相应的方法；但是动态代理则不同，我们不知道要针对哪个接口、哪个被代理类创建代理类，因为它是在运行时被创建的。</p><p><strong>一句话来总结一下JDK静态代理和JDK动态代理的区别：</strong></p><p>JDK静态代理是通过直接编码创建的，而<code>JDK</code>动态代理是利用反射机制在运行时创建代理类的。</p><p>其实在动态代理中，核心是<code>InvocationHandler</code>。每一个代理的实例都会有一个关联的调用处理程序(InvocationHandler)。对待代理实例进行调用时，将对方法的调用进行编码并指派到它的调用处理器(InvocationHandler)的<code>invoke</code>方法。</p><p>对代理对象实例方法的调用都是通过InvocationHandler中的invoke方法来完成的，而invoke方法会根据传入的代理对象、方法名称以及参数决定调用代理的哪个方法。</p><h2 id="4、CGLIB"><a href="#4、CGLIB" class="headerlink" title="4、CGLIB"></a>4、CGLIB</h2><p>CGLIB包的底层是通过使用一个小而快的字节码处理框架<code>ASM</code>，来转换字节码并生成新的类。</p><p><strong>CGLIB代理实现如下：</strong></p><ol><li>首先实现一个MethodInterceptor，方法调用会被转发到该类的intercept()方法。</li><li>然后在需要使用的时候，通过CGLIB动态代理获取代理对象。</li></ol><p><strong>使用案例</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloService</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HelloService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;HelloService构造&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 该方法不能被子类覆盖,Cglib是无法代理final修饰的方法的</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">final</span> <span class="keyword">public</span> String <span class="title">sayOthers</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;HelloService:sayOthers&gt;&gt;&quot;</span>+name);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;HelloService:sayHello&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> net.sf.cglib.proxy.MethodInterceptor;</span><br><span class="line"><span class="keyword">import</span> net.sf.cglib.proxy.MethodProxy;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义MethodInterceptor</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyMethodInterceptor</span> <span class="keyword">implements</span> <span class="title">MethodInterceptor</span></span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * sub：cglib生成的代理对象</span></span><br><span class="line"><span class="comment">     * method：被代理对象方法</span></span><br><span class="line"><span class="comment">     * objects：方法入参</span></span><br><span class="line"><span class="comment">     * methodProxy: 代理方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">intercept</span><span class="params">(Object sub, Method method, Object[] objects, MethodProxy methodProxy)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;======插入前置通知======&quot;</span>);</span><br><span class="line">        Object object = methodProxy.invokeSuper(sub, objects);</span><br><span class="line">        System.out.println(<span class="string">&quot;======插入后者通知======&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> object;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> net.sf.cglib.core.DebuggingClassWriter;</span><br><span class="line"><span class="keyword">import</span> net.sf.cglib.proxy.Enhancer;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 代理类class文件存入本地磁盘方便我们反编译查看源码</span></span><br><span class="line">        System.setProperty(DebuggingClassWriter.DEBUG_LOCATION_PROPERTY, <span class="string">&quot;D:\\code&quot;</span>);</span><br><span class="line">        <span class="comment">// 通过CGLIB动态代理获取代理对象的过程</span></span><br><span class="line">        Enhancer enhancer = <span class="keyword">new</span> Enhancer();</span><br><span class="line">        <span class="comment">// 设置enhancer对象的父类</span></span><br><span class="line">        enhancer.setSuperclass(HelloService.class);</span><br><span class="line">        <span class="comment">// 设置enhancer的回调对象</span></span><br><span class="line">        enhancer.setCallback(<span class="keyword">new</span> MyMethodInterceptor());</span><br><span class="line">        <span class="comment">// 创建代理对象</span></span><br><span class="line">        HelloService proxy= (HelloService)enhancer.create();</span><br><span class="line">        <span class="comment">// 通过代理对象调用目标方法</span></span><br><span class="line">        proxy.sayHello();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>JDK代理要求被代理的类必须实现接口，有很强的局限性。</p><p>而CGLIB动态代理则没有此类强制性要求。简单的说，<code>CGLIB</code>会让生成的代理类继承被代理类，并在代理类中对代理方法进行强化处理(前置处理、后置处理等)。</p><p><strong>总结一下CGLIB在进行代理的时候都进行了哪些工作</strong></p><ul><li>生成的代理类继承被代理类。在这里我们需要注意一点：如果委托类被final修饰，那么它不可被继承，即不可被代理；同样，如果委托类中存在final修饰的方法，那么该方法也不可被代理。</li><li>代理类会为委托方法生成两个方法，一个是与委托方法签名相同的方法，它在方法中会通过<code>super</code>调用委托方法；另一个是代理类独有的方法。</li><li>当执行代理对象的方法时，会首先判断一下是否存在实现了<code>MethodInterceptor</code>接口的<code>CGLIB$CALLBACK_0</code>;，如果存在，则将调用<code>MethodInterceptor</code>中的<code>intercept</code>方法。</li></ul><p>在<code>intercept</code>方法中，我们除了会调用委托方法，还会进行一些增强操作。在Spring AOP中，典型的应用场景就是在某些敏感方法执行前后进行操作日志记录。</p><p>在CGLIB中，方法的调用并不是通过反射来完成的，而是直接对方法进行调用：通过<strong>FastClass机制</strong>对Class对象进行特别的处理，比如将会用数组保存method的引用，每次调用方法的时候都是通过一个index下标来保持对方法的引用。</p><h2 id="5、Fastclass机制"><a href="#5、Fastclass机制" class="headerlink" title="5、Fastclass机制"></a>5、Fastclass机制</h2><p>CGLIB采用了FastClass的机制来实现对被拦截方法的调用。</p><p>FastClass机制就是对一个类的方法建立索引，通过索引来直接调用相应的方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test10</span> </span>&#123;</span><br><span class="line">  <span class="comment">//这里，tt可以看作目标对象，fc可以看作是代理对象；首先根据代理对象的getIndex方法获取目标方法的索引，</span></span><br><span class="line">  <span class="comment">//然后再调用代理对象的invoke方法就可以直接调用目标类的方法，避免了反射</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Test tt = <span class="keyword">new</span> Test();</span><br><span class="line">        Test2 fc = <span class="keyword">new</span> Test2();</span><br><span class="line">        <span class="keyword">int</span> index = fc.getIndex(<span class="string">&quot;f()V&quot;</span>);</span><br><span class="line">        fc.invoke(index, tt, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;f method&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">g</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;g method&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test2</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(<span class="keyword">int</span> index, Object o, Object[] ol)</span></span>&#123;</span><br><span class="line">        Test t = (Test) o;</span><br><span class="line">        <span class="keyword">switch</span>(index)&#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            t.f();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">            t.g();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//这个方法对Test类中的方法建立索引</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getIndex</span><span class="params">(String signature)</span></span>&#123;</span><br><span class="line">        <span class="keyword">switch</span>(signature.hashCode())&#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3078479</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3108270</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上例中，Test2是Test的Fastclass，在Test2中有两个方法getIndex和invoke。</p><p>在getIndex方法中对Test的每个方法建立索引，并根据入参（方法名+方法的描述符）来返回相应的索引。</p><p>Invoke根据指定的索引，以ol为入参调用对象O的方法。这样就避免了反射调用，提高了效率。</p><p><strong>三种代理方式之间对比</strong></p><p><img src="https://zhaoxiaobin.coding.net/p/blog/d/zhaoxiaobin_img/git/raw/master/post/pattern/16240783386440/16240785696693.jpg"></p><h2 id="6、问题"><a href="#6、问题" class="headerlink" title="6、问题"></a>6、问题</h2><p><strong>CGlib比JDK快？</strong></p><ul><li>使用CGLiB实现动态代理，CGLib底层采用ASM字节码生成框架，使用字节码技术生成代理类， 在jdk6之前比使用Java反射效率要高。唯一需要注意的是，CGLib不能对声明为final的方法进行代理， 因为CGLib原理是动态生成被代理类的子类。</li><li>在jdk6、jdk7、jdk8逐步对JDK动态代理优化之后，在调用次数较少的情况下，JDK代理效率高于CGLIB代理效率。只有当进行大量调用的时候，jdk6和jdk7比CGLIB代理效率低一点，但是到jdk8的时候，jdk代理效率高于CGLIB代理，总之，每一次jdk版本升级，jdk代理效率都得到提升，而CGLIB代理消息确有点跟不上步伐。</li></ul><p><strong>Spring如何选择用JDK还是CGLIB？</strong></p><ul><li>当Bean实现接口时，Spring就会用JDK的动态代理。</li><li>当Bean没有实现接口时，Spring使用CGlib实现。</li><li>可以强制使用CGlib。<br><br><br></li></ul>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代理模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Cron表达式详解（转载）</title>
      <link href="SpringBoot/%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/Cron%E8%A1%A8%E8%BE%BE%E5%BC%8F%E8%AF%A6%E8%A7%A3%EF%BC%88%E8%BD%AC%E8%BD%BD%EF%BC%89/"/>
      <url>SpringBoot/%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/Cron%E8%A1%A8%E8%BE%BE%E5%BC%8F%E8%AF%A6%E8%A7%A3%EF%BC%88%E8%BD%AC%E8%BD%BD%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><blockquote><p>转载自：<a href="https://www.jianshu.com/p/b4b8950fb987">https://www.jianshu.com/p/b4b8950fb987</a></p></blockquote><h2 id="字段释义"><a href="#字段释义" class="headerlink" title="字段释义"></a>字段释义</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span> <span class="number">0</span>/<span class="number">5</span> * * * ？</span><br></pre></td></tr></table></figure><p>秒    分    时    天(月)    月    天(周)    年份(一般省略)</p><h2 id="符号释义"><a href="#符号释义" class="headerlink" title="符号释义"></a>符号释义</h2><p><code>*</code>：表示所有可能的值</p><p><code>/</code>：表示数值的增量，简单来说，比如分写上<code>0/5</code>表示从0分开始，每隔5分钟</p><p><code>?</code>：仅用在天(月)和天(周)，表示不指定值，当其中一个有值时，另外一个需要设为<code>?</code></p><h2 id="字段允许字符"><a href="#字段允许字符" class="headerlink" title="字段允许字符"></a>字段允许字符</h2><h3 id="秒：0-59"><a href="#秒：0-59" class="headerlink" title="秒：0-59    , - * /"></a>秒：<code>0-59</code>    <code>,</code> <code>-</code> <code>*</code> <code>/</code></h3><ul><li>26：表示第26秒</li><li>5,16,27：表示第5秒、第16秒和第27秒</li><li>1-5：表示从1秒到5秒，就是1 2  3  4 5 秒</li><li>*：表示每一秒</li><li>2/15：表示从第2秒开始，每隔15秒，就是2 17 32 47 秒</li></ul><h3 id="分：0-59"><a href="#分：0-59" class="headerlink" title="分：0-59    , - * /"></a>分：<code>0-59</code>    <code>,</code> <code>-</code> <code>*</code> <code>/</code></h3><p>根据上述的秒，同理可得</p><ul><li>26：表示第26分钟</li><li>5,16,27：表示第5分钟、第16分钟和第27分钟</li><li>1-5：表示从1秒到5分，就是第1 2  3  4 5 分钟</li><li>*：表示每一分钟</li><li>2/15：表示从第2分钟开始，每隔15分钟，就是2 17 32 47 分钟</li></ul><h3 id="时：0-23"><a href="#时：0-23" class="headerlink" title="时：0-23    , - * /"></a>时：<code>0-23</code>    <code>,</code> <code>-</code> <code>*</code> <code>/</code></h3><ul><li>10：表示早上10点</li><li>22：表示晚上10点</li><li>2,8,18,23：表示凌晨2点，早上8点，傍晚6点和晚上11点</li><li>9-17：表示朝九晚五，就是9 10 11 12 13 14 15 16 17 点</li><li>*：表示每小时</li><li>10/2：表示从早上10点开始，每隔2小时</li></ul><h3 id="天（月）：1-31-L-W-C"><a href="#天（月）：1-31-L-W-C" class="headerlink" title="天（月）：1-31 , - * / ?     L W C"></a>天（月）：<code>1-31</code> <code>,</code> <code>-</code> <code>*</code> <code>/</code> <code>?</code>     <code>L</code> <code>W</code> <code>C</code></h3><ul><li>31：表示31号（注意有的月份是没有31号的）</li><li>5,10,15：表示5号、10号和15号</li><li>8-17：表示8号到17号</li><li>*：表示所有可能的值（当指定为星号时，天（周）需指定为?）</li><li>5/9：表示从5号开始，每隔9天</li><li>？：当天（周）指定任意值的时候，天（月）需要设置为?</li><li>L：表示一个月中的最后一天</li><li>6L：表示倒数第6天</li><li>15W：W指工作日，如果15号不是周六日，则表示15号当天；如果15号是周六，则表示14号；如果15号是周日，则表示16号；如果31W是周日，则31W表示29号（周五），不会跨月</li><li>LW：指最后一个工作日</li><li>15C：表示第15天（不是很明白这个，使用15和15C貌似效果相同？）</li></ul><h3 id="月：1-12"><a href="#月：1-12" class="headerlink" title="月：1-12    , - * /"></a>月：<code>1-12</code>    <code>,</code> <code>-</code> <code>*</code> <code>/</code></h3><ul><li>10：表示10月份</li><li>5,10,11：表示5月份、10月份和11月份</li><li>4-8：表示4月份到8月份</li><li>*：表示所有可能的值</li><li>5/2：表示从5月份开始，每隔2个月，（就是5 7 9 11 次年5 次年7 次年9……）</li><li>1-12：也可以用JAN-DEC表示</li></ul><h3 id="天（周）：MON-SAT-L-C"><a href="#天（周）：MON-SAT-L-C" class="headerlink" title="天（周）：MON-SAT  , - * / ? L  C    #"></a>天（周）：<code>MON-SAT</code>  <code>,</code> <code>-</code> <code>*</code> <code>/</code> <code>?</code> <code>L</code>  <code>C</code>    <code>#</code></h3><ul><li>MON：表示周一</li><li>MON,TUE,FRI：表示周一，周二和周五</li><li>MON-FRI：表示从周一到周五</li><li>MON-WED,SAT：表示从周一到周三，和周六（就是周一、周二、周三和周六）</li><li>mon,tue,wed,thu,fri,sat,sun：表示周一到周日（大小写均可，取星期英文前三个字母，注意星期四是thu，而不是thur）</li><li>7L：表示最后一个周六（效果等同于SATL）（L表示last最后的意思，7表示周六，6表示周五，类推，1表示周日）</li><li>6C：表示周五以及之后包含周五的日期（感觉效果FRI一样，具体还没深究）</li><li>7#2：表示第二个周六（#前面的数字表示星期，1表示周日，2表示周一，以此类推；#后面的数字表示第几个）</li></ul><h3 id="年：留空-2020-2099"><a href="#年：留空-2020-2099" class="headerlink" title="年：留空  2020-2099 , - * /"></a>年：<code>留空</code>  <code>2020-2099</code> <code>,</code> <code>-</code> <code>*</code> <code>/</code></h3><ul><li>2050：表示2050年</li><li>2020,2030,2040：表示2020年、2030年和2040年</li><li>2020-2030：表示2020年到2030年</li><li>*：表示所有可能的值</li><li>2020/10：表示从2020年开始，每隔10年，（就是2020,2030,2040……）</li></ul><h2 id="栗子"><a href="#栗子" class="headerlink" title="栗子"></a>栗子</h2><ul><li><p>每隔5分钟执行一次（从0分开始）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span> <span class="number">0</span>/<span class="number">5</span> * * * ？</span><br></pre></td></tr></table></figure></li><li><p>从0时开始，每小时执行一次</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">0</span>/<span class="number">1</span> * * ?</span><br></pre></td></tr></table></figure></li><li><p>每天的7点30分</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span> <span class="number">30</span> <span class="number">7</span> * * ?</span><br></pre></td></tr></table></figure></li><li><p>工作日的早上6点30分（即是周一到周五，每天早上的6点30分）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span> <span class="number">30</span> <span class="number">7</span> ? * MON-FRI</span><br></pre></td></tr></table></figure></li><li><p>每个月的最后一天早上的10点整</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">10</span> L * ?</span><br></pre></td></tr></table></figure></li><li><p>每个月的最后一个工作日的晚上6点30分（18:30）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span> <span class="number">30</span> <span class="number">18</span> LW * ?</span><br></pre></td></tr></table></figure></li><li><p>朝九晚五，每小时</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">9</span>-<span class="number">17</span> * * ? </span><br></pre></td></tr></table></figure></li><li><p>2020年的8月份每个星期六和星期日早上10点28分28秒</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">28</span> <span class="number">28</span> <span class="number">10</span> ? <span class="number">8</span> <span class="number">1</span>,<span class="number">7</span> <span class="number">2020</span></span><br></pre></td></tr></table></figure><p><code>1,7</code>中，1表示周日，7表示周六</p></li><li><p>每个月的倒数第二天的早上8点整</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">8</span> L-<span class="number">1</span> * ? </span><br></pre></td></tr></table></figure><p>L表示最后一天（倒数第一天），L-1则表示倒数第二天，以此类推</p></li><li><p>下面是网上一些例子，我直接拿过来了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;0 0 12 * * ?&quot;</span> 每天中午12点触发 </span><br><span class="line"><span class="string">&quot;0 15 10 ? * *&quot;</span> 每天上午10:15触发 </span><br><span class="line"><span class="string">&quot;0 15 10 * * ?&quot;</span> 每天上午10:15触发 </span><br><span class="line"><span class="string">&quot;0 15 10 * * ? *&quot;</span> 每天上午10:15触发 </span><br><span class="line"><span class="string">&quot;0 15 10 * * ? 2005&quot;</span> 2005年的每天上午10:15触发 </span><br><span class="line"><span class="string">&quot;0 * 14 * * ?&quot;</span> 在每天下午2点到下午2:59期间的每1分钟触发 </span><br><span class="line"><span class="string">&quot;0 0/5 14 * * ?&quot;</span> 在每天下午2点到下午2:55期间的每5分钟触发 </span><br><span class="line"><span class="string">&quot;0 0/5 14,18 * * ?&quot;</span> 在每天下午2点到2:55期间和下午6点到6:55期间的每5分钟触发 </span><br><span class="line"><span class="string">&quot;0 0-5 14 * * ?&quot;</span> 在每天下午2点到下午2:05期间的每1分钟触发 </span><br><span class="line"><span class="string">&quot;0 10,44 14 ? 3 WED&quot;</span> 每年三月的星期三的下午2:10和2:44触发 </span><br><span class="line"><span class="string">&quot;0 15 10 ? * MON-FRI&quot;</span> 周一至周五的上午10:15触发 </span><br><span class="line"><span class="string">&quot;0 15 10 15 * ?&quot;</span> 每月15日上午10:15触发 </span><br><span class="line"><span class="string">&quot;0 15 10 L * ?&quot;</span> 每月最后一日的上午10:15触发 </span><br><span class="line"><span class="string">&quot;0 15 10 ? * 6L&quot;</span> 每月的最后一个星期五上午10:15触发 </span><br><span class="line"><span class="string">&quot;0 15 10 ? * 6L 2002-2005&quot;</span> 2002年至2005年的每月的最后一个星期五上午10:15触发 </span><br><span class="line"><span class="string">&quot;0 15 10 ? * 6#3&quot;</span> 每月的第三个星期五上午10:15触发 </span><br></pre></td></tr></table></figure></li></ul><h2 id="要点"><a href="#要点" class="headerlink" title="要点"></a>要点</h2><ul><li>一般是有6个位置，分别表示 <strong>分 秒 时 天(月) 月 天(周)</strong>   第7个位置是年，一般省略</li><li>6个位置中的 <strong>天(月)</strong> 表示一个月中的第几天，即是几月几号中的几号；<strong>天(周)</strong> 表示一周中的第几天，周日为第一天，周六为第七天</li><li><strong>天(月)**和</strong>天(周)<strong>不能同时指定，其中必定有一个是 **?</strong></li><li><strong>?</strong> 只能用在 <strong>天(月)**和</strong>天(周)**</li><li>2-10：符号  <strong>-</strong>  表示范围区间</li><li>2/10：符号  <strong>/</strong>  表示频率，从2开始，每隔10，即2，12，22……类推</li><li>2,10：符号  <strong>,</strong>  表示和，<code>2,10</code>表示2和10</li><li>L：last的缩写，表示最后，只能用在<strong>天(月)**和</strong>天(周)<strong>，一般和数字搭配使用，如L在天(月)中表示一个月中的最后一天，</strong>L-1<strong>则表示</strong>每个月的倒数第二天**；3L在天(周)中则表示最后一个星期二</li></ul><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><ul><li>之前也接触过cron，不过上网上找到想要的效果之后便没有继续深究，现在想改个需求又得重蹈覆辙，所以便记录一下，参考过许多博客，理解之后才写下此文，或许有疏漏之处，欢迎指正！</li><li>理解之后，就很容易写的出来，还是要靠理解</li><li>附上一个在线Cron表达式生成器，网上找的：<a href="http://qqe2.com/dev/cron">http://qqe2.com/dev/cron</a></li></ul><h2 id="题外知识"><a href="#题外知识" class="headerlink" title="题外知识"></a>题外知识</h2><h3 id="月份的英语单词："><a href="#月份的英语单词：" class="headerlink" title="月份的英语单词："></a>月份的英语单词：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">一月：January；</span><br><span class="line"></span><br><span class="line">二月：February；</span><br><span class="line"></span><br><span class="line">三月：March；</span><br><span class="line"></span><br><span class="line">四月：April；        </span><br><span class="line"></span><br><span class="line">五月：May；  </span><br><span class="line"></span><br><span class="line">六月：June；</span><br><span class="line"></span><br><span class="line">七月：July； </span><br><span class="line"></span><br><span class="line">八月：August；        </span><br><span class="line"></span><br><span class="line">九月：September； </span><br><span class="line"></span><br><span class="line">十月：October；</span><br><span class="line"></span><br><span class="line">十一月：November； </span><br><span class="line"></span><br><span class="line">十二月：December</span><br></pre></td></tr></table></figure><h3 id="星期拼写"><a href="#星期拼写" class="headerlink" title="星期拼写"></a>星期拼写</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">星期一：Monday，读音[<span class="string">&#x27;mʌndi, &#x27;</span>mʌndei]，英文缩写Mon。</span><br><span class="line"></span><br><span class="line">星期二：Tuesday，读音[<span class="string">&#x27;tju:zdi]，英文缩写Tue。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">星期三：Wednesday，读音[&#x27;</span>wenzdei, <span class="string">&#x27;wenzdi]，英文缩写Wed。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">星期四：Thursday，读音[&#x27;</span>θə:zdi]，英文缩写Thur。</span><br><span class="line"></span><br><span class="line">星期五：Friday，读音[<span class="string">&#x27;fraidi]，英文缩写Fri。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">星期六：Saturday，读音[&#x27;</span>sætədi]，英文缩写Sat。</span><br><span class="line"></span><br><span class="line">星期日：Sunday，读音[<span class="string">&#x27;sʌndi]，英文缩写Sun。</span></span><br></pre></td></tr></table></figure><h3 id="星期一到星期日的英文由来"><a href="#星期一到星期日的英文由来" class="headerlink" title="星期一到星期日的英文由来"></a>星期一到星期日的英文由来</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">星期一到星期日的英文由来</span><br><span class="line"></span><br><span class="line">星期一：月亮日。西方人把这天献给月之女神，因为他们相信月的满亏会影响农作物的生长。</span><br><span class="line"></span><br><span class="line">星期二：战神日。传说欧洲战神Tyr掌管法律和秩序，有次为了制服狼精被咬断了一只手，于是以他的名字命名了星期二。</span><br><span class="line"></span><br><span class="line">星期三：风神日。西方人为了纪念风暴之神”Woden”，因为他曾领导神族跟巨人族作战，还牺牲自己锐利的左眼。</span><br><span class="line"></span><br><span class="line">星期四：雷神日。这是为了纪念雷神”Thor”，他经常带着一把大铁锤，关于雷神Thor的铁锤还发生过有趣的故事，感兴趣的人可以了解一下。</span><br><span class="line"></span><br><span class="line">星期五：古英文中Friday意思是Frigg’s day，Frigg是北欧神话中主司婚姻和生育的女神。</span><br><span class="line"></span><br><span class="line">星期六：源于罗马的萨图恩神，它是掌管五谷的农神。</span><br><span class="line"></span><br><span class="line">星期日：太阳日。因为耶稣复活的日子是星期日，所以现在大多数国家都以星期日为假日。</span><br></pre></td></tr></table></figure><p><br><br></p>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cron </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Boot优雅停止服务的几种方法~（转载）</title>
      <link href="SpringBoot/%E9%83%A8%E7%BD%B2/Spring%20Boot%20%E4%BC%98%E9%9B%85%E5%81%9C%E6%AD%A2%E6%9C%8D%E5%8A%A1%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E6%B3%95~%EF%BC%88%E8%BD%AC%E8%BD%BD%EF%BC%89/"/>
      <url>SpringBoot/%E9%83%A8%E7%BD%B2/Spring%20Boot%20%E4%BC%98%E9%9B%85%E5%81%9C%E6%AD%A2%E6%9C%8D%E5%8A%A1%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E6%B3%95~%EF%BC%88%E8%BD%AC%E8%BD%BD%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><blockquote><p>转载自：<a href="https://mp.weixin.qq.com/s/fguwWJ2JIaPkoAe5RueEPA">https://mp.weixin.qq.com/s/fguwWJ2JIaPkoAe5RueEPA</a></p></blockquote><p>最近突然想到了优雅停止 SpringBoot 服务问题，在使用 SpringBoot 的时候，都要涉及到服务的停止和启动，当我们停止服务的时候，很多时候大家都是kill -9 直接把程序进程杀掉，这样程序不会执行优雅的关闭。而且一些没有执行完的程序就会直接退出。</p><p>我们很多时候都需要安全的将服务停止，也就是把没有处理完的工作继续处理完成。比如停止一些依赖的服务，输出一些日志，发一些信号给其他的应用系统，这个在保证系统的高可用是非常有必要的。</p><p>那么咱么就来看一下几种停止 SpringBoot 的方法。</p><h2 id="第一种"><a href="#第一种" class="headerlink" title="第一种"></a>第一种</h2><p>就是Springboot提供的actuator的功能，它可以执行shutdown, health, info等，默认情况下，actuator的shutdown是disable的，我们需要打开它。首先引入acturator的maven依赖。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后将shutdown节点打开，也将/actuator/shutdown暴露web访问也设置上，除了shutdown之外还有health, info的web访问都打开的话将management.endpoints.web.exposure.include=*就可以。</p><p>将如下配置设置到application.properties里边。设置一下服务的端口号为3333。</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">server.port</span>=<span class="string">3333</span></span><br><span class="line"><span class="meta">management.endpoint.shutdown.enabled</span>=<span class="string">true</span></span><br><span class="line"><span class="meta">management.endpoints.web.exposure.include</span>=<span class="string">shutdown</span></span><br></pre></td></tr></table></figure><p>接下来，咱们创建一个springboot工程，然后设置一个bean对象，配置上PreDestroy方法。这样在停止的时候会打印语句。</p><p>bean的整个生命周期分为创建、初始化、销毁，当最后关闭的时候会执行销毁操作。在销毁的方法中执行一条输出日志。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hqs.springboot.shutdowndemo.bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.PreDestroy;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> huangqingshi</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2019-08-17</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TerminateBean</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PreDestroy</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">preDestroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;TerminalBean is destroyed&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>做一个configuration，然后提供一个获取bean的方法，这样该bean对象会被初始化。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hqs.springboot.shutdowndemo.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.hqs.springboot.shutdowndemo.bean.TerminateBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> huangqingshi</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2019-08-17</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShutDownConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TerminateBean <span class="title">getTerminateBean</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> TerminateBean();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在启动类里边输出一个启动日志，当工程启动的时候，会看到启动的输出，接下来咱们执行停止命令。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -X POST http://localhost:3333/actuator/shutdown</span><br></pre></td></tr></table></figure><p>以下日志可以输出启动时的日志打印和停止时的日志打印，同时程序已经停止。是不是比较神奇。</p><p><img src="https://zhaoxiaobin.coding.net/p/blog/d/zhaoxiaobin_img/git/raw/master/post/springboot/16233902002017/16233902490609.jpg"></p><h2 id="第二种"><a href="#第二种" class="headerlink" title="第二种"></a>第二种</h2><p>比较简单，获取程序启动时候的context，然后关闭主程序启动时的context。这样程序在关闭的时候也会调用PreDestroy注解。如下方法在程序启动十秒后进行关闭。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* method 2: use ctx.close to shutdown all application context */</span></span><br><span class="line">ConfigurableApplicationContext ctx = SpringApplication.run(ShutdowndemoApplication.class, args);</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">   TimeUnit.SECONDS.sleep(<span class="number">10</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">   e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">ctx.close();</span><br></pre></td></tr></table></figure><h2 id="第三种"><a href="#第三种" class="headerlink" title="第三种"></a>第三种</h2><p>在springboot启动的时候将进程号写入一个app.pid文件，生成的路径是可以指定的，可以通过命令 cat /Users/huangqingshi/app.id | xargs kill 命令直接停止服务，这个时候bean对象的PreDestroy方法也会调用的。</p><p>这种方法大家使用的比较普遍。写一个start.sh用于启动springboot程序，然后写一个停止程序将服务停止。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* method 3 : generate a pid in a specified path, while use command to shutdown pid :</span></span><br><span class="line"><span class="comment">            &#x27;cat /Users/huangqingshi/app.pid | xargs kill&#x27; */</span></span><br><span class="line">SpringApplication application = <span class="keyword">new</span> SpringApplication(ShutdowndemoApplication.class);</span><br><span class="line">application.addListeners(<span class="keyword">new</span> ApplicationPidFileWriter(<span class="string">&quot;/Users/huangqingshi/app.pid&quot;</span>));</span><br><span class="line">application.run();</span><br></pre></td></tr></table></figure><h2 id="第四种"><a href="#第四种" class="headerlink" title="第四种"></a>第四种</h2><p>通过调用一个SpringApplication.exit(）方法也可以退出程序，同时将生成一个退出码，这个退出码可以传递给所有的context。</p><p> 这个就是一个JVM的钩子，通过调用这个方法的话会把所有PreDestroy的方法执行并停止，并且传递给具体的退出码给所有Context。</p><p> 通过调用System.exit(exitCode)可以将这个错误码也传给JVM。程序执行完后最后会输出：Process finished with exit code 0，给JVM一个SIGNAL。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* method 4: exit this application using static method */</span></span><br><span class="line">ConfigurableApplicationContext ctx = SpringApplication.run(ShutdowndemoApplication.class, args);</span><br><span class="line">exitApplication(ctx);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">exitApplication</span><span class="params">(ConfigurableApplicationContext context)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> exitCode = SpringApplication.exit(context, (ExitCodeGenerator) () -&gt; <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    System.exit(exitCode);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://zhaoxiaobin.coding.net/p/blog/d/zhaoxiaobin_img/git/raw/master/post/springboot/16233902002017/16233902637048.jpg"></p><h2 id="第五种"><a href="#第五种" class="headerlink" title="第五种"></a>第五种</h2><p>自己写一个Controller，然后将自己写好的Controller获取到程序的context，然后调用自己配置的Controller方法退出程序。</p><p> 通过调用自己写的/shutDownContext方法关闭程序：curl -X POST <a href="http://localhost:3333/shutDownContext%E3%80%82">http://localhost:3333/shutDownContext。</a> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hqs.springboot.shutdowndemo.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.BeansException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContextAware;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ConfigurableApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PostMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> huangqingshi</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2019-08-17</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShutDownController</span> <span class="keyword">implements</span> <span class="title">ApplicationContextAware</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ApplicationContext context;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/shutDownContext&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">shutDownContext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ConfigurableApplicationContext ctx = (ConfigurableApplicationContext) context;</span><br><span class="line">        ctx.close();</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;context is shutdown&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getIndex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;OK&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setApplicationContext</span><span class="params">(ApplicationContext applicationContext)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        context = applicationContext;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>好了，springboot的优雅关闭方法也都实现好了，也有同学问，如何暴力停止呢，简单，直接kill -9 相应的PID即可。</p><h2 id="总结一下"><a href="#总结一下" class="headerlink" title="总结一下"></a>总结一下</h2><p>以上这几种方法实现的话比较简单，但是真实工作中还需要考虑的点还很多，比如需要保护暴露的点不被别人利用，一般要加一些防火墙，或者只在内网使用，保证程序安全。</p><p>在真实的工作中的时候第三种比较常用，程序中一般使用内存队列或线程池的时候最好要优雅的关机，将内存队列没有处理的保存起来或线程池中没处理完的程序处理完。</p><p>但是因为停机的时候比较快，所以停服务的时候最好不要处理大量的数据操作，这样会影响程序停止。</p><p>好了，大家觉得还没看全的话，可以访问我的GIT代码：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">https://github.com/stonehqs/shutdowndemo.git</span></span><br></pre></td></tr></table></figure><p><br><br></p>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis与MySQL双写一致性如何保证？（转载）</title>
      <link href="Redis/Redis%E4%B8%8EMySQL%E5%8F%8C%E5%86%99%E4%B8%80%E8%87%B4%E6%80%A7%E5%A6%82%E4%BD%95%E4%BF%9D%E8%AF%81%EF%BC%9F%EF%BC%88%E8%BD%AC%E8%BD%BD%EF%BC%89/"/>
      <url>Redis/Redis%E4%B8%8EMySQL%E5%8F%8C%E5%86%99%E4%B8%80%E8%87%B4%E6%80%A7%E5%A6%82%E4%BD%95%E4%BF%9D%E8%AF%81%EF%BC%9F%EF%BC%88%E8%BD%AC%E8%BD%BD%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><blockquote><p>转载自：<a href="https://mp.weixin.qq.com/s/5rnkD-2cG2e1cz-zSNMMcw">https://mp.weixin.qq.com/s/5rnkD-2cG2e1cz-zSNMMcw</a></p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>四月份的时候，有位好朋友去美团面试。他说，被问到Redis与MySQL双写一致性如何保证？这道题其实就是在问缓存和数据库在双写场景下，一致性是如何保证的？本文将跟大家一起来探讨如何回答这个问题。</p><p><img src="https://zhaoxiaobin.coding.net/p/blog/d/zhaoxiaobin_img/git/raw/master/post/redis/16233897097283/16233897473750.jpg"></p><h2 id="谈谈一致性"><a href="#谈谈一致性" class="headerlink" title="谈谈一致性"></a>谈谈一致性</h2><p><img src="https://zhaoxiaobin.coding.net/p/blog/d/zhaoxiaobin_img/git/raw/master/post/redis/16233897097283/16233897628390.jpg"></p><p>一致性就是数据保持一致，在分布式系统中，可以理解为多个节点中数据的值是一致的。</p><ul><li><strong>强一致性</strong>：这种一致性级别是最符合用户直觉的，它要求系统写入什么，读出来的也会是什么，用户体验好，但实现起来往往对系统的性能影响大</li><li><strong>弱一致性</strong>：这种一致性级别约束了系统在写入成功后，不承诺立即可以读到写入的值，也不承诺多久之后数据能够达到一致，但会尽可能地保证到某个时间级别（比如秒级别）后，数据能够达到一致状态</li><li><strong>最终一致性</strong>：最终一致性是弱一致性的一个特例，系统会保证在一定时间内，能够达到一个数据一致的状态。这里之所以将最终一致性单独提出来，是因为它是弱一致性中非常推崇的一种一致性模型，也是业界在大型分布式系统的数据一致性上比较推崇的模型</li></ul><h2 id="三个经典的缓存模式"><a href="#三个经典的缓存模式" class="headerlink" title="三个经典的缓存模式"></a>三个经典的缓存模式</h2><p>缓存可以提升性能、缓解数据库压力，但是使用缓存也会导致数据<strong>不一致性</strong>的问题。一般我们是如何使用缓存呢？有三种经典的缓存使用模式：</p><ul><li>Cache-Aside Pattern</li><li>Read-Through/Write-through</li><li>Write-behind</li></ul><h3 id="Cache-Aside-Pattern"><a href="#Cache-Aside-Pattern" class="headerlink" title="Cache-Aside Pattern"></a>Cache-Aside Pattern</h3><p>Cache-Aside Pattern，即<strong>旁路缓存模式</strong>，它的提出是为了尽可能地解决缓存与数据库的数据不一致问题。</p><h4 id="Cache-Aside读流程"><a href="#Cache-Aside读流程" class="headerlink" title="Cache-Aside读流程"></a>Cache-Aside读流程</h4><p><strong>Cache-Aside Pattern</strong>的读请求流程如下：</p><p><img src="https://zhaoxiaobin.coding.net/p/blog/d/zhaoxiaobin_img/git/raw/master/post/redis/16233897097283/16233897967132.jpg" alt="Cache-Aside读请求"></p><ol><li>读的时候，先读缓存，缓存命中的话，直接返回数据</li><li>缓存没有命中的话，就去读数据库，从数据库取出数据，放入缓存后，同时返回响应。</li></ol><h4 id="Cache-Aside-写流程"><a href="#Cache-Aside-写流程" class="headerlink" title="Cache-Aside 写流程"></a>Cache-Aside 写流程</h4><p><strong>Cache-Aside Pattern</strong>的写请求流程如下：</p><p><img src="https://zhaoxiaobin.coding.net/p/blog/d/zhaoxiaobin_img/git/raw/master/post/redis/16233897097283/16233898375446.jpg" alt="Cache-Aside写请求"></p><p>更新的时候，先<strong>更新数据库，然后再删除缓存</strong>。</p><h3 id="Read-Through-Write-Through（读写穿透）"><a href="#Read-Through-Write-Through（读写穿透）" class="headerlink" title="Read-Through/Write-Through（读写穿透）"></a>Read-Through/Write-Through（读写穿透）</h3><p><strong>Read/Write-Through</strong>模式中，服务端把缓存作为主要数据存储。应用程序跟数据库缓存交互，都是通过<strong>抽象缓存层</strong>完成的。</p><h4 id="Read-Through"><a href="#Read-Through" class="headerlink" title="Read-Through"></a>Read-Through</h4><p><strong>Read-Through</strong>的简要流程如下</p><p><img src="https://zhaoxiaobin.coding.net/p/blog/d/zhaoxiaobin_img/git/raw/master/post/redis/16233897097283/16233898610100.jpg" alt="Read-Through简要流程"></p><ol><li>从缓存读取数据，读到直接返回</li><li>如果读取不到的话，从数据库加载，写入缓存后，再返回响应。</li></ol><p>这个简要流程是不是跟<strong>Cache-Aside</strong>很像呢？其实<strong>Read-Through</strong>就是多了一层<strong>Cache-Provider</strong>而已，流程如下：</p><p><img src="https://zhaoxiaobin.coding.net/p/blog/d/zhaoxiaobin_img/git/raw/master/post/redis/16233897097283/16233898789406.jpg" alt="Read-Through流程"></p><p>Read-Through实际只是在<strong>Cache-Aside</strong>之上进行了一层封装，它会让程序代码变得更简洁，同时也减少数据源上的负载。</p><h4 id="Write-Through"><a href="#Write-Through" class="headerlink" title="Write-Through"></a>Write-Through</h4><p><strong>Write-Through</strong>模式下，当发生写请求时，也是由<strong>缓存抽象层</strong>完成数据源和缓存数据的更新,流程如下：<br><img src="https://zhaoxiaobin.coding.net/p/blog/d/zhaoxiaobin_img/git/raw/master/post/redis/16233897097283/16233899055538.jpg"></p><h3 id="Write-behind-（异步缓存写入）"><a href="#Write-behind-（异步缓存写入）" class="headerlink" title="Write-behind （异步缓存写入）"></a>Write-behind （异步缓存写入）</h3><p><strong>Write-behind</strong> 跟Read-Through/Write-Through有相似的地方，都是由<strong>Cache Provider</strong>来负责缓存和数据库的读写。它们又有个很大的不同：<strong>Read/Write-Through</strong>是同步更新缓存和数据的，<strong>Write-Behind</strong>则是只更新缓存，不直接更新数据库，通过<strong>批量异步</strong>的方式来更新数据库。</p><p><img src="https://zhaoxiaobin.coding.net/p/blog/d/zhaoxiaobin_img/git/raw/master/post/redis/16233897097283/16233899261632.jpg" alt="Write behind流程"></p><p>这种方式下，缓存和数据库的一致性不强，<strong>对一致性要求高的系统要谨慎使用</strong>。但是它适合频繁写的场景，MySQL的<strong>InnoDB Buffer Pool机制</strong>就使用到这种模式。</p><h2 id="操作缓存的时候，到底是删除缓存呢，还是更新缓存？"><a href="#操作缓存的时候，到底是删除缓存呢，还是更新缓存？" class="headerlink" title="操作缓存的时候，到底是删除缓存呢，还是更新缓存？"></a>操作缓存的时候，到底是删除缓存呢，还是更新缓存？</h2><p>日常开发中，我们一般使用的就是<strong>Cache-Aside</strong>模式。有些小伙伴可能会问， <strong>Cache-Aside</strong>在写入请求的时候，为什么是<strong>删除缓存而不是更新缓存</strong>呢？</p><p><img src="https://zhaoxiaobin.coding.net/p/blog/d/zhaoxiaobin_img/git/raw/master/post/redis/16233897097283/16233899471503.jpg" alt="Cache-Aside写入流程"></p><p>我们在操作缓存的时候，到底应该删除缓存还是更新缓存呢？我们先来看个例子：</p><p><img src="https://zhaoxiaobin.coding.net/p/blog/d/zhaoxiaobin_img/git/raw/master/post/redis/16233897097283/16233899673158.jpg"></p><ol><li>线程A先发起一个写操作，第一步先更新数据库</li><li>线程B再发起一个写操作，第二步更新了数据库</li><li>由于网络等原因，线程B先更新了缓存</li><li>线程A更新缓存。</li></ol><p>这时候，缓存保存的是A的数据（老数据），数据库保存的是B的数据（新数据），数据<strong>不一致</strong>了，脏数据出现啦。如果是<strong>删除缓存取代更新缓存</strong>则不会出现这个脏数据问题。</p><p><strong>更新缓存相对于删除缓存</strong>，还有两点劣势：</p><ul><li>如果你写入的缓存值，是经过复杂计算才得到的话。更新缓存频率高的话，就浪费性能啦。</li><li>在写数据库场景多，读数据场景少的情况下，数据很多时候还没被读取到，又被更新了，这也浪费了性能呢(实际上，写多的场景，用缓存也不是很划算的,哈哈)</li></ul><h2 id="双写的情况下，先操作数据库还是先操作缓存？"><a href="#双写的情况下，先操作数据库还是先操作缓存？" class="headerlink" title="双写的情况下，先操作数据库还是先操作缓存？"></a>双写的情况下，先操作数据库还是先操作缓存？</h2><p><code>Cache-Aside</code>缓存模式中，有些小伙伴还是会有疑问，在写请求过来的时候，为什么是<strong>先操作数据库呢</strong>？为什么<strong>不先操作缓存</strong>呢？</p><p>假设有A、B两个请求，请求A做更新操作，请求B做查询读取操作。<br><img src="https://zhaoxiaobin.coding.net/p/blog/d/zhaoxiaobin_img/git/raw/master/post/redis/16233897097283/16233900025574.jpg"></p><ol><li>线程A发起一个写操作，第一步del cache</li><li>此时线程B发起一个读操作，cache miss</li><li>线程B继续读DB，读出来一个老数据</li><li>然后线程B把老数据设置入cache</li><li>线程A写入DB最新的数据</li></ol><p>酱紫就有问题啦，<strong>缓存和数据库的数据不一致了。缓存保存的是老数据，数据库保存的是新数据</strong>。因此，Cache-Aside缓存模式，选择了先操作数据库而不是先操作缓存。</p><ul><li>个别小伙伴可能会问，先操作数据库再操作缓存，不一样也会导致数据不一致嘛？它俩又不是原子性操作的。这个是<strong>会的</strong>，但是这种方式，一般因为删除缓存失败等原因，才会导致脏数据，这个概率就很低。小伙伴们可以画下操作流程图，自己先分析下哈。接下来我们再来分析这种<strong>删除缓存失败</strong>的情况，<strong>如何保证一致性</strong>。</li></ul><h2 id="数据库和缓存数据保持强一致，可以嘛？"><a href="#数据库和缓存数据保持强一致，可以嘛？" class="headerlink" title="数据库和缓存数据保持强一致，可以嘛？"></a>数据库和缓存数据保持强一致，可以嘛？</h2><p>实际上，没办法做到数据库与缓存<strong>绝对的一致性</strong>。</p><ul><li>加锁可以嘛？并发写期间加锁，任何读操作不写入缓存？</li><li>缓存及数据库封装CAS乐观锁，更新缓存时通过lua脚本？</li><li>分布式事务，3PC？TCC？</li></ul><p>其实，这是由<strong>CAP理论</strong>决定的。缓存系统适用的场景就是非强一致性的场景，它属于CAP中的AP。<strong>个人觉得，追求绝对一致性的业务场景，不适合引入缓存</strong>。</p><blockquote><p>CAP理论，指的是在一个分布式系统中， Consistency（一致性）、 Availability（可用性）、Partition tolerance（分区容错性），三者不可得兼。</p></blockquote><p>但是，通过一些方案优化处理，是可以<strong>保证弱一致性，最终一致性</strong>的。</p><h2 id="3种方案保证数据库与缓存的一致性"><a href="#3种方案保证数据库与缓存的一致性" class="headerlink" title="3种方案保证数据库与缓存的一致性"></a>3种方案保证数据库与缓存的一致性</h2><h3 id="缓存延时双删"><a href="#缓存延时双删" class="headerlink" title="缓存延时双删"></a>缓存延时双删</h3><p>有些小伙伴可能会说，并不一定要先操作数据库呀，采用<strong>缓存延时双删</strong>策略，就可以保证数据的一致性啦。什么是延时双删呢？</p><p><img src="https://zhaoxiaobin.coding.net/p/blog/d/zhaoxiaobin_img/git/raw/master/post/redis/16233897097283/16233900201456.jpg" alt="延时双删流程"></p><ol><li>先删除缓存</li><li>再更新数据库</li><li>休眠一会（比如1秒），再次删除缓存。</li></ol><p>这个休眠一会，一般多久呢？都是1秒？</p><blockquote><p>这个休眠时间 =  读业务逻辑数据的耗时 + 几百毫秒。为了确保读请求结束，写请求可以删除读请求可能带来的缓存脏数据。</p></blockquote><p>这种方案还算可以，只有休眠那一会（比如就那1秒），可能有脏数据，一般业务也会接受的。但是如果<strong>第二次删除缓存失败</strong>呢？缓存和数据库的数据还是可能不一致，对吧？给Key设置一个自然的expire过期时间，让它自动过期怎样？那业务要接受<strong>过期时间</strong>内，数据的不一致咯？还是有其他更佳方案呢？</p><h3 id="删除缓存重试机制"><a href="#删除缓存重试机制" class="headerlink" title="删除缓存重试机制"></a>删除缓存重试机制</h3><p>不管是<strong>延时双删</strong>还是<strong>Cache-Aside的先操作数据库再删除缓存</strong>，都可能会存在第二步的删除缓存失败，导致的数据不一致问题。可以使用这个方案优化：删除失败就多删除几次呀,保证删除缓存成功就可以了呀~ 所以可以引入<strong>删除缓存重试机制</strong></p><p><img src="https://zhaoxiaobin.coding.net/p/blog/d/zhaoxiaobin_img/git/raw/master/post/redis/16233897097283/16233900902067.jpg" alt="删除缓存重试流程"></p><ol><li>写请求更新数据库</li><li>缓存因为某些原因，删除失败</li><li>把删除失败的key放到消息队列</li><li>消费消息队列的消息，获取要删除的key</li><li>重试删除缓存操作</li></ol><h3 id="读取biglog异步删除缓存"><a href="#读取biglog异步删除缓存" class="headerlink" title="读取biglog异步删除缓存"></a>读取biglog异步删除缓存</h3><p>重试删除缓存机制还可以吧，就是会造成好多<strong>业务代码入侵</strong>。其实，还可以这样优化：通过数据库的<strong>binlog来异步淘汰key</strong>。</p><p><img src="https://zhaoxiaobin.coding.net/p/blog/d/zhaoxiaobin_img/git/raw/master/post/redis/16233897097283/16233901072827.jpg"></p><p>以mysql为例吧</p><ul><li><p>可以使用阿里的canal将binlog日志采集发送到MQ队列里面</p><p>然后通过ACK机制确认处理这条更新消息，删除缓存，保证数据缓存一致性<br><br><br></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一口气说出6种，@Transactional注解的失效场景（转载）</title>
      <link href="SpringBoot/%E6%95%B0%E6%8D%AE%E5%BA%93/%E4%B8%80%E5%8F%A3%E6%B0%94%E8%AF%B4%E5%87%BA%206%E7%A7%8D%EF%BC%8C@Transactional%E6%B3%A8%E8%A7%A3%E7%9A%84%E5%A4%B1%E6%95%88%E5%9C%BA%E6%99%AF%EF%BC%88%E8%BD%AC%E8%BD%BD%EF%BC%89/"/>
      <url>SpringBoot/%E6%95%B0%E6%8D%AE%E5%BA%93/%E4%B8%80%E5%8F%A3%E6%B0%94%E8%AF%B4%E5%87%BA%206%E7%A7%8D%EF%BC%8C@Transactional%E6%B3%A8%E8%A7%A3%E7%9A%84%E5%A4%B1%E6%95%88%E5%9C%BA%E6%99%AF%EF%BC%88%E8%BD%AC%E8%BD%BD%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><blockquote><p>转载自：<a href="https://juejin.cn/post/6844904096747503629">https://juejin.cn/post/6844904096747503629</a></p></blockquote><h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><p>昨天公众号粉丝咨询了一个问题，说自己之前面试被问<code>@Transactional</code>注解哪些场景下会失效，一时语塞致使面试失败。所以今天简单的和大家分享一下<code>@Transactional</code>相关的知识。</p><p><code>@Transactional</code> 注解相信大家并不陌生，平时开发中很常用的一个注解，它能保证方法内多个数据库操作要么同时成功、要么同时失败。使用<code>@Transactional</code>注解时需要注意许多的细节，不然你会发现<code>@Transactional</code>总是莫名其妙的就失效了。</p><h3 id="一、事务"><a href="#一、事务" class="headerlink" title="一、事务"></a>一、事务</h3><p>事务管理在系统开发中是不可缺少的一部分，<code>Spring</code>提供了很好事务管理机制，主要分为<code>编程式事务</code>和<code>声明式事务</code>两种。</p><p><strong>编程式事务</strong>：是指在代码中手动的管理事务的提交、回滚等操作，代码侵入性比较强，如下示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">//TODO something</span></span><br><span class="line">     transactionManager.commit(status);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    transactionManager.rollback(status);</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> InvoiceApplyException(<span class="string">&quot;异常失败&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>声明式事务</strong>：基于<code>AOP</code>面向切面的，它将具体业务与事务处理部分解耦，代码侵入性很低，所以在实际开发中声明式事务用的比较多。声明式事务也有两种实现方式，一是基于<code>TX</code>和<code>AOP</code>的xml配置文件方式，二种就是基于@Transactional注解了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/test&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> insert = cityInfoDictMapper.insert(cityInfoDict);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二、-Transactional介绍"><a href="#二、-Transactional介绍" class="headerlink" title="二、@Transactional介绍"></a>二、@Transactional介绍</h3><h4 id="1、-Transactional注解可以作用于哪些地方？"><a href="#1、-Transactional注解可以作用于哪些地方？" class="headerlink" title="1、@Transactional注解可以作用于哪些地方？"></a>1、@Transactional注解可以作用于哪些地方？</h4><p>@Transactional 可以作用在<code>接口</code>、<code>类</code>、<code>类方法</code>。</p><ul><li><strong>作用于类</strong>：当把@Transactional 注解放在类上时，表示所有该类的<code>public</code>方法都配置相同的事务属性信息。</li><li><strong>作用于方法</strong>：当类配置了@Transactional，方法也配置了@Transactional，方法的事务会覆盖类的事务配置信息。</li><li><strong>作用于接口</strong>：不推荐这种使用方法，因为一旦标注在Interface上并且配置了Spring AOP 使用CGLib动态代理，将会导致@Transactional注解失效</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisPlusController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CityInfoDictMapper cityInfoDictMapper;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Transactional(rollbackFor = Exception.class)</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/test&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        CityInfoDict cityInfoDict = <span class="keyword">new</span> CityInfoDict();</span><br><span class="line">        cityInfoDict.setParentCityId(<span class="number">2</span>);</span><br><span class="line">        cityInfoDict.setCityName(<span class="string">&quot;2&quot;</span>);</span><br><span class="line">        cityInfoDict.setCityLevel(<span class="string">&quot;2&quot;</span>);</span><br><span class="line">        cityInfoDict.setCityCode(<span class="string">&quot;2&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> insert = cityInfoDictMapper.insert(cityInfoDict);</span><br><span class="line">        <span class="keyword">return</span> insert + <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2、-Transactional注有哪些属性？"><a href="#2、-Transactional注有哪些属性？" class="headerlink" title="2、@Transactional注有哪些属性？"></a>2、@Transactional注有哪些属性？</h4><h5 id="propagation属性"><a href="#propagation属性" class="headerlink" title="propagation属性"></a>propagation属性</h5><p><code>propagation</code> 代表事务的传播行为，默认值为 <code>Propagation.REQUIRED</code>，其他的属性信息如下：</p><ul><li><code>Propagation.REQUIRED</code>：如果当前存在事务，则加入该事务，如果当前不存在事务，则创建一个新的事务。**(** 也就是说如果A方法和B方法都添加了注解，在默认传播模式下，A方法内部调用B方法，会把两个方法的事务合并为一个事务 <strong>）</strong></li><li><code>Propagation.SUPPORTS</code>：如果当前存在事务，则加入该事务；如果当前不存在事务，则以非事务的方式继续运行。</li><li><code>Propagation.MANDATORY</code>：如果当前存在事务，则加入该事务；如果当前不存在事务，则抛出异常。</li><li><code>Propagation.REQUIRES_NEW</code>：重新创建一个新的事务，如果当前存在事务，暂停当前的事务。**(** 当类A中的 a 方法用默认<code>Propagation.REQUIRED</code>模式，类B中的 b方法加上采用 <code>Propagation.REQUIRES_NEW</code>模式，然后在 a 方法中调用 b方法操作数据库，然而 a方法抛出异常后，b方法并没有进行回滚，因为<code>Propagation.REQUIRES_NEW</code>会暂停 a方法的事务 <strong>)</strong></li><li><code>Propagation.NOT_SUPPORTED</code>：以非事务的方式运行，如果当前存在事务，暂停当前的事务。</li><li><code>Propagation.NEVER</code>：以非事务的方式运行，如果当前存在事务，则抛出异常。</li><li><code>Propagation.NESTED</code> ：和 Propagation.REQUIRED 效果一样。</li></ul><h5 id="isolation-属性"><a href="#isolation-属性" class="headerlink" title="isolation 属性"></a>isolation 属性</h5><p><code>isolation</code> ：事务的隔离级别，默认值为 <code>Isolation.DEFAULT</code>。</p><ul><li>Isolation.DEFAULT：使用底层数据库默认的隔离级别。</li><li>Isolation.READ_UNCOMMITTED</li><li>Isolation.READ_COMMITTED</li><li>Isolation.REPEATABLE_READ</li><li>Isolation.SERIALIZABLE</li></ul><h5 id="timeout-属性"><a href="#timeout-属性" class="headerlink" title="timeout 属性"></a>timeout 属性</h5><p><code>timeout</code> ：事务的超时时间，默认值为 -1。如果超过该时间限制但事务还没有完成，则自动回滚事务。</p><h5 id="readOnly-属性"><a href="#readOnly-属性" class="headerlink" title="readOnly 属性"></a>readOnly 属性</h5><p><code>readOnly</code> ：指定事务是否为只读事务，默认值为 false；为了忽略那些不需要事务的方法，比如读取数据，可以设置 read-only 为 true。</p><h5 id="rollbackFor-属性"><a href="#rollbackFor-属性" class="headerlink" title="rollbackFor 属性"></a>rollbackFor 属性</h5><p><code>rollbackFor</code> ：用于指定能够触发事务回滚的异常类型，可以指定多个异常类型。</p><h5 id="noRollbackFor属性"><a href="#noRollbackFor属性" class="headerlink" title="noRollbackFor属性"></a>noRollbackFor属性</h5><p><code>noRollbackFor</code>：抛出指定的异常类型，不回滚事务，也可以指定多个异常类型。</p><h3 id="三、-Transactional失效场景"><a href="#三、-Transactional失效场景" class="headerlink" title="三、@Transactional失效场景"></a>三、@Transactional失效场景</h3><p>接下来我们结合具体的代码分析一下哪些场景下，@Transactional 注解会失效。</p><h4 id="1、-Transactional-应用在非-public-修饰的方法上"><a href="#1、-Transactional-应用在非-public-修饰的方法上" class="headerlink" title="1、@Transactional 应用在非 public 修饰的方法上"></a>1、@Transactional 应用在非 public 修饰的方法上</h4><p>如果<code>Transactional</code>注解应用在非<code>public</code> 修饰的方法上，Transactional将会失效。</p><p><img src="https://zhaoxiaobin.coding.net/p/blog/d/zhaoxiaobin_img/git/raw/master/post/springboot/16233894420760/16233895522984.jpg"></p><p>之所以会失效是因为在Spring AOP 代理时，如上图所示 <code>TransactionInterceptor</code> （事务拦截器）在目标方法执行前后进行拦截，<code>DynamicAdvisedInterceptor</code>（CglibAopProxy 的内部类）的 intercept 方法或 <code>JdkDynamicAopProxy</code> 的 invoke 方法会间接调用 <code>AbstractFallbackTransactionAttributeSource</code>的 <code>computeTransactionAttribute</code> 方法，获取Transactional 注解的事务配置信息。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> TransactionAttribute <span class="title">computeTransactionAttribute</span><span class="params">(Method method,</span></span></span><br><span class="line"><span class="function"><span class="params">    Class&lt;?&gt; targetClass)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Don&#x27;t allow no-public methods as required.</span></span><br><span class="line">        <span class="keyword">if</span> (allowPublicMethodsOnly() &amp;&amp; !Modifier.isPublic(method.getModifiers())) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此方法会检查目标方法的修饰符是否为 public，不是 public则不会获取@Transactional 的属性配置信息。</p><p><strong>注意：<code>protected</code>、<code>private</code> 修饰的方法上使用 <code>@Transactional</code> 注解，虽然事务无效，但不会有任何报错，这是我们很容犯错的一点。</strong></p><h4 id="2、-Transactional-注解属性-propagation-设置错误"><a href="#2、-Transactional-注解属性-propagation-设置错误" class="headerlink" title="2、@Transactional 注解属性 propagation 设置错误"></a>2、@Transactional 注解属性 propagation 设置错误</h4><p>这种失效是由于配置错误，若是错误的配置以下三种 propagation，事务将不会发生回滚。</p><p><code>TransactionDefinition.PROPAGATION_SUPPORTS</code>：如果当前存在事务，则加入该事务；如果当前没有事务，则以非事务的方式继续运行。 <code>TransactionDefinition.PROPAGATION_NOT_SUPPORTED</code>：以非事务方式运行，如果当前存在事务，则把当前事务挂起。 <code>TransactionDefinition.PROPAGATION_NEVER</code>：以非事务方式运行，如果当前存在事务，则抛出异常。</p><h4 id="3、-Transactional-注解属性-rollbackFor-设置错误"><a href="#3、-Transactional-注解属性-rollbackFor-设置错误" class="headerlink" title="3、@Transactional  注解属性 rollbackFor 设置错误"></a>3、@Transactional  注解属性 rollbackFor 设置错误</h4><p><code>rollbackFor</code> 可以指定能够触发事务回滚的异常类型。Spring默认抛出了未检查<code>unchecked</code>异常（继承自 <code>RuntimeException</code> 的异常）或者 <code>Error</code>才回滚事务；其他异常不会触发回滚事务。如果在事务中抛出其他类型的异常，但却期望 Spring 能够回滚事务，就需要指定 <strong>rollbackFor</strong>属性。</p><p><img src="https://zhaoxiaobin.coding.net/p/blog/d/zhaoxiaobin_img/git/raw/master/post/springboot/16233894420760/16233895700774.jpg"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 希望自定义的异常可以进行回滚</span></span><br><span class="line"><span class="meta">@Transactional(propagation= Propagation.REQUIRED,rollbackFor= MyException.class</span></span><br></pre></td></tr></table></figure><p>若在目标方法中抛出的异常是 <code>rollbackFor</code> 指定的异常的子类，事务同样会回滚。Spring源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">getDepth</span><span class="params">(Class&lt;?&gt; exceptionClass, <span class="keyword">int</span> depth)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (exceptionClass.getName().contains(<span class="keyword">this</span>.exceptionName)) &#123;</span><br><span class="line">        <span class="comment">// Found it!</span></span><br><span class="line">        <span class="keyword">return</span> depth;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// If we&#x27;ve gone as far as we can go and haven&#x27;t found it...</span></span><br><span class="line">    <span class="keyword">if</span> (exceptionClass == Throwable.class) &#123;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> getDepth(exceptionClass.getSuperclass(), depth + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4、同一个类中方法调用，导致-Transactional失效"><a href="#4、同一个类中方法调用，导致-Transactional失效" class="headerlink" title="4、同一个类中方法调用，导致@Transactional失效"></a>4、同一个类中方法调用，导致@Transactional失效</h4><p>开发中避免不了会对同一个类里面的方法调用，比如有一个类Test，它的一个方法A，A再调用本类的方法B（不论方法B是用public还是private修饰），但方法A没有声明注解事务，而B方法有。则外部调用方法A之后，方法B的事务是不会起作用的。这也是经常犯错误的一个地方。</p><p>那为啥会出现这种情况？其实这还是由于使用<code>Spring AOP</code>代理造成的，因为只有当事务方法被当前类以外的代码调用时，才会由<code>Spring</code>生成的代理对象来管理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//@Transactional</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/test&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> Integer <span class="title">A</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    CityInfoDict cityInfoDict = <span class="keyword">new</span> CityInfoDict();</span><br><span class="line">    cityInfoDict.setCityName(<span class="string">&quot;2&quot;</span>);</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * B 插入字段为 3的数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">this</span>.insertB();</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * A 插入字段为 2的数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">int</span> insert = cityInfoDictMapper.insert(cityInfoDict);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> insert;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Transactional()</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Integer <span class="title">insertB</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    CityInfoDict cityInfoDict = <span class="keyword">new</span> CityInfoDict();</span><br><span class="line">    cityInfoDict.setCityName(<span class="string">&quot;3&quot;</span>);</span><br><span class="line">    cityInfoDict.setParentCityId(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> cityInfoDictMapper.insert(cityInfoDict);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5、异常被你的-catch“吃了”导致-Transactional失效"><a href="#5、异常被你的-catch“吃了”导致-Transactional失效" class="headerlink" title="5、异常被你的 catch“吃了”导致@Transactional失效"></a>5、异常被你的 catch“吃了”导致@Transactional失效</h4><p>这种情况是最常见的一种@Transactional注解失效场景，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> Integer <span class="title">A</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> insert = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        CityInfoDict cityInfoDict = <span class="keyword">new</span> CityInfoDict();</span><br><span class="line">        cityInfoDict.setCityName(<span class="string">&quot;2&quot;</span>);</span><br><span class="line">        cityInfoDict.setParentCityId(<span class="number">2</span>);</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">        * A 插入字段为 2的数据</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        insert = cityInfoDictMapper.insert(cityInfoDict);</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">        * B 插入字段为 3的数据</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        b.insertB();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果B方法内部抛了异常，而A方法此时try catch了B方法的异常，那这个事务还能正常回滚吗？</p><p>答案：不能！</p><p>会抛出异常：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">org.springframework.transaction.UnexpectedRollbackException: Transaction rolled back because it has been marked as rollback-only</span><br></pre></td></tr></table></figure><p>因为当<code>ServiceB</code>中抛出了一个异常以后，<code>ServiceB</code>标识当前事务需要<code>rollback</code>。但是<code>ServiceA</code>中由于你手动的捕获这个异常并进行处理，<code>ServiceA</code>认为当前事务应该正常<code>commit</code>。此时就出现了前后不一致，也就是因为这样，抛出了前面的<code>UnexpectedRollbackException</code>异常。</p><p><code>spring</code>的事务是在调用业务方法之前开始的，业务方法执行完毕之后才执行<code>commit</code> or <code>rollback</code>，事务是否执行取决于是否抛出<code>runtime异常</code>。如果抛出<code>runtime exception</code> 并在你的业务方法中没有catch到的话，事务会回滚。</p><p>在业务方法中一般不需要catch异常，如果非要catch一定要抛出<code>throw new RuntimeException()</code>，或者注解中指定抛异常类型<code>@Transactional(rollbackFor=Exception.class)</code>，否则会导致事务失效，数据commit造成数据不一致，所以有些时候try catch反倒会画蛇添足。</p><h4 id="6、数据库引擎不支持事务"><a href="#6、数据库引擎不支持事务" class="headerlink" title="6、数据库引擎不支持事务"></a>6、数据库引擎不支持事务</h4><p>这种情况出现的概率并不高，事务能否生效数据库引擎是否支持事务是关键。常用的MySQL数据库默认使用支持事务的<code>innodb</code>引擎。一旦数据库引擎切换成不支持事务的<code>myisam</code>，那事务就从根本上失效了。</p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>@Transactional 注解的看似简单易用，但如果对它的用法一知半解，还是会踩到很多坑的。<br><br><br></p>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Transactional </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>为什么Git把SVN拍在了沙滩上（转载）</title>
      <link href="%E5%85%B6%E5%AE%83/%E4%B8%BA%E4%BB%80%E4%B9%88Git%E6%8A%8ASVN%E6%8B%8D%E5%9C%A8%E4%BA%86%E6%B2%99%E6%BB%A9%E4%B8%8A%EF%BC%88%E8%BD%AC%E8%BD%BD%EF%BC%89/"/>
      <url>%E5%85%B6%E5%AE%83/%E4%B8%BA%E4%BB%80%E4%B9%88Git%E6%8A%8ASVN%E6%8B%8D%E5%9C%A8%E4%BA%86%E6%B2%99%E6%BB%A9%E4%B8%8A%EF%BC%88%E8%BD%AC%E8%BD%BD%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><blockquote><p>转载自：<a href="https://mp.weixin.qq.com/s/qfpsLZrIZxDKxzHSZh9d_A">https://mp.weixin.qq.com/s/qfpsLZrIZxDKxzHSZh9d_A</a></p></blockquote><h2 id="Git-vs-SVN"><a href="#Git-vs-SVN" class="headerlink" title="Git vs SVN"></a>Git vs SVN</h2><blockquote><p>Git 和 SVN 孰优孰好，每个人有不同的体验。</p></blockquote><h3 id="一、Git是分布式的，SVN是集中式的"><a href="#一、Git是分布式的，SVN是集中式的" class="headerlink" title="一、Git是分布式的，SVN是集中式的"></a>一、Git是分布式的，SVN是集中式的</h3><p>这是 Git 和 SVN 最大的区别。若能掌握这个概念，两者区别基本搞懂大半。因为 Git 是分布式的，所以 Git 支持离线工作，在本地可以进行很多操作，包括接下来将要重磅推出的分支功能。而 SVN 必须联网才能正常工作。</p><h3 id="二、Git复杂概念多，SVN简单易上手"><a href="#二、Git复杂概念多，SVN简单易上手" class="headerlink" title="二、Git复杂概念多，SVN简单易上手"></a>二、Git复杂概念多，SVN简单易上手</h3><p>所有同时掌握 Git 和 SVN 的开发者都必须承认，Git 的命令实在太多了，日常工作需要掌握 <code>add</code>, <code>commit</code>, <code>status</code>, <code>fetch</code>, <code>push</code>, <code>rebase</code>等，若要熟练掌握，还必须掌握 <code>rebase</code>和 <code>merge</code>的区别， <code>fetch</code>和 <code>pull</code>的区别等，除此之外，还有 <code>cherry-pick</code>， <code>submodule</code>， <code>stash</code>等功能，仅是这些名词听着都很绕。</p><p>在易用性这方面，SVN 会好得多，简单易上手，对新手很友好。但是从另外一方面看，Git 命令多意味着功能多，若我们能掌握大部分 Git 的功能，体会到其中的奥妙，会发现再也回不去 SVN 的时代了。</p><h3 id="三、Git分支廉价，SVN分支昂贵"><a href="#三、Git分支廉价，SVN分支昂贵" class="headerlink" title="三、Git分支廉价，SVN分支昂贵"></a>三、Git分支廉价，SVN分支昂贵</h3><p>在版本管理里，分支是很常使用的功能。在发布版本前，需要发布分支，进行大需求开发，需要 feature 分支，大团队还会有开发分支，稳定分支等。在大团队开发过程中，常常存在创建分支，切换分支的需求。</p><p>Git 分支是指针指向某次提交，而 SVN 分支是拷贝的目录。这个特性使 Git 的分支切换非常迅速，且创建成本非常低。</p><p>而且 Git 有本地分支，SVN 无本地分支。在实际开发过程中，经常会遇到有些代码没写完，但是需紧急处理其他问题，若我们使用 Git，便可以创建本地分支存储没写完的代码，待问题处理完后，再回到本地分支继续完成代码。</p><hr><h2 id="Git核心思想"><a href="#Git核心思想" class="headerlink" title="Git核心思想"></a>Git核心思想</h2><p>Git 最核心的一个概念就是<strong>工作流</strong>。</p><ul><li><strong>工作区(Workspace)</strong> 是电脑中实际的目录。</li><li><strong>暂存区(Index)</strong> 类似于缓存区域，临时保存你的改动。</li><li>**仓库区(Repository)**，分为本地仓库和远程仓库。</li></ul><p>从 SVN 切换到 Git，最难理解并且最不能理解的是暂存区和本地仓库。熟练使用 Git 后，会发现这简直是神设计，由于这两者的存在，使许多工作变得易管理。</p><p>通常提交代码分为几步：</p><ul><li><code>git add</code> 从工作区提交到暂存区</li><li><code>git commit</code> 从暂存区提交到本地仓库</li><li><code>git push</code>或 <code>git svn dcommit</code> 从本地仓库提交到远程仓库</li></ul><p>一般来说，记住以下命令，便可进行日常工作了（图片来源于网络）：</p><p><img src="https://zhaoxiaobin.coding.net/p/blog/d/zhaoxiaobin_img/git/raw/master/post/other/16233892116804/16233893553975.jpg"></p><hr><h2 id="Git-SVN常用命令"><a href="#Git-SVN常用命令" class="headerlink" title="Git-SVN常用命令"></a>Git-SVN常用命令</h2><blockquote><p>看到Git-SVN不要懵！是的，在Git中甚至有命令可以直接和SVN进行桥接，Git 中所有与SVN桥接的基础命令就是 <code>git svn</code></p></blockquote><p>若服务器使用的 SVN，但是本地想要体验 Git 的本地分支，离线操作等功能，可以使用 Git-SVN功能。</p><p>常用操作如下（图片来源于网络）：</p><p><img src="https://zhaoxiaobin.coding.net/p/blog/d/zhaoxiaobin_img/git/raw/master/post/other/16233892116804/16233893750893.jpg"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 下载一个 SVN 项目和它的整个代码历史，并初始化为 Git 代码库$ git svn <span class="built_in">clone</span> -s [repository]</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看当前版本库情况$ git svn info</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 取回远程仓库所有分支的变化$ git svn fetch</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 取回远程仓库当前分支的变化，并与本地分支变基合并$ git svn rebase</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 上传当前分支的本地仓库到远程仓库$ git svn dcommit</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 拉取新分支，并提交到远程仓库$ svn copy [remote_branch] [new_remote_branch] -m [message]</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 创建远程分支对应的本地分支$ git checkout -b [local_branch] [remote_branch]</span></span><br></pre></td></tr></table></figure><hr><h3 id="初-始-化"><a href="#初-始-化" class="headerlink" title="初 始 化"></a>初 始 化</h3><blockquote><p>从本节开始，除特殊说明，以下命令均适用于 Git 与 Git-SVN。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 在当前目录新建一个Git代码库$ git init</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 下载一个项目和它的整个代码历史 [Git only]$ git <span class="built_in">clone</span> [url]</span></span><br></pre></td></tr></table></figure><hr><h3 id="配-置"><a href="#配-置" class="headerlink" title="配  置"></a>配  置</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 列举所有配置$ git config -l</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 为命令配置别名$ git config --globalalias.co checkout$ git config --globalalias.ci commit$ git config --globalalias.st status$ git config --globalalias.br branch</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置提交代码时的用户信息$ git config [--global] user.name <span class="string">&quot;[name]&quot;</span>$ git config [--global] user.email <span class="string">&quot;[email address]&quot;</span></span></span><br></pre></td></tr></table></figure><p>Git 用户的配置文件位于 <code>~/.gitconfig</code></p><p>Git 单个仓库的配置文件位于 <code>~/$PROJECT_PATH/.git/config</code></p><hr><h3 id="增删文件"><a href="#增删文件" class="headerlink" title="增删文件"></a>增删文件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 添加当前目录的所有文件到暂存区$ git add .</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 添加指定文件到暂存区$ git add &lt;file1&gt;&lt;file2&gt;...</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 添加指定目录到暂存区，包括其子目录$ git add &lt;dir&gt;</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除工作区文件，并且将这次删除放入暂存区$ git rm [file1] [file2] ...</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 停止追踪指定文件，但该文件会保留在工作区$ git rm --cached [file]</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 改名文件，并且将这个改名放入暂存区$ git mv [file-original] [file-renamed]</span></span><br></pre></td></tr></table></figure><blockquote><p>把文件名 file1 添加到 .gitignore 文件里，Git 会停止跟踪 file1 的状态。</p></blockquote><hr><h3 id="分-支"><a href="#分-支" class="headerlink" title="分  支"></a>分  支</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 列出所有本地分支$ git branch</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 列出所有本地分支和远程分支$ git branch -a</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 新建一个分支，但依然停留在当前分支$ git branch [branch-name]</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 新建一个分支，并切换到该分支$ git checkout -b [new_branch] [remote-branch]</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 切换到指定分支，并更新工作区$ git checkout [branch-name]</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 合并指定分支到当前分支$ git merge [branch]</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 选择一个 commit，合并进当前分支$ git cherry-pick [commit]</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除本地分支，-D 参数强制删除分支$ git branch -d [branch-name]</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除远程分支$ git push [remote] :[remote-branch]</span></span><br></pre></td></tr></table></figure><hr><h3 id="提-交"><a href="#提-交" class="headerlink" title="提  交"></a>提  交</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 提交暂存区到仓库区$ git commit -m [message]</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 提交工作区与暂存区的变化直接到仓库区$ git commit -a</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 提交时显示所有 diff 信息$ git commit -v</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 提交暂存区修改到仓库区，合并到上次修改，并修改上次的提交信息$ git commit --amend -m [message]</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 上传本地指定分支到远程仓库$ git push [remote] [remote-branch]</span></span><br></pre></td></tr></table></figure><hr><h3 id="拉-取"><a href="#拉-取" class="headerlink" title="拉  取"></a>拉  取</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 下载远程仓库的所有变动 (Git only)$ git fetch [remote]</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 显示所有远程仓库 (Git only)$ git remote -v</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 显示某个远程仓库的信息 (Git only)$ git remote show [remote]</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 增加一个新的远程仓库，并命名 (Git only)$ git remote add [remote-name] [url]</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 取回远程仓库的变化，并与本地分支合并，(Git only), 若使用 Git-SVN，请查看第三节$ git pull [remote] [branch]</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 取回远程仓库的变化，并与本地分支变基合并，(Git only), 若使用 Git-SVN，请查看第三节$ git pull --rebase [remote] [branch]</span></span><br></pre></td></tr></table></figure><hr><h3 id="撤-销"><a href="#撤-销" class="headerlink" title="撤  销"></a>撤  销</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 恢复暂存区的指定文件到工作区$ git checkout [file]</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 恢复暂存区当前目录的所有文件到工作区$ git checkout .</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 恢复工作区到指定 commit$ git checkout [commit]</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 重置暂存区的指定文件，与上一次 commit 保持一致，但工作区不变$ git reset [file]</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 重置暂存区与工作区，与上一次 commit 保持一致$ git reset --hard</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 重置当前分支的指针为指定 commit，同时重置暂存区，但工作区不变$ git reset [commit]</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 重置当前分支的HEAD为指定 commit，同时重置暂存区和工作区，与指定 commit 一致$ git reset --hard [commit]</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 新建一个 commit，用于撤销指定 commit$ git revert [commit]</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 将未提交的变化放在储藏区$ git stash</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 将储藏区的内容恢复到当前工作区$ git stash pop</span></span><br></pre></td></tr></table></figure><hr><h3 id="查-询"><a href="#查-询" class="headerlink" title="查  询"></a>查  询</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看工作区文件修改状态$ git status</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看工作区文件修改具体内容$ git diff [file]</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看暂存区文件修改内容$ git diff --cached [file]</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看版本库修改记录$ git <span class="built_in">log</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看某人提交记录$ git <span class="built_in">log</span> --author=someone</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看某个文件的历史具体修改内容$ git <span class="built_in">log</span> -p [file]</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看某次提交具体修改内容$ git show [commit]</span></span><br></pre></td></tr></table></figure><p><br><br></p>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>求求你了，配个GC日志呗，不然咋分析故障原因（转载）</title>
      <link href="JVM/%E6%B1%82%E6%B1%82%E4%BD%A0%E4%BA%86%EF%BC%8C%E9%85%8D%E4%B8%AAGC%E6%97%A5%E5%BF%97%E5%91%97%EF%BC%8C%E4%B8%8D%E7%84%B6%E5%92%8B%E5%88%86%E6%9E%90%E6%95%85%E9%9A%9C%E5%8E%9F%E5%9B%A0%EF%BC%88%E8%BD%AC%E8%BD%BD%EF%BC%89/"/>
      <url>JVM/%E6%B1%82%E6%B1%82%E4%BD%A0%E4%BA%86%EF%BC%8C%E9%85%8D%E4%B8%AAGC%E6%97%A5%E5%BF%97%E5%91%97%EF%BC%8C%E4%B8%8D%E7%84%B6%E5%92%8B%E5%88%86%E6%9E%90%E6%95%85%E9%9A%9C%E5%8E%9F%E5%9B%A0%EF%BC%88%E8%BD%AC%E8%BD%BD%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><blockquote><p>转载自：<a href="https://mp.weixin.qq.com/s/ho1xTtyw181IdqPCcdo0jQ">https://mp.weixin.qq.com/s/ho1xTtyw181IdqPCcdo0jQ</a></p></blockquote><p>生产环境上，或者其他要测试 GC 问题的环境上，一定会配置上打印GC日志的参数，便于分析 GC 相关的问题。</p><p>但是可能很多人配置的都不够“完美”，要么是打印的内容过少，要么是输出到控制台，要么是一个大文件被覆盖，要么是……</p><p><strong>本文带你一步一步，配置一个完美的 GC 日志打印策略</strong></p><h2 id="打印内容"><a href="#打印内容" class="headerlink" title="打印内容"></a>打印内容</h2><p>为了保留足够多的“现场证据”，最好是把 GC 相关的信息打印的足够完整。而且你的程序真的不差你GC时打印日志I/O消耗的那点性能</p><h3 id="打印基本-GC-信息"><a href="#打印基本-GC-信息" class="headerlink" title="打印基本 GC 信息"></a>打印基本 GC 信息</h3><p>打印 GC 日志的第一步，就是开启 GC 打印的参数了，也是最基本的参数。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-XX:+PrintGCDetails -XX:+PrintGCDateStamps</span><br></pre></td></tr></table></figure><h3 id="打印对象分布"><a href="#打印对象分布" class="headerlink" title="打印对象分布"></a>打印对象分布</h3><p>为了分析 GC 时的晋升情况和晋升导致的高暂停，不看对象年龄分布日志怎么行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-XX:+PrintTenuringDistribution</span><br></pre></td></tr></table></figure><p>输出内容示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Desired survivor size 59244544 bytes, new threshold 15 (max 15)</span><br><span class="line">- age   1:     963176 bytes,     963176 total</span><br><span class="line">- age   2:     791264 bytes,    1754440 total</span><br><span class="line">- age   3:     210960 bytes,    1965400 total</span><br><span class="line">- age   4:     167672 bytes,    2133072 total</span><br><span class="line">- age   5:     172496 bytes,    2305568 total</span><br><span class="line">- age   6:     107960 bytes,    2413528 total</span><br><span class="line">- age   7:     205440 bytes,    2618968 total</span><br><span class="line">- age   8:     185144 bytes,    2804112 total</span><br><span class="line">- age   9:     195240 bytes,    2999352 total</span><br><span class="line">- age  10:     169080 bytes,    3168432 total</span><br><span class="line">- age  11:     114664 bytes,    3283096 total</span><br><span class="line">- age  12:     168880 bytes,    3451976 total</span><br><span class="line">- age  13:     167272 bytes,    3619248 total</span><br><span class="line">- age  14:     387808 bytes,    4007056 total</span><br><span class="line">- age  15:     168992 bytes,    4176048 total</span><br></pre></td></tr></table></figure><h3 id="GC-后打印堆数据"><a href="#GC-后打印堆数据" class="headerlink" title="GC 后打印堆数据"></a>GC 后打印堆数据</h3><p>每次发生 GC 时，对比一下 GC 前后的堆内存情况，更直观</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-XX:+PrintHeapAtGC</span><br></pre></td></tr></table></figure><p>输出内容示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;Heap before GC invocations=0 (full 0):</span><br><span class="line"> garbage-first heap   total 1024000K, used 324609K [0x0000000781800000, 0x0000000781901f40, 0x00000007c0000000)</span><br><span class="line">  region size 1024K, 6 young (6144K), 0 survivors (0K)</span><br><span class="line"> Metaspace       used 3420K, capacity 4500K, committed 4864K, reserved 1056768K</span><br><span class="line">  class space    used 371K, capacity 388K, committed 512K, reserved 1048576K</span><br><span class="line">Heap after GC invocations=1 (full 1):</span><br><span class="line"> garbage-first heap   total 1024000K, used 21755K [0x0000000781800000, 0x0000000781901f40, 0x00000007c0000000)</span><br><span class="line">  region size 1024K, 0 young (0K), 0 survivors (0K)</span><br><span class="line"> Metaspace       used 3420K, capacity 4500K, committed 4864K, reserved 1056768K</span><br><span class="line">  class space    used 371K, capacity 388K, committed 512K, reserved 1048576K</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="打印-STW-时间"><a href="#打印-STW-时间" class="headerlink" title="打印 STW 时间"></a>打印 STW 时间</h3><p>暂停时间是 GC 最重要的指标，肯定不能少</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-XX:+PrintGCApplicationStoppedTime</span><br></pre></td></tr></table></figure><p>输出内容示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Total time for which application threads were stopped: 0.0254260 seconds, Stopping threads took: 0.0000218 seconds</span><br></pre></td></tr></table></figure><h3 id="打印-safepoint-信息"><a href="#打印-safepoint-信息" class="headerlink" title="打印 safepoint 信息"></a>打印 safepoint 信息</h3><p>进入STW阶段之前，需要要找到一个合适的 safepoint ，这个指标一样很重要（非必选，出现 GC 问题时最好加上此参数调试）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-XX:+PrintSafepointStatistics -XX:PrintSafepointStatisticsCount=1</span><br></pre></td></tr></table></figure><p>输出内容示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">         vmop                    [threads: total initially_running wait_to_block]    [time: spin block sync cleanup vmop] page_trap_count</span><br><span class="line">0.371: ParallelGCFailedAllocation       [      10          0              0    ]      [     0     0     0     0     7    ]  0   </span><br><span class="line">Execute full gc...dataList has been promoted to cms old space</span><br><span class="line">         vmop                    [threads: total initially_running wait_to_block]    [time: spin block sync cleanup vmop] page_trap_count</span><br><span class="line">0.379: ParallelGCSystemGC               [      10          0              0    ]      [     0     0     0     0    16    ]  0   </span><br><span class="line">         vmop                    [threads: total initially_running wait_to_block]    [time: spin block sync cleanup vmop] page_trap_count</span><br><span class="line">0.396: no vm operation                  [       9          1              1    ]      [     0     0     0     0   341    ]  0   </span><br></pre></td></tr></table></figure><h3 id="打印-Reference-处理信息"><a href="#打印-Reference-处理信息" class="headerlink" title="打印 Reference 处理信息"></a>打印 Reference 处理信息</h3><p>强引用/弱引用/软引用/虚引用/finalize 方法万一有问题，不得打印出来看看？</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-XX:+PrintReferenceGC</span><br></pre></td></tr></table></figure><p>输出内容示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">2021-02-19T12:41:30.462+0800: 5072726.605: [SoftReference, 0 refs, 0.0000521 secs]</span><br><span class="line">2021-02-19T12:41:30.462+0800: 5072726.605: [WeakReference, 0 refs, 0.0000069 secs]</span><br><span class="line">2021-02-19T12:41:30.462+0800: 5072726.605: [FinalReference, 0 refs, 0.0000056 secs]</span><br><span class="line">2021-02-19T12:41:30.462+0800: 5072726.605: [PhantomReference, 0 refs, 0 refs, 0.0000059 secs]</span><br><span class="line">2021-02-19T12:41:30.462+0800: 5072726.605: [JNI Weak Reference, 0.0000131 secs], 0.4635293 secs]</span><br></pre></td></tr></table></figure><p>完整参数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> requireds</span></span><br><span class="line">-XX:+PrintGCDetails </span><br><span class="line">-XX:+PrintGCDateStamps </span><br><span class="line">-XX:+PrintTenuringDistribution </span><br><span class="line">-XX:+PrintHeapAtGC </span><br><span class="line">-XX:+PrintReferenceGC </span><br><span class="line">-XX:+PrintGCApplicationStoppedTime</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> optional</span></span><br><span class="line">-XX:+PrintSafepointStatistics </span><br><span class="line">-XX:PrintSafepointStatisticsCount=1</span><br></pre></td></tr></table></figure><h2 id="输出方式"><a href="#输出方式" class="headerlink" title="输出方式"></a>输出方式</h2><p>上面只是定义了打印的内容，默认情况下，这些日志会输出到控制台（标准输出）。那如果你的程序日志也输出到控制台呢，这个日志内容就会很乱，分析起来很麻烦。如果你是追加的方式（比如 tomcat 的 catalina.out 就是追加），这个文件会越来越大，分析起来就要命了。</p><p>所以需要一种分割日志的机制，这个机制嘛……JVM自然是提供的。</p><h3 id="JVM-的日志分割"><a href="#JVM-的日志分割" class="headerlink" title="JVM 的日志分割"></a>JVM 的日志分割</h3><p>JVM提供了几个用于分割 GC 日志的参数：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> GC日志输出的文件路径</span></span><br><span class="line">-Xloggc:/path/to/gc.log</span><br><span class="line"><span class="meta">#</span><span class="bash"> 开启日志文件分割</span></span><br><span class="line">-XX:+UseGCLogFileRotation </span><br><span class="line"><span class="meta">#</span><span class="bash"> 最多分割几个文件，超过之后从头开始写</span></span><br><span class="line">-XX:NumberOfGCLogFiles=14</span><br><span class="line"><span class="meta">#</span><span class="bash"> 每个文件上限大小，超过就触发分割</span></span><br><span class="line">-XX:GCLogFileSize=100M</span><br></pre></td></tr></table></figure><p>按照这个参数，每个GC日志只要超过20M就会进行分割，最多分割5个文件，文件名依次是gc.log.0,gc.log.1,gc.log.2,gc.log.3,gc.log.4, …..</p><p>看似很美好，几行配置就搞定了输出文件的问题。但是这种方式有一些问题：</p><ul><li>-Xloggc 方式指定的日志文件，是覆盖写的方式，每次启动都会覆盖，历史日志会丢失</li><li>当超过最大分割数后，会从第0个文件开始重新写入，而且是覆盖</li><li>-XX:NumberOfGCLogFiles 并不能设置为无限</li></ul><p>这个覆盖的问题就有点恶心了，每次启动覆盖之前的历史日志……这谁能忍？</p><h3 id="使用时间戳命名文件"><a href="#使用时间戳命名文件" class="headerlink" title="使用时间戳命名文件"></a>使用时间戳命名文件</h3><p>于是有另一种解决方案。不使用 JVM 提供的日志分割功能，而是每次启动用时间戳命名日志文件，这样可以每次启动都使用不同的文件，就不会出现覆盖的问题了。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 使用-%t作为日志文件名</span></span><br><span class="line">-XX:+PrintGCDetails -XX:+PrintGCDateStamps -Xloggc:/path/to/gc-%t.log</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 生成的文件名是这种：gc-2021-03-29_20-41-47.log</span></span><br></pre></td></tr></table></figure><p>可是这样就完美吗？</p><p>虽然没有覆盖的问题，但由于没有日志分割的功能，每次启动后只有一个GC日志文件，单个日志文件可能会非常巨大。过大的日志文件分析起来是很麻烦的，必须得分割。</p><h3 id="二者结合"><a href="#二者结合" class="headerlink" title="二者结合"></a>二者结合</h3><p>这里只需要稍微调整一下策略，将 JVM 分割和时间戳命名两种方案结合，就可以得到最优的方式了。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> GC日志输出的文件路径</span></span><br><span class="line">-Xloggc:/path/to/gc-%t.log</span><br><span class="line"><span class="meta">#</span><span class="bash"> 开启日志文件分割</span></span><br><span class="line">-XX:+UseGCLogFileRotation </span><br><span class="line"><span class="meta">#</span><span class="bash"> 最多分割几个文件，超过之后从头开始写</span></span><br><span class="line">-XX:NumberOfGCLogFiles=14</span><br><span class="line"><span class="meta">#</span><span class="bash"> 每个文件上限大小，超过就触发分割</span></span><br><span class="line">-XX:GCLogFileSize=100M</span><br></pre></td></tr></table></figure><p>配置时间戳作文 GC 日志文件名的同时，也配置JVM的GC日志分割策略。这样一来，既保证了 GC 文件不会被覆盖，又保证了单个 GC 文件的大小不会过大，完美！</p><p>最终得到的日志文件名会像这个样子：</p><ul><li>gc-2021-03-29_20-41-47.log.0</li><li>gc-2021-03-29_20-41-47.log.1</li><li>gc-2021-03-29_20-41-47.log.2</li><li>gc-2021-03-29_20-41-47.log.3</li><li>….</li></ul><h2 id="最佳实践-完整参数"><a href="#最佳实践-完整参数" class="headerlink" title="最佳实践 - 完整参数"></a>最佳实践 - 完整参数</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 必备</span></span><br><span class="line">-XX:+PrintGCDetails </span><br><span class="line">-XX:+PrintGCDateStamps </span><br><span class="line">-XX:+PrintTenuringDistribution </span><br><span class="line">-XX:+PrintHeapAtGC </span><br><span class="line">-XX:+PrintReferenceGC </span><br><span class="line">-XX:+PrintGCApplicationStoppedTime</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 可选</span></span><br><span class="line">-XX:+PrintSafepointStatistics </span><br><span class="line">-XX:PrintSafepointStatisticsCount=1</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> GC日志输出的文件路径</span></span><br><span class="line">-Xloggc:/path/to/gc-%t.log</span><br><span class="line"><span class="meta">#</span><span class="bash"> 开启日志文件分割</span></span><br><span class="line">-XX:+UseGCLogFileRotation </span><br><span class="line"><span class="meta">#</span><span class="bash"> 最多分割几个文件，超过之后从头文件开始写</span></span><br><span class="line">-XX:NumberOfGCLogFiles=14</span><br><span class="line"><span class="meta">#</span><span class="bash"> 每个文件上限大小，超过就触发分割</span></span><br><span class="line">-XX:GCLogFileSize=100M</span><br></pre></td></tr></table></figure><p><br><br></p>]]></content>
      
      
      <categories>
          
          <category> JVM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java并发编程：volatile关键字解析（转载）</title>
      <link href="Java%E5%BC%80%E5%8F%91/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%EF%BC%9Avolatile%E5%85%B3%E9%94%AE%E5%AD%97%E8%A7%A3%E6%9E%90%EF%BC%88%E8%BD%AC%E8%BD%BD%EF%BC%89/"/>
      <url>Java%E5%BC%80%E5%8F%91/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%EF%BC%9Avolatile%E5%85%B3%E9%94%AE%E5%AD%97%E8%A7%A3%E6%9E%90%EF%BC%88%E8%BD%AC%E8%BD%BD%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><blockquote><p>转载自：<a href="http://www.cnblogs.com/dolphin0520/p/3920373.html">www.cnblogs.com/dolphin0520/p/3920373.html</a></p></blockquote><p><code>volatile</code> 这个关键字可能很多朋友都听说过，或许也都用过。在 Java 5 之前，它是一个备受争议的关键字，因为在程序中使用它往往会导致出人意料的结果。在 Java 5之后，volatile 关键字才得以重获生机。</p><p>volatile 关键字虽然从字面上理解起来比较简单，但是要用好不是一件容易的事情。由于 volatile 关键字是与 Java 的内存模型有关的，因此在讲述 volatile 关键之前，我们先来了解一下与内存模型相关的概念和知识，然后分析了 volatile 关键字的实现原理，最后给出了几个使用 volatile 关键字的场景。</p><h2 id="1、内存模型的相关概念"><a href="#1、内存模型的相关概念" class="headerlink" title="1、内存模型的相关概念"></a>1、内存模型的相关概念</h2><p>大家都知道，计算机在执行程序时，每条指令都是在 <code>CPU</code> 中执行的，而执行指令过程中，势必涉及到数据的读取和写入。由于程序运行过程中的临时数据是存放在<code>主存（物理内存）</code>当中的，这时就存在一个问题，由于CPU执行速度很快，而从内存读取数据和向内存写入数据的过程跟 CPU 执行指令的速度比起来要慢的多，因此如果任何时候对数据的操作都要通过和内存的交互来进行，会大大降低指令执行的速度。因此在 CPU 里面就有了高速缓存。</p><p>也就是，<strong>当程序在运行过程中，会将运算需要的数据从主存复制一份到 CPU 的高速缓存当中</strong>，那么CPU进行计算时就可以直接从它的高速缓存读取数据和向其中写入数据，当运算结束之后，再将高速缓存中的数据刷新到主存当中。举个简单的例子，比如下面的这段代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">i = i + <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>当线程执行这个语句时，会先从主存当中读取i的值，然后复制一份到高速缓存当中，然后 CPU 执行指令对 i 进行加 1 操作，然后将数据写入高速缓存，最后将高速缓存中i最新的值刷新到主存当中。</p><p>这个代码在单线程中运行是没有任何问题的，但是在多线程中运行就会有问题了。在多核 CPU 中，每条线程可能运行于不同的 CPU 中，因此每个线程运行时有自己的高速缓存（对单核CPU来说，其实也会出现这种问题，只不过是以线程调度的形式来分别执行的）。本文我们以多核 CPU 为例。</p><p>比如同时有 2 个线程执行这段代码，假如初始时 i 的值为 0，那么我们希望两个线程执行完之后 i 的值变为 2。但是事实会是这样吗？</p><p>可能存在下面一种情况：初始时，两个线程分别读取i的值存入各自所在的 CPU 的高速缓存当中，然后线程 1 进行加 1 操作，然后把i的最新值 1 写入到内存。此时线程 2 的高速缓存当中 i 的值还是 0，进行加 1 操作之后，i 的值为1，然后线程 2 把 i 的值写入内存。</p><p>最终结果 i 的值是 1，而不是 2。这就是著名的<code>缓存一致性</code>问题。通常称这种被多个线程访问的变量为<code>共享变量</code>。</p><p><strong>也就是说，如果一个变量在多个CPU中都存在缓存（一般在多线程编程时才会出现），那么就可能存在缓存不一致的问题</strong>。</p><p>为了解决缓存不一致性问题，通常来说有以下 2 种解决方法：</p><ul><li>通过在总线加 LOCK# 锁的方式</li><li>通过缓存一致性协议</li></ul><p>这 2 种方式都是<code>硬件层面</code>上提供的方式。</p><p>在早期的 CPU 中，是通过在总线上加 LOCK# 锁的形式来解决缓存不一致的问题。因为 CPU 和其他部件进行通信都是通过总线来进行的，如果对总线加 LOCK# 锁的话，也就是说阻塞了其他 CPU 对其他部件访问（如内存），从而使得只能有一个 CPU 能使用这个变量的内存。比如上面例子中 如果一个线程在执行 i = i +1，如果在执行这段代码的过程中，在总线上发出了 LCOK# 锁的信号，那么只有等待这段代码完全执行完毕之后，其他CPU 才能从变量 i 所在的内存读取变量，然后进行相应的操作。这样就解决了缓存不一致的问题。</p><p>但是上面的方式会有一个问题，由于在锁住总线期间，其他 CPU 无法访问内存，导致效率低下。</p><p>所以就出现了缓存一致性协议。最出名的就是 Intel 的 MESI 协议，MESI 协议保证了每个缓存中使用的共享变量的副本是一致的。它核心的思想是：当 CPU 写数据时，如果发现操作的变量是共享变量，即在其他 CPU 中也存在该变量的副本，会发出信号通知其他 CPU 将该变量的缓存行置为无效状态，因此当其他 CPU 需要读取这个变量时，发现自己缓存中缓存该变量的缓存行是无效的，那么它就会从内存重新读取。</p><p><img src="https://zhaoxiaobin.coding.net/p/blog/d/zhaoxiaobin_img/git/raw/master/post/Java/16233016863721/16233017232678.jpg"></p><h2 id="2、并发编程中的三个概念"><a href="#2、并发编程中的三个概念" class="headerlink" title="2、并发编程中的三个概念"></a>2、并发编程中的三个概念</h2><p>在并发编程中，我们通常会遇到以下三个问题：<strong>原子性问题，可见性问题，有序性问题</strong>。我们先看具体看一下这三个概念：</p><h3 id="原子性"><a href="#原子性" class="headerlink" title="原子性"></a>原子性</h3><p>原子性：即一个操作或者多个操作 要么全部执行并且执行的过程不会被任何因素打断，要么就都不执行。</p><p>一个很经典的例子就是银行账户转账问题：</p><p>比如从账户 A 向账户 B 转 1000 元，那么必然包括 2 个操作：从账户 A 减去 1000 元，往账户 B 加上 1000 元。</p><p>试想一下，如果这 2 个操作不具备原子性，会造成什么样的后果。假如从账户 A 减去 1000 元之后，操作突然中止。然后又从 B 取出了 500 元，取出 500 元之后，再执行往账户 B 加上 1000 元 的操作。这样就会导致账户 A虽然减去了 1000 元，但是账户 B 没有收到这个转过来的 1000 元。</p><p>所以这 2 个操作必须要具备原子性才能保证不出现一些意外的问题。</p><p>同样地反映到并发编程中会出现什么结果呢？</p><p>举个最简单的例子，大家想一下假如为一个 32 位的变量赋值过程不具备原子性的话，会发生什么后果？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">i = <span class="number">9</span>;</span><br></pre></td></tr></table></figure><p>假若一个线程执行到这个语句时，我暂且假设为一个 32 位的变量赋值包括两个过程：为低 16 位赋值，为高 16 位赋值。</p><p>那么就可能发生一种情况：当将低 16 位数值写入之后，突然被中断，而此时又有一个线程去读取i的值，那么读取到的就是错误的数据。</p><h3 id="可见性"><a href="#可见性" class="headerlink" title="可见性"></a>可见性</h3><p>可见性是指当多个线程访问同一个变量时，一个线程修改了这个变量的值，其他线程能够立即看得到修改的值。</p><p>举个简单的例子，看下面这段代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//线程1执行的代码</span></span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">i = <span class="number">10</span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//线程2执行的代码</span></span><br><span class="line">j = i;</span><br></pre></td></tr></table></figure><p>假若执行线程1的是CPU1，执行线程2的是CPU2。由上面的分析可知，当线程1执行 i =10这句时，会先把i的初始值加载到CPU1的高速缓存中，然后赋值为10，那么在CPU1的高速缓存当中i的值变为10了，却没有立即写入到主存当中。</p><p>此时线程 2 执行 j = i，它会先去主存读取i的值并加载到 CPU2 的缓存当中，注意此时内存当中i的值还是 0，那么就会使得 j 的值为 0，而不是 10。</p><p>这就是可见性问题，线程 1 对变量 i 修改了之后，线程 2 没有立即看到线程 1 修改的值。</p><h3 id="有序性"><a href="#有序性" class="headerlink" title="有序性"></a>有序性</h3><p>有序性：即程序执行的顺序按照代码的先后顺序执行。举个简单的例子，看下面这段代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;              </span><br><span class="line"><span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line">i = <span class="number">1</span>;                <span class="comment">//语句1  </span></span><br><span class="line">flag = <span class="keyword">true</span>;          <span class="comment">//语句2</span></span><br></pre></td></tr></table></figure><p>上面代码定义了一个 int 型变量，定义了一个 boolean 类型变量，然后分别对两个变量进行赋值操作。从代码顺序上看，语句 1 是在语句 2 前面的，那么 JVM 在真正执行这段代码的时候会保证语句 1 一定会在语句 2 前面执行吗？不一定，为什么呢？这里可能会发生<code>指令重排序（Instruction Reorder）</code>。</p><p>下面解释一下什么是指令重排序，一般来说，处理器为了提高程序运行效率，可能会对输入代码进行优化，它不保证程序中各个语句的执行先后顺序同代码中的顺序一致，但是它会保证程序最终执行结果和代码顺序执行的结果是一致的。</p><p>比如上面的代码中，语句 1 和语句 2 谁先执行对最终的程序结果并没有影响，那么就有可能在执行过程中，语句 2 先执行而语句 1 后执行。</p><p>但是要注意，虽然处理器会对指令进行重排序，但是它会保证程序最终结果会和代码顺序执行结果相同，那么它靠什么保证的呢？再看下面一个例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;    <span class="comment">//语句1</span></span><br><span class="line"><span class="keyword">int</span> r = <span class="number">2</span>;    <span class="comment">//语句2</span></span><br><span class="line">a = a + <span class="number">3</span>;    <span class="comment">//语句3</span></span><br><span class="line">r = a*a;     <span class="comment">//语句4</span></span><br></pre></td></tr></table></figure><p>这段代码有4个语句，那么可能的一个执行顺序是：</p><p><img src="https://zhaoxiaobin.coding.net/p/blog/d/zhaoxiaobin_img/git/raw/master/post/Java/16233016863721/16233017414293.jpg"></p><p>那么可不可能是这个执行顺序呢：语句2  语句1  语句4  语句3</p><p>不可能，因为处理器在进行重排序时是会考虑指令之间的数据依赖性，如果一个指令 Instruction 2  必须用到Instruction 1的结果，那么处理器会保证 Instruction 1会在 Instruction 2 之前执行。</p><p>虽然重排序不会影响单个线程内程序执行的结果，但是多线程呢？下面看一个例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//线程1:</span></span><br><span class="line">context = loadContext();   <span class="comment">//语句1</span></span><br><span class="line">inited = <span class="keyword">true</span>;             <span class="comment">//语句2</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">//线程2:</span></span><br><span class="line"><span class="keyword">while</span>(!inited )&#123;</span><br><span class="line">  sleep()</span><br><span class="line">&#125;</span><br><span class="line">doSomethingwithconfig(context);</span><br></pre></td></tr></table></figure><p>上面代码中，由于语句 1 和语句 2 没有数据依赖性，因此可能会被重排序。假如发生了重排序，在线程 1 执行过程中先执行语句 2，而此时线程 2 会以为初始化工作已经完成，那么就会跳出 while 循环，去执行<code>doSomethingwithconfig(context)</code>方法，而此时 context 并没有被初始化，就会导致程序出错。</p><p>从上面可以看出，指令重排序不会影响单个线程的执行，但是会影响到线程并发执行的正确性。</p><p>也就是说，要想并发程序正确地执行，<strong>必须要保证原子性、可见性以及有序性</strong>。只要有一个没有被保证，就有可能会导致程序运行不正确。</p><h2 id="3、Java内存模型"><a href="#3、Java内存模型" class="headerlink" title="3、Java内存模型"></a>3、Java内存模型</h2><p>在前面谈到了一些关于内存模型以及并发编程中可能会出现的一些问题。下面我们来看一下 Java 内存模型，研究一下 Java 内存模型为我们提供了哪些保证以及在 java 中提供了哪些方法和机制来让我们在进行多线程编程时能够保证程序执行的正确性。</p><p>在 Java 虚拟机规范中试图定义一种 <code>Java 内存模型（Java Memory Model，JMM）</code>来屏蔽各个硬件平台和操作系统的内存访问差异，以实现让 Java 程序在各种平台下都能达到一致的内存访问效果。那么 Java 内存模型规定了哪些东西？它定义了程序中变量的访问规则，往大一点说是定义了程序执行的次序。注意，为了获得较好的执行性能，Java 内存模型并没有限制执行引擎使用处理器的寄存器或者高速缓存来提升指令执行速度，也没有限制编译器对指令进行重排序。也就是说，在 java 内存模型中，也会存在缓存一致性问题和指令重排序的问题。</p><p>Java 内存模型规定所有的变量都是存在主存当中（类似于前面说的物理内存），每个线程都有自己的工作内存（类似于前面的高速缓存）。线程对变量的所有操作都必须在工作内存中进行，而不能直接对主存进行操作。并且每个线程不能访问其他线程的工作内存。</p><p>举个简单的例子：在 java中，执行下面这个语句：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">i  = <span class="number">10</span>;</span><br></pre></td></tr></table></figure><p>执行线程必须先在自己的工作线程中对变量 i 所在的缓存行进行赋值操作，然后再写入主存当中。而不是直接将数值 10 写入主存当中。</p><p>那么Java 语言 本身对原子性、可见性以及有序性提供了哪些保证呢？</p><h3 id="原子性-1"><a href="#原子性-1" class="headerlink" title="原子性"></a>原子性</h3><p>在Java中，对基本数据类型的变量的读取和赋值操作是原子性操作，即这些操作是不可被中断的，要么执行，要么不执行。</p><p>上面一句话虽然看起来简单，但是理解起来并不是那么容易。看下面一个例子i：</p><p>请分析以下哪些操作是原子性操作：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">10</span>;         <span class="comment">//语句1</span></span><br><span class="line">y = x;         <span class="comment">//语句2</span></span><br><span class="line">x++;           <span class="comment">//语句3</span></span><br><span class="line">x = x + <span class="number">1</span>;     <span class="comment">//语句4</span></span><br></pre></td></tr></table></figure><p>咋一看，有些朋友可能会说上面的 4 个语句中的操作都是原子性操作。其实只有语句 1 是原子性操作，其他三个语句都不是原子性操作。</p><p>语句 1 是直接将数值 10 赋值给 x，也就是说线程执行这个语句的会直接将数值 10 写入到工作内存中。</p><p>语句 2 实际上包含 2 个操作，它先要去读取 x 的值，再将 x 的值写入工作内存，虽然读取 x 的值以及 将 x 的值写入工作内存 这 2 个操作都是原子性操作，但是合起来就不是原子性操作了。</p><p>同样的，x++ 和 x = x+1 包括 3 个操作：读取 x 的值，进行加 1 操作，写入新的值。</p><p>所以上面 4 个语句只有语句 1 的操作具备原子性。</p><p>也就是说，<strong>只有简单的读取、赋值（而且必须是将数字赋值给某个变量，变量之间的相互赋值不是原子操作）才是原子操作</strong>。</p><p>不过这里有一点需要注意：在 32 位平台下，对 64 位数据的读取和赋值是需要通过两个操作来完成的，不能保证其原子性。但是好像在最新的 JDK 中，JVM 已经保证对 64 位数据的读取和赋值也是原子性操作了。</p><p>从上面可以看出，Java 内存模型只保证了基本读取和赋值是原子性操作，如果要实现更大范围操作的原子性，可以通过 synchronized 和 Lock 来实现。由于 synchronized 和 Lock 能够保证任一时刻只有一个线程执行该代码块，那么自然就不存在原子性问题了，从而保证了原子性。</p><h3 id="可见性-1"><a href="#可见性-1" class="headerlink" title="可见性"></a>可见性</h3><p>对于可见性，Java提供了 volatile 关键字来保证可见性。</p><p>当一个共享变量被 volatile 修饰时，它会保证修改的值会立即被更新到主存，当有其他线程需要读取时，它会去内存中读取新值。</p><p>而普通的共享变量不能保证可见性，因为普通共享变量被修改之后，什么时候被写入主存是不确定的，当其他线程去读取时，此时内存中可能还是原来的旧值，因此无法保证可见性。</p><p>另外，通过 synchronized 和 Lock 也能够保证可见性，synchronized 和 Lock 能保证同一时刻只有一个线程获取锁然后执行同步代码，并且在释放锁之前会将对变量的修改刷新到主存当中。因此可以保证可见性。</p><h3 id="有序性-1"><a href="#有序性-1" class="headerlink" title="有序性"></a>有序性</h3><p>在 Java 内存模型中，允许编译器和处理器对指令进行重排序，但是重排序过程不会影响到单线程程序的执行，却会影响到多线程并发执行的正确性。</p><p>在 Java 里面，可以通过 volatile 关键字来保证一定的<code>有序性</code>（具体原理在下一节讲述）。另外可以通过 synchronized 和 Lock 来保证有序性，很显然，synchronized 和 Lock 保证每个时刻是有一个线程执行同步代码，相当于是让线程顺序执行同步代码，自然就保证了有序性。</p><p>另外，Java 内存模型具备一些先天的<code>有序性</code>，即不需要通过任何手段就能够得到保证的有序性，这个通常也称为 <code>happens-before 原则</code>。如果两个操作的执行次序无法从 happens-before 原则推导出来，那么它们就不能保证它们的有序性，虚拟机可以随意地对它们进行重排序。</p><p>下面就来具体介绍下 happens-before原则（先行发生原则）：</p><ul><li>程序次序规则：一个线程内，按照代码顺序，书写在前面的操作先行发生于书写在后面的操作</li><li>锁定规则：一个 unLock 操作先行发生于后面对同一个锁额 lock 操作</li><li>volatile 变量规则：对一个变量的写操作先行发生于后面对这个变量的读操作</li><li>传递规则：如果操作 A 先行发生于操作 B，而操作 B 又先行发生于操作 C，则可以得出操作 A 先行发生于操作C</li><li>线程启动规则：Thread 对象的 <code>start()</code> 方法先行发生于此线程的每个一个动作</li><li>线程中断规则：对线程<code>interrupt()</code>方法的调用先行发生于被中断线程的代码检测到中断事件的发生</li><li>线程终结规则：线程中所有的操作都先行发生于线程的终止检测，我们可以通过 <code>Thread.join()</code> 方法结束、<code>Thread.isAlive()</code>的返回值手段检测到线程已经终止执行</li><li>对象终结规则：一个对象的初始化完成先行发生于他的<code>finalize()</code>方法的开始</li></ul><p>这 8 条原则摘自《深入理解Java虚拟机》。</p><p>这 8 条规则中，前 4 条规则是比较重要的，后 4 条规则都是显而易见的。</p><p>下面我们来解释一下前 4 条规则：</p><p>对于程序次序规则来说，我的理解就是一段程序代码的执行在单个线程中看起来是有序的。注意，虽然这条规则中提到“书写在前面的操作先行发生于书写在后面的操作”，这个应该是程序看起来执行的顺序是按照代码顺序执行的，因为虚拟机可能会对程序代码进行指令重排序。虽然进行重排序，但是最终执行的结果是与程序顺序执行的结果一致的，它只会对不存在数据依赖性的指令进行重排序。因此，在单个线程中，程序执行看起来是有序执行的，这一点要注意理解。事实上，这个规则是用来保证程序在单线程中执行结果的正确性，但无法保证程序在多线程中执行的正确性。</p><p>第二条规则也比较容易理解，也就是说无论在单线程中还是多线程中，同一个锁如果处于被锁定的状态，那么必须先对锁进行了释放操作，后面才能继续进行 lock 操作。</p><p>第三条规则是一条比较重要的规则，也是后文将要重点讲述的内容。直观地解释就是，如果一个线程先去写一个变量，然后一个线程去进行读取，那么写入操作肯定会先行发生于读操作。</p><p>第四条规则实际上就是体现 happens-before 原则具备传递性。</p><h2 id="4、深入剖析volatile关键字"><a href="#4、深入剖析volatile关键字" class="headerlink" title="4、深入剖析volatile关键字"></a>4、深入剖析volatile关键字</h2><p>在前面讲述了很多东西，其实都是为讲述 volatile 关键字作铺垫，那么接下来我们就进入主题。</p><h3 id="volatile关键字的两层语义"><a href="#volatile关键字的两层语义" class="headerlink" title="volatile关键字的两层语义"></a>volatile关键字的两层语义</h3><p>一旦一个共享变量（类的成员变量、类的静态成员变量）被 volatile 修饰之后，那么就具备了两层语义：</p><ul><li>保证了不同线程对这个变量进行操作时的可见性，即一个线程修改了某个变量的值，这新值对其他线程来说是立即可见的。</li><li>禁止进行指令重排序。</li></ul><p>先看一段代码，假如线程 1 先执行，线程 2 后执行：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//线程1</span></span><br><span class="line"><span class="keyword">boolean</span> stop = <span class="keyword">false</span>;</span><br><span class="line"><span class="keyword">while</span>(!stop)&#123;</span><br><span class="line">    doSomething();</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//线程2</span></span><br><span class="line">stop = <span class="keyword">true</span>;</span><br></pre></td></tr></table></figure><p>这段代码是很典型的一段代码，很多人在中断线程时可能都会采用这种标记办法。但是事实上，这段代码会完全运行正确么？即一定会将线程中断么？不一定，也许在大多数时候，这个代码能够把线程中断，但是也有可能会导致无法中断线程（虽然这个可能性很小，但是只要一旦发生这种情况就会造成死循环了）。</p><p>下面解释一下这段代码为何有可能导致无法中断线程。在前面已经解释过，每个线程在运行过程中都有自己的工作内存，那么线程1在运行的时候，会将 stop 变量的值拷贝一份放在自己的工作内存当中。</p><p>那么当线程 2 更改了 stop 变量的值之后，但是还没来得及写入主存当中，线程 2 转去做其他事情了，那么线程 1由于不知道线程 2 对 stop 变量的更改，因此还会一直循环下去。</p><p>但是用 volatile 修饰之后就变得不一样了：</p><ul><li>使用 volatile 关键字会强制将修改的值立即写入主存；</li><li>使用 volatile 关键字的话，当线程 2 进行修改时，会导致线程 1 的工作内存中缓存变量 stop 的缓存行无效（反映到硬件层的话，就是CPU 的 L1 或者 L2 缓存中对应的缓存行无效）；</li><li>由于线程1的工作内存中缓存变量 stop 的缓存行无效，所以线程 1 再次读取变量 stop 的值时会去主存读取。</li></ul><p>那么在线程 2 修改 stop 值时（当然这里包括 2 个操作，修改线程 2 工作内存中的值，然后将修改后的值写入内存），会使得线程 1 的工作内存中缓存变量 stop 的缓存行无效，然后线程 1 读取时，发现自己的缓存行无效，它会等待缓存行对应的主存地址被更新之后，然后去对应的主存读取最新的值。</p><p>那么线程 1 读取到的就是最新的正确的值。</p><h3 id="volatile-保证原子性吗"><a href="#volatile-保证原子性吗" class="headerlink" title="volatile 保证原子性吗"></a>volatile 保证原子性吗</h3><p>从上面知道 volatile 关键字保证了操作的可见性，但是 volatile 能保证对变量的操作是原子性吗？</p><p>下面看一个例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">volatile</span> <span class="keyword">int</span> inc = <span class="number">0</span>;</span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">increase</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        inc++;</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> Test test = <span class="keyword">new</span> Test();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">new</span> Thread()&#123;</span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">1000</span>;j++)</span><br><span class="line">                        test.increase();</span><br><span class="line">                &#125;;</span><br><span class="line">            &#125;.start();</span><br><span class="line">        &#125;</span><br><span class="line">         </span><br><span class="line">        <span class="keyword">while</span>(Thread.activeCount()&gt;<span class="number">1</span>)  <span class="comment">//保证前面的线程都执行完</span></span><br><span class="line">            Thread.yield();</span><br><span class="line">        System.out.println(test.inc);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>大家想一下这段程序的输出结果是多少？也许有些朋友认为是 10000。但是事实上运行它会发现每次运行结果都不一致，都是一个小于 10000 的数字。</p><p>可能有的朋友就会有疑问，不对啊，上面是对变量 inc 进行自增操作，由于 volatile 保证了可见性，那么在每个线程中对 inc 自增完之后，在其他线程中都能看到修改后的值啊，所以有 10 个线程分别进行了 1000 次操作，那么最终 inc 的值应该是 1000*10=10000。</p><p>这里面就有一个误区了，volatile 关键字能保证可见性没有错，但是上面的程序错在没能保证原子性。可见性只能保证每次读取的是最新的值，但是 volatile 没办法保证对变量的操作的原子性。</p><p>在前面已经提到过，自增操作是不具备原子性的，它包括读取变量的原始值、进行加 1 操作、写入工作内存。那么就是说自增操作的三个子操作可能会分割开执行，就有可能导致下面这种情况出现：</p><p>假如某个时刻变量 inc 的值为10，</p><p>线程 1 对变量进行自增操作，线程 1 先读取了变量inc的原始值，然后线程1被阻塞了；</p><p>然后线程 2 对变量进行自增操作，线程 2 也去读取变量 inc 的原始值，由于线程 1 只是对变量 inc 进行读取操作，而没有对变量进行修改操作，所以不会导致线程 2 的工作内存中缓存变量 inc 的缓存行无效，所以线程 2 会直接去主存读取 inc 的值，发现 inc 的值是 10，然后进行加 1 操作，并把 11 写入工作内存，最后写入主存。</p><p>然后线程 1 接着进行加 1 操作，由于已经读取了 inc 的值，注意此时在线程 1 的工作内存中 inc 的值仍然为 10，所以线程 1 对 inc 进行加 1 操作后 inc 的值为 11，然后将 11 写入工作内存，最后写入主存。</p><p>那么两个线程分别进行了一次自增操作后，inc 只增加了 1。</p><p>解释到这里，可能有朋友会有疑问，不对啊，前面不是保证一个变量在修改 volatile 变量时，会让缓存行无效吗？然后其他线程去读就会读到新的值，对，这个没错。这个就是上面的 happens-before 规则中的 volatile 变量规则，但是要注意，线程 1 对变量进行读取操作之后，被阻塞了的话，并没有对 inc 值进行修改。然后虽然 volatile能保证线程 2 对变量 inc 的值读取是从内存中读取的，但是线程 1 没有进行修改，所以线程 2 根本就不会看到修改的值。</p><p>根源就在这里，自增操作不是原子性操作，而且 volatile 也无法保证对变量的任何操作都是原子性的。</p><p>把上面的代码改成以下任何一种都可以达到效果：</p><p>采用synchronized：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">int</span> inc = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">increase</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        inc++;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> Test test = <span class="keyword">new</span> Test();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">new</span> Thread()&#123;</span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">1000</span>;j++)</span><br><span class="line">                        test.increase();</span><br><span class="line">                &#125;;</span><br><span class="line">            &#125;.start();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(Thread.activeCount()&gt;<span class="number">1</span>)  <span class="comment">//保证前面的线程都执行完</span></span><br><span class="line">            Thread.yield();</span><br><span class="line">        System.out.println(test.inc);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>采用 Lock：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">int</span> inc = <span class="number">0</span>;</span><br><span class="line">    Lock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">increase</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            inc++;</span><br><span class="line">        &#125; <span class="keyword">finally</span>&#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> Test test = <span class="keyword">new</span> Test();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">new</span> Thread()&#123;</span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">1000</span>;j++)</span><br><span class="line">                        test.increase();</span><br><span class="line">                &#125;;</span><br><span class="line">            &#125;.start();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(Thread.activeCount()&gt;<span class="number">1</span>)  <span class="comment">//保证前面的线程都执行完</span></span><br><span class="line">            Thread.yield();</span><br><span class="line">        System.out.println(test.inc);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>采用 AtomicInteger</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span>  AtomicInteger inc = <span class="keyword">new</span> AtomicInteger();</span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">increase</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        inc.getAndIncrement();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> Test test = <span class="keyword">new</span> Test();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">new</span> Thread()&#123;</span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">1000</span>;j++)</span><br><span class="line">                        test.increase();</span><br><span class="line">                &#125;;</span><br><span class="line">            &#125;.start();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(Thread.activeCount()&gt;<span class="number">1</span>)  <span class="comment">//保证前面的线程都执行完</span></span><br><span class="line">            Thread.yield();</span><br><span class="line">        System.out.println(test.inc);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 java 1.5的 <code>java.util.concurrent.atomic</code> 包下提供了一些原子操作类，即对基本数据类型的 自增（加 1操作），自减（减 1 操作）、以及加法操作（加一个数），减法操作（减一个数）进行了封装，保证这些操作是原子性操作。atomic 是利用 CAS 来实现原子性操作的（Compare And Swap），CAS 实际上是利用处理器提供的 CMPXCHG 指令实现的，而处理器执行 CMPXCHG 指令是一个原子性操作。</p><h3 id="volatile能保证有序性吗"><a href="#volatile能保证有序性吗" class="headerlink" title="volatile能保证有序性吗"></a>volatile能保证有序性吗</h3><p>在前面提到 volatile 关键字能禁止指令重排序，所以 volatile 能在一定程度上保证有序性。</p><p>volatile 关键字禁止指令重排序有两层意思：</p><ul><li>当程序执行到 volatile 变量的读操作或者写操作时，在其前面的操作的更改肯定全部已经进行，且结果已经对后面的操作可见；在其后面的操作肯定还没有进行；</li><li>在进行指令优化时，不能将在对 volatile 变量访问的语句放在其后面执行，也不能把 volatile 变量后面的语句放到其前面执行。</li></ul><p>可能上面说的比较绕，举个简单的例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//x、y为非volatile变量</span></span><br><span class="line"><span class="comment">//flag为volatile变量</span></span><br><span class="line"> </span><br><span class="line">x = <span class="number">2</span>;        <span class="comment">//语句1</span></span><br><span class="line">y = <span class="number">0</span>;        <span class="comment">//语句2</span></span><br><span class="line">flag = <span class="keyword">true</span>;  <span class="comment">//语句3</span></span><br><span class="line">x = <span class="number">4</span>;         <span class="comment">//语句4</span></span><br><span class="line">y = -<span class="number">1</span>;       <span class="comment">//语句5</span></span><br></pre></td></tr></table></figure><p>由于 flag 变量为 volatile 变量，那么在进行指令重排序的过程的时候，不会将语句 3 放到语句 1、语句 2 前面，也不会讲语句 3 放到语句 4、语句 5 后面。但是要注意语句 1 和语句 2 的顺序、语句 4 和语句 5 的顺序是不作任何保证的。</p><p>并且 volatile 关键字能保证，执行到语句 3 时，语句 1 和语句 2 必定是执行完毕了的，且语句 1 和语句 2 的执行结果对语句 3、语句 4、语句 5 是可见的。</p><p>那么我们回到前面举的一个例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//线程1:</span></span><br><span class="line">context = loadContext();   <span class="comment">//语句1</span></span><br><span class="line">inited = <span class="keyword">true</span>;             <span class="comment">//语句2</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">//线程2:</span></span><br><span class="line"><span class="keyword">while</span>(!inited )&#123;</span><br><span class="line">  sleep()</span><br><span class="line">&#125;</span><br><span class="line">doSomethingwithconfig(context);</span><br></pre></td></tr></table></figure><p>前面举这个例子的时候，提到有可能语句 2 会在语句 1 之前执行，那么久可能导致 context 还没被初始化，而线程 2 中就使用未初始化的 context 去进行操作，导致程序出错。</p><p>这里如果用 volatile 关键字对 inited 变量进行修饰，就不会出现这种问题了，因为当执行到语句 2 时，必定能保证 context 已经初始化完毕。</p><h3 id="volatile-的原理和实现机制"><a href="#volatile-的原理和实现机制" class="headerlink" title="volatile 的原理和实现机制"></a>volatile 的原理和实现机制</h3><p>前面讲述了源于 volatile 关键字的一些使用，下面我们来探讨一下 volatile 到底如何保证可见性和禁止指令重排序的。</p><p>下面这段话摘自《深入理解Java虚拟机》</p><p><strong>观察加入 volatile 关键字和没有加入 volatile 关键字时所生成的汇编代码发现，加入 volatile 关键字时，会多出一个 lock 前缀指令</strong></p><p>lock 前缀指令实际上相当于一个内存屏障（也称内存栅栏），内存屏障会提供 3 个功能：</p><ul><li>它确保指令重排序时不会把其后面的指令排到内存屏障之前的位置，也不会把前面的指令排到内存屏障的后面；即在执行到内存屏障这句指令时，在它前面的操作已经全部完成；</li><li>它会强制将对缓存的修改操作立即写入主存；</li><li>如果是写操作，它会导致其他 CPU 中对应的缓存行无效。</li></ul><h2 id="5、使用-volatile-关键字的场景"><a href="#5、使用-volatile-关键字的场景" class="headerlink" title="5、使用 volatile 关键字的场景"></a>5、使用 volatile 关键字的场景</h2><p>synchronized 关键字是防止多个线程同时执行一段代码，那么就会很影响程序执行效率，而 volatile 关键字在某些情况下性能要优于 synchronized，但是要注意 volatile 关键字是无法替代 synchronized 关键字的，因为 volatile 关键字无法保证操作的原子性。通常来说，使用 volatile 必须具备以下 2 个条件：</p><ul><li>对变量的写操作不依赖于当前值</li><li>该变量没有包含在具有其他变量的不变式中</li></ul><p>实际上，这些条件表明，可以被写入 volatile 变量的这些有效值独立于任何程序的状态，包括变量的当前状态。</p><p>事实上，我的理解就是上面的 2 个条件需要保证操作是原子性操作，才能保证使用 volatile 关键字的程序在并发时能够正确执行。</p><p>下面列举几个 Java 中使用 volatile 的几个场景。</p><h3 id="状态标记量"><a href="#状态标记量" class="headerlink" title="状态标记量"></a>状态标记量</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">volatile</span> <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">while</span>(!flag)&#123;</span><br><span class="line">    doSomething();</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFlag</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    flag = <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">boolean</span> inited = <span class="keyword">false</span>;</span><br><span class="line"><span class="comment">//线程1:</span></span><br><span class="line">context = loadContext();  </span><br><span class="line">inited = <span class="keyword">true</span>;            </span><br><span class="line"> </span><br><span class="line"><span class="comment">//线程2:</span></span><br><span class="line"><span class="keyword">while</span>(!inited )&#123;</span><br><span class="line">    sleep()</span><br><span class="line">&#125;</span><br><span class="line">doSomethingwithconfig(context);</span><br></pre></td></tr></table></figure><h3 id="double-check"><a href="#double-check" class="headerlink" title="double check"></a>double check</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> Singleton instance = <span class="keyword">null</span>;</span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line">         </span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(instance==<span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (Singleton.class) &#123;</span><br><span class="line">                <span class="keyword">if</span>(instance==<span class="keyword">null</span>)</span><br><span class="line">                    instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6、演示可见性、重排序demo"><a href="#6、演示可见性、重排序demo" class="headerlink" title="6、演示可见性、重排序demo"></a>6、演示可见性、重排序demo</h2><h3 id="测试可见性"><a href="#测试可见性" class="headerlink" title="测试可见性"></a>测试可见性</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line"><span class="comment">// private volatile boolean flag = true;</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    Thread t = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;开始循环&quot;</span>);</span><br><span class="line">        <span class="keyword">while</span> (flag) &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;结束循环&quot;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    t.start();</span><br><span class="line">    ThreadUtil.sleep(<span class="number">1000L</span>);</span><br><span class="line">    flag = <span class="keyword">false</span>;</span><br><span class="line">    t.join();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试指令重排序"><a href="#测试指令重排序" class="headerlink" title="测试指令重排序"></a>测试指令重排序</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> x, y, a, b;</span><br><span class="line"><span class="comment">// private volatile int x, y, a, b;</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> n = <span class="number">1</span>;;n++) &#123;</span><br><span class="line">        x = <span class="number">0</span>; y = <span class="number">0</span>;</span><br><span class="line">        a = <span class="number">0</span>; b = <span class="number">0</span>;</span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            a = <span class="number">1</span>; <span class="comment">// 1</span></span><br><span class="line">            x = b; <span class="comment">// 2</span></span><br><span class="line">        &#125;);</span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            b = <span class="number">1</span>; <span class="comment">// 3</span></span><br><span class="line">            y = a; <span class="comment">// 4</span></span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// 启动2个线程</span></span><br><span class="line">        t1.start(); t2.start();</span><br><span class="line">        <span class="comment">// 等这2个线程都执行完毕后再输出x、y的值</span></span><br><span class="line">        t1.join(); t2.join();</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        假设不出现指令重排序，则会出现以下几种排列组合</span></span><br><span class="line"><span class="comment">        1 2 3 4 x = 0 y = 1</span></span><br><span class="line"><span class="comment">        1 3 4 2 x = 1 y = 1</span></span><br><span class="line"><span class="comment">        1 3 2 4 x = 1 y = 1</span></span><br><span class="line"><span class="comment">        3 1 2 4 x = 1 y = 1</span></span><br><span class="line"><span class="comment">        3 4 1 2 x = 1 y = 0</span></span><br><span class="line"><span class="comment">        3 1 4 2 x = 1 y = 1</span></span><br><span class="line"><span class="comment">        如果出现 x = 0 &amp;&amp; y = 0这种情况，则可以反证一定出现了重排序</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="keyword">if</span> (x == <span class="number">0</span> &amp;&amp; y == <span class="number">0</span>) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;第&#123;&#125;次出现了x = 0、Y = 0的情况&quot;</span>, n);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br><br></p>]]></content>
      
      
      <categories>
          
          <category> 并发编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> volatile </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JDK中这些常用方法也有Bug（转载）</title>
      <link href="Java%E5%BC%80%E5%8F%91/Java8/JDK%E4%B8%AD%E8%BF%99%E4%BA%9B%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95%E4%B9%9F%E6%9C%89Bug%EF%BC%88%E8%BD%AC%E8%BD%BD%EF%BC%89/"/>
      <url>Java%E5%BC%80%E5%8F%91/Java8/JDK%E4%B8%AD%E8%BF%99%E4%BA%9B%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95%E4%B9%9F%E6%9C%89Bug%EF%BC%88%E8%BD%AC%E8%BD%BD%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><blockquote><p>转载自：<a href="https://www.cnblogs.com/wyq178/p/13520745.html">https://www.cnblogs.com/wyq178/p/13520745.html</a></p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p> jdk作为我们每天必备的调用类库,里面大量提供了基础类供我们使用.可以说离开jdk,我们的java代码寸步难行,jdk带给我们的便利可谓是不胜枚举,但同时这些方法在使用起来也存在一些坑,如果不注意就很容易掉入到陷阱里面，导致程序抛出错误。</p><p>jdk中的很多方法都不会做非null判断,可能设计jdk的作者默认开发者已经处理好null值了.不过这个设计可能会造成很严重的后果,实在是暗藏杀机。</p><p>比如今天早上我们查了一笔订单没有退款,查了一早上最终才发现是同事写的代码的BigDecimal的subtract方法的值没有做非null判断处理导致程序抛出了空指针异常,看似简单的异常却直接无法让很多订单退款,是在是小问题造成大事故。而要修补退款这个问题,要耗费很多时间去修补,出错的成本太高。</p><p>本期我们就来看看jdk中那些坑你没商量的方法,这些方法很常见,相信你一定遇到过。</p><h2 id="1、String-valueOf-方法的陷阱"><a href="#1、String-valueOf-方法的陷阱" class="headerlink" title="1、String.valueOf()方法的陷阱"></a>1、String.valueOf()方法的陷阱</h2><p><strong>案发现场</strong>：某个鸟语花香的早上,我们在开心的敲着代码,突然客户群有人投诉反映，我们发给用户的短信有部分是<strong>尊敬的”null”你好,xx等</strong>。</p><p>开发第一时间看了代码,觉的没有问题啊，为什么短信内容会出现用户名为null呢,不是经过了非空判断的吗？String.valueOf()是String提供的一个类型转换的方法,我们来看一下(代码简化过后的):</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 调用用户服务根据用户id获取用户信息</span></span><br><span class="line">Map&lt;String, Object&gt; userInfo =</span><br></pre></td></tr></table></figure><p>这段代码是简化过的,主要作用就是通过用户服务根据id获取用户信息发送短信,后来经过定位发现了问题所在:首先用户的名字里有特殊的emoji符号,数据库写入的时候有部分写入失败,因为当时的</p><p>数据库字符格式并无法兼容emoji,而获取的时候因为这个问题值为null了,接下来是重点：</p><p><img src="https://zhaoxiaobin.coding.net/p/blog/d/zhaoxiaobin_img/git/raw/master/post/Java//16232995635029/16233000975867.jpg"></p><p>这里是重点,也是最大的坑人之处,注意这里返回了一个”null”的字符串,而不是null。这两个是有很大区别的,当进行非空判断的时候,返回的是ture。也就是这个”null”的字符串它是符合判空条件的！</p><p>正确的姿势是在String.valueOf方法前必须判空：</p><p><img src="https://zhaoxiaobin.coding.net/p/blog/d/zhaoxiaobin_img/git/raw/master/post/Java//16232995635029/16233001149577.jpg"></p><h2 id="2、Integer-parseInt-方法很矫情"><a href="#2、Integer-parseInt-方法很矫情" class="headerlink" title="2、Integer.parseInt()方法很矫情"></a>2、Integer.parseInt()方法很矫情</h2><p><strong>事故现场</strong>:</p><p>一次业务场景为拉取订单,打出订单列表记录,财务人员需要拉出对账,结果总是发现很奇怪的一个现象,每次拉取少很多数据,。</p><p>还好财务发现了,要不然和第三方财务对账就会亏很多钱…最终发现是订单的一个字段值转Integer出错了,那个订单下的字段值是120.0通过Integer.parseInt()直接报错了,恰好开发人员认为这段开发肯定没问题,因此就没有catch异常,最后找了很久才发现(因为涉及到第三方,还让别人查了半天…). 知道真相的我们都有点汗颜,这么丁点的错误排查了很久,实在是不应该啊。</p><p>Integer.parseInt()方法用于将字符串转化为Integer类型的方法,此方法的适用方向就显得比较窄,因为是String类型的参数,没有任何限定,当在传入一些比如50.0、20L、30d、40f这类数据的情况下,</p><p>我们来看一个栗子:</p><p><img src="https://zhaoxiaobin.coding.net/p/blog/d/zhaoxiaobin_img/git/raw/master/post/Java//16232995635029/16233003670870.jpg"></p><p>会抛出异常NumberFormatException：</p><p><img src="https://zhaoxiaobin.coding.net/p/blog/d/zhaoxiaobin_img/git/raw/master/post/Java//16232995635029/16233003794866.jpg"></p><p>事实上对于这样的数据,比如小数、浮点数据、long型数据它都可以自动转换,而不是给我们抛出烦人的报错信息,如果预先知道是整数或者小数,可以用Bigdecimal转换(注意此方法不适用于double和float、Long类型的数据,比如10d,20L)</p><p><img src="https://zhaoxiaobin.coding.net/p/blog/d/zhaoxiaobin_img/git/raw/master/post/Java//16232995635029/16233003885972.jpg"></p><p>对于浮点类型、long类型的数据可以用以下方法来处理:</p><p>推荐使用hutool的NumberUtil.parseInt()方法,充分考虑到了浮点、long、小数等类型数据可能带来的解析异常的问题,hutool是一个国人开源的工具类库,这里实名推荐,容错性和处理异常能力很强,可以自行百度搜索使用。</p><h2 id="3、Bigdecimal的除法坑你没商量"><a href="#3、Bigdecimal的除法坑你没商量" class="headerlink" title="3、Bigdecimal的除法坑你没商量"></a>3、Bigdecimal的除法坑你没商量</h2><p>众所周知,BigDecimal是处理金额最有效的数据类型,一般进行财务报表计算的时候为了防止金额出现错误,一般情况下都会采用Bigdecimal，而double、float都会存在些许的误差。你开开心心的用Bigdecimal进行了计算,而最终的结果返回却有问题,我们来看一个栗子:</p><p><img src="https://zhaoxiaobin.coding.net/p/blog/d/zhaoxiaobin_img/git/raw/master/post/Java//16232995635029/16233004002760.jpg"></p><p>常见的除法用起来没有任何丝毫的问题,妥妥的没毛病.但是一旦程序中的数据出现以下情况,如果用Bigdecimal来接受前端的参数,而前端的参数是用户输入不确定的,一旦出现如下的数据,我们来看看结果:</p><p><img src="https://zhaoxiaobin.coding.net/p/blog/d/zhaoxiaobin_img/git/raw/master/post/Java//16232995635029/16233004094673.jpg"></p><p>执行结果一看,居然报错了哎：</p><p><img src="https://zhaoxiaobin.coding.net/p/blog/d/zhaoxiaobin_img/git/raw/master/post/Java//16232995635029/16233004212522.jpg"></p><p>这就是BidDecimal的坑,一旦返回的结果是无限循环小数,就会抛出ArithmeticException。因此在进行Bigdecimal除法的时候,需要进行保留小数的处理,正确的处理姿势：</p><p><img src="https://zhaoxiaobin.coding.net/p/blog/d/zhaoxiaobin_img/git/raw/master/post/Java//16232995635029/16233004319560.jpg"></p><h2 id="4、Collections-emptyList-此list非彼list"><a href="#4、Collections-emptyList-此list非彼list" class="headerlink" title="4、Collections.emptyList()此list非彼list"></a>4、Collections.emptyList()此list非彼list</h2><p>我们先来看一个sample:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">getUserNameList</span><span class="params">(String userId)</span> </span>&#123;</span><br><span class="line">    List&lt;String&gt; resultList = Collections.emptyList();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        resultList = userDao.getUserName(userId);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">        logger.info(ex);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> resultList;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样会抛出错误,主要问题在于Collections.emptyList()并非我们平时看到的List,此list不支持add、remove方法,否则会抛出operationNotSupportException:</p><p><img src="https://zhaoxiaobin.coding.net/p/blog/d/zhaoxiaobin_img/git/raw/master/post/Java//16232995635029/16233004455368.jpg"></p><p>结果抛出异常:</p><p><img src="https://zhaoxiaobin.coding.net/p/blog/d/zhaoxiaobin_img/git/raw/master/post/Java//16232995635029/16233004535652.jpg"></p><p>原因是:Collections.emptyList返回的并不是我们平时认识的那个list,它是一个内部常量类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> List EMPTY_LIST = <span class="keyword">new</span> EmptyList&lt;&gt;();</span><br></pre></td></tr></table></figure><p>这个list并不具有add、remove元素的能力,我猜想是因为jdk设计之初的想法是将这个list作为一种<strong>只读</strong>的list,并不提供数据的写入能力,因此它仅可作为一种 空值返回，无法进行删除、添加操作。</p><h2 id="5、list可以一边删除一边遍历吗？"><a href="#5、list可以一边删除一边遍历吗？" class="headerlink" title="5、list可以一边删除一边遍历吗？"></a>5、list可以一边删除一边遍历吗？</h2><p>答案是肯定可以的,要不然的话list怎么删除数据呢,不过要注意遍历的姿势,我们再来看一个简单的例子:</p><p><img src="https://zhaoxiaobin.coding.net/p/blog/d/zhaoxiaobin_img/git/raw/master/post/Java//16232995635029/16233004649412.jpg"></p><p>很不幸，又双叒叕报错了：</p><p><img src="https://zhaoxiaobin.coding.net/p/blog/d/zhaoxiaobin_img/git/raw/master/post/Java//16232995635029/16233004736650.jpg"></p><p>仔细翻阅源码会发现,每次remove之前会检查元素的条数,如果发现预期的modCount和当前的modCount不一致就会抛出这个异常.modCount是list中用来记录修改次数的一个属性,当对元素进行统计的时候就会对该元素加1,而当对list边遍历边删除的话,就会造成</p><p>excepted与modCount不一致，从而抛出异常。</p><p><img src="https://zhaoxiaobin.coding.net/p/blog/d/zhaoxiaobin_img/git/raw/master/post/Java//16232995635029/16233004825258.jpg"></p><p>正确的删除姿势就是使用Iterator.remove进行遍历删除，可以规避这个问题。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">list.add(<span class="number">1</span>);</span><br><span class="line">list.add(<span class="number">2</span>);</span><br><span class="line">list.add(<span class="number">3</span>);</span><br><span class="line">list.add(<span class="number">4</span>);</span><br><span class="line">Iterator&lt;Integer&gt; iterator = list.iterator();</span><br><span class="line"><span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">    Integer integer = iterator.next();</span><br><span class="line">    <span class="keyword">if</span> (integer == <span class="number">2</span>) &#123;</span><br><span class="line">        iterator.remove();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6、总结"><a href="#6、总结" class="headerlink" title="6、总结"></a>6、总结</h2><p>jdk的设计者有两个很大的特点:</p><p>①大多不会做非null判断</p><p>②出现错误直接throw new Exception，容错性很差</p><p>在实际开发中,面对jdk一定要谨慎使用,jdk提供了便利的同时,也有一些我们使用上的盲区,应该养成多看源码,多注意错误性处理，防止在小问题上栽大跟头。</p><p>回到最开始说的那个subtract方法的问题,因为这个问题等需要我处理完之后用户才能收到退款,这直接造成了用户体验直线下降,而部分用户还直接打电话投诉。同事一个小小的不谨慎和马虎就给公司造成了很多负面影响,技术问题虽然不大但是带来的业务影响范围很严重。所以我们必须防微杜渐,小小的问题都得细细的打磨,才能避免很多问题的产生。</p><p><font color="red"><strong>ps</strong>:接下来的部分会比较简易点,会阐述使用这个方法的问题或者存在的坑,这部分会持续更新,一旦在工作中发现有坑的方法我会及时更新,同时欢迎大家留言补充这部分内容：</font></p><h2 id="7、持续更新"><a href="#7、持续更新" class="headerlink" title="7、持续更新"></a>7、持续更新</h2><p>7.1 Bigdecimal在比较的时候,最好使用compareTo方法,不要使用equals方法,如下案例,虽然Bigdecimal重写了equals方法,但是使用会存在问题：</p><p><img src="https://zhaoxiaobin.coding.net/p/blog/d/zhaoxiaobin_img/git/raw/master/post/Java//16232995635029/16233005063843.jpg"></p><p><img src="https://zhaoxiaobin.coding.net/p/blog/d/zhaoxiaobin_img/git/raw/master/post/Java//16232995635029/16233005152277.jpg"></p><p>1和1.0在比较的时候返回了false,这是因为在equals的源码中进行了数据的scale(也就是精度)的比较,如果不一致就会返回false,如果使用compareTo方法就不存在这个问题</p><p> 7.2：mysql的减法计算如果有null值结果就为null</p><p>select 5-null 结果会返回null，所以在进行mysql计算的时候,对于有可能出现null值的列一定要进行ifnull(field,0)的转换,将null值转化为0,否则就会出现一些意想不到的数据错误和空指针问题</p><p><img src="https://zhaoxiaobin.coding.net/p/blog/d/zhaoxiaobin_img/git/raw/master/post/Java//16232995635029/16233005600602.jpg"></p><p>正确的姿势：</p><p><img src="https://zhaoxiaobin.coding.net/p/blog/d/zhaoxiaobin_img/git/raw/master/post/Java//16232995635029/16233005678858.jpg"></p><p>7.3: String的split方法在进行||分割的时候需要进行转义,否则结果会有问题</p><p><img src="https://zhaoxiaobin.coding.net/p/blog/d/zhaoxiaobin_img/git/raw/master/post/Java//16232995635029/16233005753875.jpg"></p><p><img src="https://zhaoxiaobin.coding.net/p/blog/d/zhaoxiaobin_img/git/raw/master/post/Java//16232995635029/16233005820784.jpg"><br><br><br></p>]]></content>
      
      
      <categories>
          
          <category> Java开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JDK </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java中几种单例模式的实现</title>
      <link href="%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/Java%E4%B8%AD%E5%87%A0%E7%A7%8D%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
      <url>%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/Java%E4%B8%AD%E5%87%A0%E7%A7%8D%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F%E7%9A%84%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="Java中几种单例模式的实现"><a href="#Java中几种单例模式的实现" class="headerlink" title="Java中几种单例模式的实现"></a>Java中几种单例模式的实现</h1><h2 id="1、饿汉式"><a href="#1、饿汉式" class="headerlink" title="1、饿汉式"></a>1、饿汉式</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Apple</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Apple apple = <span class="keyword">new</span> Apple();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Apple</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Apple <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> apple;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上为饿汉式单例模式简单实现，此种方式不会产生线程不安全情况，且只会创建一个对象。</p><p><strong>饿汉式单例有以下特点</strong></p><ul><li>私有构造。</li><li>静态私有属性和静态公有方法。</li></ul><h2 id="2、懒汉式"><a href="#2、懒汉式" class="headerlink" title="2、懒汉式"></a>2、懒汉式</h2><h4 id="2-1、非线程安全"><a href="#2-1、非线程安全" class="headerlink" title="2.1、非线程安全"></a>2.1、非线程安全</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Banana</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Banana banana;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Banana</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Banana <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (banana == <span class="keyword">null</span>) &#123;</span><br><span class="line">            banana = <span class="keyword">new</span> Banana();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> banana;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果有多个线程调用<code>getInstance</code>方法，都会进入if判断，从而造成重复实例化，不是真正的单例。</p><h4 id="2-2、线程安全"><a href="#2-2、线程安全" class="headerlink" title="2.2、线程安全"></a>2.2、线程安全</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Banana</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Banana banana;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Banana</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Banana <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (Banana.class) &#123;</span><br><span class="line">            <span class="keyword">if</span> (banana == <span class="keyword">null</span>) &#123;</span><br><span class="line">                banana = <span class="keyword">new</span> Banana();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> banana;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的方式，虽然解决了线程安全问题，但是如果在初始化完成之后，每次调用获取还要再经过同步锁，多线程环境下会降低程序运行的效率。</p><h4 id="2-3、双重检查"><a href="#2-3、双重检查" class="headerlink" title="2.3、双重检查"></a>2.3、双重检查</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Banana</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Banana banana;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Banana</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Banana <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (banana == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (Banana.class) &#123;</span><br><span class="line">                <span class="keyword">if</span> (banana == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    banana = <span class="keyword">new</span> Banana();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> banana;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第一层检查是只有实例还未初始化才进入同步锁，如果已经初始化完成就直接返回，这样可以提升效率。<br>第二层检查是为了防止前一个线程实例化之后释放锁，后面多个线程串行再去实例化，所以要加个判断。</p><h4 id="2-4、volatile禁止指令重排序"><a href="#2-4、volatile禁止指令重排序" class="headerlink" title="2.4、volatile禁止指令重排序"></a>2.4、volatile禁止指令重排序</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Banana</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> Banana banana;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Banana</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Banana <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (banana == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (Banana.class) &#123;</span><br><span class="line">                <span class="keyword">if</span> (banana == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    banana = <span class="keyword">new</span> Banana();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> banana;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为<code>apple = new Apple()</code>创建对象有以下3个步骤：</p><ol><li>在堆上开辟空间。</li><li>调用构造器，初始化实例。</li><li>返回地址给引用（让引用指向该对象）。</li></ol><p>如果没有禁止指令重排序，可能发生的顺序为1-&gt;3-&gt;2，就是在内存上开辟空间后就直接返回地址给引用，这个时候还没真正的初始化完对象。等释放锁后，别的线程进入判断，这时候引用已经不是null了，直接拿去使用，其实这个对象在这个时候可能还是个半成品，那就有空指针异常了。</p><p><strong>懒汉式单例有以下特点</strong></p><ul><li>私有构造。</li><li>静态私有属性和静态公有方法。</li><li>线程安全。</li><li>双重检查（为了兼顾效率和线程安全）。 </li><li>volatile禁止指令重排序（防止返回半初始化对象）。</li></ul><h2 id="3、静态内部类"><a href="#3、静态内部类" class="headerlink" title="3、静态内部类"></a>3、静态内部类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cherry</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">CherryHolder</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> Cherry instance = <span class="keyword">new</span> Cherry();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Cherry</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当getInstance方法第一次被调用的时候，执行CherryHolder.instance，导致CherryHolder类得到初始化；</span></span><br><span class="line"><span class="comment">     * 而这个类在装载并被初始化的时候，会初始化它的静态域，从而创建Cherry的实例，</span></span><br><span class="line"><span class="comment">     * 由于是静态的域，因此只会在虚拟机装载类的时候初始化一次，并由虚拟机来保证它的线程安全性。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Cherry <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> CherryHolder.instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>静态内部类单例有以下特点</strong></p><ul><li>私有构造。</li><li>静态内部类持有静态变量作为单例的实例。</li><li>静态域由虚拟机初始化一次，保证线程安全。</li></ul><h2 id="4、枚举"><a href="#4、枚举" class="headerlink" title="4、枚举"></a>4、枚举</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">Durian</span> </span>&#123;</span><br><span class="line">    INSTANCE;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;doSomething&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>枚举单例有以下特点</strong></p><ul><li>防止反射执行私有构造方法，会抛<code>NoSuchMethodException</code>异常。</li><li>防止序列化，反序列化后还是同一个对象。</li><li>防止克隆，会抛<code>CloneNotSupportedException</code>异常。</li></ul><h2 id="5、破坏单例的三种方式"><a href="#5、破坏单例的三种方式" class="headerlink" title="5、破坏单例的三种方式"></a>5、破坏单例的三种方式</h2><ol><li>反射</li><li>序列化</li><li>克隆</li></ol><p>除了枚举，其它几种单例模式都会被以上3种方式破坏。解决方案如下：</p><ol><li><p>防止反射<br>定义一个全局变量，当第二次创建的时候抛出异常。</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> isCreate = <span class="keyword">false</span>;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">Apple</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 防止反射对单例的破坏</span></span><br><span class="line">    <span class="keyword">if</span>(isCreate) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;已然被实例化一次，不能再实例化&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    isCreate = <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>防止克隆破坏<br>重写clone()，直接返回单例对象。</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> Object <span class="title">clone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> apple;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>防止序列化破坏<br>添加readResolve()，返回单例对象。</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Object <span class="title">readResolve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> apple;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://blog.csdn.net/fd2025/article/details/79711198">java 单例模式的几种实现方式</a></li><li><a href="https://www.cnblogs.com/call-me-pengye/p/11214435.html">枚举防止反射，克隆及序列化破环单例模式的原理</a></li><li><a href="https://www.cnblogs.com/chiclee/p/9097772.html">为什么要用枚举实现单例模式（避免反射、序列化问题）</a></li></ul><h2 id="代码地址"><a href="#代码地址" class="headerlink" title="代码地址"></a>代码地址</h2><ul><li>github：<a href="https://github.com/senlinmu1008/pattern/tree/master/singleton">https://github.com/senlinmu1008/pattern/tree/master/singleton</a></li><li>gitee：<a href="https://gitee.com/ppbin/pattern/tree/master/singleton">https://gitee.com/ppbin/pattern/tree/master/singleton</a><br><br><br></li></ul>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 单例模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx配置Https单向认证、双向认证以及多证书配置</title>
      <link href="%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/loadbalance/nginx/Nginx%E9%85%8D%E7%BD%AEHttps%E5%8D%95%E5%90%91%E8%AE%A4%E8%AF%81%E3%80%81%E5%8F%8C%E5%90%91%E8%AE%A4%E8%AF%81%E4%BB%A5%E5%8F%8A%E5%A4%9A%E8%AF%81%E4%B9%A6%E9%85%8D%E7%BD%AE/"/>
      <url>%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/loadbalance/nginx/Nginx%E9%85%8D%E7%BD%AEHttps%E5%8D%95%E5%90%91%E8%AE%A4%E8%AF%81%E3%80%81%E5%8F%8C%E5%90%91%E8%AE%A4%E8%AF%81%E4%BB%A5%E5%8F%8A%E5%A4%9A%E8%AF%81%E4%B9%A6%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="1、环境准备"><a href="#1、环境准备" class="headerlink" title="1、环境准备"></a>1、环境准备</h2><h4 id="1-1、Nginx"><a href="#1-1、Nginx" class="headerlink" title="1.1、Nginx"></a>1.1、Nginx</h4><p><code>Nginx</code>版本：1.12.0</p><p><code>Nginx</code>为了支持<code>Https</code>需要安装<code>http_ssl_module</code>模块。在编译时需要带上<code>--with-http_ssl_module</code>参数。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">./configure --prefix=/usr/local/nginx --with-http_ssl_module</span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure><p>然后通过<code>./nginx -V</code>查看有没有<code>--with-http_ssl_module</code>参数。</p><p><img src="https://zhaoxiaobin.coding.net/p/blog/d/zhaoxiaobin_img/git/raw/master/post/loadbalance/nginx/nginx-4-1.jpg" alt="-w632"></p><h4 id="1-2、openssl生成公私钥"><a href="#1-2、openssl生成公私钥" class="headerlink" title="1.2、openssl生成公私钥"></a>1.2、openssl生成公私钥</h4><p>无论是客户端还是服务端，都可以使用<code>openssl</code>命令来生成公私钥，前提是需要安装好<code>openssl</code>。</p><p><strong>生成服务端私钥</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl genrsa [-out filename] [numbits]</span><br></pre></td></tr></table></figure><p>比如：生成一个名为<code>server.key</code>的私钥，长度1024。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl genrsa -out server.key 1024</span><br></pre></td></tr></table></figure><p><img src="https://zhaoxiaobin.coding.net/p/blog/d/zhaoxiaobin_img/git/raw/master/post/loadbalance/nginx/nginx-4-2.jpg" alt="-w464"></p><p><strong>生成服务端公钥证书</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl req -new -x509 [-key keyfile] [-out crtfile] [-days numdays]</span><br></pre></td></tr></table></figure><p>比如：生成一个名为<code>server.crt</code>的证书，有效期10年。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl req -new -x509 -key server.key -out server.crt -days 3650</span><br></pre></td></tr></table></figure><p>依次会要求输入国家、省市、公司单位、域名、邮箱等信息。</p><p>最关键的是域名信息<code>Common Name</code>，这里需要填写服务器的域名地址，比如<code>test.com</code>；也可以填写泛域名，比如<code>*.test.com</code>；如果没有域名，可以直接填写服务端ip地址。</p><p><img src="https://zhaoxiaobin.coding.net/p/blog/d/zhaoxiaobin_img/git/raw/master/post/loadbalance/nginx/nginx-4-3.jpg" alt="-w705"></p><p>通过以上2步，已经生成了私钥<code>server.key</code>，公钥证书<code>server.crt</code>。</p><p><strong>生成客户端公私钥</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 生成客户端证书私钥</span></span><br><span class="line">openssl genrsa -out client.key 1024</span><br><span class="line"><span class="meta">#</span><span class="bash"> 生成客户端公钥证书</span></span><br><span class="line">openssl req -new -x509 -key client.key -out client.crt -days 3650</span><br><span class="line"><span class="meta">#</span><span class="bash"> 生客户端p12格式证书，需要输入一个密码，选一个好记的，比如123456</span></span><br><span class="line">openssl pkcs12 -export -clcerts -in client.crt -inkey client.key -out client.p12</span><br></pre></td></tr></table></figure><p>最后会将公私钥两个文件合成得到一个<code>p12</code>文件，<code>p12</code>文件主要用于客户端（包括<code>Postman</code>、浏览器、<code>Java</code>客户端等）发起<code>https</code>请求提供公私钥。</p><p>还可以利用<code>Java</code>自带的<code>keytool</code>工具来生成公私钥，并且可以和<code>openssl</code>生成的公私钥进行互相转换。具体可以参考文末的附录。</p><h2 id="2、单向认证配置和客户端调用"><a href="#2、单向认证配置和客户端调用" class="headerlink" title="2、单向认证配置和客户端调用"></a>2、单向认证配置和客户端调用</h2><h4 id="2-1、Nginx配置"><a href="#2-1、Nginx配置" class="headerlink" title="2.1、Nginx配置"></a>2.1、Nginx配置</h4><p>编辑<code>nginx.conf</code>文件在<code>http&#123;...&#125;</code>配置块中新增一个<code>server</code>配置块。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 负载均衡配置</span></span><br><span class="line"><span class="attribute">upstream</span> backend &#123;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">192.168.0.1:10900</span>;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">192.168.0.2:10900</span>;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">192.168.0.3:10900</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">21000</span> ssl;</span><br><span class="line">    <span class="attribute">server_name</span>  localhost;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">ssl_certificate</span>      ../ssl/server.crt;  <span class="comment"># server公钥证书</span></span><br><span class="line">    <span class="attribute">ssl_certificate_key</span>  ../ssl/server.key;  <span class="comment"># server私钥</span></span><br><span class="line"></span><br><span class="line">    <span class="attribute">ssl_session_cache</span>    shared:SSL:<span class="number">1m</span>;</span><br><span class="line">    <span class="attribute">ssl_session_timeout</span>  <span class="number">5m</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">ssl_ciphers</span>  HIGH:!aNULL:!MD5;</span><br><span class="line">    <span class="attribute">ssl_prefer_server_ciphers</span>  <span class="literal">on</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">access_log</span> logs/access1.log; <span class="comment"># 单独指定输出访问日志</span></span><br><span class="line">    <span class="attribute">error_log</span> logs/error1.log; <span class="comment"># # 单独指定输出错误日志</span></span><br><span class="line"></span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="attribute">proxy_pass</span>    http://backend;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>单向认证只需要配置服务器的公私钥即可，这里的相对路径是相对<code>Nginx</code>的配置文件<code>nginx.conf</code>的路径而言的。而输出日志的相对路径是相对于<code>conf</code>目录的路径而言。</p><h4 id="2-2、Postman调用"><a href="#2-2、Postman调用" class="headerlink" title="2.2、Postman调用"></a>2.2、Postman调用</h4><p>只需要把原来请求的<code>http</code>替换成<code>https</code>即可，不需要做其它任何改动。</p><h4 id="2-3、浏览器调用"><a href="#2-3、浏览器调用" class="headerlink" title="2.3、浏览器调用"></a>2.3、浏览器调用</h4><p>也是把<code>http</code>替换成<code>https</code>就行了。</p><p>如果浏览器提示有风险<code>NET::ERR_CERT_AUTHORITY_INVALID</code>，这主要是服务端证书是我们自己通过命令生成签发的，不是来自于正规的CA机构签发，所以导致浏览器不信任，可以点击<strong>高级 -&gt; 继续前往</strong>即可。<br><img src="https://zhaoxiaobin.coding.net/p/blog/d/zhaoxiaobin_img/git/raw/master/post/loadbalance/nginx/nginx-4-4.jpg" alt="-w762"><br><strong>注意这里最好使用谷歌浏览器测试</strong>，国内一些浏览器可能会提示<code>NET::ERR_CERT_REVOKED</code>证书已被吊销，达不到测试效果。</p><h4 id="2-4、Java客户端调用"><a href="#2-4、Java客户端调用" class="headerlink" title="2.4、Java客户端调用"></a>2.4、Java客户端调用</h4><p>网上很多都是采用<code>httpclient</code>作为<code>http</code>库，这里比较推荐使用<code>Hutool</code>工具包。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.hutool<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hutool-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">HttpResponse httpResponse = HttpRequest.post(<span class="string">&quot;https://ip:port/senddata&quot;</span>)</span><br><span class="line">                .contentType(<span class="string">&quot;text/plain&quot;</span>)</span><br><span class="line">                .body(<span class="string">&quot;requestBody&quot;</span>)</span><br><span class="line">                .execute();</span><br><span class="line">System.out.println(httpResponse.getStatus());</span><br><span class="line">System.out.println(httpResponse.body());</span><br></pre></td></tr></table></figure><p>只要把原来的<code>http</code>替换成<code>https</code>就行，非常的方便！</p><h2 id="3、双向认证配置和客户端调用"><a href="#3、双向认证配置和客户端调用" class="headerlink" title="3、双向认证配置和客户端调用"></a>3、双向认证配置和客户端调用</h2><h4 id="3-1、Nginx配置"><a href="#3-1、Nginx配置" class="headerlink" title="3.1、Nginx配置"></a>3.1、Nginx配置</h4><p>也是在<code>http&#123;...&#125;</code>配置块中新增一个<code>server</code>配置块。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 负载均衡配置</span></span><br><span class="line"><span class="attribute">upstream</span> backend &#123;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">192.168.0.1:10900</span>;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">192.168.0.2:10900</span>;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">192.168.0.3:10900</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">21000</span> ssl;</span><br><span class="line">    <span class="attribute">server_name</span>  a.com;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">ssl_certificate</span>      ../ssl/server.crt;  <span class="comment"># server公钥证书</span></span><br><span class="line">    <span class="attribute">ssl_certificate_key</span>  ../ssl/server.key;  <span class="comment"># server私钥</span></span><br><span class="line">    <span class="attribute">ssl_client_certificate</span> ../clientcrt/clientA.crt;  <span class="comment"># client公钥证书</span></span><br><span class="line">    <span class="attribute">ssl_verify_client</span> <span class="literal">on</span>;  <span class="comment"># 开启客户端证书验证</span></span><br><span class="line"></span><br><span class="line">    <span class="attribute">ssl_session_cache</span>    shared:SSL:<span class="number">1m</span>;</span><br><span class="line">    <span class="attribute">ssl_session_timeout</span>  <span class="number">5m</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">ssl_ciphers</span>  HIGH:!aNULL:!MD5;</span><br><span class="line">    <span class="attribute">ssl_prefer_server_ciphers</span>  <span class="literal">on</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">access_log</span> logs/a_access.log;</span><br><span class="line">    <span class="attribute">error_log</span> logs/a_error.log;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="attribute">proxy_pass</span>    http://backend;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为是双向认证，不仅客户端要认证服务端，服务端也需要认证客户端，所以相较于单向认证，会多出以下2个配置参数：</p><ul><li><code>ssl_verify_client on</code> 表示开启双向认证，服务端也要认证客户端，该参数默认是<code>off</code>关闭。</li><li><code>ssl_client_certificate</code> 配置客户端公钥证书存放的路径位置。</li></ul><h4 id="3-2、Postman调用"><a href="#3-2、Postman调用" class="headerlink" title="3.2、Postman调用"></a>3.2、Postman调用</h4><ol><li><p>在设置<code>General</code>中先把<code>SSL certificate verification</code>关掉。</p><p><img src="https://zhaoxiaobin.coding.net/p/blog/d/zhaoxiaobin_img/git/raw/master/post/loadbalance/nginx/nginx-4-5.jpg" alt="-w715"></p></li><li><p>然后在<code>Certificates</code>中配置客户端公私钥证书。注意这里的地址和端口要与实际的一致，否则请求时会认证失败。<br><img src="https://zhaoxiaobin.coding.net/p/blog/d/zhaoxiaobin_img/git/raw/master/post/loadbalance/nginx/nginx-4-6.jpg" alt="-w708"></p></li><li><p>或者可以只配置<code>p12</code>文件，同时也要配置<code>p12</code>文件的密码。<code>p12</code>文件可以认为是一对公私钥的合体文件，通常会有密码保护；可以通过<code>openssl</code>命令生成（将公私钥两个文件合成得到一个<code>p12</code>文件）。<br><img src="https://zhaoxiaobin.coding.net/p/blog/d/zhaoxiaobin_img/git/raw/master/post/loadbalance/nginx/nginx-4-7.jpg" alt="-w704"></p></li><li><p>最后发起请求<br><img src="https://zhaoxiaobin.coding.net/p/blog/d/zhaoxiaobin_img/git/raw/master/post/loadbalance/nginx/nginx-4-8.jpg" alt="-w1314"></p></li></ol><h4 id="3-3、浏览器调用"><a href="#3-3、浏览器调用" class="headerlink" title="3.3、浏览器调用"></a>3.3、浏览器调用</h4><p>浏览器一般用单向认证会比较多，双向认证的详细配置步骤这里就不多啰嗦了。主要就是把自己客户端的<code>p12</code>文件导入到自己电脑的证书列表中再访问服务端，如果提示服务端的证书有风险，点击继续就行。</p><h4 id="3-4、Java客户端调用"><a href="#3-4、Java客户端调用" class="headerlink" title="3.4、Java客户端调用"></a>3.4、Java客户端调用</h4><p>这里我们使用<code>httpclient</code>来发起<code>https</code>的请求进行双向认证。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.httpcomponents<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>httpclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.5.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>不过也分为2种方式：</p><ol><li>一种是要把服务端公钥证书导入到客户端<code>JDK</code>的<code>cacerts</code>文件中；</li><li>另一种则是把服务端的公钥证书自行生成一个<code>truststore</code>信任库，由客户端程序读取这个信任库然后发起<code>https</code>请求进行双向认证。</li></ol><h5 id="3-4-1、导入cacerts进行访问"><a href="#3-4-1、导入cacerts进行访问" class="headerlink" title="3.4.1、导入cacerts进行访问"></a>3.4.1、导入cacerts进行访问</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 切换到jdk的security目录</span></span><br><span class="line">cd $JAVA_HOME/jre/lib/security</span><br><span class="line"><span class="meta">#</span><span class="bash"> 将服务端证书导入cacerts文件中，指定别名myserver，-file参数指定的就是服务端公钥证书的路径</span></span><br><span class="line">keytool -import -alias myserver -keystore cacerts -storepass changeit -file C:/Users/my/Desktop/cert/server_ssl/server.crt</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看所有证书</span></span><br><span class="line">keytool -list -keystore cacerts -storepass changeit</span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除指定别名的证书</span></span><br><span class="line">keytool -delete -alias myserver -keystore cacerts -storepass changeit</span><br></pre></td></tr></table></figure><p><strong>示例代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.http.HttpEntity;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.client.config.RequestConfig;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.client.methods.CloseableHttpResponse;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.client.methods.HttpPost;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.conn.ssl.SSLConnectionSocketFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.entity.ContentType;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.entity.StringEntity;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.impl.client.CloseableHttpClient;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.impl.client.HttpClients;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.ssl.SSLContexts;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.util.EntityUtils;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.net.ssl.SSLContext;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.security.KeyStore;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SSLTestCase</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 客户端p12证书路径</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String pfxPath = <span class="string">&quot;C:/Users/my/Desktop/cert/client.p12&quot;</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 客户端p12证书密码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String pfxPasswd = <span class="string">&quot;123456&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String url = <span class="string">&quot;https://139.9.127.172:21000/senddata&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SSLTestCase</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 1.加载P12证书</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        KeyStore keyStore = KeyStore.getInstance(<span class="string">&quot;PKCS12&quot;</span>);</span><br><span class="line">        InputStream instream = <span class="keyword">new</span> FileInputStream(<span class="keyword">new</span> File(pfxPath));</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            keyStore.load(instream, pfxPasswd.toCharArray());</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            instream.close();</span><br><span class="line">        &#125;</span><br><span class="line">        SSLContext sslcontext = SSLContexts.custom().loadKeyMaterial(keyStore, pfxPasswd.toCharArray()).build();</span><br><span class="line">        SSLConnectionSocketFactory sslsf = <span class="keyword">new</span> SSLConnectionSocketFactory(sslcontext,</span><br><span class="line">                <span class="keyword">new</span> String[]&#123;<span class="string">&quot;TLSv1&quot;</span>&#125;, <span class="comment">// supportedProtocols ,这里可以根据实际情况设置</span></span><br><span class="line">                <span class="keyword">null</span>,</span><br><span class="line">                SSLConnectionSocketFactory.getDefaultHostnameVerifier());</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 2.使用httpclient4.5.8发送post请求</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        CloseableHttpClient httpclient = HttpClients.custom().setSSLSocketFactory(sslsf).build();</span><br><span class="line">        <span class="comment">// 设置超时时间</span></span><br><span class="line">        RequestConfig requestConfig = RequestConfig.custom()</span><br><span class="line">                .setConnectTimeout(<span class="number">5000</span>)</span><br><span class="line">                .setSocketTimeout(<span class="number">30000</span>).build();</span><br><span class="line">        CloseableHttpResponse response = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            HttpPost httpPost = <span class="keyword">new</span> HttpPost(url);</span><br><span class="line">            httpPost.setConfig(requestConfig);</span><br><span class="line"><span class="comment">//            httpPost.addHeader(&quot;Connection&quot;, &quot;keep-alive&quot;); // 设置一些header等</span></span><br><span class="line">            String requestBody = <span class="string">&quot;requestBody&quot;</span>;</span><br><span class="line"><span class="comment">//            StringEntity stringEntity = new StringEntity(requestBody, &quot;UTF-8&quot;);</span></span><br><span class="line">            StringEntity stringEntity = <span class="keyword">new</span> StringEntity(requestBody, ContentType.create(<span class="string">&quot;text/plain&quot;</span>, <span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">            httpPost.setEntity(stringEntity);</span><br><span class="line">            response = httpclient.execute(httpPost);</span><br><span class="line">            HttpEntity entity = response.getEntity();</span><br><span class="line">            String respBody = EntityUtils.toString(response.getEntity(), <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">            EntityUtils.consume(entity);</span><br><span class="line">            System.out.println(respBody);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (httpclient != <span class="keyword">null</span>) &#123;</span><br><span class="line">                httpclient.close();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (response != <span class="keyword">null</span>) &#123;</span><br><span class="line">                response.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3-4-2、自行生成truststore信任库文件进行访问"><a href="#3-4-2、自行生成truststore信任库文件进行访问" class="headerlink" title="3.4.2、自行生成truststore信任库文件进行访问"></a>3.4.2、自行生成truststore信任库文件进行访问</h5><p>如果服务器的<code>JDK/JRE</code>不能随便改动，我们还可以自行生成<code>truststore</code>信任库，由程序来读取这个信任库中的证书。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> -keystore参数指定生成后的truststore文件，-file参数指定服务公钥证书路径</span></span><br><span class="line">keytool -keystore C:/Users/my/Desktop/cert/server_ssl/server.truststore -keypass 654321 -storepass 654321 -alias myservertruststore -import -trustcacerts -file C:/Users/my/Desktop/cert/server_ssl/server.crt</span><br></pre></td></tr></table></figure><p><strong>示例代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.http.HttpEntity;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.client.config.RequestConfig;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.client.methods.CloseableHttpResponse;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.client.methods.HttpPost;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.conn.ssl.SSLConnectionSocketFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.entity.ContentType;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.entity.StringEntity;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.impl.client.CloseableHttpClient;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.impl.client.HttpClients;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.util.EntityUtils;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.net.ssl.KeyManagerFactory;</span><br><span class="line"><span class="keyword">import</span> javax.net.ssl.SSLContext;</span><br><span class="line"><span class="keyword">import</span> javax.net.ssl.TrustManagerFactory;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.security.KeyStore;</span><br><span class="line"><span class="keyword">import</span> java.security.SecureRandom;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SSLTestCase2</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 客户端p12证书路径</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String pfxPath = <span class="string">&quot;C:/Users/my/Desktop/cert/client.p12&quot;</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 客户端p12证书密码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String pfxPasswd = <span class="string">&quot;123456&quot;</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 信任库路径</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String trustStroreFile = <span class="string">&quot;C:/Users/my/Desktop/cert/server_ssl/server.truststore&quot;</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 信任库密码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String trustStorePwd = <span class="string">&quot;654321&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String url = <span class="string">&quot;https://139.9.127.172:21000/senddata&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SSLTestCase2</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 1.初始化密钥库</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        KeyManagerFactory keyManagerFactory = KeyManagerFactory.getInstance(<span class="string">&quot;SunX509&quot;</span>);</span><br><span class="line">        KeyStore keyStore = getKeyStore(pfxPath, pfxPasswd, <span class="string">&quot;PKCS12&quot;</span>);</span><br><span class="line">        keyManagerFactory.init(keyStore, pfxPasswd.toCharArray());</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 2.初始化信任库</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        TrustManagerFactory trustManagerFactory = TrustManagerFactory.getInstance(<span class="string">&quot;SunX509&quot;</span>);</span><br><span class="line">        KeyStore trustkeyStore = getKeyStore(trustStroreFile, trustStorePwd, <span class="string">&quot;JKS&quot;</span>);</span><br><span class="line">        trustManagerFactory.init(trustkeyStore);</span><br><span class="line"></span><br><span class="line">        SSLContext sslContext = SSLContext.getInstance(<span class="string">&quot;SSL&quot;</span>);</span><br><span class="line">        sslContext.init(keyManagerFactory.getKeyManagers(), trustManagerFactory.getTrustManagers(), <span class="keyword">new</span> SecureRandom());</span><br><span class="line">        SSLConnectionSocketFactory sslsf = <span class="keyword">new</span> SSLConnectionSocketFactory(sslContext,</span><br><span class="line">                <span class="keyword">new</span> String[]&#123;<span class="string">&quot;TLSv1&quot;</span>&#125;, <span class="comment">// supportedProtocols ,这里可以根据实际情况设置</span></span><br><span class="line">                <span class="keyword">null</span>,</span><br><span class="line">                SSLConnectionSocketFactory.getDefaultHostnameVerifier());</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 3.使用httpclient4.5.8发送post请求</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        CloseableHttpClient httpclient = HttpClients.custom().setSSLSocketFactory(sslsf).build();</span><br><span class="line">        <span class="comment">// 设置超时时间</span></span><br><span class="line">        RequestConfig requestConfig = RequestConfig.custom()</span><br><span class="line">                .setConnectTimeout(<span class="number">5000</span>)</span><br><span class="line">                .setSocketTimeout(<span class="number">30000</span>).build();</span><br><span class="line">        CloseableHttpResponse response = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            HttpPost httpPost = <span class="keyword">new</span> HttpPost(url);</span><br><span class="line">            httpPost.setConfig(requestConfig);</span><br><span class="line"><span class="comment">//            httpPost.addHeader(&quot;Connection&quot;, &quot;keep-alive&quot;); // 设置一些header等</span></span><br><span class="line">            String requestBody = <span class="string">&quot;requestBody&quot;</span>;</span><br><span class="line"><span class="comment">//            StringEntity stringEntity = new StringEntity(requestBody, &quot;UTF-8&quot;);</span></span><br><span class="line">            StringEntity stringEntity = <span class="keyword">new</span> StringEntity(requestBody, ContentType.create(<span class="string">&quot;text/plain&quot;</span>, <span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">            httpPost.setEntity(stringEntity);</span><br><span class="line">            response = httpclient.execute(httpPost);</span><br><span class="line">            HttpEntity entity = response.getEntity();</span><br><span class="line">            String respBody = EntityUtils.toString(response.getEntity(), <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">            EntityUtils.consume(entity);</span><br><span class="line">            System.out.println(respBody);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (httpclient != <span class="keyword">null</span>) &#123;</span><br><span class="line">                httpclient.close();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (response != <span class="keyword">null</span>) &#123;</span><br><span class="line">                response.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> KeyStore <span class="title">getKeyStore</span><span class="params">(String pfxPath, String pfxPasswd, String type)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        KeyStore keyStore = KeyStore.getInstance(type);</span><br><span class="line">        InputStream instream = <span class="keyword">new</span> FileInputStream(<span class="keyword">new</span> File(pfxPath));</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            keyStore.load(instream, pfxPasswd.toCharArray());</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            instream.close();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> keyStore;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结双向认证的几种客户端调用方式，可以发现只有<code>Java</code>客户端调用时会需要用到服务端证书；而用<code>Postman</code>、浏览器这些客户端工具时我们并没有配置服务端证书，是因为在一开始建立连接时，服务端本来就会把自己的证书发给客户端去进行认证。</p><h4 id="3-5、客户端获取服务端公钥证书"><a href="#3-5、客户端获取服务端公钥证书" class="headerlink" title="3.5、客户端获取服务端公钥证书"></a>3.5、客户端获取服务端公钥证书</h4><p>有时候，产线环境的服务端公钥证书并不能很方便地拿出来给客户端去使用，这时候需要客户端通过执行<code>openssl</code>的一个命令来获取服务端的公钥证书，当然前提是<code>Nginx</code>服务需要启动。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl s_client -connect 139.9.127.172:21000 &lt;/dev/null | sed -ne &#x27;/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p&#x27; &gt;./server.crt</span><br></pre></td></tr></table></figure><ul><li>-connect：<code>Nginx</code>服务器的ip和端口。</li><li>服务端公钥证书最后输出到客户端本地目录的<code>server.crt</code>文件。</li></ul><h2 id="4、双向认证接入多个客户端"><a href="#4、双向认证接入多个客户端" class="headerlink" title="4、双向认证接入多个客户端"></a>4、双向认证接入多个客户端</h2><p>很多时候作为服务端要对接多个客户端，每个客户端都有自己的证书，<code>Nginx</code>服务端需要为每一个接入的客户端渠道配置一个<code>server</code>块来进行双向认证。既然是多个<code>server</code>配置块，那就会涉及到对接入的客户端匹配哪个<code>server</code>块来进行双向认证的问题。</p><p>首先<code>Nginx</code>会根据不同的监听端口来匹配，但是这样会为每个接入的客户端渠道新开放一个端口。如何统一用一个监听端口接入所有客户端的<code>https</code>请求并验证各个渠道的证书合法性，主要有以下2种方式。</p><h4 id="4-1、SNI-多域名匹配不同证书"><a href="#4-1、SNI-多域名匹配不同证书" class="headerlink" title="4.1、SNI 多域名匹配不同证书"></a>4.1、SNI 多域名匹配不同证书</h4><p>这里就需要使用到<code>SNI</code>功能。如果编译<code>Nginx</code>开启了<code>http_ssl_module</code>模块，一般默认也是启用<code>SNI</code>功能的，可以通过<code>./nginx -V</code>命令查看。<br><img src="https://zhaoxiaobin.coding.net/p/blog/d/zhaoxiaobin_img/git/raw/master/post/loadbalance/nginx/nginx-4-9.jpg" alt="-w633"></p><p>Nginx配置多个<code>vhost</code></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 负载均衡配置</span></span><br><span class="line"><span class="attribute">upstream</span> backend &#123;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">192.168.0.1:10900</span>;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">192.168.0.2:10900</span>;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">192.168.0.3:10900</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 渠道A</span></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">21000</span> ssl;</span><br><span class="line">    <span class="attribute">server_name</span>  a.test.com;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">ssl_certificate</span>      ../ssl/server.crt;  <span class="comment"># server公钥证书</span></span><br><span class="line">    <span class="attribute">ssl_certificate_key</span>  ../ssl/server.key;  <span class="comment"># server私钥</span></span><br><span class="line">    <span class="attribute">ssl_client_certificate</span> ../clientcrt/clientA.crt;  <span class="comment"># client公钥证书</span></span><br><span class="line">    <span class="attribute">ssl_verify_client</span> <span class="literal">on</span>;  <span class="comment"># 开启客户端证书验证</span></span><br><span class="line"></span><br><span class="line">    <span class="attribute">ssl_session_cache</span>    shared:SSL:<span class="number">1m</span>;</span><br><span class="line">    <span class="attribute">ssl_session_timeout</span>  <span class="number">5m</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">ssl_ciphers</span>  HIGH:!aNULL:!MD5;</span><br><span class="line">    <span class="attribute">ssl_prefer_server_ciphers</span>  <span class="literal">on</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">access_log</span> logs/a_access.log;</span><br><span class="line">    <span class="attribute">error_log</span> logs/a_error.log;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="attribute">proxy_pass</span>    http://backend;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 渠道B</span></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">21000</span> ssl;</span><br><span class="line">    <span class="attribute">server_name</span>  b.test.com;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">ssl_certificate</span>      ../ssl/server.crt;  <span class="comment"># server公钥证书</span></span><br><span class="line">    <span class="attribute">ssl_certificate_key</span>  ../ssl/server.key;  <span class="comment"># server私钥</span></span><br><span class="line">    <span class="attribute">ssl_client_certificate</span> ../clientcrt/clientB.crt;  <span class="comment"># client公钥证书</span></span><br><span class="line">    <span class="attribute">ssl_verify_client</span> <span class="literal">on</span>;  <span class="comment"># 开启客户端证书验证</span></span><br><span class="line"></span><br><span class="line">    <span class="attribute">ssl_session_cache</span>    shared:SSL:<span class="number">1m</span>;</span><br><span class="line">    <span class="attribute">ssl_session_timeout</span>  <span class="number">5m</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">ssl_ciphers</span>  HIGH:!aNULL:!MD5;</span><br><span class="line">    <span class="attribute">ssl_prefer_server_ciphers</span>  <span class="literal">on</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">access_log</span> logs/b_access.log;</span><br><span class="line">    <span class="attribute">error_log</span> logs/b_error.log;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="attribute">proxy_pass</span>    http://backend;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置的<code>listen</code>端口是一样的，但每个<code>vhost</code>的<code>server_name</code>不同，这里其实是通过配置不同的<code>server_name</code>来匹配各个不同的客户端，需要客户端请求的<code>url</code>中的域名（Http请求头中的<code>Host</code>字段值）与配置的<code>server_name</code>一致。比如：</p><ul><li><a href="https://a.test.com/senddata">https://a.test.com/senddata</a> 客户端渠道A请求url</li><li><a href="https://b.test.com/senddata">https://b.test.com/senddata</a> 客户端渠道B请求url</li></ul><p>客户端的域名解析可以通过域名解析服务器或者可以在本地<code>hosts</code>文件中配置。</p><p><strong>需要注意的是：如果使用SNI功能，服务器签发公钥证书时，填写的域名信息<code>Common Name</code>需要是泛域名，比如<code>*.test.com</code>。这样客户端在验证服务器域名时才会通过</strong>。</p><p>另外，<code>Nginx</code>在同一个端口下匹配多个<code>vhost</code>时，如果找不到匹配的<code>server_name</code>，则会使用默认的<code>vhost</code>（默认第一个）来进行认证。为了防止隐式匹配带来的一些问题困扰，可以通过<code>default_server</code>显式地指定一个默认的<code>vhost</code>，一律返回401。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">21000</span> ssl default_server;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">ssl_certificate</span>      ../ssl/server.crt;  <span class="comment"># server公钥证书</span></span><br><span class="line">    <span class="attribute">ssl_certificate_key</span>  ../ssl/server.key;  <span class="comment"># server私钥</span></span><br><span class="line"></span><br><span class="line">    <span class="attribute">access_log</span> logs/default_access.log;</span><br><span class="line">    <span class="attribute">error_log</span> logs/default_error.log;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="attribute">return</span> <span class="number">401</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-2、CA根证书统一签发客户端证书"><a href="#4-2、CA根证书统一签发客户端证书" class="headerlink" title="4.2、CA根证书统一签发客户端证书"></a>4.2、CA根证书统一签发客户端证书</h4><p>先统一生成<code>CA</code>根证书，然后由根证书派生出服务端和各个客户端的证书。<br><img src="https://zhaoxiaobin.coding.net/p/blog/d/zhaoxiaobin_img/git/raw/master/post/loadbalance/nginx/nginx-4-10.jpg"><br>生成root根证书</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 创建根证书私钥</span></span><br><span class="line">openssl genrsa -out root.key 1024</span><br><span class="line"><span class="meta">#</span><span class="bash"> 创建根证书请求文件</span></span><br><span class="line">openssl req -new -key root.key -out root.csr</span><br><span class="line"><span class="meta">#</span><span class="bash"> 创建根证书</span></span><br><span class="line">openssl x509 -req -in root.csr -out root.crt -signkey root.key -CAcreateserial -days 3650</span><br></pre></td></tr></table></figure><p>生成服务端证书</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 生成服务器端证书私钥</span></span><br><span class="line">openssl genrsa -out server.key 1024</span><br><span class="line"><span class="meta">#</span><span class="bash"> 生成服务器证书请求文件</span></span><br><span class="line">openssl req -new -key server.key -out server.csr</span><br><span class="line"><span class="meta">#</span><span class="bash"> 生成服务器端公钥证书</span></span><br><span class="line">openssl x509 -req -in server.csr -out server.crt -signkey server.key -CA root.crt -CAkey root.key -CAcreateserial -days 3650</span><br></pre></td></tr></table></figure><p>生成客户端证书</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 生成客户端证书私钥</span></span><br><span class="line">openssl genrsa -out client.key 1024</span><br><span class="line"><span class="meta">#</span><span class="bash"> 生成客户端证书请求文件</span></span><br><span class="line">openssl req -new -key client.key -out client.csr</span><br><span class="line"><span class="meta">#</span><span class="bash"> 生成客户端证书</span></span><br><span class="line">openssl x509 -req -in client.csr -out client.crt -signkey client.key -CA root.crt -CAkey root.key -CAcreateserial -days 3650</span><br><span class="line"><span class="meta">#</span><span class="bash"> 生客户端p12格式证书，需要输入一个密码，选一个好记的，比如123456</span></span><br><span class="line">openssl pkcs12 -export -clcerts -in client.crt -inkey client.key -out client.p12</span><br></pre></td></tr></table></figure><p><strong>一定要注意的是，根证书的域名信息<code>Common Name</code>这个字段和客户端证书、服务器端证书不能一样</strong>。</p><p>然后在<code>Nginx</code>中<code>ssl_client_certificate</code>字段配置根证书的路径，这样就可以验证所有它颁发的客户端证书。不需要再为每个客户端渠道创建一个<code>server</code>配置块去认证。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 根证书统一认证</span></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">21000</span> ssl;</span><br><span class="line">    <span class="attribute">server_name</span>  localhost;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">ssl_certificate</span>      ../ssl/server.crt;  <span class="comment"># server公钥证书</span></span><br><span class="line">    <span class="attribute">ssl_certificate_key</span>  ../ssl/server.key;  <span class="comment"># server私钥</span></span><br><span class="line">    <span class="attribute">ssl_client_certificate</span> ../ssl/root.crt;  <span class="comment"># 根证书，可以验证所有它颁发的客户端证书</span></span><br><span class="line">    <span class="attribute">ssl_verify_client</span> <span class="literal">on</span>;  <span class="comment"># 开启客户端证书验证</span></span><br><span class="line"></span><br><span class="line">    <span class="attribute">ssl_session_cache</span>    shared:SSL:<span class="number">1m</span>;</span><br><span class="line">    <span class="attribute">ssl_session_timeout</span>  <span class="number">5m</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">ssl_ciphers</span>  HIGH:!aNULL:!MD5;</span><br><span class="line">    <span class="attribute">ssl_prefer_server_ciphers</span>  <span class="literal">on</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">access_log</span> logs/access.log;</span><br><span class="line">    <span class="attribute">error_log</span> logs/error.log;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="attribute">proxy_pass</span>    http://192.168.0.1:10900;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://www.cnblogs.com/dreamingodd/p/7491098.html">如何使用Java访问双向认证的Https资源</a></li><li><a href="https://www.jianshu.com/p/2b2d1f511959?utm_campaign=haruki">HTTPS双向认证指南</a></li><li><a href="http://blog.chinaunix.net/uid-631975-id-3313151.html">KeyTool 和 OpenSSL 相互转换</a></li></ul><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><h4 id="keytool相关命令"><a href="#keytool相关命令" class="headerlink" title="keytool相关命令"></a>keytool相关命令</h4><p><strong>keytool生成证书</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 生成服务端jks</span></span><br><span class="line">keytool -genkey -alias servertest -keysize 2048 -validity 3650 -keyalg RSA -dname &quot;CN=client.test.com, OU=R &amp; D department, O=\&quot;BJ SOS Software Tech Co., Ltd\&quot;, L=Beijing, S=Beijing, C=CN&quot; -keypass 123456 -storepass 123456 -keystore server.jks</span><br><span class="line"><span class="meta">#</span><span class="bash"> -storepass 指定密钥库的密码(获取keystore信息所需的密码) </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -keypass 指定别名条目的密码(私钥的密码) </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> keystore信息的查看</span></span><br><span class="line">keytool -list -v -keystore server.jks -storepass 123456</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 从jks中导出公钥证书</span></span><br><span class="line">keytool -export -alias servertest -keystore server.jks -storepass 123456 -file server.crt</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看导出的证书信息</span></span><br><span class="line">keytool -printcert -file server.crt</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 生成客户端jks</span></span><br><span class="line">keytool -genkey -alias clienttest -keysize 2048 -validity 3650 -keyalg RSA -dname &quot;CN=client.test.com, OU=R &amp; D department, O=\&quot;BJ SOS Software Tech Co., Ltd\&quot;, L=Beijing, S=Beijing, C=CN&quot; -keypass 123456 -storepass 123456 -keystore client.jks</span><br><span class="line"><span class="meta">#</span><span class="bash"> 将服务端公钥证书导入的客户端jks信任库中</span></span><br><span class="line">keytool -import -trustcacerts -alias servertest -file server.crt -storepass 123456 -keystore client.jks</span><br><span class="line"><span class="meta">#</span><span class="bash"> keystore信息的查看</span></span><br><span class="line">keytool -list -v -keystore client.jks -storepass 123456</span><br></pre></td></tr></table></figure><p><strong>openssl 2 keytool</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 生成私钥</span></span><br><span class="line">openssl genrsa -out client.key 1024</span><br><span class="line"><span class="meta">#</span><span class="bash"> 生成公钥证书</span></span><br><span class="line">openssl req -new -x509 -key client.key -out client.crt -days 3650</span><br><span class="line"><span class="meta">#</span><span class="bash"> 合成p12文件</span></span><br><span class="line">openssl pkcs12 -export -clcerts -in client.crt -inkey client.key -out client.p12 -passout pass:123456 -name clienttest</span><br><span class="line"><span class="meta">#</span><span class="bash"> p12文件转jks</span></span><br><span class="line">keytool -importkeystore -srcstoretype PKCS12 -srckeystore client.p12 -srcstorepass 123456 -srcalias clienttest -deststoretype JKS -destalias clienttest -deststorepass 123456 -destkeypass 123456 -destkeystore client.jks</span><br></pre></td></tr></table></figure><p><strong>keytool 2 openssl</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 生成jks</span></span><br><span class="line">keytool -genkey -alias clienttest -keysize 2048 -validity 3650 -keyalg RSA -dname &quot;CN=client.test.com, OU=R &amp; D department, O=\&quot;BJ SOS Software Tech Co., Ltd\&quot;, L=Beijing, S=Beijing, C=CN&quot; -keypass 123456 -storepass 123456 -keystore client.jks</span><br><span class="line"><span class="meta">#</span><span class="bash"> 从jks中导出公钥证书</span></span><br><span class="line">keytool -export -alias clienttest -keystore client.jks -storepass 123456 -file client.crt</span><br><span class="line"><span class="meta">#</span><span class="bash"> jks转p12文件</span></span><br><span class="line">keytool -importkeystore -srcstoretype JKS -srckeystore client.jks -srcstorepass 123456 -srcalias clienttest -srckeypass 123456 -deststoretype PKCS12 -destkeystore client.p12 -deststorepass 123456 -destalias clienttest -destkeypass 123456 -noprompt</span><br><span class="line"><span class="meta">#</span><span class="bash"> p12文件转pem格式</span></span><br><span class="line">openssl pkcs12 -in client.p12 -out client.pem.p12 -passin pass:123456 -passout pass:123456</span><br><span class="line"><span class="meta">#</span><span class="bash"> 从pem格式文件单独输出私钥</span></span><br><span class="line">openssl rsa -in client.pem.p12 -passin pass:123456 -out client.key -passout pass:123456</span><br></pre></td></tr></table></figure><p><br><br></p>]]></content>
      
      
      <categories>
          
          <category> 网络协议 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nginx </tag>
            
            <tag> Https </tag>
            
            <tag> openssl </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Https单向认证和双向认证</title>
      <link href="%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/loadbalance/nginx/Https%E5%8D%95%E5%90%91%E8%AE%A4%E8%AF%81%E5%92%8C%E5%8F%8C%E5%90%91%E8%AE%A4%E8%AF%81/"/>
      <url>%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/loadbalance/nginx/Https%E5%8D%95%E5%90%91%E8%AE%A4%E8%AF%81%E5%92%8C%E5%8F%8C%E5%90%91%E8%AE%A4%E8%AF%81/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h4 id="HTTPS介绍"><a href="#HTTPS介绍" class="headerlink" title="HTTPS介绍"></a>HTTPS介绍</h4><p><code>HTTPS</code>是一种通过计算机网络进行安全通信的传输协议，经由<code>HTTP</code>进行通信，利用<code>SSL/TLS</code>建立安全信道，加密数据包。<code>HTTPS</code>使用的主要目的是提供对网站服务器的身份认证，同时保护交换数据的安全性与完整性。</p><h4 id="SSL-TLS介绍"><a href="#SSL-TLS介绍" class="headerlink" title="SSL/TLS介绍"></a>SSL/TLS介绍</h4><p><code>TLS</code>在传输层对网络连接进行加密，前身是<code>SSL</code>协议，由网景公司1995年发布，用以保障数据在<code>Internet</code>上安全地进行传输，利用数据加密（Encryption）技术，确保数据在网络传输过程中不会被截取或窃听。</p><p>数据加密用到了<strong>对称加密</strong>和<strong>非对称加密</strong>，<code>TCP</code>协议建立传输连接时，<code>SSL</code>首先对<strong>对称加密的密钥</strong>使用<strong>非对称加密的公钥</strong>进行非对称加密，连接建立好之后，<code>SSL</code>对传输内容使用对称加密。</p><p><strong>对称加密</strong>，速度高，可加密内容较大，用来加密会话过程中的消息。</p><p><strong>非对称加密</strong>，加密速度较慢，但能提供更好的身份认证技术，用来加密对称加密的密钥。</p><h2 id="1、单向认证"><a href="#1、单向认证" class="headerlink" title="1、单向认证"></a>1、单向认证</h2><p>单向认证主要是客户端认证服务端，<code>Https</code>在建立<code>Socket</code>连接之前，需要进行握手，具体过程如下：<br><img src="https://zhaoxiaobin.coding.net/p/blog/d/zhaoxiaobin_img/git/raw/master/post/loadbalance/nginx/nginx-3-1.jpg"></p><ol><li>客户端向服务端发送SSL协议版本号、加密算法种类、随机数等信息。</li><li>服务端给客户端返回SSL协议版本号、加密算法种类、随机数等信息，同时也返回服务端的证书，即公钥证书。</li><li>客户端使用服务端返回的信息验证服务器的合法性，包括：<ul><li>证书是否过期。</li><li>发行服务器证书的CA是否可靠。</li><li>返回的公钥是否能正确解开返回证书中的数字签名。</li><li>服务器证书上的域名是否和服务器的实际域名相匹配。<br>验证通过后，将继续进行通信，否则，终止通信。</li></ul></li><li>客户端向服务端发送自己所能支持的对称加密方案，供服务端进行选择。</li><li>服务端在客户端提供的加密方案中选择加密程度最高的加密方式。</li><li>服务器将选择好的加密方案通过明文方式返回给客户端。</li><li>客户端接收到服务端返回的加密方式后，使用该加密方式生成产生随机码，用作通信过程中对称加密的密钥，使用服务端返回的公钥进行加密，将加密后的随机码发送至服务器。</li><li>服务器收到客户端返回的加密信息后，使用自己的私钥进行解密，获取对称加密密钥。 </li></ol><p>在接下来的会话中，服务器和客户端将会使用该密码进行对称加密，保证通信过程中信息的安全。</p><h2 id="2、双向认证"><a href="#2、双向认证" class="headerlink" title="2、双向认证"></a>2、双向认证</h2><p>双向认证和单向认证原理基本差不多，只是除了客户端需要认证服务端以外，增加了服务端对客户端的认证，具体过程如下：<br><img src="https://zhaoxiaobin.coding.net/p/blog/d/zhaoxiaobin_img/git/raw/master/post/loadbalance/nginx/nginx-3-2.jpg"></p><ol><li>客户端向服务端发送SSL协议版本号、加密算法种类、随机数等信息。</li><li>服务端给客户端返回SSL协议版本号、加密算法种类、随机数等信息，同时也返回服务端的证书，即公钥证书。</li><li>客户端使用服务端返回的信息验证服务器的合法性，包括：<ul><li>证书是否过期。</li><li>发行服务器证书的CA是否可靠。</li><li>返回的公钥是否能正确解开返回证书中的数字签名。</li><li>服务器证书上的域名是否和服务器的实际域名相匹配。<br>验证通过后，将继续进行通信，否则，终止通信。</li></ul></li><li><strong>服务端要求客户端发送客户端的证书，客户端会将自己的证书发送至服务端</strong>。</li><li><strong>验证客户端的证书，通过验证后，会获得客户端的公钥</strong>。</li><li>客户端向服务端发送自己所能支持的对称加密方案，供服务端进行选择。</li><li>服务端在客户端提供的加密方案中选择加密程度最高的加密方式。</li><li>服务端将加密方案通过<strong>使用之前获取到客户端公钥进行加密</strong>，返回给客户端。</li><li>客户端收到服务端返回的加密方案密文后，使用自己的私钥进行解密，获取具体加密方式，而后，产生该加密方式的随机码，用作加密过程中的密钥，使用之前从服务端证书中获取到的公钥进行加密后，发送给服务端。</li><li>服务端收到客户端发送的消息后，使用自己的私钥进行解密，获取对称加密的密钥。</li></ol><p>在接下来的会话中，服务器和客户端将会使用该密码进行对称加密，保证通信过程中信息的安全。</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://blog.csdn.net/duanbokan/article/details/50847612">Https单向认证和双向认证</a><br><br><br></li></ul>]]></content>
      
      
      <categories>
          
          <category> 网络协议 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Https </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx四层负载均衡配置 代理tcp协议</title>
      <link href="%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/loadbalance/nginx/Nginx%E5%9B%9B%E5%B1%82%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E9%85%8D%E7%BD%AE%20%E4%BB%A3%E7%90%86tcp%E5%8D%8F%E8%AE%AE/"/>
      <url>%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/loadbalance/nginx/Nginx%E5%9B%9B%E5%B1%82%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E9%85%8D%E7%BD%AE%20%E4%BB%A3%E7%90%86tcp%E5%8D%8F%E8%AE%AE/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p><code>Nginx</code>对<code>tcp</code>协议的代理是通过<code>ngx_stream_core_module</code>这个模块实现的，此模块要<code>1.9.0</code>版本后才有，而且默认是不启用的。安装时应使用配置参数<code>--with-stream</code>启用。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">./configure  --prefix=/usr/local/nginx --with-stream</span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure><p>然后通过<code>./nginx -V</code>查看有没有<code>--with-stream</code>参数。</p><h2 id="1、tcp负载均衡配置"><a href="#1、tcp负载均衡配置" class="headerlink" title="1、tcp负载均衡配置"></a>1、tcp负载均衡配置</h2><p>修改<code>nginx/conf/nginx.conf</code>文件，新增<code>stream &#123;...&#125;</code>配置块，和<code>http&#123;...&#125;</code>配置块是同级关系。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># tcp接入</span></span><br><span class="line"><span class="section">stream</span> &#123;</span><br><span class="line">    <span class="attribute">upstream</span> socketServer&#123;</span><br><span class="line">        <span class="attribute">server</span> <span class="number">172.16.122.104:21221</span>;</span><br><span class="line">        <span class="attribute">server</span> <span class="number">172.16.122.105:21221</span>;</span><br><span class="line">        <span class="attribute">server</span> <span class="number">172.16.122.106:21221</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># tcp全局日志配置</span></span><br><span class="line">    <span class="attribute">log_format</span> proxy <span class="string">&#x27;<span class="variable">$remote_addr</span> [<span class="variable">$time_local</span>] &#x27;</span></span><br><span class="line">                 <span class="string">&#x27;<span class="variable">$protocol</span> <span class="variable">$status</span> <span class="variable">$bytes_sent</span> <span class="variable">$bytes_received</span> &#x27;</span></span><br><span class="line">                 <span class="string">&#x27;<span class="variable">$session_time</span> &quot;<span class="variable">$upstream_addr</span>&quot; &#x27;</span></span><br><span class="line">                 <span class="string">&#x27;&quot;<span class="variable">$upstream_bytes_sent</span>&quot; &quot;<span class="variable">$upstream_bytes_received</span>&quot; &quot;<span class="variable">$upstream_connect_time</span>&quot;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="section">server</span> &#123;</span><br><span class="line">        <span class="attribute">listen</span> <span class="number">21220</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 日志路径配置</span></span><br><span class="line">        <span class="attribute">access_log</span> /usr/local/nginx/logs/tcp_access.log proxy;</span><br><span class="line">        <span class="attribute">error_log</span> /usr/local/nginx/logs/tcp_error.log;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">proxy_connect_timeout</span> <span class="number">5s</span>; <span class="comment"># 后台服务器连接超时时间</span></span><br><span class="line">        <span class="attribute">proxy_timeout</span> <span class="number">30s</span>; <span class="comment"># 转发后台服务超时时间</span></span><br><span class="line">        <span class="attribute">proxy_pass</span> socketServer;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Nginx</code>本地监听<code>21220</code>端口，然后转发到<code>upstream</code>中配置的后台服务器地址，默认是轮询策略。</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://www.cnblogs.com/knowledgesea/p/6497783.html">Nginx支持Socket转发过程详解</a></li><li><a href="https://blog.csdn.net/ffzhihua/article/details/80981900">nginx 1.12 stream 日志设置</a><br><br><br></li></ul>]]></content>
      
      
      <categories>
          
          <category> 网络协议 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS7 Nginx的安装与http负载均衡配置</title>
      <link href="%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/loadbalance/nginx/CentOS7%20Nginx%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8Ehttp%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E9%85%8D%E7%BD%AE/"/>
      <url>%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/loadbalance/nginx/CentOS7%20Nginx%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8Ehttp%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>安装环境：4台Linux机，系统为CentOS 7.7。<br>Nginx版本：1.12.0</p><table><thead><tr><th align="center">ip</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">172.16.122.101</td><td align="center">部署Nginx，代理真实服务器1、2、3</td></tr><tr><td align="center">172.16.122.104</td><td align="center">真实服务器1，已经部署应用，并对外暴露http端口10900</td></tr><tr><td align="center">172.16.122.105</td><td align="center">真实服务器2，已经部署应用，并对外暴露http端口10900</td></tr><tr><td align="center">172.16.122.106</td><td align="center">真实服务器3，已经部署应用，并对外暴露http端口10900</td></tr></tbody></table><h2 id="1、依赖安装"><a href="#1、依赖安装" class="headerlink" title="1、依赖安装"></a>1、依赖安装</h2><h4 id="1-1、gcc-安装"><a href="#1-1、gcc-安装" class="headerlink" title="1.1、gcc 安装"></a>1.1、gcc 安装</h4><p>安装<code>Nginx</code>需要先将官网下载的源码进行编译，编译依赖<code>gcc</code>环境，如果没有<code>gcc</code>环境，则需要安装：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install gcc-c++</span><br></pre></td></tr></table></figure><h4 id="1-2、PCRE-pcre-devel-安装"><a href="#1-2、PCRE-pcre-devel-安装" class="headerlink" title="1.2、PCRE pcre-devel 安装"></a>1.2、PCRE pcre-devel 安装</h4><p><code>PCRE(Perl Compatible Regular Expressions) </code>是一个<code>Perl</code>库，包括<code>perl</code>兼容的正则表达式库。<code>Nginx</code>的http模块使用<code>pcre</code>来解析正则表达式，所以需要在<code>linux</code>上安装 <code>pcre</code>库，<code>pcre-devel</code>是使用<code>pcre</code>开发的一个二次开发库。<code>Nginx</code>也需要此库。命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y pcre pcre-devel</span><br></pre></td></tr></table></figure><h4 id="1-3、zlib-安装"><a href="#1-3、zlib-安装" class="headerlink" title="1.3、zlib 安装"></a>1.3、zlib 安装</h4><p><code>zlib</code>库提供了很多种压缩和解压缩的方式，<code>Nginx</code>使用<code>zlib</code>对<code>http</code>包的内容进行<code>gzip</code>，所以需要在<code>Centos</code>上安装<code>zlib</code>库。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y zlib zlib-devel</span><br></pre></td></tr></table></figure><h4 id="1-4、OpenSSL-安装"><a href="#1-4、OpenSSL-安装" class="headerlink" title="1.4、OpenSSL 安装"></a>1.4、OpenSSL 安装</h4><p><code>OpenSSL</code>是一个强大的安全套接字层密码库，囊括主要的密码算法、常用的密钥和证书封装管理功能及<code>SSL</code>协议，并提供丰富的应用程序供测试或其它目的使用。<br><code>Nginx</code>不仅支持<code>http</code>协议，还支持<code>https</code>（即在ssl协议上传输http），所以需要在<code>Centos</code>安装<code>OpenSSL</code>库。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y openssl openssl-devel</span><br></pre></td></tr></table></figure><h2 id="2、下载安装Nginx"><a href="#2、下载安装Nginx" class="headerlink" title="2、下载安装Nginx"></a>2、下载安装Nginx</h2><h4 id="2-1、下载"><a href="#2-1、下载" class="headerlink" title="2.1、下载"></a>2.1、下载</h4><p>下载地址：<a href="http://nginx.org/download/">http://nginx.org/download/</a><br>选择一个版本进行下载，这里我用的是<code>nginx-1.12.0.zip </code>版本。</p><h4 id="2-2、安装"><a href="#2-2、安装" class="headerlink" title="2.2、安装"></a>2.2、安装</h4><p>将下载的安装包上传至服务器。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tar -xvf nginx-1.12.0.tar.gz</span><br><span class="line">cd nginx-1.12.0</span><br></pre></td></tr></table></figure><p><strong>编译</strong>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">./configure --prefix=/usr/local/nginx</span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure><ul><li>prefix：指定安装路径，默认就是<code>/usr/local/nginx</code>。</li></ul><p><strong>查看验证</strong>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/nginx/sbin/</span><br><span class="line">./nginx -V</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@zxb01 sbin]# ./nginx -V</span><br><span class="line">nginx version: nginx/<span class="number">1.12</span><span class="number">.0</span></span><br><span class="line">built by gcc <span class="number">4.8</span><span class="number">.5</span> <span class="number">20150623</span> (Red Hat <span class="number">4.8</span><span class="number">.5</span><span class="number">-39</span>) (GCC) </span><br><span class="line">built with OpenSSL <span class="number">1.0</span><span class="number">.2</span>k-fips  <span class="number">26</span> Jan <span class="number">2017</span></span><br><span class="line">TLS SNI support enabled</span><br><span class="line">configure arguments: --prefix=/usr/local/nginx</span><br></pre></td></tr></table></figure><p>至此，<code>Nginx</code>安装已经完成。</p><h2 id="3、Nginx的启停"><a href="#3、Nginx的启停" class="headerlink" title="3、Nginx的启停"></a>3、Nginx的启停</h2><h4 id="3-1、启动"><a href="#3-1、启动" class="headerlink" title="3.1、启动"></a>3.1、启动</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./nginx</span><br></pre></td></tr></table></figure><p>浏览器访问<code>http://172.16.122.101/</code>，可以看到如下页面。<br><img src="https://zhaoxiaobin.coding.net/p/blog/d/zhaoxiaobin_img/git/raw/master/post/loadbalance/nginx/nginx-1-1.jpg" alt="-w647"></p><h4 id="3-2、停止"><a href="#3-2、停止" class="headerlink" title="3.2、停止"></a>3.2、停止</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">./nginx -s quit # 待nginx进程处理任务完毕进行停止</span><br><span class="line">./nginx -s stop # 先查出nginx进程id再使用kill命令强制杀掉进程</span><br></pre></td></tr></table></figure><h4 id="3-3、重载"><a href="#3-3、重载" class="headerlink" title="3.3、重载"></a>3.3、重载</h4><p>当<code>Nginx</code>的配置文件<code>nginx.conf</code>修改后，要想让配置生效需要重启<code>Nginx</code>，使用<code>-s reload</code>不用先停止<code>Nginx</code>再启动<code>Nginx</code>即可将配置信息在<code>Nginx</code>中生效，如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./nginx -s reload</span><br></pre></td></tr></table></figure><h4 id="3-4、其它命令"><a href="#3-4、其它命令" class="headerlink" title="3.4、其它命令"></a>3.4、其它命令</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./nginx -h</span><br></pre></td></tr></table></figure><p><img src="https://zhaoxiaobin.coding.net/p/blog/d/zhaoxiaobin_img/git/raw/master/post/loadbalance/nginx/nginx-1-2.jpg" alt="-w768"></p><h2 id="4、http负载均衡"><a href="#4、http负载均衡" class="headerlink" title="4、http负载均衡"></a>4、http负载均衡</h2><h4 id="4-1、新增配置"><a href="#4-1、新增配置" class="headerlink" title="4.1、新增配置"></a>4.1、新增配置</h4><p>修改<code>nginx/conf/nginx.conf</code>文件，在<code>http&#123;...&#125;</code>配置块中新增配置：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">upstream</span> backend &#123;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">172.16.122.104:10900</span>;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">172.16.122.105:10900</span>;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">172.16.122.106:10900</span>;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line"><span class="attribute">listen</span>*:<span class="number">11000</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 日志单独输出配置，默认输出到logs/access.log、logs/error.log</span></span><br><span class="line"><span class="attribute">access_log</span> /usr/local/nginx/logs/test_access.log;</span><br><span class="line"><span class="attribute">error_log</span> /usr/local/nginx/logs/test_error.log;</span><br><span class="line"></span><br><span class="line"><span class="attribute">location</span> / &#123;</span><br><span class="line"><span class="attribute">proxy_pass</span>http://backend;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Nginx</code>本地监听<code>11000</code>端口，然后转发到<code>upstream</code>中配置的后台服务器地址，默认是轮询策略。</p><p>当然这是最简单的配置，这里<code>location</code>定义的准入<code>url</code>规则是所有都接入，也可以缩小准入的<code>url</code>范围，比如定义<code>location /api &#123;...&#125;</code>，就只能接入<code>url</code>后缀是<code>/api</code>开头的请求；<code>Nginx</code>的<code>url</code>匹配和转发规则非常灵活，可以做到改写要转发的<code>url</code>路径，还可以使用正则表达式。</p><p><code>upstream</code>的配置这里使用了默认的策略，如果需要自定义做一些配置可以参考后面的章节内容。</p><h4 id="4-2、负载均衡效果测试"><a href="#4-2、负载均衡效果测试" class="headerlink" title="4.2、负载均衡效果测试"></a>4.2、负载均衡效果测试</h4><p>用<code>postman</code>调用<code>http://172.16.122.101:11000/xxx</code>，<code>Nginx</code>会将请求转发到对应的后端真实服务器<code>http://172.16.122.104~6:10900/xxx</code>，多次调用可以看到是轮询的效果。</p><h2 id="5、upstream配置参数"><a href="#5、upstream配置参数" class="headerlink" title="5、upstream配置参数"></a>5、upstream配置参数</h2><h4 id="5-1、主要参数"><a href="#5-1、主要参数" class="headerlink" title="5.1、主要参数"></a>5.1、主要参数</h4><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">upstream</span> backend&#123;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">127.0.0.1:9001</span> weight=<span class="number">1</span>;</span><br><span class="line">    <span class="comment"># 代表在10秒内请求某一应用失败2次，认为该应用宕机，后等待10秒，这期间内不会再把新请求发送到宕机应用，而是直接发到正常的那一台。</span></span><br><span class="line">    <span class="comment"># 时间到后再有请求进来继续尝试连接宕机应用且仅尝试1次，如果还是失败，则继续等待10秒...以此循环，直到恢复。</span></span><br><span class="line">    <span class="attribute">server</span> <span class="number">127.0.0.1:9002</span> weight=<span class="number">4</span> max_conns=<span class="number">800</span> max_fails=<span class="number">2</span> fail_timeout=<span class="number">10</span>;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">127.0.0.1:9003</span> backup; <span class="comment"># 其它所有的非backup机器down或者忙的时候，请求backup机器。所以这台机器压力会最轻。</span></span><br><span class="line">    <span class="attribute">server</span> <span class="number">127.0.0.1:9004</span> down; <span class="comment"># 表示当前的server暂时不参与负载。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>weight：服务器权重，默认为1。</li><li>max_conns：最大连接数，针对单台服务器。（Nginx版本<code>1.11.5</code>以上）</li><li>max_fails：允许请求失败的次数，默认为1，当超过最大次数时，认为这台服务器不可用。</li><li>fail_timeout：<code>max_fails</code>次失败后，暂停的时间，默认为10s。</li><li>backup：其它所有的非<code>backup</code>机器<code>down</code>或者忙的时候，请求<code>backup</code>机器。所以这台机器压力会最轻。</li><li>down：表示当前的server暂时不参与负载。</li></ul><h4 id="5-2、几种负载均衡策略"><a href="#5-2、几种负载均衡策略" class="headerlink" title="5.2、几种负载均衡策略"></a>5.2、几种负载均衡策略</h4><h5 id="5-2-1、轮询（默认方式）"><a href="#5-2-1、轮询（默认方式）" class="headerlink" title="5.2.1、轮询（默认方式）"></a>5.2.1、轮询（默认方式）</h5><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">upstream</span> backend &#123;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">172.16.122.104:10900</span>;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">172.16.122.105:10900</span>;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">172.16.122.106:10900</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>在轮询中，如果服务器<code>down</code>掉了，会自动剔除该服务器。</li><li>此策略适合服务器配置相当，无状态且短平快的服务使用。</li></ul><h5 id="5-2-2、权重"><a href="#5-2-2、权重" class="headerlink" title="5.2.2、权重"></a>5.2.2、权重</h5><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">upstream</span> backend &#123;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">172.16.122.104:10900</span> weight=<span class="number">1</span>;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">172.16.122.105:10900</span> weight=<span class="number">2</span>;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">172.16.122.106:10900</span> weight=<span class="number">3</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>权重越高分配到需要处理的请求越多。</li><li>此策略可以与<code>least_conn</code>和<code>ip_hash</code>结合使用。</li><li>此策略比较适合服务器的硬件配置差别比较大的情况。</li></ul><h5 id="5-2-3、ip-hash"><a href="#5-2-3、ip-hash" class="headerlink" title="5.2.3、ip_hash"></a>5.2.3、ip_hash</h5><p>每个请求按访问IP的hash结果分配，这样来自同一个IP的访客固定访问一个后端服务器，有效解决了动态网页存在的<code>session</code>共享问题。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">upstream</span> backend &#123;</span><br><span class="line">    ip_hash; # 保证每个访客固定访问一个后端服务器</span><br><span class="line">    <span class="attribute">server</span> <span class="number">172.16.122.104:10900</span> weight=<span class="number">1</span>;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">172.16.122.105:10900</span> weight=<span class="number">2</span>;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">172.16.122.106:10900</span> weight=<span class="number">3</span> max_fails=<span class="number">2</span> fail_timeout=<span class="number">10</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>在<code>Nginx</code>版本<code>1.3.1</code>之前，不能在<code>ip_hash</code>中使用权重（<code>weight</code>）。</li><li><code>ip_hash</code>不能与<code>backup</code>同时使用。</li><li>此策略适合有状态服务，比如<code>session</code>。</li><li>当有服务器需要剔除，必须手动<code>down</code>掉。</li></ul><h5 id="5-2-4、least-conn"><a href="#5-2-4、least-conn" class="headerlink" title="5.2.4、least_conn"></a>5.2.4、least_conn</h5><p>把请求转发给连接数较少的后端服务器。轮询算法是把请求平均的转发给各个后端，使它们的负载大致相同；但是，有些请求占用的时间很长，会导致其所在的后端负载较高。这种情况下，<code>least_conn</code>这种方式就可以达到更好的负载均衡效果。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">upstream</span> backend &#123;</span><br><span class="line">    least_conn; # 把请求转发给连接数较少的后端服务器</span><br><span class="line">    <span class="attribute">server</span> <span class="number">172.16.122.104:10900</span> weight=<span class="number">1</span>;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">172.16.122.105:10900</span> weight=<span class="number">2</span> max_fails=<span class="number">2</span> fail_timeout=<span class="number">10</span>;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">172.16.122.106:10900</span> backup;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="5-2-5、fair（需安装第三方插件）"><a href="#5-2-5、fair（需安装第三方插件）" class="headerlink" title="5.2.5、fair（需安装第三方插件）"></a>5.2.5、fair（需安装第三方插件）</h5><p>这是比上面两个更加智能的负载均衡算法。此种算法可以依据页面大小和加载时间长短智能地进行负载均衡，也就是根据后端服务器的响应时间来分配请求，响应时间短的优先分配。<code>Nginx</code>本身是不支持<code>fair</code>的，如果需要使用这种调度算法，必须下载<code>Nginx</code>的<code>upstream_fair</code>模块。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">upstream</span> backend &#123;</span><br><span class="line">    fair; # 实现响应时间短的优先分配</span><br><span class="line">    <span class="attribute">server</span> <span class="number">172.16.122.104:10900</span>;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">172.16.122.105:10900</span>;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">172.16.122.106:10900</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="5-2-6、url-hash（需安装第三方插件）"><a href="#5-2-6、url-hash（需安装第三方插件）" class="headerlink" title="5.2.6、url_hash（需安装第三方插件）"></a>5.2.6、url_hash（需安装第三方插件）</h5><p>按访问<code>url</code>的<code>hash</code>结果来分配请求，使每个<code>url</code>定向到同一个后端服务器，要配合缓存命中来使用。同一个资源多次请求，可能会到达不同的服务器上，导致不必要的多次下载，缓存命中率不高，以及一些资源时间的浪费。而使用<code>url_hash</code>，可以使得同一个<code>url</code>（也就是同一个资源请求）会到达同一台服务器，一旦缓存住了资源，再次收到请求，就可以从缓存中读取。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">upstream</span> backend &#123;</span><br><span class="line">    <span class="attribute">hash</span> <span class="variable">$request_uri</span>; <span class="comment"># 实现每个url定向到同一个后端服务器</span></span><br><span class="line">    <span class="attribute">hash_method</span> crc32; <span class="comment"># 指定hash算法为crc32</span></span><br><span class="line">    <span class="attribute">server</span> <span class="number">172.16.122.104:10900</span>;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">172.16.122.105:10900</span>;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">172.16.122.106:10900</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://www.cnblogs.com/liujuncm5/p/6713784.html">CentOS 7 下安装 Nginx</a></li><li><a href="https://www.jianshu.com/p/dd5be63c7d14">史上最全的Nginx配置参数中文说明</a></li><li><a href="https://www.nginx.cn/doc/index.html">Nginx中文文档</a></li><li><a href="https://www.cnblogs.com/1214804270hacker/p/9325150.html">Nginx服务器之负载均衡策略（6种）</a><br><br><br></li></ul>]]></content>
      
      
      <categories>
          
          <category> 网络协议 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Haproxy+Keepalived实现高可用的负载均衡</title>
      <link href="%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/loadbalance/haproxy/%E4%BD%BF%E7%94%A8Haproxy+Keepalived%E5%AE%9E%E7%8E%B0%E9%AB%98%E5%8F%AF%E7%94%A8%E7%9A%84%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/"/>
      <url>%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/loadbalance/haproxy/%E4%BD%BF%E7%94%A8Haproxy+Keepalived%E5%AE%9E%E7%8E%B0%E9%AB%98%E5%8F%AF%E7%94%A8%E7%9A%84%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>尽管<code>HAProxy</code>非常稳定，但仍然无法规避操作系统故障、主机硬件故障、网络故障甚至断电带来的风险。所以必须对<code>HAProxy</code>实施高可用方案。</p><p><code>Keekpalived</code>工作原理：通过<code>vrrp</code>协议（虚拟路由冗余协议）实现。</p><p>下文将介绍利用<code>Keepalived</code>实现<code>HAProxy</code>的热备方案。即三台主机上的三个<code>HAProxy</code>实例同时在线，其中权重较高的实例为<code>MASTER</code>，<code>MASTER</code>出现问题时，另外两台备份的会选出一台自动接管所有流量。</p><h2 id="1、安装说明"><a href="#1、安装说明" class="headerlink" title="1、安装说明"></a>1、安装说明</h2><p>安装环境：6台Linux机，系统为CentOS 7.7，不完全适用于云服务器（会有些问题，比如不支持虚拟ip对外访问需要提交申请）。<br>Haproxy版本：1.8.25<br>Keepalived版本：1.4.5</p><table><thead><tr><th align="center">ip</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">172.16.122.100</td><td align="center">Keepalived虚拟出来的ip</td></tr><tr><td align="center">172.16.122.101</td><td align="center">部署Haproxy实例1，代理真实服务器1、2、3，主机</td></tr><tr><td align="center">172.16.122.102</td><td align="center">部署Haproxy实例2，代理真实服务器1、2、3，备用机1</td></tr><tr><td align="center">172.16.122.103</td><td align="center">部署Haproxy实例3，代理真实服务器1、2、3，备用机2</td></tr><tr><td align="center">172.16.122.104</td><td align="center">真实服务器1，已经部署应用，并对外暴露http端口10900</td></tr><tr><td align="center">172.16.122.105</td><td align="center">真实服务器2，已经部署应用，并对外暴露http端口10900</td></tr><tr><td align="center">172.16.122.106</td><td align="center">真实服务器3，已经部署应用，并对外暴露http端口10900</td></tr></tbody></table><p><code>Haproxy</code>的安装与配置可以参考下面的链接。<br><a href="https://zhaoxiaobin.net/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/loadbalance/haproxy/Haproxy%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/">Haproxy的安装与配置</a></p><p>本文主要介绍<code>Keepalived</code>的安装和使用，对于<code>Keepalived</code>的安装是采用离线安装包的方式，其手动编译过程一般不会太顺利，依赖也比较多，对环境要求比较高。而且<code>Keepalived</code>不同版本之间的依赖还有差异。本人亲自实践，如果是CentOS 7.x系统，<code>Keepalived</code>版本是1.x系列，那基本问题不大，安装方式大同小异，可以参考本文。</p><h2 id="2、安装Keepalived"><a href="#2、安装Keepalived" class="headerlink" title="2、安装Keepalived"></a>2、安装Keepalived</h2><h4 id="2-1、下载"><a href="#2-1、下载" class="headerlink" title="2.1、下载"></a>2.1、下载</h4><p>下载地址：<a href="https://www.keepalived.org/download.html">https://www.keepalived.org/download.html</a><br>选择一个版本进行下载，这里我用的是<code>keepalived-1.4.5</code>版本。</p><h4 id="2-2、安装"><a href="#2-2、安装" class="headerlink" title="2.2、安装"></a>2.2、安装</h4><p>将下载的安装包上传至服务器，直接使用<code>root</code>用户进行安装。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tar -xvf keepalived-1.4.5.tar.gz</span><br><span class="line">cd keepalived-1.4.5</span><br><span class="line">./configure --prefix=/usr/local/keepalived</span><br></pre></td></tr></table></figure><p>可能会出现以下几种情况的报错：</p><blockquote><p>configure: error:<br>  !!! OpenSSL is not properly installed on your system. !!!<br>  !!! Can not include OpenSSL headers files.            !!!</p></blockquote><p>执行<code>yum -y install openssl-devel</code>解决。</p><hr><blockquote><p>*** WARNING - this build will not support IPVS with IPv6. Please install libnl/libnl-3 dev libraries to support IPv6 with IPVS.</p></blockquote><p>执行<code>yum -y install libnl libnl-devel</code>解决。</p><hr><blockquote><p>configure: error: libnfnetlink headers missing</p></blockquote><p>执行<code>yum install -y libnfnetlink-devel</code>解决。</p><p>再次执行<code>./configure --prefix=/usr/local/keepalived</code>，直到check全部通过。</p><p><strong>最后进行编译</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure><p>编译完成后，在路径<code>/usr/local/</code>下可以看到已经安装好<code>keepalived</code>了。</p><h4 id="2-3、注册为系统服务"><a href="#2-3、注册为系统服务" class="headerlink" title="2.3、注册为系统服务"></a>2.3、注册为系统服务</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">cp /usr/local/keepalived/sbin/keepalived /usr/sbin/</span><br><span class="line"><span class="meta">#</span><span class="bash"> 以下拷贝的原路径要替换成实际安装包解压后的路径</span></span><br><span class="line">cp /root/keepalived-1.4.5/keepalived/etc/sysconfig/keepalived /etc/sysconfig/</span><br><span class="line">cp /root/keepalived-1.4.5/keepalived/etc/init.d/keepalived /etc/init.d/</span><br><span class="line"><span class="meta">#</span><span class="bash"> 赋予可执行权限</span></span><br><span class="line">chmod +x /etc/init.d/keepalived</span><br><span class="line"><span class="meta">#</span><span class="bash"> 重启系统服务</span></span><br><span class="line">systemctl daemon-reload</span><br></pre></td></tr></table></figure><p>注册为系统服务后可以很方便地启停<code>Keepalived</code>。<br>比如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 启动|停止|重启|状态查看</span></span><br><span class="line">service keepalived start|stop|restart|status</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 启动|停止|重启|状态查看</span></span><br><span class="line">systemctl start|stop|restart|status keepalived</span><br></pre></td></tr></table></figure><p>开机自动运行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl enable keepalived</span><br></pre></td></tr></table></figure><p>关闭开机自动运行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl disable keepalived</span><br></pre></td></tr></table></figure><p>至此，主机安装已经完成，另外两台备用机也是一样的步骤进行安装；接下来就是配置了。</p><h2 id="3、配置Keepalived"><a href="#3、配置Keepalived" class="headerlink" title="3、配置Keepalived"></a>3、配置Keepalived</h2><p>这里只贴出<code>keepaliaved</code>抢占式配置，非抢占式没有主备之分，全部都为<code>BACKUP</code>，并且配置文件中添加<code>nopreempt</code>，用来标识为非抢占式。</p><h4 id="3-1、创建配置文件"><a href="#3-1、创建配置文件" class="headerlink" title="3.1、创建配置文件"></a>3.1、创建配置文件</h4><p><code>Keepalived</code>默认读取配置的路径为<code>/etc/keepalived/keepalived.conf</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir /etc/keepalived/</span><br><span class="line">vi /etc/keepalived/keepalived.conf</span><br></pre></td></tr></table></figure><h4 id="3-2、添加配置内容"><a href="#3-2、添加配置内容" class="headerlink" title="3.2、添加配置内容"></a>3.2、添加配置内容</h4><p><strong>主机配置</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">global_defs &#123;</span><br><span class="line">    router_id haproxy1                  # 虚拟路由名称</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># HAProxy健康检查配置</span><br><span class="line">vrrp_script chk_haproxy &#123;</span><br><span class="line">    script <span class="string">&quot;killall -0 haproxy&quot;</span>         # 使用killall <span class="number">-0</span>检查haproxy实例是否存在，性能高于ps命令</span><br><span class="line">    interval <span class="number">2</span>                          # 脚本运行周期，秒</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 虚拟路由配置</span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    state MASTER                        # 本机实例状态，MASTER/BACKUP，备机配置文件中请写BACKUP</span><br><span class="line">    interface ens33                     # 本机网卡名称，使用ifconfig命令查看</span><br><span class="line">    virtual_router_id <span class="number">51</span>                # 虚拟路由编号，主备机保持一致</span><br><span class="line">    priority <span class="number">101</span>                        # 本机初始权重，备机请填写小于主机的值（例如<span class="number">99</span>）</span><br><span class="line">    advert_int <span class="number">1</span>                        # 争抢虚地址的周期，秒</span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass <span class="number">4</span>gjfethTonUY7kXU      # 认证类型和密码主备一样，要不然无法互相认证</span><br><span class="line">    &#125;</span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        <span class="number">172.16</span><span class="number">.122</span><span class="number">.100</span>                  # 虚地址IP，主备机保持一致</span><br><span class="line">    &#125;</span><br><span class="line">    track_script &#123;</span><br><span class="line">        chk_haproxy                     # 对应的健康检查配置</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里检测脚本使用了<code>killall</code>命令，如果系统没有这个命令可以通过<code>yum install psmisc</code>安装获得。</p><p><code>Keepalived</code>会定时执行检测脚本，如果检测都通过，则会选一台权重最大的作为<code>VIP(虚拟ip)</code>的获得者，通过这个虚拟ip就可以访问到这台机器。</p><p>如果持有VIP机器的<code>haproxy</code>进程挂了，检测脚本不通过，VIP则会漂移到另一台机器，也是根据权重进行重新分配。</p><p>如果持有VIP的机器本身挂了，另外2台备用机发现和主机这个节点的通讯异常了，则也会根据权重使其中一台获取到VIP进行流量接管；但是如果各个主备节点之间通信线路出了问题，无法接收到彼此的组播通知，但是每个节点实际都处于正常工作状态，这时多个节点均为master强行绑定虚拟ip，导致不可预料的后果，这就是脑裂。一般发生这种情况就需要人工干预了，排查防火墙、通信线路等问题。</p><p><strong>备用机1配置</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">global_defs &#123;</span><br><span class="line">    router_id haproxy2                  # 虚拟路由名称</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># HAProxy健康检查配置</span><br><span class="line">vrrp_script chk_haproxy &#123;</span><br><span class="line">    script <span class="string">&quot;killall -0 haproxy&quot;</span>         # 使用killall <span class="number">-0</span>检查haproxy实例是否存在，性能高于ps命令</span><br><span class="line">    interval <span class="number">2</span>                          # 脚本运行周期，秒</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 虚拟路由配置</span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    state BACKUP                        # 本机实例状态，MASTER/BACKUP，备机配置文件中请写BACKUP</span><br><span class="line">    interface ens33                     # 本机网卡名称，使用ifconfig命令查看</span><br><span class="line">    virtual_router_id <span class="number">51</span>                # 虚拟路由编号，主备机保持一致</span><br><span class="line">    priority <span class="number">100</span>                        # 本机初始权重，备机请填写小于主机的值（例如<span class="number">99</span>）</span><br><span class="line">    advert_int <span class="number">1</span>                        # 争抢虚地址的周期，秒</span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass <span class="number">4</span>gjfethTonUY7kXU      # 认证类型和密码主备一样，要不然无法互相认证</span><br><span class="line">    &#125;</span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        <span class="number">172.16</span><span class="number">.122</span><span class="number">.100</span>                  # 虚地址IP，主备机保持一致</span><br><span class="line">    &#125;</span><br><span class="line">    track_script &#123;</span><br><span class="line">        chk_haproxy                     # 对应的健康检查配置</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>备用机2配置</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">global_defs &#123;</span><br><span class="line">    router_id haproxy3                  # 虚拟路由名称</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># HAProxy健康检查配置</span><br><span class="line">vrrp_script chk_haproxy &#123;</span><br><span class="line">    script <span class="string">&quot;killall -0 haproxy&quot;</span>         # 使用killall <span class="number">-0</span>检查haproxy实例是否存在，性能高于ps命令</span><br><span class="line">    interval <span class="number">2</span>                          # 脚本运行周期，秒</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 虚拟路由配置</span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    state BACKUP                        # 本机实例状态，MASTER/BACKUP，备机配置文件中请写BACKUP</span><br><span class="line">    interface ens33                     # 本机网卡名称，使用ifconfig命令查看</span><br><span class="line">    virtual_router_id <span class="number">51</span>                # 虚拟路由编号，主备机保持一致</span><br><span class="line">    priority <span class="number">99</span>                         # 本机初始权重，备机请填写小于主机的值（例如<span class="number">99</span>）</span><br><span class="line">    advert_int <span class="number">1</span>                        # 争抢虚地址的周期，秒</span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass <span class="number">4</span>gjfethTonUY7kXU      # 认证类型和密码主备一样，要不然无法互相认证</span><br><span class="line">    &#125;</span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        <span class="number">172.16</span><span class="number">.122</span><span class="number">.100</span>                  # 虚地址IP，主备机保持一致</span><br><span class="line">    &#125;</span><br><span class="line">    track_script &#123;</span><br><span class="line">        chk_haproxy                     # 对应的健康检查配置</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4、启动Keepalived"><a href="#4、启动Keepalived" class="headerlink" title="4、启动Keepalived"></a>4、启动Keepalived</h2><p>每台机器执行以下命令启动<code>Keepalived</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service keepalived start</span><br></pre></td></tr></table></figure><p>通过命令查看主机是否持有虚拟ip</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ip addr sh ens33 # ens33是具体网卡名称，可以通过ifconfig查看</span><br></pre></td></tr></table></figure><p><img src="https://zhaoxiaobin.coding.net/p/blog/d/zhaoxiaobin_img/git/raw/master/post/loadbalance/haproxy/haproxy-2-1.jpg" alt="VIP"><br>客户端通过虚拟ip<code>172.16.122.100</code>访问主机上的<code>haproxy</code>端口，能访问成功说明虚拟ip已经生效，此时访问<code>172.16.122.100</code>和访问<code>172.16.122.101</code>效果是一样的。</p><p>杀死主机的<code>haproxy</code>进程，如果VIP发生漂移，查看备用机持有VIP就说明主备配置已经生效了。客户端还是能通过<code>172.16.122.100</code>这个虚拟ip进行服务访问，这就是高可用。</p><p><code>Keepalived</code>具体的日志可以通过<code>/var/log/messages</code>查看。</p><h2 id="5、脚本检测扩展"><a href="#5、脚本检测扩展" class="headerlink" title="5、脚本检测扩展"></a>5、脚本检测扩展</h2><p>脚本检测并非一定要使用<code>killall</code>这个命令，可以自定义一个<code>shell</code>脚本去检测，这样可以更加灵活地处理。</p><p>比如在检测到<code>haproxy</code>这个进程不存在时，执行启动<code>haproxy</code>的命令，如果启动失败再切换VIP，而不是检测失败就直接切换VIP。</p><p>创建脚本<code>vi /etc/keepalived/chk_haproxy.sh</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">A=`ps -C haproxy --no-header |wc -l`</span><br><span class="line">if [ $A -eq 0 ];then</span><br><span class="line">   su - haproxy -c &quot;/usr/local/haproxy/sbin/haproxy -f /usr/local/haproxy/conf/haproxy.cfg&quot;</span><br><span class="line">   sleep 10</span><br><span class="line">   if [ `ps -C haproxy --no-header |wc -l` -eq 0 ];then</span><br><span class="line">       /etc/init.d/keepalived stop</span><br><span class="line">   fi</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p><strong>更改健康检查配置</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> HAProxy健康检查配置</span></span><br><span class="line">vrrp_script chk_haproxy &#123;</span><br><span class="line">    script &quot;/etc/keepalived/chk_haproxy.sh&quot;     # 执行自定义脚本</span><br><span class="line">    interval 2                                  # 脚本运行周期，秒</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://www.jianshu.com/p/440b8e1d5339">使用Haproxy代理rabbitmq集群，用keepalive保证haproxy高可用</a><br><br><br></li></ul>]]></content>
      
      
      <categories>
          
          <category> 网络协议 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Haproxy </tag>
            
            <tag> Keepalived </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Haproxy的安装与配置</title>
      <link href="%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/loadbalance/haproxy/Haproxy%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/"/>
      <url>%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/loadbalance/haproxy/Haproxy%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p><code>Haproxy</code>是一款高性能的负载均衡软件。因为其专注于负载均衡这一些事情，因此与<code>Nginx</code>比起来在负载均衡这件事情上做得更好，更专业。</p><p>安装环境：4台Linux机，系统为CentOS 7.7。<br>Haproxy版本：1.8.25</p><table><thead><tr><th align="center">ip</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">172.16.122.101</td><td align="center">部署Haproxy，代理真实服务器1、2、3</td></tr><tr><td align="center">172.16.122.104</td><td align="center">真实服务器1，已经部署应用，并对外暴露http端口10900</td></tr><tr><td align="center">172.16.122.105</td><td align="center">真实服务器2，已经部署应用，并对外暴露http端口10900</td></tr><tr><td align="center">172.16.122.106</td><td align="center">真实服务器3，已经部署应用，并对外暴露http端口10900</td></tr></tbody></table><h2 id="1、下载安装Haproxy"><a href="#1、下载安装Haproxy" class="headerlink" title="1、下载安装Haproxy"></a>1、下载安装Haproxy</h2><h4 id="1-1、下载"><a href="#1-1、下载" class="headerlink" title="1.1、下载"></a>1.1、下载</h4><p>下载地址：<a href="https://src.fedoraproject.org/repo/pkgs/haproxy/">https://src.fedoraproject.org/repo/pkgs/haproxy/</a><br>选择一个版本进行下载，这里我用的是<code>haproxy-1.8.25.tar.gz</code>版本。</p><h4 id="1-2、安装"><a href="#1-2、安装" class="headerlink" title="1.2、安装"></a>1.2、安装</h4><p>将下载的安装包上传至服务器。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">tar -xvf haproxy-1.8.25.tar.gz</span><br><span class="line">cd haproxy-1.8.25</span><br><span class="line">make TARGET=linux31 # uname -r 查看下内核版本，centos7.x是linux31、centos6.x是linux26</span><br><span class="line">sudo make install PREFIX=/usr/local/haproxy # 安装到指定路径</span><br><span class="line">cd /usr/local/haproxy/</span><br><span class="line">mkdir conf pid # 分别用来存放配置、进程文件</span><br></pre></td></tr></table></figure><h2 id="2、配置Haproxy"><a href="#2、配置Haproxy" class="headerlink" title="2、配置Haproxy"></a>2、配置Haproxy</h2><h4 id="2-1、Haproxy配置文件组成"><a href="#2-1、Haproxy配置文件组成" class="headerlink" title="2.1、Haproxy配置文件组成"></a>2.1、Haproxy配置文件组成</h4><p><code>Haproxy</code> 配置文件根据功能和用途，主要有 5 个部分组成，但有些部分并不是必须的， 可以根据需要选择相应的部分进行配置。</p><p><strong>1、global 部分</strong><br>用来设定全局配置参数，属于进程级的配置，通常和操作系统配置有关。</p><p><strong>2、defaults 部分</strong><br>默认参数的配置部分。在此部分设置的参数值，默认会自动被引用到下面的 <code>frontend、backend 和 listen</code> 部分中，因此，如果某些参数属于公用的配置，只需在 <code>defaults</code> 部分添加一次即可。而如果在 <code>frontend、backend 和 listen</code> 部分中也配置了与 <code>defaults</code> 部分一样的参数，那么<code>defaults</code> 部分参数对应的值自动被覆盖。</p><p><strong>3、frontend 部分</strong><br>此部分用于设置接收用户请求的前端虚拟节点。<code>frontend</code> 是在 <code>Haproxy1.3</code> 版本之后才引入的一个组件，同时引入的还有 <code>backend</code> 组件。通过引入这些组件，在很大程度上简化了 <code>Haproxy</code> 配置文件的复杂性。<code>frontend</code> 可以根据 <code>ACL</code> 规则直接指定要使用的后端。</p><p><strong>4、backend 部分</strong><br>此部分用于设置集群后端服务集群的配置，也就是用来添加一组真实服务器，以处理前端用户的请求。添加的真实服务器类似于 <code>LVS</code> 中的 <code>real server</code> 节点。</p><p><strong>5、listen 部分</strong><br>此部分是 <code>frontend</code> 部分和 <code>backend</code> 部分的结合体。在 <code>Haproxy1.3</code> 版本之前，<code>Haproxy</code> 的所有配置选项都在这个部分中设置。为了保持兼容性，<code>Haproxy</code> 新的版本仍然保留了 <code>listen</code> 组件的配置方式。目前在 <code>Haproxy</code> 中，两种配置方式任选其一即可。</p><h4 id="2-2、Haproxy配置文件示例"><a href="#2-2、Haproxy配置文件示例" class="headerlink" title="2.2、Haproxy配置文件示例"></a>2.2、Haproxy配置文件示例</h4><p>创建配置文件 <code>haproxy.cfg</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd conf</span><br><span class="line">vi haproxy.cfg</span><br></pre></td></tr></table></figure><p>配置内容</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">global</span><br><span class="line">    <span class="built_in">log</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> local0 debug</span><br><span class="line">    maxconn <span class="number">4096</span></span><br><span class="line">    daemon</span><br><span class="line">    nbproc <span class="number">1</span> # 进程数，创建多个进程，能够减少每个进程的任务队列，但是过多的进程可能会导致进程的崩溃</span><br><span class="line">    pidfile /usr/local/haproxy/pid/haproxy.pid</span><br><span class="line">defaults</span><br><span class="line">    mode http</span><br><span class="line">    retries <span class="number">3</span> # 连接后端服务器失败的次数如果超过这里设置的值，haproxy会将对应的后端服务器标记为不可用</span><br><span class="line">    timeout connect <span class="number">10</span>s</span><br><span class="line">    timeout client <span class="number">20</span>s</span><br><span class="line">    timeout server <span class="number">30</span>s</span><br><span class="line">    timeout check <span class="number">5</span>s</span><br><span class="line"># 接入配置</span><br><span class="line">frontend http_in</span><br><span class="line">    bind *:<span class="number">11000</span></span><br><span class="line">    mode http</span><br><span class="line">    option httpclose # 此选项表示在客户端和服务器端完成一次连接请求后，haproxy将主动关闭此TCP连接</span><br><span class="line">    default_backend http_in_forward</span><br><span class="line"># 接出配置</span><br><span class="line">backend http_in_forward</span><br><span class="line">    mode http</span><br><span class="line">    balance roundrobin</span><br><span class="line">    option abortonclose # 在服务器负载很高的情况下，自动结束掉当前队列中处理时间比较长的链接</span><br><span class="line">    server real_server1 <span class="number">172.16</span><span class="number">.122</span><span class="number">.104</span>:<span class="number">10900</span> check inter <span class="number">10000</span> rise <span class="number">1</span> fall <span class="number">3</span> weight <span class="number">1</span></span><br><span class="line">    server real_server2 <span class="number">172.16</span><span class="number">.122</span><span class="number">.105</span>:<span class="number">10900</span> check inter <span class="number">10000</span> rise <span class="number">1</span> fall <span class="number">3</span> weight <span class="number">1</span></span><br><span class="line">    server real_server3 <span class="number">172.16</span><span class="number">.122</span><span class="number">.106</span>:<span class="number">10900</span> check inter <span class="number">10000</span> rise <span class="number">1</span> fall <span class="number">3</span> weight <span class="number">1</span></span><br><span class="line"></span><br><span class="line"># 接入接出一起配置，相当于frontend和backend同时配置</span><br><span class="line">listen http_in_config</span><br><span class="line">    bind *:<span class="number">12000</span></span><br><span class="line">    mode http</span><br><span class="line">    balance roundrobin</span><br><span class="line">    option httpclose # 此选项表示在客户端和服务器端完成一次连接请求后，haproxy将主动关闭此TCP连接</span><br><span class="line">    option abortonclose # 在服务器负载很高的情况下，自动结束掉当前队列中处理时间比较长的链接</span><br><span class="line">    server real_server4 <span class="number">172.16</span><span class="number">.122</span><span class="number">.104</span>:<span class="number">10900</span> check inter <span class="number">10000</span> rise <span class="number">1</span> fall <span class="number">3</span> weight <span class="number">1</span></span><br><span class="line">    server real_server5 <span class="number">172.16</span><span class="number">.122</span><span class="number">.105</span>:<span class="number">10900</span> check inter <span class="number">10000</span> rise <span class="number">1</span> fall <span class="number">3</span> weight <span class="number">1</span></span><br><span class="line">    server real_server6 <span class="number">172.16</span><span class="number">.122</span><span class="number">.106</span>:<span class="number">10900</span> check inter <span class="number">10000</span> rise <span class="number">1</span> fall <span class="number">3</span> weight <span class="number">1</span></span><br><span class="line"></span><br><span class="line"># 监控页面</span><br><span class="line">listen admin_stats</span><br><span class="line">    bind *:<span class="number">11001</span></span><br><span class="line">    mode http</span><br><span class="line">    stats refresh <span class="number">30</span>s</span><br><span class="line">    stats uri /admin</span><br><span class="line">    stats realm welcome login\ Haproxy</span><br><span class="line">    stats auth admin:admin123</span><br><span class="line">    stats admin <span class="keyword">if</span> TRUE # 通过设置此选项，可以在监控页面上手工启用或禁用后端真实服务器</span><br></pre></td></tr></table></figure><p><strong>global配置</strong></p><blockquote><p>log：全局的日志配置，<code>local0</code>是日志设备，<code>debug</code>表示日志级别。其中日志级别有<code>err、warning、info、debug</code>四种可选。这个配置表示使用<code>127.0.0.1</code>上的<code>rsyslog</code>服务中的<code>local0</code>日志设备，记录日志等级为<code>debug</code>。</p></blockquote><blockquote><p>maxconn：设定每个<code>haproxy</code>进程可接受的最大并发连接数，此选项等同于Linux命令行选项<code>&quot;ulimit -n&quot;</code>。</p></blockquote><blockquote><p>daemon：设置<code>haproxy</code>进程进入后台运行。这是推荐的运行模式。</p></blockquote><blockquote><p>nbproc：设置<code>haproxy</code>启动时可创建的进程数，此参数要求将<code>haproxy</code>运行模式设置为<code>daemon</code>，默认只启动一个进程。根据使用经验，该值的设置应该小于服务器的CPU核数。创建多个进程，能够减少每个进程的任务队列，但是过多的进程可能会导致进程的崩溃。</p></blockquote><blockquote><p>pidfile：指定haproxy进程的<code>pid</code>文件。启动进程的用户必须有访问此文件的权限。</p></blockquote><p><strong>defaults配置</strong></p><blockquote><p>mode：设置<code>haproxy</code>实例默认的运行模式，有<code>tcp、http、health</code>三个可选值。</p></blockquote><blockquote><p>retries：设置连接后端服务器的失败重试次数，连接失败的次数如果超过这里设置的值，<code>haproxy</code>会将对应的后端服务器标记为不可用。此参数也可在后面部分进行设置。</p></blockquote><blockquote><p>timeout connect：设置成功连接到一台服务器的最长等待时间，默认单位是毫秒，但也可以使用其他的时间单位后缀。</p></blockquote><blockquote><p>timeout client：设置连接客户端发送数据时最长等待时间，默认单位是毫秒，也可以使用其他的时间单位后缀。</p></blockquote><blockquote><p>timeout server：设置服务器端回应客户度数据发送的最长等待时间，默认单位是毫秒，也可以使用其他的时间单位后缀。</p></blockquote><blockquote><p>timeout check：设置对后端服务器的检测超时时间，默认单位是毫秒，也可以使用其他的时间单位后缀。</p></blockquote><p><strong>frontend配置</strong></p><blockquote><p>bind：此选项只能在<code>frontend</code>和<code>listen</code>部分进行定义，用于定义一个或几个监听的套接字。</p></blockquote><blockquote><p>option httpclose：此选项表示在客户端和服务器端完成一次连接请求后，<code>haproxy</code>将主动关闭此<code>TCP</code>连接。这是对性能非常有帮助的一个参数。</p></blockquote><blockquote><p>default_backend：指定默认的后端服务器池，也就是指定一组后端真实服务器，而这些真实服务器组将在<code>backend</code>段进行定义。这里的<code>http_in_forward</code>就是一个后端服务器组。</p></blockquote><p><strong>backend配置</strong></p><blockquote><p>balance：此关键字用来定义负载均衡算法。目前<code>haproxy</code>支持多种负载均衡算法，常用的有如下几种。</p></blockquote><table><thead><tr><th align="center">算法</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">roundrobin</td><td align="center">是基于权重进行轮询调度的算法，在服务器的性能分布比较均匀的时候，这是一种最公平、最合理的算法。此算法经常使用。</td></tr><tr><td align="center">static-rr</td><td align="center">也是基于权重进行轮询的调度算法，不过此算法为静态方法，在运行时调整其服务器权重不会生效。</td></tr><tr><td align="center">source</td><td align="center">是基于请求源 IP 的算法。此算法先对请求的源 IP 进行 hash 运算， 然后将结果与后端服务器的权重总数相除后转发至某个匹配的后端服务器。<br>这种方式可以使同一个客户端 IP 的请求始终被转发到某特定的后端服务器。</td></tr><tr><td align="center">leastconn</td><td align="center">此算法会将新的连接请求转发到具有最少连接数目的后端服务器。在会话时间较长的场景中推荐使用此算法，例如数据库负载均衡等。<br>此算法不适合会话较短的环境中，例如基于 HTTP 的应用。</td></tr><tr><td align="center">uri</td><td align="center">此算法会对部分或整个 URI 进行 hash 运算，再经过与服务器的总权重相除，最后转发到某台匹配的后端服务器上。</td></tr><tr><td align="center">uri_param</td><td align="center">此算法会根据 URL 路径中的参数进行转发，这样可保证在后端真实服务器数量不变时，同一个用户的请求始终分发到同一台机器上。</td></tr><tr><td align="center">hdr(&lt;name&gt;):</td><td align="center">此算法根据 http 头进行转发，如果指定的 http 头名称不存在，则使用 roundrobin 算法进行策略转发。</td></tr></tbody></table><blockquote><p>option abortonclose：如果设置了此参数，可以在服务器负载很高的情况下， 自动结束掉当前队列中处理时间比较长的链接。</p></blockquote><blockquote><p>server：这个关键字用来定义多个后端真实服务器，不能用于 defaults 和frontend部分。使用格式为：server &lt;name&gt; &lt;address&gt;[:port] [param*] 其中，每个参数含义如下：</p></blockquote><blockquote><p>check：表示启用对此后端服务器执行健康状态检查。</p></blockquote><blockquote><p>inter：设置健康状态检查的时间间隔，单位为毫秒。</p></blockquote><blockquote><p>rise：设置从故障状态转换至正常状态需要成功检查的次数，例如。“rise 2”表示 2 次检查正确就认为此服务器可用。</p></blockquote><blockquote><p>fall：设置后端服务器从正常状态转换为不可用状态需要检查的次数，例如，“fall 3”表示 3次检查失败就认为此服务器不可用。</p></blockquote><blockquote><p>weight：设置后端真实服务器的权重，默认为 1，最大值为 256。设置为 0 表示不参与负载均衡。</p></blockquote><p><strong>listen配置</strong></p><blockquote><p>stats refresh：设置<code>haproxy</code>监控统计页面自动刷新的时间。</p></blockquote><blockquote><p>stats uri：设置<code>haproxy</code>监控统计页面的URL路径，可随意指定。例如、指定<code>stats uri /admin</code>，就可以通过<code>http://ip:port/admin</code>查看。</p></blockquote><blockquote><p>stats realm：设置登录<code>haproxy</code>统计页面时密码框上的文本提示信息。</p></blockquote><blockquote><p>stats auth：设置登录<code>haproxy</code>统计页面的用户名和密码。用户名和密码通过冒号分割。可为监控页面设置多个用户名和密码，每行一个。</p></blockquote><blockquote><p>stats admin if TRUE：通过设置此选项，可以在监控页面上手工启用或禁用后端真实服务器，仅在<code>haproxy1.4.9</code>以后版本有效。</p></blockquote><h2 id="3、启动Haproxy"><a href="#3、启动Haproxy" class="headerlink" title="3、启动Haproxy"></a>3、启动Haproxy</h2><h4 id="3-1、启动"><a href="#3-1、启动" class="headerlink" title="3.1、启动"></a>3.1、启动</h4><p>执行以下命令，就可以启动<code>Haproxy</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/haproxy/sbin/haproxy -f /usr/local/haproxy/conf/haproxy.cfg </span><br></pre></td></tr></table></figure><p>可能会出现以下的提示：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[WARNING] 333/173319 (22617) : [/usr/local/haproxy/sbin/haproxy.main()] Cannot raise FD limit to 8214, limit is 4096.</span><br><span class="line">[WARNING] 333/173319 (22617) : [/usr/local/haproxy/sbin/haproxy.main()] FD limit (4096) too low for maxconn=4096/maxsock=8214. Please raise &#x27;ulimit-n&#x27; to 8214 or more to avoid any trouble.</span><br></pre></td></tr></table></figure><p>可以用如下办法解决：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vi /etc/profile</span><br></pre></td></tr></table></figure><p>在最后增加一行内容：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ulimit -n 65536</span><br></pre></td></tr></table></figure><p>保存退出，执行<code>sudo source /etc/profile</code>使其生效。这时候重新启动<code>Haproxy</code>就没问题了。</p><h4 id="3-2、查看监控页面"><a href="#3-2、查看监控页面" class="headerlink" title="3.2、查看监控页面"></a>3.2、查看监控页面</h4><p>浏览器打开<code>http://172.16.122.101:11001/admin</code>输入前面<code>listen</code>部分配置的账号密码登录。</p><p><img src="https://zhaoxiaobin.coding.net/p/blog/d/zhaoxiaobin_img/git/raw/master/post/loadbalance/haproxy/haproxy-1-1.jpg" alt="管理页面"><br>管理页面可以通过手动操作开启/禁用后端某台真实服务器。</p><h4 id="3-3、负载均衡效果测试"><a href="#3-3、负载均衡效果测试" class="headerlink" title="3.3、负载均衡效果测试"></a>3.3、负载均衡效果测试</h4><p>用<code>postman</code>调用<code>http://172.16.122.101:11000/xxx</code>，<code>Haproxy</code>会将请求转发到对应的后端真实服务器<code>http://172.16.122.104~6:10900/xxx</code>，多次调用可以看到是轮询的效果。</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://blog.csdn.net/qq_28710983/article/details/82194404">haproxy安装配置(笔记一)</a></li><li><a href="https://www.cnblogs.com/kevingrace/p/6138150.html">Haproxy基础知识 -运维小结</a><br><br><br></li></ul>]]></content>
      
      
      <categories>
          
          <category> 网络协议 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Haproxy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>比较Spring Data JPA和MyBatis</title>
      <link href="JPA/%E6%AF%94%E8%BE%83Spring%20Data%20JPA%E5%92%8CMyBatis/"/>
      <url>JPA/%E6%AF%94%E8%BE%83Spring%20Data%20JPA%E5%92%8CMyBatis/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="1、关注度对比"><a href="#1、关注度对比" class="headerlink" title="1、关注度对比"></a>1、关注度对比</h2><p><strong>百度指数</strong><br><img src="https://zhaoxiaobin.coding.net/p/blog/d/zhaoxiaobin_img/git/raw/master/post/JPA/JPA-5-1.jpg" alt="-w1277"></p><p><strong>谷歌指数</strong><br><img src="https://zhaoxiaobin.coding.net/p/blog/d/zhaoxiaobin_img/git/raw/master/post/JPA/JPA-5-2.jpg" alt="-w988"></p><p>对比百度、谷歌的搜索指数，可以看出在国外<code>JPA</code>比较受欢迎，在国内<code>MyBatis</code>比较受欢迎。</p><h2 id="2、优势对比"><a href="#2、优势对比" class="headerlink" title="2、优势对比"></a>2、优势对比</h2><ol><li>DAO层开发角度来看，<code>JPA</code>更为简单高效，对于简单的操作甚至连sql都不需要编写，直接调用就能完成数据库的操作。</li><li><code>JPA</code>的数据库移植性更好，因为其采用<code>JPQL</code>方式，和原生sql根本就没有耦合度。但一般情况下公司选定数据库后再变更的可能性微乎其微，所以这个优点可以忽略。</li><li><code>MyBatis</code>更利于编写复杂的sql，擅长多表关联查询、聚合函数等复杂操作。<code>JPA</code>在这方面支持比较弱，我个人感觉<code>JPA</code>能让简单地操作更加简单，但是让复杂的操作也会更麻烦；但话说回来现在越来越微服务化，每个服务的业务比较单一，所以这个对于<code>JPA</code>来说也不是问题。</li><li><code>MyBatis</code>上手容易，尤其是有sql经验的，学习成本会比学习<code>JPA</code>更低些。</li></ol><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="http://www.spring4all.com/article/391">如何对 JPA 或者 MyBatis 进行技术选型</a><br><br><br></li></ul>]]></content>
      
      
      <categories>
          
          <category> JPA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JPA </tag>
            
            <tag> MyBatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Data JPA中多数据源的配置</title>
      <link href="JPA/Spring%20Data%20JPA%E4%B8%AD%E5%A4%9A%E6%95%B0%E6%8D%AE%E6%BA%90%E7%9A%84%E9%85%8D%E7%BD%AE/"/>
      <url>JPA/Spring%20Data%20JPA%E4%B8%AD%E5%A4%9A%E6%95%B0%E6%8D%AE%E6%BA%90%E7%9A%84%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="1、添加多数据源的配置"><a href="#1、添加多数据源的配置" class="headerlink" title="1、添加多数据源的配置"></a>1、添加多数据源的配置</h2><h4 id="1-1、yaml配置"><a href="#1-1、yaml配置" class="headerlink" title="1.1、yaml配置"></a>1.1、yaml配置</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">40300</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">jpa-multi-datasource</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">primary:</span></span><br><span class="line">      <span class="attr">jdbc-url:</span> <span class="string">jdbc:mysql://148.70.153.63:3306/ttms?useUnicode=true&amp;characterEncoding=UTF-8&amp;allowMultiQueries=true&amp;useSSL=false</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">password</span></span><br><span class="line">      <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">      <span class="attr">initialSize:</span> <span class="number">5</span></span><br><span class="line">      <span class="attr">maxActive:</span> <span class="number">50</span></span><br><span class="line">      <span class="attr">minIdle:</span> <span class="number">0</span></span><br><span class="line">      <span class="attr">maxWait:</span> <span class="number">60000</span></span><br><span class="line">      <span class="attr">useUnfairLock:</span> <span class="literal">true</span> <span class="comment"># 禁用公平锁</span></span><br><span class="line">    <span class="attr">secondary:</span></span><br><span class="line">      <span class="attr">jdbc-url:</span> <span class="string">jdbc:mysql://148.70.153.63:3306/ttms?useUnicode=true&amp;characterEncoding=UTF-8&amp;allowMultiQueries=true&amp;useSSL=false</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">password</span></span><br><span class="line">      <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">      <span class="attr">initialSize:</span> <span class="number">3</span></span><br><span class="line">      <span class="attr">maxActive:</span> <span class="number">10</span></span><br><span class="line">      <span class="attr">minIdle:</span> <span class="number">0</span></span><br><span class="line">      <span class="attr">maxWait:</span> <span class="number">60000</span></span><br><span class="line">      <span class="attr">useUnfairLock:</span> <span class="literal">true</span> <span class="comment"># 禁用公平锁</span></span><br><span class="line">  <span class="attr">jpa:</span></span><br><span class="line">    <span class="attr">show-sql:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">hibernate:</span></span><br><span class="line">      <span class="attr">ddl-auto:</span> <span class="string">update</span></span><br><span class="line">    <span class="attr">database:</span> <span class="string">MYSQL</span></span><br></pre></td></tr></table></figure><p>注意：</p><ol><li>这里为了方便，2个数据源的配置是用同一个数据库。</li><li>如果使用默认的数据源，在<code>SpringBoot2.x</code>以后需要使用<code>jdbc-url</code>而非<code>url</code>，否则会报 <code>java.lang.IllegalArgumentException: jdbcUrl is required with driverClassName.</code>。</li></ol><h4 id="1-2、数据源配置"><a href="#1-2、数据源配置" class="headerlink" title="1.2、数据源配置"></a>1.2、数据源配置</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataSourceConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Primary</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConfigurationProperties(prefix = &quot;spring.datasource.primary&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">primaryDataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> DataSourceBuilder.create().build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConfigurationProperties(prefix = &quot;spring.datasource.secondary&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">secondaryDataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> DataSourceBuilder.create().build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>数据源使用的是<code>SpringBoot2.x</code>版本默认的<code>HikariCP</code>连接池。<code>@Primary</code>注解指定了主数据源。</p><h4 id="1-3、JPA配置"><a href="#1-3、JPA配置" class="headerlink" title="1.3、JPA配置"></a>1.3、JPA配置</h4><h5 id="1-3-1、Primary数据源的JPA配置"><a href="#1-3-1、Primary数据源的JPA配置" class="headerlink" title="1.3.1、Primary数据源的JPA配置"></a>1.3.1、Primary数据源的JPA配置</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableTransactionManagement</span></span><br><span class="line"><span class="meta">@EnableJpaRepositories(</span></span><br><span class="line"><span class="meta">        entityManagerFactoryRef=&quot;entityManagerFactoryPrimary&quot;,</span></span><br><span class="line"><span class="meta">        transactionManagerRef=&quot;transactionManagerPrimary&quot;,</span></span><br><span class="line"><span class="meta">        basePackages= &#123; &quot;net.zhaoxiaobin.jpa.dao.primary&quot; &#125;)</span> <span class="comment">//设置Repository所在位置</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PrimaryConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DataSource primaryDataSource;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JpaProperties jpaProperties;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> HibernateProperties hibernateProperties;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Map&lt;String, Object&gt; <span class="title">getVendorProperties</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> hibernateProperties.determineHibernateProperties(jpaProperties.getProperties(), <span class="keyword">new</span> HibernateSettings());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Primary</span></span><br><span class="line">    <span class="meta">@Bean(name = &quot;entityManagerPrimary&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> EntityManager <span class="title">entityManager</span><span class="params">(EntityManagerFactoryBuilder builder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> entityManagerFactoryPrimary(builder).getObject().createEntityManager();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Primary</span></span><br><span class="line">    <span class="meta">@Bean(name = &quot;entityManagerFactoryPrimary&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> LocalContainerEntityManagerFactoryBean <span class="title">entityManagerFactoryPrimary</span> <span class="params">(EntityManagerFactoryBuilder builder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> builder.dataSource(primaryDataSource)</span><br><span class="line">                .packages(<span class="string">&quot;net.zhaoxiaobin.jpa.domain.primary&quot;</span>) <span class="comment">//设置实体类所在位置</span></span><br><span class="line">                .persistenceUnit(<span class="string">&quot;primaryPersistenceUnit&quot;</span>)</span><br><span class="line">                .properties(getVendorProperties())</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Primary</span></span><br><span class="line">    <span class="meta">@Bean(name = &quot;transactionManagerPrimary&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PlatformTransactionManager <span class="title">transactionManagerPrimary</span><span class="params">(EntityManagerFactoryBuilder builder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> JpaTransactionManager(entityManagerFactoryPrimary(builder).getObject());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Repository配置：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PrimaryRepository</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">Actor</span>,<span class="title">Long</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实体类配置：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table(name = &quot;actor&quot;)</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Actor</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 主键生成采用数据库自增方式，比如MySQL的AUTO_INCREMENT</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue(strategy = GenerationType.IDENTITY)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column(name = &quot;actor_name&quot;, nullable = false, length = 128, unique = true)</span></span><br><span class="line">    <span class="keyword">private</span> String actorName;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column(name = &quot;actor_age&quot;, nullable = false)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> actorAge;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column(name = &quot;actor_email&quot;, length = 64, unique = true)</span></span><br><span class="line">    <span class="keyword">private</span> String actorEmail;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column(name = &quot;create_time&quot;, nullable = false, length = 32)</span></span><br><span class="line">    <span class="keyword">private</span> String createTime = DateUtil.format(<span class="keyword">new</span> Date(), <span class="string">&quot;yyyy-MM-dd HH:mm:ss SSS&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="1-3-2、Secondary数据源的JPA配置"><a href="#1-3-2、Secondary数据源的JPA配置" class="headerlink" title="1.3.2、Secondary数据源的JPA配置"></a>1.3.2、Secondary数据源的JPA配置</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableTransactionManagement</span></span><br><span class="line"><span class="meta">@EnableJpaRepositories(</span></span><br><span class="line"><span class="meta">        entityManagerFactoryRef=&quot;entityManagerFactorySecondary&quot;,</span></span><br><span class="line"><span class="meta">        transactionManagerRef=&quot;transactionManagerSecondary&quot;,</span></span><br><span class="line"><span class="meta">        basePackages= &#123; &quot;net.zhaoxiaobin.jpa.dao.secondary&quot; &#125;)</span> <span class="comment">//设置Repository所在位置</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecondaryConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DataSource secondaryDataSource;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JpaProperties jpaProperties;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> HibernateProperties hibernateProperties;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Map&lt;String, Object&gt; <span class="title">getVendorProperties</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> hibernateProperties.determineHibernateProperties(jpaProperties.getProperties(), <span class="keyword">new</span> HibernateSettings());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(name = &quot;entityManagerSecondary&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> EntityManager <span class="title">entityManager</span><span class="params">(EntityManagerFactoryBuilder builder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> entityManagerFactorySecondary(builder).getObject().createEntityManager();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(name = &quot;entityManagerFactorySecondary&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> LocalContainerEntityManagerFactoryBean <span class="title">entityManagerFactorySecondary</span> <span class="params">(EntityManagerFactoryBuilder builder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> builder.dataSource(secondaryDataSource)</span><br><span class="line">                .packages(<span class="string">&quot;net.zhaoxiaobin.jpa.domain.secondary&quot;</span>) <span class="comment">//设置实体类所在位置</span></span><br><span class="line">                .persistenceUnit(<span class="string">&quot;secondaryPersistenceUnit&quot;</span>)</span><br><span class="line">                .properties(getVendorProperties())</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(name = &quot;transactionManagerSecondary&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PlatformTransactionManager <span class="title">transactionManagerSecondary</span><span class="params">(EntityManagerFactoryBuilder builder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> JpaTransactionManager(entityManagerFactorySecondary(builder).getObject());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Repository配置：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SecondaryRepository</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">User</span>,<span class="title">Long</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实体类配置：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table(name = &quot;user&quot;)</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue(strategy = GenerationType.IDENTITY)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column(name = &quot;name&quot;,length = 64)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column(name = &quot;age&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>说明与注意</strong>：</p><ul><li>在使用JPA的时候，需要为不同的数据源创建不同的package来存放对应的Entity和Repository，以便于配置类的分区扫描。</li><li>类名上的注解@<code>EnableJpaRepositories</code>中指定Repository的所在位置。</li><li><code>LocalContainerEntityManagerFactoryBean</code>创建的时候，指定Entity所在的位置。</li></ul><h2 id="2、测试"><a href="#2、测试" class="headerlink" title="2、测试"></a>2、测试</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MultiDataSourceTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> PrimaryRepository primaryRepository;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SecondaryRepository secondaryRepository;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testPrimary</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;Actor&gt; actorList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            Actor actor = <span class="keyword">new</span> Actor();</span><br><span class="line">            actor.setActorName(<span class="string">&quot;actor&quot;</span> + i);</span><br><span class="line">            actor.setActorEmail(<span class="string">&quot;email&quot;</span> + i);</span><br><span class="line">            actor.setActorAge(i + <span class="number">20</span>);</span><br><span class="line">            actorList.add(actor);</span><br><span class="line">        &#125;</span><br><span class="line">        primaryRepository.saveAll(actorList);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 验证</span></span><br><span class="line"><span class="comment">//        Assert.assertEquals(5, primaryRepository.findAll().size());</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSecondary</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;User&gt; userList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            User user = <span class="keyword">new</span> User();</span><br><span class="line">            user.setName(<span class="string">&quot;userName&quot;</span> + i);</span><br><span class="line">            user.setAge(i);</span><br><span class="line">            userList.add(user);</span><br><span class="line">        &#125;</span><br><span class="line">        secondaryRepository.saveAll(userList);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 验证</span></span><br><span class="line"><span class="comment">//        Assert.assertEquals(5, secondaryRepository.findAll().size());</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3、工程结构"><a href="#3、工程结构" class="headerlink" title="3、工程结构"></a>3、工程结构</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">├── jpa-multi-datasource.iml</span><br><span class="line">├── pom.xml</span><br><span class="line">└── src</span><br><span class="line">    ├── main</span><br><span class="line">    │   ├── java</span><br><span class="line">    │   │   └── net</span><br><span class="line">    │   │       └── zhaoxiaobin</span><br><span class="line">    │   │           └── jpa</span><br><span class="line">    │   │               ├── JpaMultiDatasourceApplication.java</span><br><span class="line">    │   │               ├── config</span><br><span class="line">    │   │               │   ├── DataSourceConfig.java</span><br><span class="line">    │   │               │   ├── PrimaryConfig.java</span><br><span class="line">    │   │               │   └── SecondaryConfig.java</span><br><span class="line">    │   │               ├── dao</span><br><span class="line">    │   │               │   ├── primary</span><br><span class="line">    │   │               │   │   └── PrimaryRepository.java</span><br><span class="line">    │   │               │   └── secondary</span><br><span class="line">    │   │               │       └── SecondaryRepository.java</span><br><span class="line">    │   │               └── domain</span><br><span class="line">    │   │                   ├── primary</span><br><span class="line">    │   │                   │   └── Actor.java</span><br><span class="line">    │   │                   └── secondary</span><br><span class="line">    │   │                       └── User.java</span><br><span class="line">    │   └── resources</span><br><span class="line">    │       ├── application.yml</span><br><span class="line">    │       └── hibernate.properties</span><br><span class="line">    └── test</span><br><span class="line">        └── java</span><br><span class="line">            └── net</span><br><span class="line">                └── zhaoxiaobin</span><br><span class="line">                    └── jpa</span><br><span class="line">                        └── MultiDataSourceTest.java</span><br></pre></td></tr></table></figure><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://www.jianshu.com/p/25d26a18500e">Spring Boot 2.x基础教程：Spring Data JPA的多数据源配置</a></li></ul><h2 id="代码地址"><a href="#代码地址" class="headerlink" title="代码地址"></a>代码地址</h2><ul><li>github：<a href="https://github.com/senlinmu1008/jpa-action/tree/master/jpa-multi-datasource">https://github.com/senlinmu1008/jpa-action/tree/master/jpa-multi-datasource</a></li><li>gitee：<a href="https://gitee.com/ppbin/jpa-action/tree/master/jpa-multi-datasource">https://gitee.com/ppbin/jpa-action/tree/master/jpa-multi-datasource</a><br><br><br></li></ul>]]></content>
      
      
      <categories>
          
          <category> JPA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JPA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Data JPA中使用QueryDSL进行查询</title>
      <link href="JPA/Spring%20Data%20JPA%E4%B8%AD%E4%BD%BF%E7%94%A8QueryDSL%E8%BF%9B%E8%A1%8C%E6%9F%A5%E8%AF%A2/"/>
      <url>JPA/Spring%20Data%20JPA%E4%B8%AD%E4%BD%BF%E7%94%A8QueryDSL%E8%BF%9B%E8%A1%8C%E6%9F%A5%E8%AF%A2/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="1、引入querydsl"><a href="#1、引入querydsl" class="headerlink" title="1、引入querydsl"></a>1、引入querydsl</h2><h4 id="1-1、导包"><a href="#1-1、导包" class="headerlink" title="1.1、导包"></a>1.1、导包</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--    querydsl    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.querydsl<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>querydsl-jpa<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.querydsl<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>querydsl-apt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="1-2、添加插件"><a href="#1-2、添加插件" class="headerlink" title="1.2、添加插件"></a>1.2、添加插件</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.mysema.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>apt-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goal</span>&gt;</span>process<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">outputDirectory</span>&gt;</span>target/generated-sources/java<span class="tag">&lt;/<span class="name">outputDirectory</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">processor</span>&gt;</span>com.querydsl.apt.jpa.JPAAnnotationProcessor<span class="tag">&lt;/<span class="name">processor</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p>插件的作用是把带有<code>@Entity</code>注解的实体类在指定路径<code>target/generated-sources/java</code>下生成一个衍生的实体类，我们后面就是用这个衍生出来的实体类去构建动态查询的条件进行动态查询。</p><h4 id="1-3、注入bean"><a href="#1-3、注入bean" class="headerlink" title="1.3、注入bean"></a>1.3、注入bean</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> JPAQueryFactory <span class="title">jpaQueryFactory</span><span class="params">(EntityManager entityManager)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> JPAQueryFactory(entityManager);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2、创建实体类"><a href="#2、创建实体类" class="headerlink" title="2、创建实体类"></a>2、创建实体类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table(name = &quot;actor&quot;)</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Actor</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 主键生成采用数据库自增方式，比如MySQL的AUTO_INCREMENT</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue(strategy = GenerationType.IDENTITY)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column(name = &quot;actor_name&quot;, nullable = false, length = 128, unique = true)</span></span><br><span class="line">    <span class="keyword">private</span> String actorName;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column(name = &quot;actor_age&quot;, nullable = false)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> actorAge;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column(name = &quot;actor_email&quot;, length = 64, unique = true)</span></span><br><span class="line">    <span class="keyword">private</span> String actorEmail;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column(name = &quot;create_time&quot;, nullable = false, length = 32)</span></span><br><span class="line">    <span class="keyword">private</span> String createTime = DateUtil.format(<span class="keyword">new</span> Date(), <span class="string">&quot;yyyy-MM-dd HH:mm:ss SSS&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果是<code>IDEA</code>工具，执行<code>Maven</code>插件的<code>compile</code>就能在指定目录生成<code>QActor</code>类。<br><img src="https://zhaoxiaobin.coding.net/p/blog/d/zhaoxiaobin_img/git/raw/master/post/JPA/JPA-3-1.jpg" alt="-w1614"></p><p>如果是<code>Eclipse</code>，右键项目工程，执行<code>maven</code>的<code>update</code>操作就可以在指定目录中生成实体类。</p><h2 id="3、创建Repository"><a href="#3、创建Repository" class="headerlink" title="3、创建Repository"></a>3、创建Repository</h2><p>需要继承 <code>QuerydslPredicateExecutor</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">QuerydslRepository</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">Actor</span>, <span class="title">Long</span>&gt;, <span class="title">QuerydslPredicateExecutor</span>&lt;<span class="title">Actor</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4、使用QueryDSL"><a href="#4、使用QueryDSL" class="headerlink" title="4、使用QueryDSL"></a>4、使用QueryDSL</h2><h4 id="4-1、原生dsl查询"><a href="#4-1、原生dsl查询" class="headerlink" title="4.1、原生dsl查询"></a>4.1、原生dsl查询</h4><h5 id="4-1-1、直接根据条件查询"><a href="#4-1-1、直接根据条件查询" class="headerlink" title="4.1.1、直接根据条件查询"></a>4.1.1、直接根据条件查询</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QuerydslTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JPAQueryFactory jpaQueryFactory;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 直接根据条件查询</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindByActorNameAndActorEmail</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        QActor qActor = QActor.actor;</span><br><span class="line">        Actor actor = jpaQueryFactory.selectFrom(qActor)</span><br><span class="line">                .where(</span><br><span class="line">                        qActor.actorName.eq(<span class="string">&quot;高庸涵&quot;</span>),</span><br><span class="line">                        qActor.actorEmail.eq(<span class="string">&quot;123456789@qq.com&quot;</span>)</span><br><span class="line">                )</span><br><span class="line">                .fetchOne();</span><br><span class="line">        log.info(JSONUtil.toJsonPrettyStr(actor));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="4-1-2、查询所有并根据字段排序"><a href="#4-1-2、查询所有并根据字段排序" class="headerlink" title="4.1.2、查询所有并根据字段排序"></a>4.1.2、查询所有并根据字段排序</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询所有并根据字段排序</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    QActor qActor = QActor.actor;</span><br><span class="line">    List&lt;Actor&gt; actorList = jpaQueryFactory.selectFrom(qActor)</span><br><span class="line">            .orderBy(</span><br><span class="line">                    qActor.actorAge.asc()</span><br><span class="line">            )</span><br><span class="line">            .fetch();</span><br><span class="line">    log.info(JSONUtil.toJsonPrettyStr(actorList));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="4-1-3、分页查询，并根据字段排序"><a href="#4-1-3、分页查询，并根据字段排序" class="headerlink" title="4.1.3、分页查询，并根据字段排序"></a>4.1.3、分页查询，并根据字段排序</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 分页查询，并根据字段排序</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindByPagination</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> page = <span class="number">0</span>; <span class="comment">// 第几页</span></span><br><span class="line">    <span class="keyword">int</span> pageSize = <span class="number">10</span>; <span class="comment">// 每页大小</span></span><br><span class="line"></span><br><span class="line">    QActor qActor = QActor.actor;</span><br><span class="line">    QueryResults&lt;Actor&gt; actorQueryResults = jpaQueryFactory.selectFrom(qActor)</span><br><span class="line">            .orderBy(</span><br><span class="line">                    qActor.actorAge.asc()</span><br><span class="line">            )</span><br><span class="line">            .offset(page)</span><br><span class="line">            .limit(pageSize)</span><br><span class="line">            .fetchResults();</span><br><span class="line">    <span class="comment">// 获取分页参数</span></span><br><span class="line">    <span class="keyword">long</span> total = actorQueryResults.getTotal();</span><br><span class="line">    <span class="keyword">long</span> totalPage = (total % pageSize == <span class="number">0</span>) ? (total / pageSize) : (total / pageSize + <span class="number">1</span>);</span><br><span class="line">    log.info(<span class="string">&quot;分页查询第:[&#123;&#125;]页,pageSize:[&#123;&#125;],共有:[&#123;&#125;]数据,共有:[&#123;&#125;]页&quot;</span>, page, pageSize, total, totalPage);</span><br><span class="line">    List&lt;Actor&gt; actorListByPagination = actorQueryResults.getResults();</span><br><span class="line">    log.info(JSONUtil.toJsonPrettyStr(actorListByPagination));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="4-1-4、根据条件模糊查询，并指定某个字段的范围"><a href="#4-1-4、根据条件模糊查询，并指定某个字段的范围" class="headerlink" title="4.1.4、根据条件模糊查询，并指定某个字段的范围"></a>4.1.4、根据条件模糊查询，并指定某个字段的范围</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据条件模糊查询，并指定某个字段的范围</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindByLikeNameAndEmailAndBetweenAgeOrderById</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    QActor qActor = QActor.actor;</span><br><span class="line">    List&lt;Actor&gt; actorList = jpaQueryFactory.selectFrom(qActor)</span><br><span class="line">            .where(</span><br><span class="line">                    qActor.actorName.like(<span class="string">&quot;name%&quot;</span>),</span><br><span class="line">                    qActor.actorEmail.like(<span class="string">&quot;email%&quot;</span>),</span><br><span class="line">                    qActor.actorAge.between(<span class="number">20</span>, <span class="number">50</span>)</span><br><span class="line">            )</span><br><span class="line">            .orderBy(</span><br><span class="line">                    qActor.id.asc()</span><br><span class="line">            )</span><br><span class="line">            .fetch();</span><br><span class="line">    log.info(JSONUtil.toJsonPrettyStr(actorList));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-2、jpa整合dsl查询"><a href="#4-2、jpa整合dsl查询" class="headerlink" title="4.2、jpa整合dsl查询"></a>4.2、jpa整合dsl查询</h4><h5 id="4-2-1、模糊查询并分页排序"><a href="#4-2-1、模糊查询并分页排序" class="headerlink" title="4.2.1、模糊查询并分页排序"></a>4.2.1、模糊查询并分页排序</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> QuerydslRepository querydslRepository;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 模糊查询并分页排序</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindByActorNameAndActorEmailPagination</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> page = <span class="number">0</span>; <span class="comment">// 第几页</span></span><br><span class="line">    <span class="keyword">int</span> pageSize = <span class="number">10</span>; <span class="comment">// 每页大小</span></span><br><span class="line"></span><br><span class="line">    QActor qActor = QActor.actor;</span><br><span class="line">    <span class="comment">// 模糊查询条件</span></span><br><span class="line">    BooleanExpression expression = qActor.actorName.like(<span class="string">&quot;name%&quot;</span>).and(qActor.actorEmail.like(<span class="string">&quot;email%&quot;</span>));</span><br><span class="line">    <span class="comment">// 排序、分页参数</span></span><br><span class="line">    Sort sort = <span class="keyword">new</span> Sort(Sort.Direction.DESC, <span class="string">&quot;actorAge&quot;</span>);</span><br><span class="line">    PageRequest pageRequest = PageRequest.of(page &lt; <span class="number">0</span> ? <span class="number">0</span> : page, pageSize, sort);</span><br><span class="line">    Page&lt;Actor&gt; actorPage = querydslRepository.findAll(expression, pageRequest);</span><br><span class="line">    log.info(<span class="string">&quot;分页查询第:[&#123;&#125;]页,pageSize:[&#123;&#125;],共有:[&#123;&#125;]数据,共有:[&#123;&#125;]页&quot;</span>, page, pageSize, actorPage.getTotalElements(), actorPage.getTotalPages());</span><br><span class="line">    List&lt;Actor&gt; actorListByPagination = actorPage.getContent();</span><br><span class="line">    log.info(JSONUtil.toJsonPrettyStr(actorListByPagination));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="4-2-2、动态查询并分页排序"><a href="#4-2-2、动态查询并分页排序" class="headerlink" title="4.2.2、动态查询并分页排序"></a>4.2.2、动态查询并分页排序</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 动态查询并分页排序</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindByDynamicQuery</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Integer actorAge = <span class="number">45</span>;</span><br><span class="line">    String actorEmail = <span class="string">&quot;email&quot;</span>;</span><br><span class="line">    String actorName = <span class="keyword">null</span>;</span><br><span class="line">    String createTime = <span class="string">&quot;2020-11-21&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> page = <span class="number">0</span>; <span class="comment">// 第几页</span></span><br><span class="line">    <span class="keyword">int</span> pageSize = <span class="number">10</span>; <span class="comment">// 每页大小</span></span><br><span class="line"></span><br><span class="line">    QActor qActor = QActor.actor;</span><br><span class="line">    <span class="comment">// 初始化组装条件(类似where 1=1)</span></span><br><span class="line">    Predicate predicate = qActor.isNotNull().or(qActor.isNull());</span><br><span class="line"></span><br><span class="line">    <span class="comment">//执行动态条件拼装</span></span><br><span class="line">    <span class="comment">// 相等</span></span><br><span class="line">    predicate = actorAge == <span class="keyword">null</span> ? predicate : ExpressionUtils.and(predicate, qActor.actorAge.eq(actorAge));</span><br><span class="line">    <span class="comment">// like 模糊匹配</span></span><br><span class="line">    predicate = actorEmail == <span class="keyword">null</span> ? predicate : ExpressionUtils.and(predicate, qActor.actorEmail.like(actorEmail + <span class="string">&quot;%&quot;</span>));</span><br><span class="line">    predicate = actorName == <span class="keyword">null</span> ? predicate : ExpressionUtils.and(predicate, qActor.actorName.like(actorName + <span class="string">&quot;%&quot;</span>));</span><br><span class="line">    <span class="comment">// 包含，相当于like %xxx%</span></span><br><span class="line">    predicate = createTime == <span class="keyword">null</span> ? predicate : ExpressionUtils.and(predicate, qActor.createTime.contains(createTime));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 排序、分页参数</span></span><br><span class="line">    Sort sort = <span class="keyword">new</span> Sort(Sort.Direction.ASC, <span class="string">&quot;id&quot;</span>);</span><br><span class="line">    PageRequest pageRequest = PageRequest.of(page &lt; <span class="number">0</span> ? <span class="number">0</span> : page, pageSize, sort);</span><br><span class="line">    Page&lt;Actor&gt; actorPage = querydslRepository.findAll(predicate, pageRequest);</span><br><span class="line">    log.info(<span class="string">&quot;分页查询第:[&#123;&#125;]页,pageSize:[&#123;&#125;],共有:[&#123;&#125;]数据,共有:[&#123;&#125;]页&quot;</span>, page, pageSize, actorPage.getTotalElements(), actorPage.getTotalPages());</span><br><span class="line">    List&lt;Actor&gt; actorListByPagination = actorPage.getContent();</span><br><span class="line">    log.info(JSONUtil.toJsonPrettyStr(actorListByPagination));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="代码地址"><a href="#代码地址" class="headerlink" title="代码地址"></a>代码地址</h2><ul><li>github：<a href="https://github.com/senlinmu1008/jpa-action/tree/master/jpa-dynamic-query">https://github.com/senlinmu1008/jpa-action/tree/master/jpa-dynamic-query</a></li><li>gitee：<a href="https://gitee.com/ppbin/jpa-action/tree/master/jpa-dynamic-query">https://gitee.com/ppbin/jpa-action/tree/master/jpa-dynamic-query</a><br><br><br></li></ul>]]></content>
      
      
      <categories>
          
          <category> JPA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JPA </tag>
            
            <tag> QueryDSL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Data JPA中分别使用Specifications、ExampleMatcher进行查询</title>
      <link href="JPA/Spring%20Data%20JPA%E4%B8%AD%E5%88%86%E5%88%AB%E4%BD%BF%E7%94%A8Specifications%E3%80%81ExampleMatcher%E8%BF%9B%E8%A1%8C%E6%9F%A5%E8%AF%A2/"/>
      <url>JPA/Spring%20Data%20JPA%E4%B8%AD%E5%88%86%E5%88%AB%E4%BD%BF%E7%94%A8Specifications%E3%80%81ExampleMatcher%E8%BF%9B%E8%A1%8C%E6%9F%A5%E8%AF%A2/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="1、Specifications进行查询"><a href="#1、Specifications进行查询" class="headerlink" title="1、Specifications进行查询"></a>1、Specifications进行查询</h2><p>在一些查询条件不固定的场景下，我们需要动态去组装查询条件。在Spring Data JPA中可以通过 <code>JpaSpecificationExecutor</code> 接口查询。相比JPQL,其优势是类型安全,更加的面向对象。</p><h4 id="1-1、创建Repository"><a href="#1-1、创建Repository" class="headerlink" title="1.1、创建Repository"></a>1.1、创建Repository</h4><p>需要继承 <code>JpaSpecificationExecutor</code> 接口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SpecificationRepository</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">Actor</span>, <span class="title">Long</span>&gt;, <span class="title">JpaSpecificationExecutor</span>&lt;<span class="title">Actor</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-2、Service"><a href="#1-2、Service" class="headerlink" title="1.2、Service"></a>1.2、Service</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpecificationServiceImpl</span> <span class="keyword">implements</span> <span class="title">SpecificationService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SpecificationRepository specificationRepository;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Actor&gt; <span class="title">findBySpecification</span><span class="params">(Long id, Integer age, Integer page, Integer pageSize)</span> </span>&#123;</span><br><span class="line">        Specification&lt;Actor&gt; specification = (Specification&lt;Actor&gt;) (root, criteriaQuery, criteriaBuilder) -&gt; &#123;</span><br><span class="line">            <span class="comment">// 查询条件的集合</span></span><br><span class="line">            List&lt;Predicate&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 条件1：id字段需要大于等于指定的id</span></span><br><span class="line">            list.add(criteriaBuilder.greaterThanOrEqualTo(root.get(<span class="string">&quot;id&quot;</span>), (id == <span class="keyword">null</span> || id &lt; <span class="number">0</span>) ? <span class="number">0</span> : id));</span><br><span class="line">            <span class="comment">// 条件2：如果指定了age，则需要相等</span></span><br><span class="line">            <span class="keyword">if</span>(age != <span class="keyword">null</span> &amp;&amp; age &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">// 字段需要和实体类中属性相同，而非表中字段</span></span><br><span class="line">                list.add(criteriaBuilder.equal(root.get(<span class="string">&quot;actorAge&quot;</span>), age));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 转数组</span></span><br><span class="line">            Predicate[] predicates = <span class="keyword">new</span> Predicate[list.size()];</span><br><span class="line">            list.toArray(predicates);</span><br><span class="line">            <span class="keyword">return</span> criteriaBuilder.and(predicates);</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 指定排序和分页</span></span><br><span class="line">        Sort sort = <span class="keyword">new</span> Sort(Sort.Direction.ASC, <span class="string">&quot;id&quot;</span>);</span><br><span class="line">        PageRequest pageRequest = PageRequest.of(page &lt; <span class="number">0</span> ? <span class="number">0</span> : page, pageSize, sort);</span><br><span class="line">        Page&lt;Actor&gt; actorPage = specificationRepository.findAll(specification, pageRequest);</span><br><span class="line">        log.info(<span class="string">&quot;分页查询第:[&#123;&#125;]页,pageSize:[&#123;&#125;],共有:[&#123;&#125;]数据,共有:[&#123;&#125;]页&quot;</span>, page, pageSize, actorPage.getTotalElements(), actorPage.getTotalPages());</span><br><span class="line">        List&lt;Actor&gt; actorListBySpecification = actorPage.getContent();</span><br><span class="line">        <span class="keyword">return</span> actorListBySpecification;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>判断条件值是否存在，动态追加条件。<br>注意指定的字段是实体类中的属性名而非表中的字段名。</p><h4 id="1-3、测试"><a href="#1-3、测试" class="headerlink" title="1.3、测试"></a>1.3、测试</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpecificationTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SpecificationService specificationService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSpecification</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;Actor&gt; actorList = specificationService.findBySpecification(<span class="number">1L</span>, <span class="keyword">null</span>, <span class="number">0</span>, <span class="number">10</span>);</span><br><span class="line">        log.info(JSONUtil.toJsonPrettyStr(actorList));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>多次修改查询条件测试，可以看出查询条件是根据实际情况动态追加的。</p><h2 id="2、ExampleMatcher进行查询"><a href="#2、ExampleMatcher进行查询" class="headerlink" title="2、ExampleMatcher进行查询"></a>2、ExampleMatcher进行查询</h2><h4 id="2-1、创建Repository"><a href="#2-1、创建Repository" class="headerlink" title="2.1、创建Repository"></a>2.1、创建Repository</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ExampleMatcherRepository</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">Actor</span>, <span class="title">Long</span>&gt; </span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-2、Service"><a href="#2-2、Service" class="headerlink" title="2.2、Service"></a>2.2、Service</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExampleMatcherServiceImpl</span> <span class="keyword">implements</span> <span class="title">ExampleMatcherService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ExampleMatcherRepository exampleMatcherRepository;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Actor&gt; <span class="title">findByExampleMatcher</span><span class="params">(String actorEmailPre, String actorNamePre, Integer page, Integer pageSize)</span> </span>&#123;</span><br><span class="line">        Actor actor = <span class="keyword">new</span> Actor();</span><br><span class="line">        actor.setActorEmail(actorEmailPre);</span><br><span class="line">        actor.setActorName(actorNamePre);</span><br><span class="line">        ExampleMatcher matcher = ExampleMatcher.matching()</span><br><span class="line">                .withMatcher(<span class="string">&quot;actorEmail&quot;</span>, ExampleMatcher.GenericPropertyMatchers.startsWith())</span><br><span class="line">                .withMatcher(<span class="string">&quot;actorName&quot;</span>, ExampleMatcher.GenericPropertyMatchers.startsWith())</span><br><span class="line">                .withIgnoreCase() <span class="comment">// 忽略大小写，MYSQL模糊查询默认也会忽略大小写</span></span><br><span class="line">                .withIgnoreNullValues() <span class="comment">// 忽略null值</span></span><br><span class="line">                <span class="comment">// 默认会匹配所有字段作为查询条件，所以需要设置忽略哪些字段不作为条件匹配，即这些字段可以任意值</span></span><br><span class="line">                .withIgnorePaths(<span class="string">&quot;actorAge&quot;</span>, <span class="string">&quot;createTime&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Example&lt;Actor&gt; actorExample = Example.of(actor, matcher);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 指定排序和分页</span></span><br><span class="line">        Sort sort = <span class="keyword">new</span> Sort(Sort.Direction.ASC, <span class="string">&quot;actorAge&quot;</span>);</span><br><span class="line">        PageRequest pageRequest = PageRequest.of(page &lt; <span class="number">0</span> ? <span class="number">0</span> : page, pageSize, sort);</span><br><span class="line">        Page&lt;Actor&gt; actorPage = exampleMatcherRepository.findAll(actorExample, pageRequest);</span><br><span class="line">        log.info(<span class="string">&quot;分页查询第:[&#123;&#125;]页,pageSize:[&#123;&#125;],共有:[&#123;&#125;]数据,共有:[&#123;&#125;]页&quot;</span>, page, pageSize, actorPage.getTotalElements(), actorPage.getTotalPages());</span><br><span class="line">        List&lt;Actor&gt; actorListByExampleMatcher = actorPage.getContent();</span><br><span class="line">        <span class="keyword">return</span> actorListByExampleMatcher;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>模糊查询匹配字符串。</p><h4 id="2-3、测试"><a href="#2-3、测试" class="headerlink" title="2.3、测试"></a>2.3、测试</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExampleMatcherTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ExampleMatcherService exampleMatcherService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testExampleMatcher</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;Actor&gt; actorList = exampleMatcherService.findByExampleMatcher(<span class="string">&quot;EMAIL&quot;</span>, <span class="string">&quot;name&quot;</span>, <span class="number">0</span>, <span class="number">10</span>);</span><br><span class="line">        log.info(JSONUtil.toJsonPrettyStr(actorList));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="代码地址"><a href="#代码地址" class="headerlink" title="代码地址"></a>代码地址</h2><ul><li>github：<a href="https://github.com/senlinmu1008/jpa-action/tree/master/jpa-dynamic-query">https://github.com/senlinmu1008/jpa-action/tree/master/jpa-dynamic-query</a></li><li>gitee：<a href="https://gitee.com/ppbin/jpa-action/tree/master/jpa-dynamic-query">https://gitee.com/ppbin/jpa-action/tree/master/jpa-dynamic-query</a><br><br><br></li></ul>]]></content>
      
      
      <categories>
          
          <category> JPA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JPA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot中JPA的基本使用</title>
      <link href="JPA/SpringBoot%E4%B8%ADJPA%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
      <url>JPA/SpringBoot%E4%B8%ADJPA%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="1、认识JPA"><a href="#1、认识JPA" class="headerlink" title="1、认识JPA"></a>1、认识JPA</h2><p>JPA(Java Persistence API)是Java的持久化API，用于对象的持久化。它是一个非常强大的ORM持久化的解决方案，免去了使用<code>JDBCTemplate</code> 开发的编写脚本工作。JPA通过简单约定好接口方法的规则自动生成相应的 <code>JPQL</code> 语句，然后映射成 <code>POJO</code> 对象。</p><p>JPA是一个规范化接口，封装了 <code>Hibernate</code> 的操作作为默认实现，让用户不通过任何配置即可完成数据库的操作。<code>JPA</code>、<code>SpringData</code> 和 <code>Hibernate</code>的关系如图所示。</p><p><img src="https://zhaoxiaobin.coding.net/p/blog/d/zhaoxiaobin_img/git/raw/master/post/JPA/JPA-1-1.jpg" alt="-w887"></p><h2 id="2、使用JPA"><a href="#2、使用JPA" class="headerlink" title="2、使用JPA"></a>2、使用JPA</h2><h4 id="2-1、Maven依赖"><a href="#2-1、Maven依赖" class="headerlink" title="2.1、Maven依赖"></a>2.1、Maven依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    jpa依赖    --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    mysql驱动    --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-2、配置"><a href="#2-2、配置" class="headerlink" title="2.2、配置"></a>2.2、配置</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">jpa-basic</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://148.70.153.63:3306/ttms?useUnicode=true&amp;characterEncoding=UTF-8&amp;allowMultiQueries=true&amp;useSSL=false</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">password</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">  <span class="attr">jpa:</span></span><br><span class="line">    <span class="attr">show-sql:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">hibernate:</span></span><br><span class="line">      <span class="attr">ddl-auto:</span> <span class="string">update</span></span><br><span class="line">    <span class="attr">database:</span> <span class="string">MYSQL</span></span><br><span class="line">    <span class="attr">properties:</span></span><br><span class="line">      <span class="attr">hibernate:</span></span><br><span class="line">        <span class="attr">format_sql:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>主要说明一下 <code>spring.jpa.hibernate.ddl-auto</code>这个属性：</p><table><thead><tr><th align="center">属性</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">create</td><td align="center">每次应用启动的时候会重新根据实体建立表，之前的表和数据都会被删除。</td></tr><tr><td align="center">create-drop</td><td align="center">和上面的功能一样，但是多了一样，就是在应用关闭的时候，也就是sessionFactory一关闭，会把表删除。</td></tr><tr><td align="center">update</td><td align="center">最常用的，第一次启动根据实体建立表结构，之后启动会根据实体的改变更新表结构，之前的数据都在。</td></tr><tr><td align="center">validate</td><td align="center">会验证创建数据库表结构，只会和数据库中的表进行比较，不会创建新表，但是会插入新值。<br>运行程序会校验实体字段与数据库已有的表的字段类型是否相同，不同会报错。</td></tr></tbody></table><h4 id="2-3、事务的支持"><a href="#2-3、事务的支持" class="headerlink" title="2.3、事务的支持"></a>2.3、事务的支持</h4><p>由于SpringBoot2.x版本后，创建 <code>mysql</code> 表默认用的是 <code>myisam</code> 引擎，是不支持事务的。为了支持事务，我们创建表时需要使用 <code>innodb</code> 引擎。很多网上教程使用的是增加如下配置：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">spring.jpa.properties.hibernate.dialect</span>=<span class="string">org.hibernate.dialect.MySQL5InnoDBDialect</span></span><br></pre></td></tr></table></figure><p>虽然也能达到效果，但是查看 <code>MySQL5InnoDBDialect</code> 类的源码可以知道，此类已经被 <code>@Deprecated</code> 了，建议使用如下方式：</p><p>在 <code>resources</code> 目录下创建 <code>hibernate.properties</code> 文件</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># hibernate建表时指定innodb作为存储引擎</span></span><br><span class="line"><span class="meta">hibernate.dialect.storage_engine</span>=<span class="string">innodb</span></span><br></pre></td></tr></table></figure><p>或者在启动时设置为JVM参数，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    System.setProperty(<span class="string">&quot;hibernate.dialect.storage_engine&quot;</span>, <span class="string">&quot;innodb&quot;</span>);</span><br><span class="line">    SpringApplication.run(JpaBasicApplication.class, args);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-4、定义实体类"><a href="#2-4、定义实体类" class="headerlink" title="2.4、定义实体类"></a>2.4、定义实体类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table(name = &quot;actor&quot;)</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Actor</span> </span>&#123;</span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 采用序列sequence作为主键</span></span><br><span class="line"><span class="comment">     * initialValue:初始值</span></span><br><span class="line"><span class="comment">     * allocationSize:步进，每次递增的大小</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="comment">//    @Id</span></span><br><span class="line"><span class="comment">//    @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = &quot;actor_sequence&quot;)</span></span><br><span class="line"><span class="comment">//    @SequenceGenerator(name = &quot;actor_sequence&quot;, initialValue = 100, allocationSize = 20, sequenceName = &quot;actor_seq&quot;)</span></span><br><span class="line"><span class="comment">//    private Long id;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 主键生成采用数据库自增方式，比如MySQL的AUTO_INCREMENT</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue(strategy = GenerationType.IDENTITY)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column(name = &quot;actor_name&quot;, nullable = false, length = 128, unique = true)</span></span><br><span class="line">    <span class="keyword">private</span> String actorName;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column(name = &quot;actor_age&quot;, nullable = false)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> actorAge;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column(name = &quot;actor_email&quot;, length = 64, unique = true)</span></span><br><span class="line">    <span class="keyword">private</span> String actorEmail;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column(name = &quot;create_time&quot;, nullable = false, length = 32)</span></span><br><span class="line">    <span class="keyword">private</span> String createTime = DateUtil.format(<span class="keyword">new</span> Date(), <span class="string">&quot;yyyy-MM-dd HH:mm:ss SSS&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意以上注解使用的是 <code>javax.persistence</code> 包中的。</p><p>常用注解解释：</p><table><thead><tr><th align="center">注解</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">@Entity</td><td align="center">声明类为实体</td></tr><tr><td align="center">@Table</td><td align="center">声明表名，一般和@Entity一块使用，如果表名和实体类名相同，那么@Table可以省略</td></tr><tr><td align="center">@Id</td><td align="center">指定主键字段</td></tr><tr><td align="center">@GeneratedValue</td><td align="center">指定主键的生成策略，主要有TABLE、SEQUENCE、IDENTITY、AUTO这几种</td></tr><tr><td align="center">@Transient</td><td align="center">指定忽略的字段，不做持久化，一般用于排除非表中的字段</td></tr><tr><td align="center">@Column</td><td align="center">指定属性对应的表中字段名和约束条件</td></tr><tr><td align="center">@SequenceGenerator</td><td align="center">一般和@GeneratedValue一块使用。<br>如果主键生成策略是SEQUENCE，那么可以用这个注解来定义如何创建序列</td></tr><tr><td align="center">@Basic</td><td align="center">指定实体属性的加载方式，比如@Basic(fetch = FetchType.LAZY)</td></tr></tbody></table><h4 id="2-5、自动建表"><a href="#2-5、自动建表" class="headerlink" title="2.5、自动建表"></a>2.5、自动建表</h4><p>启动项目，查看控制台，发现会有建表语句输出：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Hibernate: </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">create</span> <span class="keyword">table</span> actor (</span><br><span class="line">       <span class="keyword">id</span> <span class="built_in">bigint</span> <span class="keyword">not</span> <span class="literal">null</span> auto_increment,</span><br><span class="line">        actor_age <span class="built_in">integer</span> <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">        actor_email <span class="built_in">varchar</span>(<span class="number">64</span>),</span><br><span class="line">        actor_name <span class="built_in">varchar</span>(<span class="number">128</span>) <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">        create_time <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">        primary <span class="keyword">key</span> (<span class="keyword">id</span>)</span><br><span class="line">    ) <span class="keyword">engine</span>=<span class="keyword">InnoDB</span></span><br></pre></td></tr></table></figure><p>查看数据库，可以看到表已经建立好了。当然在一些情况下，我们并不希望使用JPA自动为我们创建的表，我们可以先提前建好表，最后再根据表结构定义实体类。</p><h2 id="3、新增和删除"><a href="#3、新增和删除" class="headerlink" title="3、新增和删除"></a>3、新增和删除</h2><h4 id="3-1、创建Repository"><a href="#3-1、创建Repository" class="headerlink" title="3.1、创建Repository"></a>3.1、创建Repository</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ActorSaveAndDeleteRepository</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">Actor</span>, <span class="title">Long</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要继承 <code>JpaRepository</code>，并指定表对应的实体类和主键类型。这里不需要写任何具体的实现方法或sql就能完成我们需要的操作。</p><h4 id="3-2、Service"><a href="#3-2、Service" class="headerlink" title="3.2、Service"></a>3.2、Service</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ActorSaveAndDeleteServiceImpl</span> <span class="keyword">implements</span> <span class="title">ActorSaveAndDeleteService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ActorSaveAndDeleteRepository actorSaveAndDeleteRepository;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 新增1条数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> actorName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> actorAge</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> actorEmail</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Actor <span class="title">save</span><span class="params">(String actorName, <span class="keyword">int</span> actorAge, String actorEmail)</span> </span>&#123;</span><br><span class="line">        Actor actor = <span class="keyword">new</span> Actor();</span><br><span class="line">        actor.setActorName(actorName);</span><br><span class="line">        actor.setActorAge(actorAge);</span><br><span class="line">        actor.setActorEmail(actorEmail);</span><br><span class="line">        Actor storeObj = actorSaveAndDeleteRepository.save(actor);</span><br><span class="line">        <span class="keyword">return</span> storeObj;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 批量新增</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">batchSave</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;Actor&gt; actors = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            Actor actor = <span class="keyword">new</span> Actor();</span><br><span class="line">            actor.setActorName(<span class="string">&quot;name:&quot;</span> + RandomUtil.randomString(<span class="number">5</span>));</span><br><span class="line">            actor.setActorAge(RandomUtil.randomInt(<span class="number">1</span>, <span class="number">100</span>));</span><br><span class="line">            actor.setActorEmail(<span class="string">&quot;email:&quot;</span> + RandomUtil.randomString(<span class="number">5</span>));</span><br><span class="line">            actors.add(actor);</span><br><span class="line">        &#125;</span><br><span class="line">        actorSaveAndDeleteRepository.saveAll(actors);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除指定id的一条数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        actorSaveAndDeleteRepository.deleteById(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>@Transactional</code>注解用于开启事务。</p><h4 id="3-3、测试"><a href="#3-3、测试" class="headerlink" title="3.3、测试"></a>3.3、测试</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ActorSaveAndDeleteTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ActorSaveAndDeleteService actorSaveAndDeleteService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSave</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Actor actor = actorSaveAndDeleteService.save(<span class="string">&quot;高庸涵&quot;</span>, <span class="number">28</span>, <span class="string">&quot;13486627323@163.com&quot;</span>);</span><br><span class="line">        log.info(JSONUtil.toJsonPrettyStr(actor));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testBatchSave</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        actorSaveAndDeleteService.batchSave();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDelete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        actorSaveAndDeleteService.delete(<span class="number">10L</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-4、结果查看"><a href="#3-4、结果查看" class="headerlink" title="3.4、结果查看"></a>3.4、结果查看</h4><p>可以看到控制台会有如下sql输出，最后查看数据库确实已经有数据插入。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Hibernate: </span><br><span class="line">    <span class="keyword">insert</span> </span><br><span class="line">    <span class="keyword">into</span></span><br><span class="line">        actor</span><br><span class="line">        (actor_age, actor_email, actor_name, create_time) </span><br><span class="line">    <span class="keyword">values</span></span><br><span class="line">        (?, ?, ?, ?)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;actorAge&quot;</span>: <span class="number">28</span>,</span><br><span class="line">    <span class="string">&quot;createTime&quot;</span>: <span class="string">&quot;2020-11-21 22:37:32 541&quot;</span>,</span><br><span class="line">    <span class="string">&quot;actorEmail&quot;</span>: <span class="string">&quot;13486627323@163.com&quot;</span>,</span><br><span class="line">    <span class="string">&quot;actorName&quot;</span>: <span class="string">&quot;高庸涵&quot;</span>,</span><br><span class="line">    <span class="string">&quot;id&quot;</span>: <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里我们完全不需要写sql就可以达到操作数据库的效果，原因在于JPA已经把常用的方法已经封装好了，我们只需要去继承就可以获得这些方法，最后在执行时会自动把这些方法转换成相应的sql去执行。</p><h2 id="4、更新数据库"><a href="#4、更新数据库" class="headerlink" title="4、更新数据库"></a>4、更新数据库</h2><h4 id="4-1、创建Repository"><a href="#4-1、创建Repository" class="headerlink" title="4.1、创建Repository"></a>4.1、创建Repository</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ActorUpdateRepository</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">Actor</span>, <span class="title">Long</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * JPQL更新数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> email</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Modifying</span></span><br><span class="line">    <span class="meta">@Query(&quot;update Actor a set a.actorEmail = ?1 where a.id = ?2&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">updateActorEmailById</span><span class="params">(String email, Long id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用原生sql批量更新</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Modifying</span></span><br><span class="line">    <span class="meta">@Query(value = &quot;update actor a set a.create_time = ?1 where a.id &gt;= ?2&quot;, nativeQuery = true)</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">updateCreateTimeById</span><span class="params">(String createTime, Long id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第1种是使用 <code>JPQL</code> 方式，表名需要用实体类名来表示，字段也需要用实体类中的属性来表示，参数序号需要一一对应。<code>@Modifying</code> 注解表示这是一个更新数据的操作。JPA会把 <code>JPQL</code> 翻译成sql去执行。</p><p>第2种是使用原生sql的方式，用<code>nativeQuery = true</code>这个属性来表示是否为原生sql。</p><h4 id="4-2、Service"><a href="#4-2、Service" class="headerlink" title="4.2、Service"></a>4.2、Service</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ActorUpdateServiceImpl</span> <span class="keyword">implements</span> <span class="title">ActorUpdateService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ActorUpdateRepository actorUpdateRepository;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用JPQL语句更新数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> email</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">updateActorEmailById</span><span class="params">(String email, Long id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> actorUpdateRepository.updateActorEmailById(email, id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用原生sql批量更新数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">updateCreateTimeById</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        String createTime = DateUtil.format(<span class="keyword">new</span> Date(), <span class="string">&quot;yyyy-MM-dd HH:mm:ss SSS&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> actorUpdateRepository.updateCreateTimeById(createTime, id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-3、测试"><a href="#4-3、测试" class="headerlink" title="4.3、测试"></a>4.3、测试</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ActorUpdateTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ActorUpdateService actorUpdateService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUpdateActorEmailById</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> row = actorUpdateService.updateActorEmailById(<span class="string">&quot;123456789@qq.com&quot;</span>, <span class="number">1L</span>);</span><br><span class="line">        log.info(<span class="string">&quot;更新数量:&#123;&#125;&quot;</span>, row);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUpdateCreateTimeById</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> row = actorUpdateService.updateCreateTimeById(<span class="number">2L</span>);</span><br><span class="line">        log.info(<span class="string">&quot;更新数量:&#123;&#125;&quot;</span>, row);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Hibernate: </span><br><span class="line">    <span class="keyword">update</span></span><br><span class="line">        actor </span><br><span class="line">    <span class="keyword">set</span></span><br><span class="line">        actor_email=? </span><br><span class="line">    <span class="keyword">where</span></span><br><span class="line">        <span class="keyword">id</span>=?</span><br><span class="line">更新数量:<span class="number">1</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Hibernate: </span><br><span class="line">    <span class="keyword">update</span></span><br><span class="line">        actor a </span><br><span class="line">    <span class="keyword">set</span></span><br><span class="line">        a.create_time = ? </span><br><span class="line">    <span class="keyword">where</span></span><br><span class="line">        a.id &gt;= ?</span><br><span class="line">更新数量:<span class="number">99</span></span><br></pre></td></tr></table></figure><h2 id="5、查询数据库"><a href="#5、查询数据库" class="headerlink" title="5、查询数据库"></a>5、查询数据库</h2><h4 id="5-1、使用约定方法名查询"><a href="#5-1、使用约定方法名查询" class="headerlink" title="5.1、使用约定方法名查询"></a>5.1、使用约定方法名查询</h4><p>约定方法名一定要根据命名规范来写，JPA会根据前缀、中间连接词（Or、And、Like、NotNull等类似SQL中的关键字）、内部拼接SQL代理生成方法的实现。约定方法名的方法如下表：</p><table><thead><tr><th align="center">SQL</th><th align="center">方法例子</th><th align="center">JPQL语句</th></tr></thead><tbody><tr><td align="center">and</td><td align="center">findByNameAndAge</td><td align="center">where x.name = ?1 and x.age = ?2</td></tr><tr><td align="center">or</td><td align="center">findByNameOrAge</td><td align="center">where x.name = ?1 or x.age = ?2</td></tr><tr><td align="center">=</td><td align="center">findByName</td><td align="center">where x.name = ?1</td></tr><tr><td align="center">between xxx and xxx</td><td align="center">findByStartDateBetween</td><td align="center">where x.startDate between ?1 and ?2</td></tr><tr><td align="center">&lt;</td><td align="center">findByAgeLessThan</td><td align="center">where x.age &lt; ?1</td></tr><tr><td align="center">&lt;=</td><td align="center">findByAgeLessThanEqual</td><td align="center">where x.age &lt;= ?1</td></tr><tr><td align="center">&gt;</td><td align="center">findByAgeGreaterThan</td><td align="center">where x.age &gt; ?1</td></tr><tr><td align="center">&gt;=</td><td align="center">findByAgeGreaterThanEqual</td><td align="center">where x.age &gt;= ?1</td></tr><tr><td align="center">&gt;</td><td align="center">findByStartDateAfter</td><td align="center">where x.startDate &gt; ?1</td></tr><tr><td align="center">&lt;</td><td align="center">findByStartDateBefore</td><td align="center">where x.startDate &lt; ?1</td></tr><tr><td align="center">is null</td><td align="center">findByAgeIsNull</td><td align="center">where x.age is null</td></tr><tr><td align="center">is not null</td><td align="center">findByAgeNotNull</td><td align="center">where x.age not null</td></tr><tr><td align="center">like</td><td align="center">findByNameLike</td><td align="center">where x.name like ?1</td></tr><tr><td align="center">not like</td><td align="center">findByNameNotLike</td><td align="center">where x.name not like ?1</td></tr><tr><td align="center">like ‘xxx%’</td><td align="center">findByNameStartingWith</td><td align="center">where x.name like ?1 参数后需要带有 % 号</td></tr><tr><td align="center">like ‘%xxx’</td><td align="center">findByNameEndingWith</td><td align="center">where x.name like ?1 参数前需要带有 % 号</td></tr><tr><td align="center">like ‘%xxx%’</td><td align="center">findByNameContaining</td><td align="center">where x.name like ?1 参数需要被 % 号包装</td></tr><tr><td align="center">order by</td><td align="center">findByNameOrderByAgeDesc</td><td align="center">where x.name = ?1 order by age desc</td></tr><tr><td align="center">&lt;&gt;</td><td align="center">findByAgeNot</td><td align="center">where x.age &lt;&gt; ?1</td></tr><tr><td align="center">int()</td><td align="center">findByAgeIn(Collection<Integer> ages)</Integer></td><td align="center">where x.age in ?1</td></tr><tr><td align="center">not int()</td><td align="center">findByAgeNotIn(Collection<Integer> ages)</Integer></td><td align="center">where x.age not in ?1</td></tr></tbody></table><p>约定方法名还支持以下几种用法：</p><ul><li><code>Page&lt;User&gt; queryFirst100ByName(String name, Pageable pageable)</code></li><li><code>List&lt;User&gt; findTop100ByName(String name, Pageable pageable)</code></li></ul><h5 id="5-1-1、测试使用方法名映射成sql查询单条数据"><a href="#5-1-1、测试使用方法名映射成sql查询单条数据" class="headerlink" title="5.1.1、测试使用方法名映射成sql查询单条数据"></a>5.1.1、测试使用方法名映射成sql查询单条数据</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ActorFindRepository</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">Actor</span>, <span class="title">Long</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用方法名映射成sql查询单条数据，如果查询到多条数据则会报错</span></span><br><span class="line"><span class="comment">     * 等价于 where actor_name = ? and actor_email = ?</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> email</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Actor <span class="title">findByActorNameAndActorEmail</span><span class="params">(String name, String email)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ActorFindTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ActorFindRepository actorFindRepository;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试使用方法名映射成sql查询单条数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindByActorNameAndActorEmail</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Actor actor = actorFindRepository.findByActorNameAndActorEmail(<span class="string">&quot;高庸涵&quot;</span>, <span class="string">&quot;123456789@qq.com&quot;</span>);</span><br><span class="line">        log.info(JSONUtil.toJsonPrettyStr(actor));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="5-1-2、测试使用方法名映射成sql查询多条数据并排序"><a href="#5-1-2、测试使用方法名映射成sql查询多条数据并排序" class="headerlink" title="5.1.2、测试使用方法名映射成sql查询多条数据并排序"></a>5.1.2、测试使用方法名映射成sql查询多条数据并排序</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用方法名映射成sql查询多条数据并排序</span></span><br><span class="line"><span class="comment"> * 等价于 where actor_name like &#x27;xxx%&#x27; and id &gt;= ? order by actor_age</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> name</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">List&lt;Actor&gt; <span class="title">findByActorNameStartingWithAndIdGreaterThanEqualOrderByActorAge</span><span class="params">(String name, Long id)</span></span>;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试使用方法名映射成sql查询多条数据并排序</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindByLikeActorName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    List&lt;Actor&gt; actorList = actorFindRepository.findByActorNameStartingWithAndIdGreaterThanEqualOrderByActorAge(<span class="string">&quot;name&quot;</span>, <span class="number">50L</span>);</span><br><span class="line">    log.info(JSONUtil.toJsonPrettyStr(actorList));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="5-1-3、测试带条件查询并排序"><a href="#5-1-3、测试带条件查询并排序" class="headerlink" title="5.1.3、测试带条件查询并排序"></a>5.1.3、测试带条件查询并排序</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用方法名映射成sql，带条件查询并排序</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> sort</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">List&lt;Actor&gt; <span class="title">findByIdGreaterThanEqual</span><span class="params">(Long id, Sort sort)</span></span>;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试带条件查询并排序</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindBySort</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Sort sort = <span class="keyword">new</span> Sort(Sort.Direction.DESC, <span class="string">&quot;actorAge&quot;</span>);</span><br><span class="line">    List&lt;Actor&gt; actorList = actorFindRepository.findByIdGreaterThanEqual(<span class="number">90L</span>, sort);</span><br><span class="line">    log.info(JSONUtil.toJsonPrettyStr(actorList));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意排序字段是实体类中的属性字段而不是表中的字段名。如果对于多个字段排序方式不同，可以用如下方式构建 <code>Sort</code> 排序对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Sort.Order&gt; orders = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">orders.add(<span class="keyword">new</span> Sort.Order((Sort.Direction.DESC), <span class="string">&quot;id&quot;</span>));</span><br><span class="line">orders.add(<span class="keyword">new</span> Sort.Order((Sort.Direction.ASC), <span class="string">&quot;actorAge&quot;</span>));</span><br><span class="line">Sort sort = Sort.by(orders);</span><br></pre></td></tr></table></figure><h5 id="5-1-4、测试带条件分页查询并排序"><a href="#5-1-4、测试带条件分页查询并排序" class="headerlink" title="5.1.4、测试带条件分页查询并排序"></a>5.1.4、测试带条件分页查询并排序</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用方法名映射成sql，带条件查询分页并排序</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> pageable</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">Page&lt;Actor&gt; <span class="title">findByIdGreaterThanEqual</span><span class="params">(Long id, Pageable pageable)</span></span>;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 带条件分页查询并排序</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindByPagination</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 指定排序，等价于 order by actor_age,create_time</span></span><br><span class="line">    Sort sort = <span class="keyword">new</span> Sort(Sort.Direction.ASC, <span class="string">&quot;actorAge&quot;</span>, <span class="string">&quot;createTime&quot;</span>);</span><br><span class="line">    PageRequest pageRequest = PageRequest.of(<span class="number">0</span>, <span class="number">10</span>, sort);</span><br><span class="line"><span class="comment">//    Page&lt;Actor&gt; actorPage = actorRepository.findAll(pageRequest); // 不带条件分页查询</span></span><br><span class="line">    Page&lt;Actor&gt; actorPage = actorFindRepository.findByIdGreaterThanEqual(<span class="number">1L</span>, pageRequest); <span class="comment">// 带条件分页查询</span></span><br><span class="line">    log.info(<span class="string">&quot;共有:[&#123;&#125;]数据,共有:[&#123;&#125;]页&quot;</span>, actorPage.getTotalElements(), actorPage.getTotalPages());</span><br><span class="line">    List&lt;Actor&gt; actorListByPagination = actorPage.getContent();</span><br><span class="line">    log.info(JSONUtil.toJsonPrettyStr(actorListByPagination));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-2、使用JPQL分页查询并排序"><a href="#5-2、使用JPQL分页查询并排序" class="headerlink" title="5.2、使用JPQL分页查询并排序"></a>5.2、使用JPQL分页查询并排序</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用JPQL分页查询</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> pageable</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Query(&quot;from Actor a where a.id &gt;= ?1&quot;)</span></span><br><span class="line"><span class="function">Page&lt;Actor&gt; <span class="title">findByPaginationWithJPQL</span><span class="params">(Long id, Pageable pageable)</span></span>;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试带条件分页查询并排序，用JPQL方式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindByPaginationWithJPQL</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 指定的字段需要和实体类中属性相同，而非表中字段</span></span><br><span class="line">    Sort sort = <span class="keyword">new</span> Sort(Sort.Direction.ASC, <span class="string">&quot;actorAge&quot;</span>, <span class="string">&quot;createTime&quot;</span>);</span><br><span class="line">    PageRequest pageRequest = PageRequest.of(<span class="number">0</span>, <span class="number">10</span>, sort);</span><br><span class="line">    Page&lt;Actor&gt; actorPage = actorFindRepository.findByPaginationWithJPQL(<span class="number">1L</span>, pageRequest);</span><br><span class="line">    log.info(<span class="string">&quot;共有:[&#123;&#125;]数据,共有:[&#123;&#125;]页&quot;</span>, actorPage.getTotalElements(), actorPage.getTotalPages());</span><br><span class="line">    List&lt;Actor&gt; actorListByPagination = actorPage.getContent();</span><br><span class="line">    log.info(JSONUtil.toJsonPrettyStr(actorListByPagination));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-3、使用原生sql分页查询"><a href="#5-3、使用原生sql分页查询" class="headerlink" title="5.3、使用原生sql分页查询"></a>5.3、使用原生sql分页查询</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用原生sql分页查询</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> pageable</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Query(value = &quot;select * from actor where id &gt;= ?1&quot;, nativeQuery = true)</span></span><br><span class="line"><span class="function">Page&lt;Actor&gt; <span class="title">findByPaginationWithSql</span><span class="params">(Long id, Pageable pageable)</span></span>;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试带条件分页查询并排序，用原生sql方式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindByPaginationWithSql</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 如果使用原生sql，指定的字段就需要和表中字段相同</span></span><br><span class="line">    Sort sort = <span class="keyword">new</span> Sort(Sort.Direction.ASC, <span class="string">&quot;actor_age&quot;</span>, <span class="string">&quot;create_time&quot;</span>);</span><br><span class="line">    PageRequest pageRequest = PageRequest.of(<span class="number">0</span>, <span class="number">10</span>, sort);</span><br><span class="line">    Page&lt;Actor&gt; actorPage = actorFindRepository.findByPaginationWithSql(<span class="number">1L</span>, pageRequest);</span><br><span class="line">    log.info(<span class="string">&quot;共有:[&#123;&#125;]数据,共有:[&#123;&#125;]页&quot;</span>, actorPage.getTotalElements(), actorPage.getTotalPages());</span><br><span class="line">    List&lt;Actor&gt; actorListByPagination = actorPage.getContent();</span><br><span class="line">    log.info(JSONUtil.toJsonPrettyStr(actorListByPagination));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意如果使用原生sql方式，排序指定的字段须为表中字段。</p><h2 id="代码地址"><a href="#代码地址" class="headerlink" title="代码地址"></a>代码地址</h2><ul><li>github：<a href="https://github.com/senlinmu1008/jpa-action/tree/master/jpa-basic">https://github.com/senlinmu1008/jpa-action/tree/master/jpa-basic</a></li><li>gitee：<a href="https://gitee.com/ppbin/jpa-action/tree/master/jpa-basic">https://gitee.com/ppbin/jpa-action/tree/master/jpa-basic</a><br><br><br></li></ul>]]></content>
      
      
      <categories>
          
          <category> JPA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JPA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo博客搭建步骤</title>
      <link href="%E5%85%B6%E5%AE%83/Hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%AD%A5%E9%AA%A4/"/>
      <url>%E5%85%B6%E5%AE%83/Hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%AD%A5%E9%AA%A4/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>以<code>Mac</code>系统安装为例，其它<code>Windows</code>、<code>Linux</code>系统安装都是大同小异。</p><h2 id="1、下载安装nodejs"><a href="#1、下载安装nodejs" class="headerlink" title="1、下载安装nodejs"></a>1、下载安装nodejs</h2><p>下载地址：<a href="https://nodejs.org/zh-cn/">https://nodejs.org/zh-cn/</a> ，选长期支持版本进行下载安装。</p><p><code>node -v</code>命令验证是否安装成功。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">zhaoxb:hexo_blog zhaoxiaobin$ node -v</span><br><span class="line">v12<span class="number">.19</span><span class="number">.0</span></span><br></pre></td></tr></table></figure><h2 id="2、安装淘宝镜像cnpm"><a href="#2、安装淘宝镜像cnpm" class="headerlink" title="2、安装淘宝镜像cnpm"></a>2、安装淘宝镜像cnpm</h2><p><code>npm install -g cnpm --registry=https://registry.npm.taobao.org</code></p><p><code>cnpm -v</code>命令验证是否安装成功。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">zhaoxb:hexo_blog zhaoxiaobin$ cnpm -v</span><br><span class="line">cnpm@<span class="number">6.1</span><span class="number">.1</span> (/usr/local/lib/node_modules/cnpm/lib/parse_argv.js)</span><br><span class="line">npm@<span class="number">6.14</span><span class="number">.8</span> (/usr/local/lib/node_modules/cnpm/node_modules/npm/lib/npm.js)</span><br><span class="line">node@<span class="number">12.19</span><span class="number">.0</span> (/usr/local/bin/node)</span><br><span class="line">npminstall@<span class="number">3.27</span><span class="number">.0</span> (/usr/local/lib/node_modules/cnpm/node_modules/npminstall/lib/index.js)</span><br><span class="line">prefix=/usr/local </span><br><span class="line">darwin x64 <span class="number">19.4</span><span class="number">.0</span> </span><br><span class="line">registry=https:<span class="comment">//r.npm.taobao.org</span></span><br></pre></td></tr></table></figure><p>安装这个主要是为了后面安装插件能够加快下载速度。</p><h2 id="3、安装hexo"><a href="#3、安装hexo" class="headerlink" title="3、安装hexo"></a>3、安装hexo</h2><p><code>cnpm install -g hexo-cli</code></p><p><code>hexo -v</code>命令验证是否安装成功。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">zhaoxb:hexo_blog zhaoxiaobin$ hexo -v</span><br><span class="line">hexo: <span class="number">5.2</span><span class="number">.0</span></span><br><span class="line">hexo-cli: <span class="number">4.2</span><span class="number">.0</span></span><br><span class="line">os: Darwin <span class="number">19.4</span><span class="number">.0</span> darwin x64</span><br><span class="line">node: <span class="number">12.19</span><span class="number">.0</span></span><br><span class="line">v8: <span class="number">7.8</span><span class="number">.279</span><span class="number">.23</span>-node<span class="number">.44</span></span><br><span class="line">uv: <span class="number">1.39</span><span class="number">.0</span></span><br><span class="line">zlib: <span class="number">1.2</span><span class="number">.11</span></span><br><span class="line">brotli: <span class="number">1.0</span><span class="number">.9</span></span><br><span class="line">ares: <span class="number">1.16</span><span class="number">.0</span></span><br><span class="line">modules: <span class="number">72</span></span><br><span class="line">nghttp2: <span class="number">1.41</span><span class="number">.0</span></span><br><span class="line">napi: <span class="number">7</span></span><br><span class="line">llhttp: <span class="number">2.1</span><span class="number">.2</span></span><br><span class="line">http_parser: <span class="number">2.9</span><span class="number">.3</span></span><br><span class="line">openssl: <span class="number">1.1</span><span class="number">.1</span>g</span><br><span class="line">cldr: <span class="number">37.0</span></span><br><span class="line">icu: <span class="number">67.1</span></span><br><span class="line">tz: <span class="number">2019</span>c</span><br><span class="line">unicode: <span class="number">13.0</span></span><br></pre></td></tr></table></figure><h2 id="4、创建博客目录并初始化"><a href="#4、创建博客目录并初始化" class="headerlink" title="4、创建博客目录并初始化"></a>4、创建博客目录并初始化</h2><p>选择在自己喜欢的目录下创建博客目录作为<code>workspace</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir hexo_blog</span><br><span class="line">cd hexo_blog</span><br><span class="line">hexo init</span><br></pre></td></tr></table></figure><p>博客文章所在目录为<code>source/_posts</code>，默认会有一篇<code>Hexo</code>的介绍文档。</p><p>在这个目录下可以新建<code>markdown</code>格式的文件来创建一篇博客文章，会被转成<code>html</code>页面来进行展示。</p><p>当然也可以在博客目录<code>hexo_blog</code>下使用<code>hexo n xxx</code>命令来创建一篇文章，最后效果也是在<code>source/_posts</code>目录下生成一个名为<code>xxx.md</code>的文件。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo n xxx</span><br></pre></td></tr></table></figure><h2 id="5、启动查看效果"><a href="#5、启动查看效果" class="headerlink" title="5、启动查看效果"></a>5、启动查看效果</h2><p><code>hexo s</code>命令启动服务，根据提示，浏览器打开<code>http://localhost:4000/</code>访问可以看到初始化的博客页面。</p><h2 id="6、github创建repositroy"><a href="#6、github创建repositroy" class="headerlink" title="6、github创建repositroy"></a>6、github创建repositroy</h2><p>这里使用<code>github pages</code>功能，托管静态代码来做个人主页，仓库名称必须为 <strong>username.github.io</strong>，比如我的是<code>senlinmu1008.github.io</code>。仓库最好选择公开，以免影响访问。<br><img src="https://zhaoxiaobin.coding.net/p/blog/d/zhaoxiaobin_img/git/raw/master/post/other/hexo-1.jpg" alt="-w722"></p><p>当然这里并非一定要使用<code>github</code>，也可以使用国内的<code>gitee pages</code>或者<code>coding</code>也有托管个人博客的功能，只不过我个人使用下来还是<code>github</code>最好用最靠谱，只不过访问速度可能有点慢，可以用CDN加速来解决。</p><h2 id="7、安装部署插件"><a href="#7、安装部署插件" class="headerlink" title="7、安装部署插件"></a>7、安装部署插件</h2><p>进入到博客目录下执行安装插件。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd hexo_blog</span><br><span class="line">cnpm install --save hexo-deployer-git</span><br></pre></td></tr></table></figure><p>这个插件可以把生成的页面通过<code>git</code>推送到<code>github</code>仓库中，当然前提是你已经安装好了<code>git</code>工具。</p><h2 id="8、添加-config-yml文件的部署地址"><a href="#8、添加-config-yml文件的部署地址" class="headerlink" title="8、添加_config.yml文件的部署地址"></a>8、添加_config.yml文件的部署地址</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/one-command-deployment</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">https://github.com/senlinmu1008/senlinmu1008.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><p>这里仓库地址<code>repo</code>填成实际个人的，就是<code>git clone</code>下代码的那个地址，可以用<code>https</code>也可以是<code>SSH</code>。</p><p>当然这里也可以使用<code>gitee</code>或者<code>coding</code>的仓库，也可以同时配置多个，比如：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/one-command-deployment</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span></span><br><span class="line">    <span class="attr">github:</span> <span class="string">git@github.com:senlinmu1008/senlinmu1008.github.io.git</span></span><br><span class="line">    <span class="attr">gitee:</span> <span class="string">git@gitee.com:ppbin/ppbin.git</span></span><br><span class="line">    <span class="attr">coding:</span> <span class="string">git@e.coding.net:zhaoxiaobin/blog/blog.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><p>上面用的是<code>SSH</code>方式，好处就是配置了<code>SSH keys</code>以后都不用再输账号密码了。</p><h2 id="9、部署"><a href="#9、部署" class="headerlink" title="9、部署"></a>9、部署</h2><p>分别执行<code>hexo g</code>、<code>hexo deploy</code>命令进行页面生成和远程部署。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo deploy</span><br></pre></td></tr></table></figure><p>如果是第一次推送到<code>github</code>，这里可能会提示输入仓库的账号密码，如果配置了<code>SSH keys</code>则不需要输入。</p><h2 id="10、查看效果"><a href="#10、查看效果" class="headerlink" title="10、查看效果"></a>10、查看效果</h2><p>浏览器输入域名<code>个人的username.github.io</code>，比如<code>senlinmu1008.github.io</code>，不出意外的话，就可以看到当前个人博客的初始页面效果。</p><p>到这一步其实个人博客已经搭建完成，当然个性化的配置以及自定义域名这些都是后续看个人喜好和需要了。</p><h2 id="11、更换主题"><a href="#11、更换主题" class="headerlink" title="11、更换主题"></a>11、更换主题</h2><p>可以在网上搜一些<code>Hexo</code>的主题，选择一个自己喜欢的，下载到<code>themes</code>目录下，然后修改<code>_config.yml</code>配置文件。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Extensions</span></span><br><span class="line"><span class="comment">## Plugins: https://hexo.io/plugins/</span></span><br><span class="line"><span class="comment">## Themes: https://hexo.io/themes/</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">butterfly</span></span><br></pre></td></tr></table></figure><p>修改为自己下载的主题名称。比如这里我个人用的是<code>butterfly</code>主题。如果对个性化配置要求比较高，可以学习下怎么配置主题，一般常用主题都会有详细而全面的教程来指导如何使用。</p><h4 id="11-1、更新主题"><a href="#11-1、更新主题" class="headerlink" title="11.1、更新主题"></a>11.1、更新主题</h4><p>如果后续主题升级了需要更新，可以使用以下步骤（需要切换到主题所在的目录中）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 将当前主题修改的内容增加到工作区</span></span><br><span class="line">git add .</span><br><span class="line"><span class="meta">#</span><span class="bash"> 个人修改的暂存本地并还原已修改的文件</span></span><br><span class="line">git stash</span><br><span class="line"><span class="meta">#</span><span class="bash"> 执行更新主题</span></span><br><span class="line">git pull</span><br><span class="line"><span class="meta">#</span><span class="bash"> 恢复个人修改的文件内容，可能需要合并</span></span><br><span class="line">git stash pop</span><br></pre></td></tr></table></figure><h2 id="12、常用命令"><a href="#12、常用命令" class="headerlink" title="12、常用命令"></a>12、常用命令</h2><p>一般<code>Hexo</code>的命令都要在博客所在目录即之前创建的<code>workspace</code>目录下执行才有效。</p><table><thead><tr><th align="center">命令</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center">hexo clean</td><td align="center">清除所有生成的页面文件</td></tr><tr><td align="center">hexo g</td><td align="center">生成页面</td></tr><tr><td align="center">hexo deploy</td><td align="center">推送部署到远程服务器</td></tr><tr><td align="center">hexo n xxx</td><td align="center">新建一篇名为xxx的文章</td></tr><tr><td align="center"><br><br></td><td align="center"></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RestTemplate的应用</title>
      <link href="SpringBoot/RESTful%E9%A3%8E%E6%A0%BC/RestTemplate%E7%9A%84%E5%BA%94%E7%94%A8/"/>
      <url>SpringBoot/RESTful%E9%A3%8E%E6%A0%BC/RestTemplate%E7%9A%84%E5%BA%94%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>Spring提供了一种简单便捷的模板类 <code>RestTemplate</code> 来调用 <code>RESTful</code> 接口。它提供了多种便捷访问HTTP服务的方法，能够大大提高客户端的编写效率。</p><table><thead><tr><th align="center">RestTemplate方法</th><th align="center">HTTP方法</th></tr></thead><tbody><tr><td align="center">getForEntity</td><td align="center">GET</td></tr><tr><td align="center">getForObject</td><td align="center">GET</td></tr><tr><td align="center">postForEntity</td><td align="center">POST</td></tr><tr><td align="center">postForObject</td><td align="center">POST</td></tr><tr><td align="center">put</td><td align="center">PUT</td></tr><tr><td align="center">patch</td><td align="center">PATCH</td></tr><tr><td align="center">delete</td><td align="center">DELETE</td></tr><tr><td align="center">exchange</td><td align="center">any</td></tr><tr><td align="center">execute</td><td align="center">any</td></tr></tbody></table><h2 id="1、RESTful-API接口"><a href="#1、RESTful-API接口" class="headerlink" title="1、RESTful API接口"></a>1、RESTful API接口</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RestfulController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/getUser1&quot;, produces = MediaType.APPLICATION_JSON_UTF8_VALUE)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUser1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> User(<span class="number">1L</span>, <span class="string">&quot;zhaoxb&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/getUser2&quot;, produces = MediaType.APPLICATION_JSON_UTF8_VALUE)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUser2</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;getUser2:&#123;&#125;&quot;</span>, JSONUtil.toJsonPrettyStr(user));</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(value = &quot;/postUser&quot;, produces = MediaType.APPLICATION_JSON_UTF8_VALUE)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">postUser</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;postUser:&#123;&#125;&quot;</span>, JSONUtil.toJsonPrettyStr(user));</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@PostMapping(value = &quot;/postBody&quot;, produces = MediaType.APPLICATION_JSON_UTF8_VALUE)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">postBody</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;postBody:&#123;&#125;&quot;</span>, JSONUtil.toJsonPrettyStr(user));</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><code>GET</code>请求，不带参。</li><li><code>GET</code>请求，带参。</li><li><code>POST</code>请求，带参。</li><li><code>POST</code>请求，带有请求体。</li></ol><p><strong>实体类，需要提供有参和无参构造</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>RestTemplate配置类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RestConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">restTemplate</span><span class="params">(RestTemplateBuilder restTemplateBuilder)</span> </span>&#123;</span><br><span class="line">        RestTemplate restTemplate = restTemplateBuilder</span><br><span class="line">                .setConnectTimeout(Duration.ofMillis(<span class="number">5000L</span>))</span><br><span class="line">                .setReadTimeout(Duration.ofMillis(<span class="number">30000L</span>))</span><br><span class="line">                .build();</span><br><span class="line">        <span class="keyword">return</span> restTemplate;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2、发送GET请求"><a href="#2、发送GET请求" class="headerlink" title="2、发送GET请求"></a>2、发送GET请求</h2><h4 id="2-1、getForEntity方法，不带参"><a href="#2-1、getForEntity方法，不带参" class="headerlink" title="2.1、getForEntity方法，不带参"></a>2.1、getForEntity方法，不带参</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ActiveProfiles(&quot;test&quot;)</span></span><br><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RestfulGetTests</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getForEntity1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ResponseEntity&lt;String&gt; responseEntity = restTemplate.getForEntity(<span class="string">&quot;http://127.0.0.1:31000/getUser1&quot;</span>, String.class);</span><br><span class="line">        log.info(<span class="string">&quot;响应码:&#123;&#125;&quot;</span>, responseEntity.getStatusCodeValue());</span><br><span class="line">        log.info(<span class="string">&quot;响应体:&#123;&#125;&quot;</span>, JSONUtil.toJsonPrettyStr(responseEntity.getBody()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">响应码:<span class="number">200</span></span><br><span class="line">响应体:&#123;</span><br><span class="line">    <span class="string">&quot;name&quot;</span>: <span class="string">&quot;zhaoxb&quot;</span>,</span><br><span class="line">    <span class="string">&quot;id&quot;</span>: <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-2、getForEntity方法，数字占位符方式传参"><a href="#2-2、getForEntity方法，数字占位符方式传参" class="headerlink" title="2.2、getForEntity方法，数字占位符方式传参"></a>2.2、getForEntity方法，数字占位符方式传参</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getForEntity2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ResponseEntity&lt;String&gt; responseEntity = restTemplate.getForEntity(<span class="string">&quot;http://127.0.0.1:31000/getUser2?id=&#123;1&#125;&amp;name=&#123;2&#125;&quot;</span>, String.class, <span class="number">2</span>, <span class="string">&quot;zhaoxb&quot;</span>);</span><br><span class="line">    log.info(<span class="string">&quot;响应体:&#123;&#125;&quot;</span>, JSONUtil.toJsonPrettyStr(responseEntity.getBody()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用一个数字做占位符。最后是一个可变长度的参数，用来替换前面的占位符。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">响应体:&#123;</span><br><span class="line">    <span class="string">&quot;name&quot;</span>: <span class="string">&quot;zhaoxb&quot;</span>,</span><br><span class="line">    <span class="string">&quot;id&quot;</span>: <span class="number">2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-3、getForEntity方法，map占位符方式传参"><a href="#2-3、getForEntity方法，map占位符方式传参" class="headerlink" title="2.3、getForEntity方法，map占位符方式传参"></a>2.3、getForEntity方法，map占位符方式传参</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getForEntity3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    map.put(<span class="string">&quot;id&quot;</span>, <span class="number">3</span>);</span><br><span class="line">    map.put(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;zhaoxb&quot;</span>);</span><br><span class="line">    ResponseEntity&lt;String&gt; responseEntity = restTemplate.getForEntity(<span class="string">&quot;http://127.0.0.1:31000/getUser2?id=&#123;id&#125;&amp;name=&#123;name&#125;&quot;</span>, String.class, map);</span><br><span class="line">    log.info(<span class="string">&quot;响应体:&#123;&#125;&quot;</span>, JSONUtil.toJsonPrettyStr(responseEntity.getBody()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 <code>name=&#123;name&#125;</code> 这种形式。最后一个参数是map，map的key为前边占位符的名字，value为实际参数值。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">响应体:&#123;</span><br><span class="line">    <span class="string">&quot;name&quot;</span>: <span class="string">&quot;zhaoxb&quot;</span>,</span><br><span class="line">    <span class="string">&quot;id&quot;</span>: <span class="number">3</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-4、getForEntity方法，返回对象"><a href="#2-4、getForEntity方法，返回对象" class="headerlink" title="2.4、getForEntity方法，返回对象"></a>2.4、getForEntity方法，返回对象</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getForEntity4</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ResponseEntity&lt;User&gt; responseEntity = restTemplate.getForEntity(<span class="string">&quot;http://127.0.0.1:31000/getUser1&quot;</span>, User.class);</span><br><span class="line">    log.info(<span class="string">&quot;响应体:&#123;&#125;&quot;</span>, JSONUtil.toJsonPrettyStr(responseEntity.getBody()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">响应体:&#123;</span><br><span class="line">    <span class="string">&quot;name&quot;</span>: <span class="string">&quot;zhaoxb&quot;</span>,</span><br><span class="line">    <span class="string">&quot;id&quot;</span>: <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-5、getForObject方法，直接返回对象"><a href="#2-5、getForObject方法，直接返回对象" class="headerlink" title="2.5、getForObject方法，直接返回对象"></a>2.5、getForObject方法，直接返回对象</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getForObject</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    User User = restTemplate.getForObject(<span class="string">&quot;http://127.0.0.1:31000/getUser1&quot;</span>, User.class);</span><br><span class="line">    log.info(<span class="string">&quot;响应体:&#123;&#125;&quot;</span>, JSONUtil.toJsonPrettyStr(User));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>getForObject</code>是对<code>getForEntity</code>函数的进一步封装，只关注返回消息的实体内容。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">响应体:&#123;</span><br><span class="line">    <span class="string">&quot;name&quot;</span>: <span class="string">&quot;zhaoxb&quot;</span>,</span><br><span class="line">    <span class="string">&quot;id&quot;</span>: <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3、发送POST请求"><a href="#3、发送POST请求" class="headerlink" title="3、发送POST请求"></a>3、发送POST请求</h2><p>用post方法发送带参的请求时，Map不能被定义为 <code>HashMap</code>、<code>LinkedHashMap</code>，而应被定义为 <code>LinkedMultiValueMap</code>，这样参数才能成功传递到后台。</p><h4 id="3-1、postForEntity方法"><a href="#3-1、postForEntity方法" class="headerlink" title="3.1、postForEntity方法"></a>3.1、postForEntity方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postForEntity</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    MultiValueMap&lt;String, Object&gt; multiValueMap = <span class="keyword">new</span> LinkedMultiValueMap&lt;&gt;();</span><br><span class="line">    multiValueMap.add(<span class="string">&quot;id&quot;</span>, <span class="number">5</span>);</span><br><span class="line">    multiValueMap.add(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;zhaoxb&quot;</span>);</span><br><span class="line">    ResponseEntity&lt;User&gt; responseEntity = restTemplate.postForEntity(<span class="string">&quot;http://127.0.0.1:31000/postUser&quot;</span>, multiValueMap, User.class);</span><br><span class="line">    log.info(<span class="string">&quot;响应码:&#123;&#125;&quot;</span>, responseEntity.getStatusCodeValue());</span><br><span class="line">    log.info(<span class="string">&quot;响应体:&#123;&#125;&quot;</span>, JSONUtil.toJsonPrettyStr(responseEntity.getBody()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">响应体:&#123;</span><br><span class="line">    <span class="string">&quot;name&quot;</span>: <span class="string">&quot;zhaoxb&quot;</span>,</span><br><span class="line">    <span class="string">&quot;id&quot;</span>: <span class="number">5</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-2、postForObject方法"><a href="#3-2、postForObject方法" class="headerlink" title="3.2、postForObject方法"></a>3.2、postForObject方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postForObject</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    MultiValueMap&lt;String, Object&gt; multiValueMap = <span class="keyword">new</span> LinkedMultiValueMap&lt;&gt;();</span><br><span class="line">    multiValueMap.add(<span class="string">&quot;id&quot;</span>, <span class="number">6</span>);</span><br><span class="line">    multiValueMap.add(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;zhaoxb&quot;</span>);</span><br><span class="line">    User user = restTemplate.postForObject(<span class="string">&quot;http://127.0.0.1:31000/postUser&quot;</span>, multiValueMap, User.class);</span><br><span class="line">    log.info(<span class="string">&quot;响应体:&#123;&#125;&quot;</span>, JSONUtil.toJsonPrettyStr(user));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>和 <code>getForObject</code> 相对应，只关注返回的消息体。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">响应体:&#123;</span><br><span class="line">    <span class="string">&quot;name&quot;</span>: <span class="string">&quot;zhaoxb&quot;</span>,</span><br><span class="line">    <span class="string">&quot;id&quot;</span>: <span class="number">6</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-3、postForObject方法，带有请求体body"><a href="#3-3、postForObject方法，带有请求体body" class="headerlink" title="3.3、postForObject方法，带有请求体body"></a>3.3、postForObject方法，带有请求体body</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postForObject2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    User reqUser = <span class="keyword">new</span> User(<span class="number">10L</span>, <span class="string">&quot;zhaoxb&quot;</span>);</span><br><span class="line">    User user = restTemplate.postForObject(<span class="string">&quot;http://127.0.0.1:31000/postBody&quot;</span>, reqUser, User.class);</span><br><span class="line">    log.info(<span class="string">&quot;响应体:&#123;&#125;&quot;</span>, JSONUtil.toJsonPrettyStr(user));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>RestTemplate</code>底层实现序列化和反序列化。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">响应体:&#123;</span><br><span class="line">    <span class="string">&quot;name&quot;</span>: <span class="string">&quot;zhaoxb&quot;</span>,</span><br><span class="line">    <span class="string">&quot;id&quot;</span>: <span class="number">10</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-4、exchange方法"><a href="#3-4、exchange方法" class="headerlink" title="3.4、exchange方法"></a>3.4、exchange方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exchange</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    MultiValueMap&lt;String, Object&gt; multiValueMap = <span class="keyword">new</span> LinkedMultiValueMap&lt;&gt;();</span><br><span class="line">    multiValueMap.add(<span class="string">&quot;id&quot;</span>, <span class="number">7</span>);</span><br><span class="line">    multiValueMap.add(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;zhaoxb&quot;</span>);</span><br><span class="line">    HttpEntity&lt;MultiValueMap&lt;String, Object&gt;&gt; httpEntity = <span class="keyword">new</span> HttpEntity&lt;&gt;(multiValueMap);</span><br><span class="line"><span class="comment">//      HttpEntity&lt;MultiValueMap&lt;String, Object&gt;&gt; httpEntityWithHeaders = new HttpEntity&lt;&gt;(multiValueMap, new HttpHeaders());</span></span><br><span class="line">    ResponseEntity&lt;User&gt; responseEntity = restTemplate.exchange(<span class="string">&quot;http://127.0.0.1:31000/postUser&quot;</span>, HttpMethod.POST, httpEntity, User.class);</span><br><span class="line">    log.info(<span class="string">&quot;响应体:&#123;&#125;&quot;</span>, JSONUtil.toJsonPrettyStr(responseEntity.getBody()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>HttpEntity</code>还支持带有HTTP请求头的构造方法。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">响应体:&#123;</span><br><span class="line">    <span class="string">&quot;name&quot;</span>: <span class="string">&quot;zhaoxb&quot;</span>,</span><br><span class="line">    <span class="string">&quot;id&quot;</span>: <span class="number">7</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用<code>RestTemplate</code>发送<code>PUT</code>、<code>PATCH</code>、<code>DELETE</code>方法与<code>GET</code>、<code>POST</code>方法非常类似，这里不做展开。</p><h2 id="4、自定义template"><a href="#4、自定义template" class="headerlink" title="4、自定义template"></a>4、自定义template</h2><h4 id="4-1、自定义HTTP源"><a href="#4-1、自定义HTTP源" class="headerlink" title="4.1、自定义HTTP源"></a>4.1、自定义HTTP源</h4><p><code>ClientHttpRequestFactory</code>是Spring定义的一个接口，用于生产<code>ClientHttpRequest</code>对象，<code>RestTemplate</code>只是模板类，抽象了很多调用方法，而底层真正使用何种框架发送HTTP请求是通过<code>ClientHttpRequestFactory</code>指定的。</p><p><code>RestTemplate</code>默认使用的是<code>SimpleClientHttpRequestFactory</code>，其内部使用的是JDK的<code>java.net.HttpURLConnection</code>创建底层连接，默认是没有连接池的。可以通过 <code>setRequestFactory</code> 函数设置不同的HTTP源，比如 <code>Apache HttpComponents</code>、<code>Netty</code>和<code>OkHttp</code>。</p><p><strong>设置<code>Apache HttpComponents</code>为HTTP客户端源</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.httpcomponents<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>httpclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RestConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">restTemplate</span><span class="params">(RestTemplateBuilder restTemplateBuilder)</span> </span>&#123;</span><br><span class="line">        RestTemplate restTemplate = restTemplateBuilder</span><br><span class="line">                .setConnectTimeout(Duration.ofMillis(<span class="number">5000L</span>))</span><br><span class="line">                .setReadTimeout(Duration.ofMillis(<span class="number">30000L</span>))</span><br><span class="line">                .requestFactory(() -&gt; clientHttpRequestFactory())</span><br><span class="line">                .build();</span><br><span class="line">        <span class="keyword">return</span> restTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ClientHttpRequestFactory <span class="title">clientHttpRequestFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        HttpClientBuilder httpClientBuilder = HttpClientBuilder.create();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//开始设置连接池</span></span><br><span class="line">        PoolingHttpClientConnectionManager poolingHttpClientConnectionManager = <span class="keyword">new</span> PoolingHttpClientConnectionManager();</span><br><span class="line">        poolingHttpClientConnectionManager.setMaxTotal(<span class="number">100</span>);  <span class="comment">//最大连接数</span></span><br><span class="line">        poolingHttpClientConnectionManager.setDefaultMaxPerRoute(<span class="number">20</span>);  <span class="comment">//同路由并发数</span></span><br><span class="line">        httpClientBuilder.setConnectionManager(poolingHttpClientConnectionManager);</span><br><span class="line"></span><br><span class="line">        HttpClient httpClient = httpClientBuilder.build();</span><br><span class="line">        <span class="comment">// httpClient连接配置</span></span><br><span class="line">        HttpComponentsClientHttpRequestFactory clientHttpRequestFactory = <span class="keyword">new</span> HttpComponentsClientHttpRequestFactory(httpClient);</span><br><span class="line">        <span class="comment">// 设置超时，如果 RestTemplateBuilder 已经设置，这里就不需要设置</span></span><br><span class="line"><span class="comment">//        clientHttpRequestFactory.setConnectTimeout(5 * 1000); // 连接超时</span></span><br><span class="line"><span class="comment">//        clientHttpRequestFactory.setReadTimeout(30 * 1000); // 数据读取超时时间</span></span><br><span class="line">        clientHttpRequestFactory.setConnectionRequestTimeout(<span class="number">30</span> * <span class="number">1000</span>); <span class="comment">//连接不够用的等待时间</span></span><br><span class="line">        <span class="keyword">return</span> clientHttpRequestFactory;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-2、自定义messageConverter"><a href="#4-2、自定义messageConverter" class="headerlink" title="4.2、自定义messageConverter"></a>4.2、自定义messageConverter</h4><p><code>RestTemplate</code>默认使用 <code>jackson</code> 来实现序列化和反序列化，默认情况下会注册<code>MIME</code>类型的转换器，但可以通过 <code>setMessageConverters</code> 函数指定其他类型的转化器。</p><p>这里其实也可以用<code>FastJson</code>库的<code>FastJsonHttpMessageConverter4</code>类来做转换器，只是近些年<code>FastJson</code>屡爆漏洞，还是建议用默认的<code>jackson</code>来实现。</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://www.jianshu.com/p/0fd5f3f64137">RestTemplate实践</a></li></ul><h2 id="代码地址"><a href="#代码地址" class="headerlink" title="代码地址"></a>代码地址</h2><ul><li>github：<a href="https://github.com/senlinmu1008/spring-boot/tree/master/restful">https://github.com/senlinmu1008/spring-boot/tree/master/restful</a></li><li>gitee：<a href="https://gitee.com/ppbin/spring-boot/tree/master/restful">https://gitee.com/ppbin/spring-boot/tree/master/restful</a><br><br><br></li></ul>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RESTful接口设计风格</title>
      <link href="SpringBoot/RESTful%E9%A3%8E%E6%A0%BC/RESTful%E6%8E%A5%E5%8F%A3%E8%AE%BE%E8%AE%A1%E9%A3%8E%E6%A0%BC/"/>
      <url>SpringBoot/RESTful%E9%A3%8E%E6%A0%BC/RESTful%E6%8E%A5%E5%8F%A3%E8%AE%BE%E8%AE%A1%E9%A3%8E%E6%A0%BC/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p><strong>什么是<code>RESTful</code>风格</strong>？</p><ul><li>通过URL进行资源的定位，用HTTP动作（<code>GET、POST、DELETE、PUSH</code>）描述操作，完成功能。</li><li>遵循<code>RESTful</code>风格，可以使开发的接口通用性更好，统一规范，减少沟通、学习和开发的成本。</li></ul><h2 id="1、HTTP方法与CRUD动作的映射"><a href="#1、HTTP方法与CRUD动作的映射" class="headerlink" title="1、HTTP方法与CRUD动作的映射"></a>1、HTTP方法与CRUD动作的映射</h2><table><thead><tr><th align="center">动作</th><th align="center">普通CRUD的URL</th><th align="center">Restful的URL</th><th align="center">Restful对应的HTTP方法</th></tr></thead><tbody><tr><td align="center">查询</td><td align="center">Article?id=1</td><td align="center">Article/{id}</td><td align="center">GET</td></tr><tr><td align="center">添加</td><td align="center">Article?title=xxx&amp;body=xxx</td><td align="center">Article</td><td align="center">POST</td></tr><tr><td align="center">修改</td><td align="center">Article/update?id=1</td><td align="center">Article/{id}</td><td align="center">PUT/PATCH</td></tr><tr><td align="center">删除</td><td align="center">Article/delete?id=1</td><td align="center">Article/{id}</td><td align="center">DELETE</td></tr></tbody></table><p>其中<code>PUT</code>和<code>PATCH</code>比较相似，都是做更新操作。<code>PUT</code>一般用于全部修改进行替换操作，<code>PATCH</code>用于更新部分字段（资源）操作。</p><h2 id="2、RESTful-API"><a href="#2、RESTful-API" class="headerlink" title="2、RESTful API"></a>2、RESTful API</h2><h4 id="2-1、查询列表"><a href="#2-1、查询列表" class="headerlink" title="2.1、查询列表"></a>2.1、查询列表</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/ArticleList&quot;, method = RequestMethod.GET)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Article&gt; <span class="title">getArticleList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    List&lt;Article&gt; articleList = articleRepository.findAll();</span><br><span class="line">    <span class="keyword">return</span> articleList;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-2、增加内容"><a href="#2-2、增加内容" class="headerlink" title="2.2、增加内容"></a>2.2、增加内容</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/Article&quot;, method = RequestMethod.POST)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">addArticle</span><span class="params">(Article article)</span> </span>&#123;</span><br><span class="line">    articleRepository.save(article);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-3、删除内容"><a href="#2-3、删除内容" class="headerlink" title="2.3、删除内容"></a>2.3、删除内容</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/Article/&#123;id&#125;&quot;, method = RequestMethod.DELETE)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">deleteArticle</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> <span class="keyword">long</span> id)</span> </span>&#123;</span><br><span class="line">    articleRepository.deleteById(id);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-4、修改内容"><a href="#2-4、修改内容" class="headerlink" title="2.4、修改内容"></a>2.4、修改内容</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/Article/&#123;id&#125;&quot;, method = RequestMethod.PUT)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">updateArticle</span><span class="params">(Article model)</span> </span>&#123;</span><br><span class="line">    articleRepository.save(model);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-5、查询内容"><a href="#2-5、查询内容" class="headerlink" title="2.5、查询内容"></a>2.5、查询内容</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/Article/&#123;id&#125;&quot;, method = RequestMethod.GET)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Article <span class="title">findArticle</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> <span class="keyword">long</span> id)</span> </span>&#123;</span><br><span class="line">    Article article = articleRepository.findById(id);</span><br><span class="line">    <span class="keyword">return</span> article;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br><br></p>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RESTful </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RabbitMQ总结</title>
      <link href="RabbitMQ/RabbitMQ%E6%80%BB%E7%BB%93/"/>
      <url>RabbitMQ/RabbitMQ%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="1、生产者、交换机、队列、消费者关系"><a href="#1、生产者、交换机、队列、消费者关系" class="headerlink" title="1、生产者、交换机、队列、消费者关系"></a>1、生产者、交换机、队列、消费者关系</h2><p><img src="https://zhaoxiaobin.coding.net/p/blog/d/zhaoxiaobin_img/git/raw/master/post/rabbitmq/rabbitmq-14-1.jpg"></p><h2 id="2、如何保证RabbitMQ的高可用"><a href="#2、如何保证RabbitMQ的高可用" class="headerlink" title="2、如何保证RabbitMQ的高可用"></a>2、如何保证RabbitMQ的高可用</h2><p><code>RabbitMQ</code> 有三种模式：单机模式、普通集群模式、镜像集群模式。</p><ul><li><p><strong>单机模式</strong>： <code>Demo</code> 级别，一般生产不会使用。</p></li><li><p><strong>普通集群模式</strong>：普通集群模式，意思就是在多台机器上启动多个 <code>RabbitMQ</code> 实例，每个机器启动一个。你创建的 <code>queue</code>，只会放在一个 <code>RabbitMQ</code> 实例上，但是每个实例都同步 <code>queue</code> 的元数据（元数据可以认为是 <code>queue</code> 的一些配置信息，通过元数据，可以找到 <code>queue</code> 所在实例）。你消费的时候，实际上如果连接到了另外一个实例，那么那个实例会从 <code>queue</code> 所在实例上拉取数据过来。</p><p><img src="https://zhaoxiaobin.coding.net/p/blog/d/zhaoxiaobin_img/git/raw/master/post/rabbitmq/rabbitmq-14-2.png"><br>这种方式确实很麻烦，也不怎么好，没做到所谓的分布式，就是个普通集群。因为这导致你要么消费者每次随机连接一个实例然后拉取数据，要么固定连接那个 <code>queue</code> 所在实例消费数据，前者有数据拉取的开销，后者导致单实例性能瓶颈。</p><p>而且如果那个放 <code>queue</code> 的实例宕机了，会导致接下来其他实例就无法从那个实例拉取，如果你开启了消息持久化，让 <code>RabbitMQ</code> 落地存储消息的话，消息不一定会丢，得等这个实例恢复了，然后才可以继续从这个 <code>queue</code> 拉取数据。</p><p>所以这个事儿就比较尴尬了，这就没有什么所谓的高可用性，这方案主要是提高吞吐量的，就是说让集群中多个节点来服务某个 <code>queue</code> 的读写操作。</p></li><li><p><strong>镜像集群模式</strong>：这种模式，才是所谓的 <code>RabbitMQ</code> 的高可用模式。跟普通集群模式不一样的是，在镜像集群模式下，你创建的 <code>queue</code>，无论元数据还是 <code>queue</code> 里的消息都会存在于多个实例上，就是说，每个 <code>RabbitMQ</code> 节点都有这个 <code>queue</code> 的一个完整镜像，包含 <code>queue</code> 的全部数据的意思。然后每次你写消息到 <code>queue</code> 的时候，都会自动把消息同步到多个实例的 <code>queue</code> 上。<br><img src="https://zhaoxiaobin.coding.net/p/blog/d/zhaoxiaobin_img/git/raw/master/post/rabbitmq/rabbitmq-14-3.png"><br>那么如何开启这个镜像集群模式呢？其实很简单，<code>RabbitMQ</code> 有很好的管理控制台，就是在后台新增一个策略，这个策略是镜像集群模式的策略，指定的时候是可以要求数据同步到所有节点的，也可以要求同步到指定数量的节点，再次创建 <code>queue</code> 的时候，应用这个策略，就会自动将数据同步到其他的节点上去了。</p><p>这样的话，好处在于，你任何一个机器宕机了，没事儿，其它机器（节点）还包含了这个 <code>queue</code> 的完整数据，别的 <code>consumer</code> 都可以到其它节点上去消费数据。坏处在于，第一，这个性能开销也太大了吧，消息需要同步到所有机器上，导致网络带宽压力和消耗很重！第二，这么玩儿，不是分布式的，就没有扩展性可言了，如果某个 <code>queue</code> 负载很重，你加机器，新增的机器也包含了这个 <code>queue</code> 的所有数据，并没有办法线性扩展你的 <code>queue</code>。</p></li></ul><h2 id="3、避免消息堆积"><a href="#3、避免消息堆积" class="headerlink" title="3、避免消息堆积"></a>3、避免消息堆积</h2><p>主要有以下场景会容易导致消息堆积：</p><ul><li>生产者和消费者没有同时在线的情况，只有生产没有消费。</li><li>消费端限流，通过<code>channel.basicQos(int prefetchCount)</code>函数限制消费者的处理速率，从而导致队列中的消息堆积直到队列塞满为止。</li><li>在手动 <code>ACK</code> 的情况下，如果消费端拒绝消息并且重回队列，且在一些极端时候，消费端持续拒绝消息就会发生消息堆积的问题。</li><li>对单条消息设置 <code>TTL</code> ，如果先入队列的过期时间设置比较长，后面的消息过期时间设置比较短，则队列中会有很多死消息不能被及时地淘汰，从而导致消息的堆积。</li></ul><p><strong><em>消息堆积容易造成队列满后的消息丢失，而且场景3可能还会出现重复消费的情况，不能保证消费消息幂等性</em></strong></p><h2 id="4、避免消息丢失"><a href="#4、避免消息丢失" class="headerlink" title="4、避免消息丢失"></a>4、避免消息丢失</h2><p><code>RabbitMQ</code>丢失消息主要分3种情况：</p><ol><li>生产者将消息发送给<code>RabbitMQ</code>时丢失。</li><li><code>RabbitMQ</code>收到消息后意外丢失。</li><li>消费者处理异常导致丢失。</li></ol><p><img src="https://zhaoxiaobin.coding.net/p/blog/d/zhaoxiaobin_img/git/raw/master/post/rabbitmq/rabbitmq-14-4.png"><br><strong>如何避免生产者丢失数据</strong></p><ul><li><p>开启事务机制，但是<code>RabbitMQ</code>的事务机制是同步的，所以开启后吞吐量会下降，对性能会有很大影响一般不建议使用。</p></li><li><p>开启消息发送确认机制（<code>confirm</code> 模式），在生产者那里设置开启 <code>confirm</code> 模式之后，你每次写的消息都会分配一个唯一的 <code>id</code>，然后如果写入了 <code>RabbitMQ</code> 中，<code>RabbitMQ</code> 会给你回传一个 <code>ack</code> 消息，告诉你说这个消息 <code>ok</code> 了。如果 RabbitMQ 没能处理这个消息，会回调你的一个 <code>nack</code> 接口，告诉你这个消息接收失败，你可以重试。而且你可以结合这个机制自己在内存里维护每个消息 <code>id</code> 的状态，如果超过一定时间还没接收到这个消息的回调，那么你可以重发。</p><p>事务机制和 <code>confirm</code> 机制最大的不同在于，事务机制是同步的，你提交一个事务之后会阻塞在那儿，但是 <code>confirm</code> 机制是异步的，你发送个消息之后就可以发送下一个消息，然后那个消息 <code>RabbitMQ</code> 接收了之后会异步回调你的一个接口通知你这个消息接收到了。</p></li></ul><p><strong>如何避免RabbitMQ丢失数据</strong><br>开启持久化机制，主要有2个步骤：</p><ul><li>创建 <code>queue</code> 的时候将其设置为持久化，这样就可以保证 <code>RabbitMQ</code> 持久化 <code>queue</code> 的元数据，但是它是不会持久化 <code>queue</code> 里的数据的。</li><li>发送消息的时候将消息的 <code>deliveryMode</code> 设置为 2，就是将消息设置为持久化的，此时 <code>RabbitMQ</code> 就会将消息持久化到磁盘上去。</li></ul><p>必须要同时设置这两个持久化才行，<code>RabbitMQ</code> 哪怕是挂了，再次重启，也会从磁盘上重启恢复 <code>queue</code>，恢复这个 <code>queue</code> 里的数据。除非极其罕见的是，<code>RabbitMQ</code> 还没持久化，自己就挂了，可能导致少量数据丢失，但是这个概率较小。</p><p>所以，持久化可以跟生产者那边的 <code>confirm</code> 机制配合起来，只有消息被持久化到磁盘之后，才会通知生产者 <code>ack</code> 了，所以哪怕是在持久化到磁盘之前，<code>RabbitMQ</code> 挂了，数据丢了，生产者收不到 <code>ack</code> ，也是可以自己重发的。</p><p><strong>如何避免消费者丢失数据</strong><br>消费端丢失消息一般是在自动 <code>ack</code> 的情况下，拿到消息在处理过程中发生异常导致数据丢失。所以在对消息传递可靠性要求比较高的情况下需要切换到手动 <code>ack</code> 的模式，只有最后消费成功了，再给<code>RabbitMQ</code>确认。</p><p><img src="https://zhaoxiaobin.coding.net/p/blog/d/zhaoxiaobin_img/git/raw/master/post/rabbitmq/rabbitmq-14-5.png"></p><h2 id="5、如何保证不重复消费"><a href="#5、如何保证不重复消费" class="headerlink" title="5、如何保证不重复消费"></a>5、如何保证不重复消费</h2><p>开启自动 <code>ack</code> 模式，消息只投递给消费者一次，只要投递完成不管消费者有没有消费成功都确认消息。</p><p>这样做的弊端也很明显，如果消费失败就会导致消息丢失。但如果开启手动 <code>ack</code> 模式，可能消费消息明明已经成功，但在最后因为一些不可控的因素导致不可预料的异常发生，最终没有 <code>ack</code> 成功从而让消息再次回到队列又给其它消费者去重复消费。这个问题本质上是因为消费消息和手动 <code>ack</code> 确认这是2个独立的操作，很难保证这2个操作的原子性（同时成功）。</p><p>所以一般来讲，光靠MQ自身的机制很难同时保证消息不丢失和不重复消费消息。具体怎么应用要看实际业务场景；比如是比较重要的数据，我们可以优先保证消息不丢失，允许少量的重复消费，只要对消费者的下游做好<strong>幂等</strong>即可。</p><h2 id="6、对比Kafka、ActiveMQ、RabbitMQ、RocketMQ-有什么优缺点？"><a href="#6、对比Kafka、ActiveMQ、RabbitMQ、RocketMQ-有什么优缺点？" class="headerlink" title="6、对比Kafka、ActiveMQ、RabbitMQ、RocketMQ 有什么优缺点？"></a>6、对比Kafka、ActiveMQ、RabbitMQ、RocketMQ 有什么优缺点？</h2><table><thead><tr><th align="center">特性</th><th align="center">ActiveMQ</th><th align="center">RabbitMQ</th><th align="center">RocketMQ</th><th align="center">Kafka</th></tr></thead><tbody><tr><td align="center">单机吞吐量</td><td align="center">万级，比 RocketMQ、Kafka 低一个数量级</td><td align="center">同 ActiveMQ</td><td align="center">10 万级，支撑高吞吐</td><td align="center">10 万级，高吞吐，一般配合大数据类的系统来进行实时数据计算、日志采集等场景</td></tr><tr><td align="center">topic 数量对吞吐量的影响</td><td align="center"></td><td align="center"></td><td align="center">topic 可以达到几百/几千的级别，吞吐量会有较小幅度的下降，这是 RocketMQ 的一大优势，在同等机器下，可以支撑大量的 topic</td><td align="center">topic 从几十到几百个时候，吞吐量会大幅度下降，在同等机器下，Kafka 尽量保证 topic 数量不要过多，如果要支撑大规模的 topic，需要增加更多的机器资源</td></tr><tr><td align="center">时效性</td><td align="center">ms 级</td><td align="center">微秒级，这是 RabbitMQ 的一大特点，延迟最低</td><td align="center">ms 级</td><td align="center">延迟在 ms 级以内</td></tr><tr><td align="center">可用性</td><td align="center">高，基于主从架构实现高可用</td><td align="center">同 ActiveMQ</td><td align="center">非常高，分布式架构</td><td align="center">非常高，分布式，一个数据多个副本，少数机器宕机，不会丢失数据，不会导致不可用</td></tr><tr><td align="center">消息可靠性</td><td align="center">有较低的概率丢失数据</td><td align="center">基本不丢</td><td align="center">经过参数优化配置，可以做到 0 丢失</td><td align="center">同 RocketMQ</td></tr><tr><td align="center">功能支持</td><td align="center">MQ 领域的功能极其完备</td><td align="center">基于 erlang 开发，并发能力很强，性能极好，延时很低</td><td align="center">MQ 功能较为完善，还是分布式的，扩展性好</td><td align="center">功能较为简单，主要支持简单的 MQ 功能，在大数据领域的实时计算以及日志采集被大规模使用</td></tr></tbody></table><p>综上，各种对比之后，有如下建议：</p><p>一般的业务系统要引入 MQ，最早大家都用 <code>ActiveMQ</code>，但是现在确实大家用的不多了，没经过大规模吞吐量场景的验证，社区也不是很活跃，所以不推荐用这个；</p><p>后来大家开始用 <code>RabbitMQ</code>，但是确实 <code>erlang</code> 语言阻止了大量的 <code>Java</code> 工程师去深入研究和掌控它，对公司而言，几乎处于不可控的状态，但是确实人家是开源的，比较稳定的支持，活跃度也高；</p><p>不过现在确实越来越多的公司会去用 <code>RocketMQ</code>，确实很不错，毕竟是阿里出品，但社区可能有突然黄掉的风险（目前 <code>RocketMQ</code> 已捐给 <code>Apache</code>，但 <code>GitHub</code> 上的活跃度其实不算高）对自己公司技术实力有绝对自信的，推荐用 <code>RocketMQ</code>，否则回去老老实实用 <code>RabbitMQ</code> 吧，人家有活跃的开源社区，绝对不会黄。</p><p>所以中小型公司，技术实力较为一般，技术挑战不是特别高，用 <code>RabbitMQ</code> 是不错的选择；大型公司，基础架构研发实力较强，用 <code>RocketMQ</code> 是很好的选择。</p><p>如果是大数据领域的实时计算、日志采集等场景，用 <code>Kafka</code> 是业内标准的，绝对没问题，社区活跃度很高，绝对不会黄，何况几乎是全世界这个领域的事实性规范。<br><br><br></p>]]></content>
      
      
      <categories>
          
          <category> RabbitMQ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RabbitMQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RabbitMQ死信队列DLX应用</title>
      <link href="RabbitMQ/RabbitMQ%E6%AD%BB%E4%BF%A1%E9%98%9F%E5%88%97DLX%E5%BA%94%E7%94%A8/"/>
      <url>RabbitMQ/RabbitMQ%E6%AD%BB%E4%BF%A1%E9%98%9F%E5%88%97DLX%E5%BA%94%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p><strong>进入死信队列的场景</strong>：</p><ol><li>消息被拒绝<code>（basic.reject / basic.nack）</code>并且 <code>requeue = false</code>；</li><li>消息<code>TTL</code>过期（在<code>RabbitMQ</code>3.5.8版本之前，实现消息的延迟发送就是依靠消息过期进入死信队列然后进行消费来完成的）；</li><li>队列达到最大长度；</li></ol><h2 id="1、使用原生API实现死信队列DLX的应用"><a href="#1、使用原生API实现死信队列DLX的应用" class="headerlink" title="1、使用原生API实现死信队列DLX的应用"></a>1、使用原生API实现死信队列DLX的应用</h2><h4 id="1-1、生产者"><a href="#1-1、生产者" class="headerlink" title="1.1、生产者"></a>1.1、生产者</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProducerDLX</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String HOST = <span class="string">&quot;148.70.153.63&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String USER_NAME = <span class="string">&quot;libai&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException </span>&#123;</span><br><span class="line">        ConnectionFactory connectionFactory = <span class="keyword">new</span> ConnectionFactory();</span><br><span class="line">        connectionFactory.setHost(HOST);</span><br><span class="line">        connectionFactory.setPort(AMQP.PROTOCOL.PORT);</span><br><span class="line">        connectionFactory.setUsername(USER_NAME);</span><br><span class="line">        connectionFactory.setPassword(System.getProperty(<span class="string">&quot;password&quot;</span>));</span><br><span class="line">        connectionFactory.setVirtualHost(ConnectionFactory.DEFAULT_VHOST);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建连接和通道</span></span><br><span class="line">        <span class="meta">@Cleanup</span> Connection connection = connectionFactory.newConnection();</span><br><span class="line">        <span class="meta">@Cleanup</span> Channel channel = connection.createChannel();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建死信队列DLX</span></span><br><span class="line">        String dlxExchangeName = <span class="string">&quot;DLXExchange&quot;</span>, dlxQueueName = <span class="string">&quot;DLXQueue&quot;</span>, dlxRoutingKey = <span class="string">&quot;DLX&quot;</span>;</span><br><span class="line">        channel.exchangeDeclare(dlxExchangeName, BuiltinExchangeType.DIRECT, <span class="keyword">true</span>);</span><br><span class="line">        channel.queueDeclare(dlxQueueName, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">        channel.queueBind(dlxQueueName, dlxExchangeName, dlxRoutingKey);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建消息会自动过期的队列，并和指定的死信交换机绑定</span></span><br><span class="line">        String exchangeName = <span class="string">&quot;amq.direct&quot;</span>, queueName = <span class="string">&quot;TestDLXQueue&quot;</span>, routingKey = <span class="string">&quot;DLX&quot;</span>;</span><br><span class="line">        Map&lt;String, Object&gt; argMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        argMap.put(<span class="string">&quot;x-message-ttl&quot;</span>, <span class="number">30</span> * <span class="number">1000</span>); <span class="comment">// 设置队列里消息的ttl的时间30s</span></span><br><span class="line">        argMap.put(<span class="string">&quot;x-dead-letter-exchange&quot;</span>, dlxExchangeName); <span class="comment">// 给队列设置死信交换机</span></span><br><span class="line">        channel.queueDeclare(queueName, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, argMap);</span><br><span class="line">        channel.queueBind(queueName, exchangeName, routingKey);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 发送消息</span></span><br><span class="line">        String msg = <span class="string">&quot;测试死信队列&quot;</span>;</span><br><span class="line">        <span class="comment">// 把消息发送到指定的交换机，交换机根据路由键推送到绑定的队列中；交换机名称、路由键、属性、消息字节</span></span><br><span class="line">        log.info(<span class="string">&quot;now:[&#123;&#125;],发送消息:[&#123;&#125;]&quot;</span>, DateUtil.now(), msg);</span><br><span class="line">        channel.basicPublish(exchangeName, routingKey, <span class="keyword">null</span>, msg.getBytes());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>创建死信队列<code>DLXQueue</code>并和指定交换机<code>DLXExchange</code>进行绑定（其实也是普通的队列、普通的交换机）。</li><li>创建另外一个正常的消息队列<code>TestDLXQueue</code>，设置队列的<code>TTL</code>过期时间，同时通过<code>x-dead-letter-exchange</code>属性指定死信交换机<code>DLXExchange</code>。</li></ol><h4 id="1-2、测试消息过期进入死信队列"><a href="#1-2、测试消息过期进入死信队列" class="headerlink" title="1.2、测试消息过期进入死信队列"></a>1.2、测试消息过期进入死信队列</h4><p>运行<code>main</code>函数，推送消息给<code>TestDLXQueue</code>队列。可以先看到消息先在<code>TestDLXQueue</code>队列中。<br><img src="https://zhaoxiaobin.coding.net/p/blog/d/zhaoxiaobin_img/git/raw/master/post/rabbitmq/rabbitmq-13-1.jpg" alt="-w888"></p><p>等到30秒后没有被消费，则会把消息推送到<code>DLXQueue</code>死信队列中。<br><img src="https://zhaoxiaobin.coding.net/p/blog/d/zhaoxiaobin_img/git/raw/master/post/rabbitmq/rabbitmq-13-2.jpg" alt="-w907"></p><h4 id="1-3、死信队列的消费者"><a href="#1-3、死信队列的消费者" class="headerlink" title="1.3、死信队列的消费者"></a>1.3、死信队列的消费者</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsumerDLX</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String HOST = <span class="string">&quot;148.70.153.63&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String USER_NAME = <span class="string">&quot;libai&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException </span>&#123;</span><br><span class="line">        ConnectionFactory connectionFactory = <span class="keyword">new</span> ConnectionFactory();</span><br><span class="line">        connectionFactory.setHost(HOST);</span><br><span class="line">        connectionFactory.setPort(AMQP.PROTOCOL.PORT);</span><br><span class="line">        connectionFactory.setUsername(USER_NAME);</span><br><span class="line">        connectionFactory.setPassword(System.getProperty(<span class="string">&quot;password&quot;</span>));</span><br><span class="line">        connectionFactory.setVirtualHost(ConnectionFactory.DEFAULT_VHOST);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建连接和通道</span></span><br><span class="line">        Connection connection = connectionFactory.newConnection();</span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line"></span><br><span class="line">        com.rabbitmq.client.Consumer consumer = <span class="keyword">new</span> DefaultConsumer(channel) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                log.info(<span class="string">&quot;now:[&#123;&#125;],消费消息:[&#123;&#125;]&quot;</span>, DateUtil.now(), <span class="keyword">new</span> String(body));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        channel.basicConsume(<span class="string">&quot;DLXQueue&quot;</span>, <span class="keyword">true</span>, consumer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-4、运行测试"><a href="#1-4、运行测试" class="headerlink" title="1.4、运行测试"></a>1.4、运行测试</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">now:[<span class="number">2020</span><span class="number">-09</span><span class="number">-28</span> <span class="number">20</span>:<span class="number">00</span>:<span class="number">10</span>],发送消息:[测试死信队列]</span><br><span class="line">now:[<span class="number">2020</span><span class="number">-09</span><span class="number">-28</span> <span class="number">20</span>:<span class="number">00</span>:<span class="number">40</span>],消费消息:[测试死信队列]</span><br></pre></td></tr></table></figure><p><strong>主要过程</strong>：<br>生产者 —&gt; 原交换机<code>amq.direct</code> —&gt; 原队列<code>TestDLXQueue</code>(超过 TTL 之后) —&gt; 死信交换机<code>DLXExchange</code> —&gt; 死信队列<code>DLXQueue</code> —&gt; 最终消费者。</p><h2 id="2、Springboot整合RabbitMQ实现死信队列DLX的应用"><a href="#2、Springboot整合RabbitMQ实现死信队列DLX的应用" class="headerlink" title="2、Springboot整合RabbitMQ实现死信队列DLX的应用"></a>2、Springboot整合RabbitMQ实现死信队列DLX的应用</h2><h4 id="2-1、配置死信队列"><a href="#2-1、配置死信队列" class="headerlink" title="2.1、配置死信队列"></a>2.1、配置死信队列</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Queue <span class="title">DLXQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Queue(<span class="string">&quot;DLX_QUEUE&quot;</span>, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> DirectExchange <span class="title">DLXExchange</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> DirectExchange(<span class="string">&quot;DLX_EXCHANGE&quot;</span>, <span class="keyword">true</span>, <span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Binding <span class="title">bindingDLX</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> BindingBuilder.bind(DLXQueue()).to(DLXExchange()).with(<span class="string">&quot;DLX&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建死信队列<code>DLX_QUEUE</code>并和指定交换机<code>DLX_EXCHANGE</code>进行绑定（其实也是普通的队列、普通的交换机）。</p><h4 id="2-2、配置消息队列"><a href="#2-2、配置消息队列" class="headerlink" title="2.2、配置消息队列"></a>2.2、配置消息队列</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Queue <span class="title">testDLXQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    map.put(<span class="string">&quot;x-message-ttl&quot;</span>, <span class="number">30000</span>); <span class="comment">// 队列中的消息未被消费则30秒后过期</span></span><br><span class="line">    map.put(<span class="string">&quot;x-dead-letter-exchange&quot;</span>, <span class="string">&quot;DLX_EXCHANGE&quot;</span>); <span class="comment">// 给队列设置死信交换机</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Queue(<span class="string">&quot;TEST_DLX_QUEUE&quot;</span>, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, map);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> DirectExchange <span class="title">testDLXExchange</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> DirectExchange(<span class="string">&quot;TEST_DLX_EXCHANGE&quot;</span>, <span class="keyword">true</span>, <span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Binding <span class="title">bindingTestDLX</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> BindingBuilder.bind(testDLXQueue()).to(testDLXExchange()).with(<span class="string">&quot;DLX&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建另外一个正常的消息队列<code>TEST_DLX_QUEUE</code>，设置队列的<code>TTL</code>过期时间，同时通过<code>x-dead-letter-exchange</code>属性指定死信队列对应的交换机。</p><h4 id="2-3、生产者"><a href="#2-3、生产者" class="headerlink" title="2.3、生产者"></a>2.3、生产者</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DLXController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/testDLX&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testDLX</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        rabbitTemplate.convertAndSend(<span class="string">&quot;TEST_DLX_EXCHANGE&quot;</span>, <span class="string">&quot;DLX&quot;</span>, <span class="string">&quot;测试死信队列&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;ok&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>等到30秒后没有被消费，则会把消息推送到<code>DLX_QUEUE</code>死信队列中。</p><h2 id="3、死信队列实现消息延迟发送的缺点"><a href="#3、死信队列实现消息延迟发送的缺点" class="headerlink" title="3、死信队列实现消息延迟发送的缺点"></a>3、死信队列实现消息延迟发送的缺点</h2><ol><li>如果统一用队列来设置消息的<code>TTL</code>，当梯度非常多的情况下，比如 1 分钟，2 分钟，5 分钟，10 分钟，20 分钟，30 分钟……需要创建很多队列来路由消息。</li><li>如果单独设置消息的<code>TTL</code>，则可能会造成队列中的消息阻塞，即前一条消息没有出队（没有被消费），后面的消息无法投递。比如第一条消息过期<code>TTL</code>是30min，第二条消息<code>TTL</code>是10min。10分钟后，即使第二条消息应该投递了，但是由于第一条消息还未出队，所以无法投递。</li><li>可能存在一定时间误差。</li></ol><p>所以在<code>RabbitMQ</code>3.5.8版本之后，可以利用官方的<code>rabbitmq-delayed-message-exchange</code>插件来实现消息的延迟发送，可以避免上面所说的问题。<br><a href="https://www.jianshu.com/p/97d9114660e8">RabbitMQ实现消息延迟推送</a></p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://blog.csdn.net/u011212394/article/details/100086728">RabbitMQ中的过期时间、死信队列、延迟队列</a></li></ul><h2 id="代码地址"><a href="#代码地址" class="headerlink" title="代码地址"></a>代码地址</h2><ul><li>github：<a href="https://github.com/senlinmu1008/rabbitmq-action/tree/master/rabbitmq-ttl-dlx">https://github.com/senlinmu1008/rabbitmq-action/tree/master/rabbitmq-ttl-dlx</a></li><li>gitee：<a href="https://gitee.com/ppbin/rabbitmq-action/tree/master/rabbitmq-ttl-dlx">https://gitee.com/ppbin/rabbitmq-action/tree/master/rabbitmq-ttl-dlx</a><br><br><br></li></ul>]]></content>
      
      
      <categories>
          
          <category> RabbitMQ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RabbitMQ </tag>
            
            <tag> 死信队列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RabbitMQ实现RPC调用</title>
      <link href="RabbitMQ/RabbitMQ%E5%AE%9E%E7%8E%B0RPC%E8%B0%83%E7%94%A8/"/>
      <url>RabbitMQ/RabbitMQ%E5%AE%9E%E7%8E%B0RPC%E8%B0%83%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p><code>Remote Procedure Call：</code>远程过程调用，一次远程过程调用的流程即客户端发送一个请求到服务端，服务端根据请求信息进行处理后返回响应信息，客户端收到响应信息后结束。</p><p><img src="https://zhaoxiaobin.coding.net/p/blog/d/zhaoxiaobin_img/git/raw/master/post/rabbitmq/rabbitmq-12-1.jpg"><br>这里生产者作为客户端来调用，消费者作为服务端接收请求然后响应给生产者。</p><h2 id="1、同步调用"><a href="#1、同步调用" class="headerlink" title="1、同步调用"></a>1、同步调用</h2><h4 id="1-1、绑定队列"><a href="#1-1、绑定队列" class="headerlink" title="1.1、绑定队列"></a>1.1、绑定队列</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RPCRabbitConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">RPCQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Queue(<span class="string">&quot;RPCQueue&quot;</span>, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DirectExchange <span class="title">RPCExchange</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DirectExchange(<span class="string">&quot;RPCExchange&quot;</span>, <span class="keyword">true</span>, <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Binding <span class="title">bindingRPC</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(RPCQueue()).to(RPCExchange()).with(<span class="string">&quot;RPC&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-2、消费者（服务端）"><a href="#1-2、消费者（服务端）" class="headerlink" title="1.2、消费者（服务端）"></a>1.2、消费者（服务端）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@RabbitListener(queues = &quot;RPCQueue&quot;)</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RPCReceiver</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RabbitHandler</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">process</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;接收远程调用请求消息:[&#123;&#125;]&quot;</span>, message);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;remote procedure call success!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-3、生产者（客户端）"><a href="#1-3、生产者（客户端）" class="headerlink" title="1.3、生产者（客户端）"></a>1.3、生产者（客户端）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RPCController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 同步调用设置远程调用响应超时时间，单位：毫秒</span></span><br><span class="line">        rabbitTemplate.setReplyTimeout(<span class="number">60000</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/syncRPC&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">syncRPC</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Object response = rabbitTemplate.convertSendAndReceive(<span class="string">&quot;RPCExchange&quot;</span>, <span class="string">&quot;RPC&quot;</span>, <span class="string">&quot;RPC同步调用&quot;</span>);</span><br><span class="line">        String respMsg = response.toString();</span><br><span class="line">        log.info(<span class="string">&quot;远程调用响应:[&#123;&#125;]&quot;</span>, respMsg);</span><br><span class="line">        <span class="keyword">return</span> respMsg;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以通过<code>setReplyTimeout(long milliseconds)</code>函数设置超时时间。</p><h4 id="1-4、结果"><a href="#1-4、结果" class="headerlink" title="1.4、结果"></a>1.4、结果</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">接收远程调用请求消息:[RPC同步调用]</span><br><span class="line">远程调用响应:[remote procedure call success!]</span><br></pre></td></tr></table></figure><h2 id="2、异步调用"><a href="#2、异步调用" class="headerlink" title="2、异步调用"></a>2、异步调用</h2><h4 id="2-1、配置Bean"><a href="#2-1、配置Bean" class="headerlink" title="2.1、配置Bean"></a>2.1、配置Bean</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 配置AsyncRabbitTemplate SpringBoot 没有默认的AsyncRabbitTemplate注入，所以这里需要自己配置</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> rabbitTemplate</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> AsyncRabbitTemplate <span class="title">asyncRabbitTemplate</span><span class="params">(RabbitTemplate rabbitTemplate)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> AsyncRabbitTemplate(rabbitTemplate);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-2、生产者（客户端）"><a href="#2-2、生产者（客户端）" class="headerlink" title="2.2、生产者（客户端）"></a>2.2、生产者（客户端）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RPCController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AsyncRabbitTemplate asyncRabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/asyncRPC&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">asyncRPC</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        AsyncRabbitTemplate.RabbitConverterFuture&lt;Object&gt; future = asyncRabbitTemplate.convertSendAndReceive(<span class="string">&quot;RPCExchange&quot;</span>, <span class="string">&quot;RPC&quot;</span>, <span class="string">&quot;RPC异步调用&quot;</span>);</span><br><span class="line">        future.addCallback(<span class="keyword">new</span> ListenableFutureCallback&lt;Object&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(Throwable throwable)</span> </span>&#123;</span><br><span class="line">                log.error(<span class="string">&quot;异步调用失败&quot;</span>, throwable);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSuccess</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">                log.info(<span class="string">&quot;异步调用响应:[&#123;&#125;&#125;&quot;</span>, o.toString());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;ok&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-3、结果"><a href="#2-3、结果" class="headerlink" title="2.3、结果"></a>2.3、结果</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SimpleConsumer [<span class="built_in">queue</span>=amq.rabbitmq.reply-to, consumerTag=amq.ctag-nHw71SucAmOUHb6hGVjaZA identity=<span class="number">5f</span>bed23f] started</span><br><span class="line">接收远程调用请求消息:[RPC异步调用]</span><br><span class="line">异步调用响应:[remote procedure call success!&#125;</span><br></pre></td></tr></table></figure><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://blog.csdn.net/weixin_34383618/article/details/93168325">SpringBoot中使用RabbitMQ(三) RPC</a></li></ul><h2 id="代码地址"><a href="#代码地址" class="headerlink" title="代码地址"></a>代码地址</h2><ul><li>github：<a href="https://github.com/senlinmu1008/rabbitmq-action/tree/master/rabbitmq">https://github.com/senlinmu1008/rabbitmq-action/tree/master/rabbitmq</a></li><li>gitee：<a href="https://gitee.com/ppbin/rabbitmq-action/tree/master/rabbitmq">https://gitee.com/ppbin/rabbitmq-action/tree/master/rabbitmq</a><br><br><br></li></ul>]]></content>
      
      
      <categories>
          
          <category> RabbitMQ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RabbitMQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RabbitMQ实现消息延迟推送</title>
      <link href="RabbitMQ/RabbitMQ%E5%AE%9E%E7%8E%B0%E6%B6%88%E6%81%AF%E5%BB%B6%E8%BF%9F%E6%8E%A8%E9%80%81/"/>
      <url>RabbitMQ/RabbitMQ%E5%AE%9E%E7%8E%B0%E6%B6%88%E6%81%AF%E5%BB%B6%E8%BF%9F%E6%8E%A8%E9%80%81/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="1、使用场景"><a href="#1、使用场景" class="headerlink" title="1、使用场景"></a>1、使用场景</h2><ul><li>淘宝七天自动确认收货。在我们签收商品后，物流系统会在七天后延时发送一个消息给支付系统，通知支付系统将款打给商家，这个过程持续七天，就是使用了消息中间件的延迟推送功能。</li><li>12306 购票支付确认页面。我们在选好票点击确定跳转的页面中往往都会有倒计时，代表着 30 分钟内订单不确认的话将会自动取消订单。其实在下订单那一刻开始购票业务系统就会发送一个延时消息给订单系统，延时30分钟，告诉订单系统订单未完成，如果我们在30分钟内完成了订单，则可以通过逻辑代码判断来忽略掉收到的消息。</li></ul><p>在上面两种场景中，如果我们使用下面3种传统解决方案无疑大大降低了系统的整体性能和吞吐量：</p><ul><li>使用 <code>redis</code> 给订单设置过期时间，最后通过判断 <code>redis</code> 中是否还有该订单来决定订单是否已经完成。这种解决方案相较于消息的延迟推送性能较低，因为我们知道 <code>redis</code> 都是存储于内存中，我们遇到恶意下单或者刷单的将会给内存带来巨大压力。</li><li>使用传统的数据库轮询来判断数据库表中订单的状态，这无疑增加了IO次数，性能极低。</li><li>使用 <code>jvm</code> 原生的 <code>DelayQueue</code> ，也是大量占用内存，而且没有持久化策略，系统宕机或者重启都会丢失订单信息。</li></ul><h2 id="2、实现方式"><a href="#2、实现方式" class="headerlink" title="2、实现方式"></a>2、实现方式</h2><p>在 <code>RabbitMQ 3.6.x</code> 之前我们一般采用死信队列+TTL过期时间来实现延迟队列。这里不做介绍。</p><p>在 <code>RabbitMQ 3.6.x</code> 开始，<code>RabbitMQ</code> 官方提供了延迟队列的插件<code>rabbitmq-delayed-message-exchange</code>。</p><h2 id="3、插件安装"><a href="#3、插件安装" class="headerlink" title="3、插件安装"></a>3、插件安装</h2><ol><li><p><code>rabbitmq-delayed-message-exchange</code>插件官方下载地址：<a href="https://github.com/rabbitmq/rabbitmq-delayed-message-exchange/releases">https://github.com/rabbitmq/rabbitmq-delayed-message-exchange/releases</a></p><p>选择对应版本下载（要和安装的<code>RabbitMQ server</code>版本匹配）。</p></li><li><p>找到<code>RabbitMQ</code>的安装路径，将下载的插件放到<code>plugins</code>目录中。比如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-rw-r--r-- 1 root root   43377 9月  20 22:54 rabbitmq_delayed_message_exchange-3.8.0.ez</span><br><span class="line">[root@libai plugins]# pwd</span><br><span class="line">/usr/lib/rabbitmq/lib/rabbitmq_server-3.7.14/plugins</span><br></pre></td></tr></table></figure></li><li><p>启用插件<br>使用<code>rabbitmq-plugins enable rabbitmq_delayed_message_exchange</code>命令启用插件。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@libai plugins]# rabbitmq-plugins enable rabbitmq_delayed_message_exchange</span><br><span class="line">Enabling plugins on node rabbit@libai:</span><br><span class="line">rabbitmq_delayed_message_exchange</span><br><span class="line">The following plugins have been configured:</span><br><span class="line">  rabbitmq_delayed_message_exchange</span><br><span class="line">  rabbitmq_management</span><br><span class="line">  rabbitmq_management_agent</span><br><span class="line">  rabbitmq_web_dispatch</span><br><span class="line">Applying plugin configuration to rabbit@libai...</span><br><span class="line">The following plugins have been enabled:</span><br><span class="line">  rabbitmq_delayed_message_exchange</span><br><span class="line">started 1 plugins.</span><br></pre></td></tr></table></figure></li><li><p>查看管理界面<br><img src="https://zhaoxiaobin.coding.net/p/blog/d/zhaoxiaobin_img/git/raw/master/post/rabbitmq/rabbitmq-11-1.jpg" alt="-w760"></p></li></ol><p>查看交换机<code>Type</code>是否有<code>x-delayed-message</code>下拉选项，如果有则表示插件安装已经生效了。</p><h2 id="4、应用"><a href="#4、应用" class="headerlink" title="4、应用"></a>4、应用</h2><p>配置和依赖这里就不贴出了，可以参考以往<code>Springboot</code>整合<code>RabbitMQ</code>的文章。</p><h4 id="4-1、队列和交换机绑定"><a href="#4-1、队列和交换机绑定" class="headerlink" title="4.1、队列和交换机绑定"></a>4.1、队列和交换机绑定</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DelayedMessageRabbitConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">delayQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Queue(<span class="string">&quot;delayQueue&quot;</span>, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CustomExchange <span class="title">delayExchange</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; args = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        args.put(<span class="string">&quot;x-delayed-type&quot;</span>, <span class="string">&quot;direct&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CustomExchange(<span class="string">&quot;delayedExchange&quot;</span>, <span class="string">&quot;x-delayed-message&quot;</span>, <span class="keyword">true</span>, <span class="keyword">false</span>, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Binding <span class="title">bindingDelay</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(delayQueue()).to(delayExchange()).with(<span class="string">&quot;delayRouting&quot;</span>).noargs();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>交换机类型为<code>CustomExchange</code>自定义类型，这里指定为<code>x-delayed-message</code>。</p><h4 id="4-2、生产者"><a href="#4-2、生产者" class="headerlink" title="4.2、生产者"></a>4.2、生产者</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DelayMessageController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/sendDelayedMessage&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sendDelayedMessage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.info(DateUtil.now());</span><br><span class="line">        rabbitTemplate.convertAndSend(<span class="string">&quot;delayedExchange&quot;</span>, <span class="string">&quot;delayRouting&quot;</span>, <span class="string">&quot;订单取消&quot;</span>, message -&gt; &#123;</span><br><span class="line">            message.getMessageProperties().setDelay(<span class="number">5000</span>);</span><br><span class="line">            <span class="keyword">return</span> message;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;ok&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里指定延迟5秒推送消息。</p><h4 id="4-3、消费者"><a href="#4-3、消费者" class="headerlink" title="4.3、消费者"></a>4.3、消费者</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@RabbitListener(queues = &quot;delayQueue&quot;)</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DelayReceiver</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RabbitHandler</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(String delayMessage)</span> </span>&#123;</span><br><span class="line">        log.info(DateUtil.now());</span><br><span class="line">        log.info(<span class="string">&quot;延迟收到消息:&#123;&#125;&quot;</span>, delayMessage);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-4、效果"><a href="#4-4、效果" class="headerlink" title="4.4、效果"></a>4.4、效果</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2020</span><span class="number">-09</span><span class="number">-21</span> <span class="number">21</span>:<span class="number">35</span>:<span class="number">44</span></span><br><span class="line">------------------</span><br><span class="line"><span class="number">2020</span><span class="number">-09</span><span class="number">-21</span> <span class="number">21</span>:<span class="number">35</span>:<span class="number">49</span></span><br><span class="line">延迟收到消息:订单取消</span><br></pre></td></tr></table></figure><p>如果开启了消息确认机制，比如确认消息是否发到了交换机（<code>publisher-confirms</code>为true），则可能出现312、<code>NO_ROUTE</code>的提示，忽略即可。</p><p>另外这里的消息延迟主要发生在交换机延迟推送消息到队列中，而非队列延迟推送到消费者。</p><h2 id="代码地址"><a href="#代码地址" class="headerlink" title="代码地址"></a>代码地址</h2><ul><li>github：<a href="https://github.com/senlinmu1008/rabbitmq-action/tree/master/rabbitmq">https://github.com/senlinmu1008/rabbitmq-action/tree/master/rabbitmq</a></li><li>gitee：<a href="https://gitee.com/ppbin/rabbitmq-action/tree/master/rabbitmq">https://gitee.com/ppbin/rabbitmq-action/tree/master/rabbitmq</a><br><br><br></li></ul>]]></content>
      
      
      <categories>
          
          <category> RabbitMQ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RabbitMQ </tag>
            
            <tag> 延迟队列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RabbitMQ消息确认（二）——消费者接收消息手动ACK</title>
      <link href="RabbitMQ/RabbitMQ%E6%B6%88%E6%81%AF%E7%A1%AE%E8%AE%A4%EF%BC%88%E4%BA%8C%EF%BC%89%E2%80%94%E2%80%94%E6%B6%88%E8%B4%B9%E8%80%85%E6%8E%A5%E6%94%B6%E6%B6%88%E6%81%AF%E6%89%8B%E5%8A%A8ACK/"/>
      <url>RabbitMQ/RabbitMQ%E6%B6%88%E6%81%AF%E7%A1%AE%E8%AE%A4%EF%BC%88%E4%BA%8C%EF%BC%89%E2%80%94%E2%80%94%E6%B6%88%E8%B4%B9%E8%80%85%E6%8E%A5%E6%94%B6%E6%B6%88%E6%81%AF%E6%89%8B%E5%8A%A8ACK/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>消息接收的确认机制主要有三种模式：</p><ol><li><p><strong>自动确认<code>AcknowledgeMode.NONE</code></strong><br><code>RabbitMQ</code>成功将消息发出（即将消息成功写入TCP Socket）中立即认为本次投递已经被正确处理，不管消费者端是否成功处理本次投递。<br>所以这种情况如果消费端消费逻辑抛出异常，也就是消费端没有处理成功这条消息，那么就相当于丢失了消息。<br>一般这种情况我们都是使用<code>try catch</code>捕捉异常后，打印日志用于追踪数据，这样找出对应数据再做后续处理。</p></li><li><p><strong>根据情况确认<code>AcknowledgeMode.AUTO</code></strong><br>这也是<code>SpringBoot</code>集成<code>RabbitMQ</code>默认的消息确认情况，如果消费消息时有异常抛出，则会拒绝消息，反之如果没有捕获到异常则确认本次消费成功。</p></li><li><p><strong>手动确认<code>AcknowledgeMode.MANUAL</code></strong><br>这个比较关键，也是我们配置接收消息确认机制时，多数选择的模式。<br>消费者收到消息后，手动调用<code>basicAck/basicNack/basicReject</code>后，<code>RabbitMQ</code>收到这些消息后，才认为本次投递成功。</p></li></ol><h2 id="1、创建手动确认消息的队列"><a href="#1、创建手动确认消息的队列" class="headerlink" title="1、创建手动确认消息的队列"></a>1、创建手动确认消息的队列</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DirectRabbitConfig</span> </span>&#123;</span><br><span class="line">    <span class="comment">//Direct交换机 起名：directExchange</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DirectExchange <span class="title">directExchange</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DirectExchange(<span class="string">&quot;directExchange&quot;</span>, <span class="keyword">true</span>, <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//需要手动确认消息的队列</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">manualAckQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Queue(<span class="string">&quot;manualAckQueue&quot;</span>, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//手动确认消息的队列和直连交换机绑定</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Binding <span class="title">bindingDirectForManualAck</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(manualAckQueue()).to(directExchange()).with(<span class="string">&quot;manualAck&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2、手动确认消息的监听实现"><a href="#2、手动确认消息的监听实现" class="headerlink" title="2、手动确认消息的监听实现"></a>2、手动确认消息的监听实现</h2><h4 id="2-1、通过配置实现"><a href="#2-1、通过配置实现" class="headerlink" title="2.1、通过配置实现"></a>2.1、通过配置实现</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">148.70</span><span class="number">.153</span><span class="number">.63</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">libai</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">password</span></span><br><span class="line">    <span class="attr">listener:</span></span><br><span class="line">      <span class="attr">simple:</span></span><br><span class="line">        <span class="comment"># 手动确认</span></span><br><span class="line">        <span class="attr">acknowledge-mode:</span> <span class="string">manual</span></span><br><span class="line">        <span class="comment"># 拒绝消息是否重回队列</span></span><br><span class="line">        <span class="attr">default-requeue-rejected:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h4 id="2-2、配置类实现（更加灵活）"><a href="#2-2、配置类实现（更加灵活）" class="headerlink" title="2.2、配置类实现（更加灵活）"></a>2.2、配置类实现（更加灵活）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageManualAckListenerConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SimpleMessageListenerContainer <span class="title">simpleMessageListenerContainer</span><span class="params">(ConnectionFactory connectionFactory)</span> </span>&#123;</span><br><span class="line">        SimpleMessageListenerContainer container = <span class="keyword">new</span> SimpleMessageListenerContainer(connectionFactory);</span><br><span class="line">        <span class="comment">// RabbitMQ默认是自动确认，这里改为手动确认消息</span></span><br><span class="line">        container.setAcknowledgeMode(AcknowledgeMode.MANUAL);</span><br><span class="line">        <span class="comment">// 设置需要手动确认消息的队列，可以同时设置多个，前提是队列需要提前创建好</span></span><br><span class="line">        container.setQueueNames(<span class="string">&quot;manualAckQueue&quot;</span>);</span><br><span class="line">        <span class="comment">// 设置监听消息的方法，匿名内部类方式</span></span><br><span class="line">        container.setMessageListener((ChannelAwareMessageListener) (message, channel) -&gt; &#123;</span><br><span class="line">            <span class="comment">// 开始消费消息</span></span><br><span class="line">            log.info(<span class="string">&quot;body:\n&#123;&#125;&quot;</span>, JSONUtil.toJsonPrettyStr(<span class="keyword">new</span> String(message.getBody())));</span><br><span class="line">            log.info(<span class="string">&quot;prop:\n&#123;&#125;&quot;</span>, JSONUtil.toJsonPrettyStr(message.getMessageProperties()));</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 手动确认</span></span><br><span class="line">            <span class="keyword">long</span> deliveryTag = message.getMessageProperties().getDeliveryTag();</span><br><span class="line">            channel.basicAck(deliveryTag, <span class="keyword">false</span>); <span class="comment">// 肯定确认</span></span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> container;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>body</strong>：接收的消息内容。<br><strong>messageProperties</strong>：消息的相关属性。</p><h2 id="3、发送消息测试手动确认"><a href="#3、发送消息测试手动确认" class="headerlink" title="3、发送消息测试手动确认"></a>3、发送消息测试手动确认</h2><h4 id="3-1、调用接口"><a href="#3-1、调用接口" class="headerlink" title="3.1、调用接口"></a>3.1、调用接口</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageManualAckController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/manualAck&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">manualAck</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;messageId&quot;</span>, String.valueOf(UUID.randomUUID()));</span><br><span class="line">        map.put(<span class="string">&quot;messageData&quot;</span>, <span class="string">&quot;manualAck&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;createTime&quot;</span>, LocalDateTime.now().format(DateTimeFormatter.ofPattern(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>)));</span><br><span class="line">        rabbitTemplate.convertAndSend(<span class="string">&quot;directExchange&quot;</span>, <span class="string">&quot;manualAck&quot;</span>, JSONUtil.toJsonStr(map));</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;ok&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-2、查看控制台打印输出。"><a href="#3-2、查看控制台打印输出。" class="headerlink" title="3.2、查看控制台打印输出。"></a>3.2、查看控制台打印输出。</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2020</span><span class="number">-09</span><span class="number">-17</span> <span class="number">22</span>:<span class="number">35</span>:<span class="number">28</span>,<span class="number">635</span> [INFO] [simpleMessageListenerContainer<span class="number">-1</span>] [net.zhaoxiaobin.rabbitmq.manual.MessageManualAckListenerConfig:<span class="number">32</span>] [] body:</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;createTime&quot;</span>: <span class="string">&quot;2020-09-17 22:35:28&quot;</span>,</span><br><span class="line">    <span class="string">&quot;messageId&quot;</span>: <span class="string">&quot;25398d1a-474e-48cd-a3df-460b780e9d97&quot;</span>,</span><br><span class="line">    <span class="string">&quot;messageData&quot;</span>: <span class="string">&quot;manualAck&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="number">2020</span><span class="number">-09</span><span class="number">-17</span> <span class="number">22</span>:<span class="number">35</span>:<span class="number">28</span>,<span class="number">636</span> [INFO] [simpleMessageListenerContainer<span class="number">-1</span>] [net.zhaoxiaobin.rabbitmq.manual.MessageManualAckListenerConfig:<span class="number">33</span>] [] prop:</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;headers&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;spring_listener_return_correlation&quot;</span>: <span class="string">&quot;a6622c5e-22f0-4f39-bea5-4360ef8de66b&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;finalRetryForMessageWithNoId&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="string">&quot;contentLengthSet&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="string">&quot;deliveryTag&quot;</span>: <span class="number">3</span>,</span><br><span class="line">    <span class="string">&quot;receivedExchange&quot;</span>: <span class="string">&quot;directExchange&quot;</span>,</span><br><span class="line">    <span class="string">&quot;priority&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">&quot;receivedRoutingKey&quot;</span>: <span class="string">&quot;manualAck&quot;</span>,</span><br><span class="line">    <span class="string">&quot;redelivered&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="string">&quot;consumerTag&quot;</span>: <span class="string">&quot;amq.ctag-cqCpyMhe9Ak2vuv_RifFlQ&quot;</span>,</span><br><span class="line">    <span class="string">&quot;receivedDeliveryMode&quot;</span>: <span class="string">&quot;PERSISTENT&quot;</span>,</span><br><span class="line">    <span class="string">&quot;publishSequenceNumber&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">&quot;contentEncoding&quot;</span>: <span class="string">&quot;UTF-8&quot;</span>,</span><br><span class="line">    <span class="string">&quot;contentLength&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">&quot;contentType&quot;</span>: <span class="string">&quot;text/plain&quot;</span>,</span><br><span class="line">    <span class="string">&quot;consumerQueue&quot;</span>: <span class="string">&quot;manualAckQueue&quot;</span>,</span><br><span class="line">    <span class="string">&quot;deliveryTagSet&quot;</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-3、消费消息时的状态变化"><a href="#3-3、消费消息时的状态变化" class="headerlink" title="3.3、消费消息时的状态变化"></a>3.3、消费消息时的状态变化</h4><p>通过打断点方式查看当消息未被确认时在<code>RabbitMQ server</code>中的状态。</p><p><img src="https://zhaoxiaobin.coding.net/p/blog/d/zhaoxiaobin_img/git/raw/master/post/rabbitmq/rabbitmq-10-1.jpg" alt="-w628"></p><h2 id="4、确认-拒绝消息"><a href="#4、确认-拒绝消息" class="headerlink" title="4、确认/拒绝消息"></a>4、确认/拒绝消息</h2><h4 id="4-1、basicAck"><a href="#4-1、basicAck" class="headerlink" title="4.1、basicAck"></a>4.1、basicAck</h4><p>确认消息。<br>第2个参数如果设为<code>true</code>，则表示批量确认当前通道中所有<code>deliveryTag</code>小于当前消息的所有消息。</p><h4 id="4-2、basicNack"><a href="#4-2、basicNack" class="headerlink" title="4.2、basicNack"></a>4.2、basicNack</h4><p>拒绝消息。<br>第2个参数如果设为<code>true</code>，则表示批量拒绝当前通道中所有<code>deliveryTag</code>小于当前消息的所有消息。<br>第3个参数如果设为<code>true</code>，则表示当前消息再次回到队列中等待被再次消费。</p><h4 id="4-3、basicReject"><a href="#4-3、basicReject" class="headerlink" title="4.3、basicReject"></a>4.3、basicReject</h4><p>拒绝消息。与<code>basicNack</code>作用类似，只不过一次只能拒绝单条消息。</p><p><strong><em>对于拒绝消息并且重回队列使用时需要谨慎，避免使用不当会导致一些每次都被你重入列的消息一直消费-入列-消费-入列这样循环，会导致消息积压</em></strong></p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://blog.csdn.net/qq_35387940/article/details/100514134">Springboot 整合RabbitMq ，用心看完这一篇就够了</a></li></ul><h2 id="代码地址"><a href="#代码地址" class="headerlink" title="代码地址"></a>代码地址</h2><ul><li>github：<a href="https://github.com/senlinmu1008/rabbitmq-action/tree/master/rabbitmq">https://github.com/senlinmu1008/rabbitmq-action/tree/master/rabbitmq</a></li><li>gitee：<a href="https://gitee.com/ppbin/rabbitmq-action/tree/master/rabbitmq">https://gitee.com/ppbin/rabbitmq-action/tree/master/rabbitmq</a><br><br><br></li></ul>]]></content>
      
      
      <categories>
          
          <category> RabbitMQ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RabbitMQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RabbitMQ消息确认（一）——生产者推送消息</title>
      <link href="RabbitMQ/RabbitMQ%E6%B6%88%E6%81%AF%E7%A1%AE%E8%AE%A4%EF%BC%88%E4%B8%80%EF%BC%89%E2%80%94%E2%80%94%E7%94%9F%E4%BA%A7%E8%80%85%E6%8E%A8%E9%80%81%E6%B6%88%E6%81%AF/"/>
      <url>RabbitMQ/RabbitMQ%E6%B6%88%E6%81%AF%E7%A1%AE%E8%AE%A4%EF%BC%88%E4%B8%80%EF%BC%89%E2%80%94%E2%80%94%E7%94%9F%E4%BA%A7%E8%80%85%E6%8E%A8%E9%80%81%E6%B6%88%E6%81%AF/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>生产者推送消息确认机制有2种，分别是：</p><ul><li>确认消息已发送到交换机(Exchange)</li><li>确认消息已发送到队列(Queue)</li></ul><h2 id="1、配置文件"><a href="#1、配置文件" class="headerlink" title="1、配置文件"></a>1、配置文件</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">30200</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">148.70</span><span class="number">.153</span><span class="number">.63</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">libai</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">password</span></span><br><span class="line">    <span class="comment"># 确认消息已发送到交换机(Exchange); Springboot2.2.x改为 publisher-confirm-type: correlated</span></span><br><span class="line">    <span class="attr">publisher-confirms:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># 确认消息已发送到队列(Queue)</span></span><br><span class="line">    <span class="attr">publisher-returns:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h2 id="2、RabbitTemplate配置"><a href="#2、RabbitTemplate配置" class="headerlink" title="2、RabbitTemplate配置"></a>2、RabbitTemplate配置</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RabbitMQConfig</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 1. 消息推送到server，但是在server里找不到交换机</span></span><br><span class="line"><span class="comment">     * 2. 消息推送到server，找到交换机了，但是没找到队列</span></span><br><span class="line"><span class="comment">     * 3. 消息推送成功</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RabbitTemplate <span class="title">createRabbitTemplate</span><span class="params">(ConnectionFactory connectionFactory)</span> </span>&#123;</span><br><span class="line">        RabbitTemplate rabbitTemplate = <span class="keyword">new</span> RabbitTemplate();</span><br><span class="line">        rabbitTemplate.setConnectionFactory(connectionFactory);</span><br><span class="line">        <span class="comment">// 设置开启Mandatory,才能触发回调函数,无论消息推送结果怎么样都强制调用回调函数</span></span><br><span class="line">        rabbitTemplate.setMandatory(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 确认消息已发送到交换机(Exchange)</span></span><br><span class="line">        <span class="comment">// 1、2、3都会触发此回调函数</span></span><br><span class="line">        rabbitTemplate.setConfirmCallback((correlationData, ack, cause) -&gt; &#123;</span><br><span class="line">            log.info(<span class="string">&quot;ConfirmCallback:     &quot;</span> + <span class="string">&quot;相关数据：&quot;</span> + correlationData);</span><br><span class="line">            log.info(<span class="string">&quot;ConfirmCallback:     &quot;</span> + <span class="string">&quot;确认情况：&quot;</span> + ack);</span><br><span class="line">            log.info(<span class="string">&quot;ConfirmCallback:     &quot;</span> + <span class="string">&quot;原因：&quot;</span> + cause);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 确认消息已发送到队列(Queue)</span></span><br><span class="line">        <span class="comment">// 只有2才会触发此回调函数</span></span><br><span class="line">        rabbitTemplate.setReturnCallback((message, replyCode, replyText, exchange, routingKey) -&gt; &#123;</span><br><span class="line">            log.info(<span class="string">&quot;ReturnCallback:     &quot;</span> + <span class="string">&quot;消息：&quot;</span> + message);</span><br><span class="line">            log.info(<span class="string">&quot;ReturnCallback:     &quot;</span> + <span class="string">&quot;回应码：&quot;</span> + replyCode);</span><br><span class="line">            log.info(<span class="string">&quot;ReturnCallback:     &quot;</span> + <span class="string">&quot;回应信息：&quot;</span> + replyText);</span><br><span class="line">            log.info(<span class="string">&quot;ReturnCallback:     &quot;</span> + <span class="string">&quot;交换机：&quot;</span> + exchange);</span><br><span class="line">            log.info(<span class="string">&quot;ReturnCallback:     &quot;</span> + <span class="string">&quot;路由键：&quot;</span> + routingKey);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> rabbitTemplate;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在配置中重新定义了<code>RabbitTemplate</code>，分3种情况测试：</p><ol><li>消息推送到<code>server</code>，但是在<code>server</code>里找不到交换机。</li><li>消息推送到<code>server</code>，找到交换机了，但是没找到队列。</li><li>消息推送成功。</li></ol><p><strong>结果</strong>：</p><ol><li><p>只回调<code>ConfirmCallback</code>函数。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ConfirmCallback:     相关数据：null</span><br><span class="line">ConfirmCallback:     确认情况：<span class="literal">false</span></span><br><span class="line">ConfirmCallback:     原因：channel error; protocol method: <span class="meta">#method<span class="meta-string">&lt;channel.close&gt;(reply-code=404, reply-text=NOT_FOUND - no exchange &#x27;directExchange1&#x27; in vhost &#x27;/&#x27;, class-id=60, method-id=40)</span></span></span><br></pre></td></tr></table></figure></li><li><p>回调<code>ConfirmCallback</code>和<code>ReturnCallback</code>函数。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ReturnCallback:     消息：(Body:&#x27;&#123;createTime=2020-09-14 22:48:22, messageId=02007bf3-3eb6-4e53-a539-45c28f012c46, messageData=RabbitMQ&#125;&#x27; MessageProperties [headers=&#123;&#125;, contentType=application/x-java-serialized-object, contentLength=0, receivedDeliveryMode=PERSISTENT, priority=0, deliveryTag=0])</span><br><span class="line">ReturnCallback:     回应码：<span class="number">312</span></span><br><span class="line">ReturnCallback:     回应信息：NO_ROUTE</span><br><span class="line">ReturnCallback:     交换机：directExchange</span><br><span class="line">ReturnCallback:     路由键：directRouting2</span><br><span class="line">--</span><br><span class="line">ConfirmCallback:     相关数据：null</span><br><span class="line">ConfirmCallback:     确认情况：<span class="literal">true</span></span><br><span class="line">ConfirmCallback:     原因：null</span><br></pre></td></tr></table></figure></li><li><p>只回调<code>ConfirmCallback</code>函数。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ConfirmCallback:     相关数据：null</span><br><span class="line">ConfirmCallback:     确认情况：<span class="literal">true</span></span><br><span class="line">ConfirmCallback:     原因：null</span><br></pre></td></tr></table></figure></li></ol><p>每种情况都会回调<code>ConfirmCallback</code>函数；只有找不到队列时才会回调<code>ReturnCallback</code>函数。</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://blog.csdn.net/qq_35387940/article/details/100514134">Springboot 整合RabbitMq ，用心看完这一篇就够了</a></li></ul><h2 id="代码地址"><a href="#代码地址" class="headerlink" title="代码地址"></a>代码地址</h2><ul><li>github：<a href="https://github.com/senlinmu1008/rabbitmq-action/tree/master/rabbitmq">https://github.com/senlinmu1008/rabbitmq-action/tree/master/rabbitmq</a></li><li>gitee：<a href="https://gitee.com/ppbin/rabbitmq-action/tree/master/rabbitmq">https://gitee.com/ppbin/rabbitmq-action/tree/master/rabbitmq</a><br><br><br></li></ul>]]></content>
      
      
      <categories>
          
          <category> RabbitMQ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RabbitMQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Springboot整合RabbitMQ（四）——设置消息过期时间TTL</title>
      <link href="RabbitMQ/Springboot%E6%95%B4%E5%90%88RabbitMQ%EF%BC%88%E5%9B%9B%EF%BC%89%E2%80%94%E2%80%94%E8%AE%BE%E7%BD%AE%E6%B6%88%E6%81%AF%E8%BF%87%E6%9C%9F%E6%97%B6%E9%97%B4TTL/"/>
      <url>RabbitMQ/Springboot%E6%95%B4%E5%90%88RabbitMQ%EF%BC%88%E5%9B%9B%EF%BC%89%E2%80%94%E2%80%94%E8%AE%BE%E7%BD%AE%E6%B6%88%E6%81%AF%E8%BF%87%E6%9C%9F%E6%97%B6%E9%97%B4TTL/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>主要有2种方式：</p><ol><li>指定一条消息的过期时间。</li><li>给队列设置消息过期时间，队列中的所有消息都有同样的过期时间。</li></ol><h2 id="1、指定消息的过期时间"><a href="#1、指定消息的过期时间" class="headerlink" title="1、指定消息的过期时间"></a>1、指定消息的过期时间</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TTLController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/testTTL&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testTTL</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        MessageProperties messageProperties = <span class="keyword">new</span> MessageProperties();</span><br><span class="line">        messageProperties.setExpiration(<span class="string">&quot;20000&quot;</span>); <span class="comment">// 设置过期时间，单位：毫秒</span></span><br><span class="line">        <span class="keyword">byte</span>[] msgBytes = <span class="string">&quot;测试消息自动过期&quot;</span>.getBytes();</span><br><span class="line">        Message message = <span class="keyword">new</span> Message(msgBytes, messageProperties);</span><br><span class="line">        rabbitTemplate.convertAndSend(<span class="string">&quot;TTL_EXCHANGE&quot;</span>, <span class="string">&quot;TTL&quot;</span>, message);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;ok&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>消息推送到队列后，如果指定时间内没有被消费，则会自动过期。</p><p><strong>注意</strong>：<br><code>RabbitMQ</code>只会对队列头部的消息进行过期淘汰。如果单独给消息设置TTL，先入队列的消息过期时间如果设置比较长，后入队列的设置时间比较短。会造成消息不会及时地过期淘汰，导致消息的堆积。</p><h2 id="2、给队列中的所有消息设置过期时间"><a href="#2、给队列中的所有消息设置过期时间" class="headerlink" title="2、给队列中的所有消息设置过期时间"></a>2、给队列中的所有消息设置过期时间</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TTLQueueRabbitConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">TTLQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;x-message-ttl&quot;</span>, <span class="number">30000</span>); <span class="comment">// 队列中的消息未被消费则30秒后过期</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Queue(<span class="string">&quot;TTL_QUEUE&quot;</span>, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, map);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DirectExchange <span class="title">TTLExchange</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DirectExchange(<span class="string">&quot;TTL_EXCHANGE&quot;</span>, <span class="keyword">true</span>, <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Binding <span class="title">bindingDirect</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(TTLQueue()).to(TTLExchange()).with(<span class="string">&quot;TTL&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>声明队列时设置1个<code>x-message-ttl</code>的属性，并设置过期时间，凡是推送到该队列中的所有消息，都会有一个30秒后过期的属性。</p><p>可以看到创建的队列有<code>TTL</code>的特性，表示该队列中的消息会自动过期。</p><p><img src="https://zhaoxiaobin.coding.net/p/blog/d/zhaoxiaobin_img/git/raw/master/post/rabbitmq/rabbitmq-8-1.jpg" alt="-w951"></p><p>如果同时指定了<code>Message TTL</code>和<code>Queue TTL</code>，则优先较小的那一个。</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://blog.csdn.net/u011212394/article/details/100086728">RabbitMQ中的过期时间、死信队列、延迟队列</a></li></ul><h2 id="代码地址"><a href="#代码地址" class="headerlink" title="代码地址"></a>代码地址</h2><ul><li>github：<a href="https://github.com/senlinmu1008/rabbitmq-action/tree/master/rabbitmq-ttl-dlx">https://github.com/senlinmu1008/rabbitmq-action/tree/master/rabbitmq-ttl-dlx</a></li><li>gitee：<a href="https://gitee.com/ppbin/rabbitmq-action/tree/master/rabbitmq-ttl-dlx">https://gitee.com/ppbin/rabbitmq-action/tree/master/rabbitmq-ttl-dlx</a><br><br><br></li></ul>]]></content>
      
      
      <categories>
          
          <category> RabbitMQ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RabbitMQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java生成pdf文件或jpg图片</title>
      <link href="SpringBoot/%E9%9B%86%E6%88%90%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93%E5%BA%94%E7%94%A8/Java%E7%94%9F%E6%88%90pdf%E6%96%87%E4%BB%B6%E6%88%96jpg%E5%9B%BE%E7%89%87/"/>
      <url>SpringBoot/%E9%9B%86%E6%88%90%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93%E5%BA%94%E7%94%A8/Java%E7%94%9F%E6%88%90pdf%E6%96%87%E4%BB%B6%E6%88%96jpg%E5%9B%BE%E7%89%87/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>在一些业务场景中，需要生成<code>pdf</code>文件或者<code>jpg</code>图片，有时候还需要带上水印。我们可以事先用<code>freemarker</code>定义好<code>html</code>模板，然后把模板转换成<code>pdf</code>或<code>jpg</code>文件。</p><p>同时<code>freemarker</code>模板还支持变量的定义，在使用时可以填充具体的业务数据。</p><h2 id="1、Maven导包"><a href="#1、Maven导包" class="headerlink" title="1、Maven导包"></a>1、Maven导包</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- freemarker --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context-support<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.freemarker<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>freemarker<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- pdf核心包 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.itextpdf<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>itextpdf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.5.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 适配中文字体 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.itextpdf<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>itext-asian<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- html转pdf --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.itextpdf.tool<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>xmlworker<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.5.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- pdf转图片 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.pdfbox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pdfbox<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2、接口定义"><a href="#2、接口定义" class="headerlink" title="2、接口定义"></a>2、接口定义</h2><h4 id="2-1、请求"><a href="#2-1、请求" class="headerlink" title="2.1、请求"></a>2.1、请求</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GeneratePdfReq</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成pdf文件的绝对路径</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@NotBlank(message = &quot;生成pdf文件的绝对路径不能为空&quot;)</span></span><br><span class="line">    <span class="meta">@Pattern(regexp = &quot;^.*(\\.pdf|\\.jpg)$&quot;, message = &quot;生成的文件必须以.pdf或.jpg结尾&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String absolutePath;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用html模板的绝对路径</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@NotBlank(message = &quot;使用的模板路径不能为空&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String templateName;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 渲染模板的业务数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Object dataModel;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 水印信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> WaterMarkInfo waterMarkInfo;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * pdf文件的宽，默认A4</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> width = <span class="number">595</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * pdf文件的高，默认A4</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> height = <span class="number">842</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-2、水印"><a href="#2-2、水印" class="headerlink" title="2.2、水印"></a>2.2、水印</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WaterMarkInfo</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 如果为null设置水印时会报错</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String waterMark = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 水印透明度,值越小透明度越高</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> opacity = <span class="number">0.2F</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 水印字体，如果乱码设置为本地宋体字体:fonts/simsun.ttc,1</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String fontName = <span class="string">&quot;STSong-Light&quot;</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 水印编码格式，如果乱码设置为:BaseFont.IDENTITY_H</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String encoding = <span class="string">&quot;UniGB-UCS2-H&quot;</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 字体大小</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> fontSize = <span class="number">24</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 横坐标在页面宽度的百分比,左下角为原点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> x = <span class="number">50</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 纵坐标在页面高度的百分比,左下角为原点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> y = <span class="number">40</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 水印旋转角度</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> rotation = <span class="number">45</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-3、响应"><a href="#2-3、响应" class="headerlink" title="2.3、响应"></a>2.3、响应</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GeneratePdfResp</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成pdf的绝对路径</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String absolutePath;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3、应用代码"><a href="#3、应用代码" class="headerlink" title="3、应用代码"></a>3、应用代码</h2><h4 id="3-1、渲染freemarker模板获取html网页"><a href="#3-1、渲染freemarker模板获取html网页" class="headerlink" title="3.1、渲染freemarker模板获取html网页"></a>3.1、渲染<code>freemarker</code>模板获取<code>html</code>网页</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service(&quot;freeMarkerService&quot;)</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FreeMarkerServiceImpl</span> <span class="keyword">implements</span> <span class="title">FreeMarkerService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> FreeMarkerConfigurer freeMarkerConfigurer;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 渲染html后获取整个页面内容</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> templatePath 模板路径</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dataModel    业务数据，一般以map形式传入</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getHtml</span><span class="params">(String templatePath, Object dataModel)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;开始将模板&#123;&#125;渲染为html,业务数据&#123;&#125;&quot;</span>, templatePath, JSONUtil.toJsonPrettyStr(dataModel));</span><br><span class="line">        Configuration cfg = freeMarkerConfigurer.getConfiguration();</span><br><span class="line">        cfg.setTemplateExceptionHandler(TemplateExceptionHandler.RETHROW_HANDLER); <span class="comment">// freemaker异常时仍旧抛出，统一异常处理</span></span><br><span class="line">        cfg.setClassicCompatible(<span class="keyword">true</span>);<span class="comment">// 不需要对null值预处理，否则需要在模板取值时判断是否存在，不然报错</span></span><br><span class="line">        StringWriter stringWriter = <span class="keyword">new</span> StringWriter();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 设置模板所在目录，绝对路径方式，不打进jar包</span></span><br><span class="line"><span class="comment">//            cfg.setDirectoryForTemplateLoading(new File(templatePath).getParentFile());</span></span><br><span class="line"><span class="comment">//            Template temp = cfg.getTemplate(new File(templatePath).getName());</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 相对路径设置模板所在目录，模板打进jar包，默认就是resources目录下的/templates目录。</span></span><br><span class="line">            cfg.setClassForTemplateLoading(<span class="keyword">this</span>.getClass(), <span class="string">&quot;/templates&quot;</span>);</span><br><span class="line">            Template temp = cfg.getTemplate(templatePath);</span><br><span class="line">            temp.process(dataModel, stringWriter);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(PdfErrorCode.PDF_TEMPLATE_RENDER_FAIL.getDesc(), e);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> PdfBizException(PdfErrorCode.PDF_TEMPLATE_RENDER_FAIL);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> stringWriter.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-2、将html网页转pdf，并添加水印"><a href="#3-2、将html网页转pdf，并添加水印" class="headerlink" title="3.2、将html网页转pdf，并添加水印"></a>3.2、将html网页转pdf，并添加水印</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service(&quot;pdfService&quot;)</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PdfServiceImpl</span> <span class="keyword">implements</span> <span class="title">PdfService</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String FONT_PATH = <span class="string">&quot;fonts/simsun.ttc,1&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> WaterMarkerService waterMarkerService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * html页面内容转pdf，并给每页附上水印</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> html          html页面内容</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> width         pdf的宽</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> height        pdf的高</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> waterMarkInfo 水印信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">byte</span>[] html2Pdf(String html, <span class="keyword">float</span> width, <span class="keyword">float</span> height, WaterMarkInfo waterMarkInfo) &#123;</span><br><span class="line">        log.info(<span class="string">&quot;=================开始将html转换为pdf=================&quot;</span>);</span><br><span class="line">        ByteArrayOutputStream out = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        <span class="keyword">this</span>.html2Pdf(html, width, height, out);</span><br><span class="line">        <span class="keyword">byte</span>[] bytes = out.toByteArray();</span><br><span class="line">        <span class="comment">// 设置水印</span></span><br><span class="line">        <span class="keyword">if</span> (waterMarkInfo != <span class="keyword">null</span>) &#123;</span><br><span class="line">            bytes = waterMarkerService.addWaterMarker(bytes, waterMarkInfo);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> bytes;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * html转pdf</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> html   html页面内容</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> width  pdf的宽</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> height pdf的高</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> out    输出流，pdf文件用此流输出，需要pdf文档关闭后流中才会有数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@SneakyThrows</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">html2Pdf</span><span class="params">(String html, <span class="keyword">float</span> width, <span class="keyword">float</span> height, OutputStream out)</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Cleanup</span> Document document = <span class="keyword">new</span> Document(<span class="keyword">new</span> RectangleReadOnly(width, height)); <span class="comment">// 默认A4纵向</span></span><br><span class="line">        <span class="comment">// 这里需要关闭document才能让生成的pdf字节数据刷到输出流中</span></span><br><span class="line">        PdfWriter writer = PdfWriter.getInstance(document, out); <span class="comment">// 关闭可能导致生成的pdf显示异常（Chrome）</span></span><br><span class="line">        document.open();</span><br><span class="line">        <span class="comment">// 设置字体,这里统一用simsun.ttc即宋体</span></span><br><span class="line">        XMLWorkerFontProvider asianFontProvider = <span class="keyword">new</span> XMLWorkerFontProvider() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Font <span class="title">getFont</span><span class="params">(String fontname, String encoding, <span class="keyword">boolean</span> embedded, <span class="keyword">float</span> size, <span class="keyword">int</span> style, BaseColor color, <span class="keyword">boolean</span> cached)</span> </span>&#123;</span><br><span class="line">                Font font;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    font = <span class="keyword">new</span> Font(BaseFont.createFont(FONT_PATH, BaseFont.IDENTITY_H, BaseFont.EMBEDDED));</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    log.error(PdfErrorCode.SET_PDF_FONT_FAIL.getDesc(), e);</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> PdfBizException(PdfErrorCode.SET_PDF_FONT_FAIL);</span><br><span class="line">                &#125;</span><br><span class="line">                font.setStyle(style);</span><br><span class="line">                font.setColor(color);</span><br><span class="line">                <span class="keyword">if</span> (size &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    font.setSize(size);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> font;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 生成pdf</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            XMLWorkerHelper.getInstance().parseXHtml(writer, document, <span class="keyword">new</span> ByteArrayInputStream(html.getBytes(<span class="string">&quot;UTF-8&quot;</span>)), <span class="keyword">null</span>, Charset.forName(<span class="string">&quot;UTF-8&quot;</span>), asianFontProvider);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 如果系统已经装有simsun.ttc字体，则不需要单独设置字体也不需要itext-asian jar包</span></span><br><span class="line"><span class="comment">//            XMLWorkerHelper.getInstance().parseXHtml(writer, document, new ByteArrayInputStream(html.getBytes(&quot;UTF-8&quot;)), null, Charset.forName(&quot;UTF-8&quot;));</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (RuntimeWorkerException e) &#123;</span><br><span class="line">            log.error(PdfErrorCode.HTML_CONVERT2PDF_FAIL.getDesc(), e);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> PdfBizException(PdfErrorCode.HTML_CONVERT2PDF_FAIL);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>添加水印实现类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service(&quot;waterMarkerService&quot;)</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WaterMarkerServiceImpl</span> <span class="keyword">implements</span> <span class="title">WaterMarkerService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 给pdf文件每页添加水印</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> source        pdf文件的字节数组形式</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> waterMarkInfo 水印信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">byte</span>[] addWaterMarker(<span class="keyword">byte</span>[] source, WaterMarkInfo waterMarkInfo) &#123;</span><br><span class="line">        log.info(<span class="string">&quot;开始设置水印数据&#123;&#125;&quot;</span>, JSONUtil.toJsonPrettyStr(waterMarkInfo));</span><br><span class="line">        ByteArrayOutputStream out = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        <span class="keyword">this</span>.addWaterMarker(source, waterMarkInfo, out);</span><br><span class="line">        <span class="keyword">return</span> out.toByteArray();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 给pdf文件每页添加水印</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> source        pdf文件的字节数组形式</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> waterMarkInfo 水印信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> out           输出流，pdf文件用此流输出，需要pdf文档关闭后流中才会有数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@SneakyThrows</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addWaterMarker</span><span class="params">(<span class="keyword">byte</span>[] source, WaterMarkInfo waterMarkInfo, OutputStream out)</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Cleanup</span> PdfReader reader = <span class="keyword">new</span> PdfReader(source);</span><br><span class="line">        <span class="comment">// 这里需要关闭PdfStamper才能让生成的pdf字节数据刷到输出流中</span></span><br><span class="line">        <span class="meta">@Cleanup</span> PdfStamper pdfStamper = <span class="keyword">new</span> PdfStamper(reader, out);</span><br><span class="line">        BaseFont font = BaseFont.createFont(waterMarkInfo.getFontName(), waterMarkInfo.getEncoding(), BaseFont.EMBEDDED);</span><br><span class="line">        PdfGState gs = <span class="keyword">new</span> PdfGState();</span><br><span class="line">        gs.setFillOpacity(waterMarkInfo.getOpacity());</span><br><span class="line">        <span class="comment">// 给每页pdf生成水印</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= reader.getNumberOfPages(); i++) &#123;</span><br><span class="line">            PdfContentByte waterMarker = pdfStamper.getUnderContent(i);</span><br><span class="line">            waterMarker.beginText();</span><br><span class="line">            <span class="comment">// 设置水印透明度</span></span><br><span class="line">            waterMarker.setGState(gs);</span><br><span class="line">            <span class="comment">// 设置水印字体和大小</span></span><br><span class="line">            waterMarker.setFontAndSize(font, waterMarkInfo.getFontSize());</span><br><span class="line">            <span class="comment">// 设置水印位置、内容、旋转角度</span></span><br><span class="line">            <span class="keyword">float</span> X = reader.getPageSize(i).getWidth() * waterMarkInfo.getX() / <span class="number">100</span>;</span><br><span class="line">            <span class="keyword">float</span> Y = reader.getPageSize(i).getHeight() * waterMarkInfo.getY() / <span class="number">100</span>;</span><br><span class="line">            waterMarker.showTextAligned(Element.ALIGN_CENTER, waterMarkInfo.getWaterMark(), X, Y, waterMarkInfo.getRotation());</span><br><span class="line">            <span class="comment">// 设置水印颜色</span></span><br><span class="line">            waterMarker.setColorFill(BaseColor.GRAY);</span><br><span class="line">            waterMarker.endText();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-3、整合实现"><a href="#3-3、整合实现" class="headerlink" title="3.3、整合实现"></a>3.3、整合实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Service(&quot;generatePdfService&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GeneratePdfServiceImpl</span> <span class="keyword">implements</span> <span class="title">RestService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> FreeMarkerService freeMarkerService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> PdfService pdfService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@SneakyThrows</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> GeneratePdfResp <span class="title">service</span><span class="params">(GeneratePdfReq generatePdfReq)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;开始生成pdf文件,请求报文:&#123;&#125;&quot;</span>, JSONUtil.toJsonPrettyStr(generatePdfReq));</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        1.根据freemarker模板填充业务数据获取完整的html字符串</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        String html = freeMarkerService.getHtml(generatePdfReq.getTemplateName(), generatePdfReq.getDataModel());</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        2.生成pdf文件（内存）</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">byte</span>[] bytes = pdfService.html2Pdf(html, generatePdfReq.getWidth(), generatePdfReq.getHeight(), generatePdfReq.getWaterMarkInfo());</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        3.本地保存pdf文件</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        File targetFile = <span class="keyword">new</span> File(generatePdfReq.getAbsolutePath());</span><br><span class="line">        <span class="comment">// 上级目录不存在则创建</span></span><br><span class="line">        <span class="keyword">if</span> (!targetFile.getParentFile().exists()) &#123;</span><br><span class="line">            targetFile.getParentFile().mkdirs();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 根据不同文件名后缀生成对应文件</span></span><br><span class="line">        <span class="keyword">if</span> (generatePdfReq.getAbsolutePath().endsWith(<span class="string">&quot;pdf&quot;</span>)) &#123;</span><br><span class="line">            FileUtils.writeByteArrayToFile(targetFile, bytes);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="meta">@Cleanup</span> PDDocument document = PDDocument.load(bytes);</span><br><span class="line">            PDFRenderer renderer = <span class="keyword">new</span> PDFRenderer(document);</span><br><span class="line">            BufferedImage bufferedImage = renderer.renderImageWithDPI(<span class="number">0</span>, <span class="number">150</span>);<span class="comment">// 只打第一页,dpi越大图片越高清也越耗时</span></span><br><span class="line">            ByteArrayOutputStream baos = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">            ImageIO.write(bufferedImage, <span class="string">&quot;jpg&quot;</span>, baos);</span><br><span class="line">            FileUtils.writeByteArrayToFile(targetFile, baos.toByteArray());</span><br><span class="line">        &#125;</span><br><span class="line">        log.info(<span class="string">&quot;文件本地保存完成,文件路径:[&#123;&#125;]&quot;</span>, targetFile.getAbsolutePath());</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        4.组织返回</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        GeneratePdfResp generatePdfResp = <span class="keyword">new</span> GeneratePdfResp();</span><br><span class="line">        generatePdfResp.setAbsolutePath(targetFile.getAbsolutePath());</span><br><span class="line">        <span class="keyword">return</span> generatePdfResp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-4、controller"><a href="#3-4、controller" class="headerlink" title="3.4、controller"></a>3.4、controller</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PdfController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RestService generatePdfService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(value = &quot;/html2Pdf&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> GeneratePdfResp <span class="title">html2Pdf</span><span class="params">(<span class="meta">@RequestBody</span> <span class="meta">@Validated</span> GeneratePdfReq req)</span> </span>&#123;</span><br><span class="line">        GeneratePdfResp resp = generatePdfService.service(req);</span><br><span class="line">        <span class="keyword">return</span> resp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4、应用"><a href="#4、应用" class="headerlink" title="4、应用"></a>4、应用</h2><h4 id="4-1、freemarker模板（html模板）"><a href="#4-1、freemarker模板（html模板）" class="headerlink" title="4.1、freemarker模板（html模板）"></a>4.1、<code>freemarker</code>模板（<code>html</code>模板）</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Type&quot;</span> <span class="attr">content</span>=<span class="string">&quot;text/html; charset=utf-8&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Style-Type&quot;</span> <span class="attr">content</span>=<span class="string">&quot;text/css&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        body &#123;</span><br><span class="line">            font-family: SimSun</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>html模板<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&quot;margin:0pt; orphans:0; text-align:center; widows:0&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;font-family:SimSun; font-size:16pt&quot;</span>&gt;</span>html模板<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>姓名：$&#123;name&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>证件号码：$&#123;cardNo&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>日期：$&#123;date&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="4-2、接口调用生成pdf"><a href="#4-2、接口调用生成pdf" class="headerlink" title="4.2、接口调用生成pdf"></a>4.2、接口调用生成pdf</h4><p><img src="https://zhaoxiaobin.coding.net/p/blog/d/zhaoxiaobin_img/git/raw/master/post/springboot/html-pdf-1.jpg"></p><p><img src="https://zhaoxiaobin.coding.net/p/blog/d/zhaoxiaobin_img/git/raw/master/post/springboot/html-pdf-2.jpg"></p><h2 id="5、说明"><a href="#5、说明" class="headerlink" title="5、说明"></a>5、说明</h2><ol><li>根据参数后缀名可以生成pdf或jpg文件，生成的pdf文件默认为A4大小，也可以通过请求参数设置大小。</li><li>pdf文件会根据html模板内容大小自动分页。</li><li>如果生成图片，多页不会生成多张图片，可以把高度设置大一些，最后会生成长图。</li><li>水印每页都会自动添加。</li><li>为了提高代码的复用性和可维护性，工程内渲染html模板、生成pdf文件、添加水印都有单独的接口实现。</li></ol><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://blog.csdn.net/wzh474420999/article/details/78548891">java使用xmlWorkerHelper将html转pdf</a></li><li><a href="https://www.cnblogs.com/ChenD/p/6908246.html">Freemarker模板的使用简介</a></li><li><a href="https://blog.csdn.net/weixin_41997734/article/details/89520469">使用itext5给PDF添加文字水印</a></li></ul><h2 id="代码地址"><a href="#代码地址" class="headerlink" title="代码地址"></a>代码地址</h2><ul><li>github：<a href="https://github.com/senlinmu1008/spring-boot/tree/master/html2pdf">https://github.com/senlinmu1008/spring-boot/tree/master/html2pdf</a></li><li>gitee：<a href="https://gitee.com/ppbin/spring-boot/tree/master/html2pdf">https://gitee.com/ppbin/spring-boot/tree/master/html2pdf</a><br><br><br></li></ul>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Springboot整合RabbitMQ（三）——Topic主题交换机</title>
      <link href="RabbitMQ/Springboot%E6%95%B4%E5%90%88RabbitMQ%EF%BC%88%E4%B8%89%EF%BC%89%E2%80%94%E2%80%94Topic%E4%B8%BB%E9%A2%98%E4%BA%A4%E6%8D%A2%E6%9C%BA/"/>
      <url>RabbitMQ/Springboot%E6%95%B4%E5%90%88RabbitMQ%EF%BC%88%E4%B8%89%EF%BC%89%E2%80%94%E2%80%94Topic%E4%B8%BB%E9%A2%98%E4%BA%A4%E6%8D%A2%E6%9C%BA/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>主题交换机，这个交换机其实跟直连交换机流程差不多，但是它的特点就是在它的路由键是有规则的。简单地介绍下规则：<br><code>*</code>(星号) 用来表示一个单词 (必须出现的)<br><code>#</code>(井号) 用来表示任意数量（零个或多个）单词</p><p>通配的路由键是跟队列进行绑定的，举个小例子：<br>队列Q1路由键为<code>*.TT.*</code>，队列Q2路由键为<code>TT.#</code>；<br>如果一条消息携带的路由值为<code>A.TT.B</code>，那么队列Q1将会收到；<br>如果一条消息携带的路由值为<code>TT.AA.BB</code>，那么队列Q2将会收到；</p><p>当一个队列的绑定键为<code>#</code>（井号）的时候，这个队列将会无视消息的路由键，接收所有的消息。<br>当<code>*</code>(星号)和<code>#</code>(井号)这两个特殊字符都未在绑定键中出现的时候，此时主题交换机就拥有的直连交换机的行为。所以主题交换机也就实现了扇形交换机和直连交换机的功能。</p><h2 id="1、Maven依赖"><a href="#1、Maven依赖" class="headerlink" title="1、Maven依赖"></a>1、Maven依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2、配置文件"><a href="#2、配置文件" class="headerlink" title="2、配置文件"></a>2、配置文件</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">30200</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">148.70</span><span class="number">.153</span><span class="number">.63</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">libai</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">password</span></span><br></pre></td></tr></table></figure><h2 id="3、生产者"><a href="#3、生产者" class="headerlink" title="3、生产者"></a>3、生产者</h2><h4 id="3-1、配置文件"><a href="#3-1、配置文件" class="headerlink" title="3.1、配置文件"></a>3.1、配置文件</h4><p>声明队列和交换机。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TopicRabbitConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">firstQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Queue(<span class="string">&quot;topicQueue1&quot;</span>, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">secondQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Queue(<span class="string">&quot;topicQueue2&quot;</span>, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TopicExchange <span class="title">exchange</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> TopicExchange(<span class="string">&quot;topicExchange&quot;</span>, <span class="keyword">true</span>, <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将firstQueue和topicExchange绑定,而且绑定的键值为topic.man</span></span><br><span class="line">    <span class="comment">// 这样只要是消息携带的路由键是topic.man,才会分发到该队列</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Binding <span class="title">bindingExchangeMessage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(firstQueue()).to(exchange()).with(<span class="string">&quot;topic.man&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将secondQueue和topicExchange绑定,而且绑定的键值为用上通配路由键规则topic.#</span></span><br><span class="line">    <span class="comment">// 这样只要是消息携带的路由键是以topic.开头,都会分发到该队列</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Binding <span class="title">bindingExchangeMessage2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(secondQueue()).to(exchange()).with(<span class="string">&quot;topic.#&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-2、发送消息"><a href="#3-2、发送消息" class="headerlink" title="3.2、发送消息"></a>3.2、发送消息</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SendMessageController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;  <span class="comment">// 使用RabbitTemplate,这提供了接收/发送等等方法</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/sendTopicMessage1&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sendTopicMessage1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; manMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        manMap.put(<span class="string">&quot;messageId&quot;</span>, String.valueOf(UUID.randomUUID()));</span><br><span class="line">        manMap.put(<span class="string">&quot;messageData&quot;</span>, <span class="string">&quot;man&quot;</span>);</span><br><span class="line">        manMap.put(<span class="string">&quot;createTime&quot;</span>, LocalDateTime.now().format(DateTimeFormatter.ofPattern(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>)));</span><br><span class="line">        <span class="comment">// 将消息携带路由键值：topic.man 发送到交换机topicExchange</span></span><br><span class="line">        rabbitTemplate.convertAndSend(<span class="string">&quot;topicExchange&quot;</span>, <span class="string">&quot;topic.man&quot;</span>, manMap);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;ok&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/sendTopicMessage2&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sendTopicMessage2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; womanMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        womanMap.put(<span class="string">&quot;messageId&quot;</span>, String.valueOf(UUID.randomUUID()));</span><br><span class="line">        womanMap.put(<span class="string">&quot;messageData&quot;</span>, <span class="string">&quot;woman&quot;</span>);</span><br><span class="line">        womanMap.put(<span class="string">&quot;createTime&quot;</span>, LocalDateTime.now().format(DateTimeFormatter.ofPattern(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>)));</span><br><span class="line">        <span class="comment">// 将消息携带路由键值：topic.woman 发送到交换机topicExchange</span></span><br><span class="line">        rabbitTemplate.convertAndSend(<span class="string">&quot;topicExchange&quot;</span>, <span class="string">&quot;topic.woman&quot;</span>, womanMap);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;ok&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据主题交换机的特性，携带路由键<code>topic.man</code>的消息将会发送到<code>topicQueue1</code>和<code>topicQueue2</code>这2个队列中，携带路由键<code>topic.woman</code>的消息只会发送到<code>topicQueue2</code>队列中。</p><p>启动服务，用<code>postman</code>分别调用发送消息的2个接口。</p><h4 id="3-3、查看RabbitMQ的后台管理界面"><a href="#3-3、查看RabbitMQ的后台管理界面" class="headerlink" title="3.3、查看RabbitMQ的后台管理界面"></a>3.3、查看<code>RabbitMQ</code>的后台管理界面</h4><p>可以看到已经有3条消息推送到队列中，等待被消费。<br><img src="https://zhaoxiaobin.coding.net/p/blog/d/zhaoxiaobin_img/git/raw/master/post/rabbitmq/rabbitmq-7-1.jpg" alt="-w639"></p><h4 id="3-4、查看队列"><a href="#3-4、查看队列" class="headerlink" title="3.4、查看队列"></a>3.4、查看队列</h4><p><code>topicQueue1</code>上有1条消息等待被消费，<code>topicQueue2</code>上则有2条消息等待被消费。<br><img src="https://zhaoxiaobin.coding.net/p/blog/d/zhaoxiaobin_img/git/raw/master/post/rabbitmq/rabbitmq-7-2.jpg" alt="-w770"></p><p><img src="https://zhaoxiaobin.coding.net/p/blog/d/zhaoxiaobin_img/git/raw/master/post/rabbitmq/rabbitmq-7-3.jpg" alt="-w765"></p><h2 id="4、消费者"><a href="#4、消费者" class="headerlink" title="4、消费者"></a>4、消费者</h2><p>通过注解<code>@RabbitListener</code>指定要消费的队列。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@RabbitListener(queues = &quot;topicQueue1&quot;)</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TopicReceiver1</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RabbitHandler</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(Map testMessage)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;TopicReceiver1消费者收到消息：&#123;&#125;&quot;</span>, JSONUtil.toJsonPrettyStr(testMessage));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@RabbitListener(queues = &quot;topicQueue2&quot;)</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TopicReceiver2</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RabbitHandler</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(Map testMessage)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;TopicReceiver2消费者收到消息：&#123;&#125;&quot;</span>, JSONUtil.toJsonPrettyStr(testMessage));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重新启动服务，可以看到控制台打印输出，说明该条消息已经被消费者消费成功了。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2020</span><span class="number">-09</span><span class="number">-13</span> <span class="number">22</span>:<span class="number">41</span>:<span class="number">45</span>,<span class="number">893</span> [INFO] [org.springframework.amqp.rabbit.RabbitListenerEndpointContainer#<span class="number">4</span><span class="number">-1</span>] [net.zhaoxiaobin.rabbitmq.consumer.topic.TopicReceiver1:<span class="number">25</span>] [] TopicReceiver1消费者收到消息：&#123;</span><br><span class="line">    <span class="string">&quot;createTime&quot;</span>: <span class="string">&quot;2020-09-13 22:35:07&quot;</span>,</span><br><span class="line">    <span class="string">&quot;messageId&quot;</span>: <span class="string">&quot;6a5a2402-8dca-42c5-8778-f60c082e8a53&quot;</span>,</span><br><span class="line">    <span class="string">&quot;messageData&quot;</span>: <span class="string">&quot;man&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="number">2020</span><span class="number">-09</span><span class="number">-13</span> <span class="number">22</span>:<span class="number">41</span>:<span class="number">46</span>,<span class="number">056</span> [INFO] [org.springframework.amqp.rabbit.RabbitListenerEndpointContainer#<span class="number">5</span><span class="number">-1</span>] [net.zhaoxiaobin.rabbitmq.consumer.topic.TopicReceiver2:<span class="number">25</span>] [] TopicReceiver2消费者收到消息：&#123;</span><br><span class="line">    <span class="string">&quot;createTime&quot;</span>: <span class="string">&quot;2020-09-13 22:35:07&quot;</span>,</span><br><span class="line">    <span class="string">&quot;messageId&quot;</span>: <span class="string">&quot;6a5a2402-8dca-42c5-8778-f60c082e8a53&quot;</span>,</span><br><span class="line">    <span class="string">&quot;messageData&quot;</span>: <span class="string">&quot;man&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="number">2020</span><span class="number">-09</span><span class="number">-13</span> <span class="number">22</span>:<span class="number">41</span>:<span class="number">46</span>,<span class="number">057</span> [INFO] [org.springframework.amqp.rabbit.RabbitListenerEndpointContainer#<span class="number">5</span><span class="number">-1</span>] [net.zhaoxiaobin.rabbitmq.consumer.topic.TopicReceiver2:<span class="number">25</span>] [] TopicReceiver2消费者收到消息：&#123;</span><br><span class="line">    <span class="string">&quot;createTime&quot;</span>: <span class="string">&quot;2020-09-13 22:35:09&quot;</span>,</span><br><span class="line">    <span class="string">&quot;messageId&quot;</span>: <span class="string">&quot;c179f30a-9746-4d9e-9617-c667d26d74be&quot;</span>,</span><br><span class="line">    <span class="string">&quot;messageData&quot;</span>: <span class="string">&quot;woman&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://blog.csdn.net/qq_35387940/article/details/100514134">Springboot 整合RabbitMq ，用心看完这一篇就够了</a></li></ul><h2 id="代码地址"><a href="#代码地址" class="headerlink" title="代码地址"></a>代码地址</h2><ul><li>github：<a href="https://github.com/senlinmu1008/rabbitmq-action/tree/master/rabbitmq">https://github.com/senlinmu1008/rabbitmq-action/tree/master/rabbitmq</a></li><li>gitee：<a href="https://gitee.com/ppbin/rabbitmq-action/tree/master/rabbitmq">https://gitee.com/ppbin/rabbitmq-action/tree/master/rabbitmq</a><br><br><br></li></ul>]]></content>
      
      
      <categories>
          
          <category> RabbitMQ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RabbitMQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Springboot整合RabbitMQ（二）——Fanout扇形交换机</title>
      <link href="RabbitMQ/Springboot%E6%95%B4%E5%90%88RabbitMQ%EF%BC%88%E4%BA%8C%EF%BC%89%E2%80%94%E2%80%94Fanout%E6%89%87%E5%BD%A2%E4%BA%A4%E6%8D%A2%E6%9C%BA/"/>
      <url>RabbitMQ/Springboot%E6%95%B4%E5%90%88RabbitMQ%EF%BC%88%E4%BA%8C%EF%BC%89%E2%80%94%E2%80%94Fanout%E6%89%87%E5%BD%A2%E4%BA%A4%E6%8D%A2%E6%9C%BA/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>扇型交换机，这个交换机没有路由键概念，就算你绑了路由键也是无视的。 这个交换机在接收到消息后，会直接转发到绑定到它上面的所有队列。</p><h2 id="1、Maven依赖"><a href="#1、Maven依赖" class="headerlink" title="1、Maven依赖"></a>1、Maven依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2、配置文件"><a href="#2、配置文件" class="headerlink" title="2、配置文件"></a>2、配置文件</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">30200</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">148.70</span><span class="number">.153</span><span class="number">.63</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">libai</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">password</span></span><br></pre></td></tr></table></figure><h2 id="3、生产者"><a href="#3、生产者" class="headerlink" title="3、生产者"></a>3、生产者</h2><h4 id="3-1、配置文件"><a href="#3-1、配置文件" class="headerlink" title="3.1、配置文件"></a>3.1、配置文件</h4><p>声明队列和交换机。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FanoutRabbitConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">queueA</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Queue(<span class="string">&quot;fanoutA&quot;</span>, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">queueB</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Queue(<span class="string">&quot;fanoutB&quot;</span>, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">queueC</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Queue(<span class="string">&quot;fanoutC&quot;</span>, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> FanoutExchange <span class="title">fanoutExchange</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> FanoutExchange(<span class="string">&quot;fanoutExchange&quot;</span>, <span class="keyword">true</span>, <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Binding <span class="title">bindingExchangeA</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(queueA()).to(fanoutExchange());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Binding <span class="title">bindingExchangeB</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(queueB()).to(fanoutExchange());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Binding <span class="title">bindingExchangeC</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(queueC()).to(fanoutExchange());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建三个队列 ：<code>fanoutA</code>、<code>fanoutB</code>、<code>fanoutC</code>，将三个队列都绑定在交换机<code>fanoutExchange</code>上。</p><p>因为是扇型交换机, 路由键无需配置,配置也不起作用。</p><h4 id="3-2、发送消息"><a href="#3-2、发送消息" class="headerlink" title="3.2、发送消息"></a>3.2、发送消息</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SendMessageController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;  <span class="comment">// 使用RabbitTemplate,这提供了接收/发送等等方法</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/sendFanoutMessage&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sendFanoutMessage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;messageId&quot;</span>, String.valueOf(UUID.randomUUID()));</span><br><span class="line">        map.put(<span class="string">&quot;messageData&quot;</span>, <span class="string">&quot;testFanoutMessage&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;createTime&quot;</span>, LocalDateTime.now().format(DateTimeFormatter.ofPattern(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>)));</span><br><span class="line">        rabbitTemplate.convertAndSend(<span class="string">&quot;fanoutExchange&quot;</span>, <span class="keyword">null</span>, map);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;ok&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>发送到指定的交换机上，因为是扇形交换机，所以会把消息广播到所有和该交换机绑定的队列上。</p><p>启动服务，用<code>postman</code>调用发送消息接口。</p><h4 id="3-3、查看RabbitMQ的后台管理界面"><a href="#3-3、查看RabbitMQ的后台管理界面" class="headerlink" title="3.3、查看RabbitMQ的后台管理界面"></a>3.3、查看<code>RabbitMQ</code>的后台管理界面</h4><p>可以看到已经有3条消息推送到队列中，等待被消费。<br><img src="https://zhaoxiaobin.coding.net/p/blog/d/zhaoxiaobin_img/git/raw/master/post/rabbitmq/rabbitmq-6-1.jpg" alt="-w817"></p><h4 id="3-4、查看交换机"><a href="#3-4、查看交换机" class="headerlink" title="3.4、查看交换机"></a>3.4、查看交换机</h4><p>可以看到和3个队列绑定，每发到该交换机上的一条消息都会被广播到这3个队列上。<br><img src="https://zhaoxiaobin.coding.net/p/blog/d/zhaoxiaobin_img/git/raw/master/post/rabbitmq/rabbitmq-6-2.jpg" alt="-w652"></p><h2 id="4、消费者"><a href="#4、消费者" class="headerlink" title="4、消费者"></a>4、消费者</h2><p>通过注解<code>@RabbitListener</code>指定要消费的队列。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@RabbitListener(queues = &quot;fanoutA&quot;)</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FanoutReceiverA</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RabbitHandler</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(Map testMessage)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;FanoutReceiverA消费者收到消息：&#123;&#125;&quot;</span>, JSONUtil.toJsonPrettyStr(testMessage));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@RabbitListener(queues = &quot;fanoutB&quot;)</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FanoutReceiverB</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RabbitHandler</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(Map testMessage)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;FanoutReceiverB消费者收到消息：&#123;&#125;&quot;</span>, JSONUtil.toJsonPrettyStr(testMessage));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@RabbitListener(queues = &quot;fanoutC&quot;)</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FanoutReceiverC</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RabbitHandler</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(Map testMessage)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;FanoutReceiverC消费者收到消息：&#123;&#125;&quot;</span>, JSONUtil.toJsonPrettyStr(testMessage));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重新启动服务，可以看到控制台打印输出，说明该条消息已经被3个消费者消费成功了。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2020</span><span class="number">-09</span><span class="number">-13</span> <span class="number">21</span>:<span class="number">47</span>:<span class="number">56</span>,<span class="number">509</span> [INFO] [org.springframework.amqp.rabbit.RabbitListenerEndpointContainer#<span class="number">1</span><span class="number">-1</span>] [net.zhaoxiaobin.rabbitmq.consumer.fanout.FanoutReceiverA:<span class="number">25</span>] [] FanoutReceiverA消费者收到消息：&#123;</span><br><span class="line">    <span class="string">&quot;createTime&quot;</span>: <span class="string">&quot;2020-09-13 21:38:57&quot;</span>,</span><br><span class="line">    <span class="string">&quot;messageId&quot;</span>: <span class="string">&quot;765c1218-6c4c-4a72-af2c-6f386ff8e0d2&quot;</span>,</span><br><span class="line">    <span class="string">&quot;messageData&quot;</span>: <span class="string">&quot;testFanoutMessage&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="number">2020</span><span class="number">-09</span><span class="number">-13</span> <span class="number">21</span>:<span class="number">47</span>:<span class="number">56</span>,<span class="number">678</span> [INFO] [org.springframework.amqp.rabbit.RabbitListenerEndpointContainer#<span class="number">2</span><span class="number">-1</span>] [net.zhaoxiaobin.rabbitmq.consumer.fanout.FanoutReceiverB:<span class="number">25</span>] [] FanoutReceiverB消费者收到消息：&#123;</span><br><span class="line">    <span class="string">&quot;createTime&quot;</span>: <span class="string">&quot;2020-09-13 21:38:57&quot;</span>,</span><br><span class="line">    <span class="string">&quot;messageId&quot;</span>: <span class="string">&quot;765c1218-6c4c-4a72-af2c-6f386ff8e0d2&quot;</span>,</span><br><span class="line">    <span class="string">&quot;messageData&quot;</span>: <span class="string">&quot;testFanoutMessage&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="number">2020</span><span class="number">-09</span><span class="number">-13</span> <span class="number">21</span>:<span class="number">47</span>:<span class="number">56</span>,<span class="number">885</span> [INFO] [org.springframework.amqp.rabbit.RabbitListenerEndpointContainer#<span class="number">3</span><span class="number">-1</span>] [net.zhaoxiaobin.rabbitmq.consumer.fanout.FanoutReceiverC:<span class="number">25</span>] [] FanoutReceiverC消费者收到消息：&#123;</span><br><span class="line">    <span class="string">&quot;createTime&quot;</span>: <span class="string">&quot;2020-09-13 21:38:57&quot;</span>,</span><br><span class="line">    <span class="string">&quot;messageId&quot;</span>: <span class="string">&quot;765c1218-6c4c-4a72-af2c-6f386ff8e0d2&quot;</span>,</span><br><span class="line">    <span class="string">&quot;messageData&quot;</span>: <span class="string">&quot;testFanoutMessage&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://blog.csdn.net/qq_35387940/article/details/100514134">Springboot 整合RabbitMq ，用心看完这一篇就够了</a></li></ul><h2 id="代码地址"><a href="#代码地址" class="headerlink" title="代码地址"></a>代码地址</h2><ul><li>github：<a href="https://github.com/senlinmu1008/rabbitmq-action/tree/master/rabbitmq">https://github.com/senlinmu1008/rabbitmq-action/tree/master/rabbitmq</a></li><li>gitee：<a href="https://gitee.com/ppbin/rabbitmq-action/tree/master/rabbitmq">https://gitee.com/ppbin/rabbitmq-action/tree/master/rabbitmq</a><br><br><br></li></ul>]]></content>
      
      
      <categories>
          
          <category> RabbitMQ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RabbitMQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Springboot整合RabbitMQ（一）——Direct直连交换机</title>
      <link href="RabbitMQ/Springboot%E6%95%B4%E5%90%88RabbitMQ%EF%BC%88%E4%B8%80%EF%BC%89%E2%80%94%E2%80%94Direct%E7%9B%B4%E8%BF%9E%E4%BA%A4%E6%8D%A2%E6%9C%BA/"/>
      <url>RabbitMQ/Springboot%E6%95%B4%E5%90%88RabbitMQ%EF%BC%88%E4%B8%80%EF%BC%89%E2%80%94%E2%80%94Direct%E7%9B%B4%E8%BF%9E%E4%BA%A4%E6%8D%A2%E6%9C%BA/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>直连型交换机，根据消息携带的路由值将消息投递给对应队列。<br>大致流程，有一个队列绑定到一个直连交换机上，同时赋予一个路由键routing key。<br>然后当一个消息携带着路由值为X，这个消息通过生产者发送给交换机时，交换机就会根据这个路由值X去寻找绑定值也是X的队列。</p><h2 id="1、Maven依赖"><a href="#1、Maven依赖" class="headerlink" title="1、Maven依赖"></a>1、Maven依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2、配置文件"><a href="#2、配置文件" class="headerlink" title="2、配置文件"></a>2、配置文件</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">30200</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">148.70</span><span class="number">.153</span><span class="number">.63</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">libai</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">password</span></span><br></pre></td></tr></table></figure><h2 id="3、生产者"><a href="#3、生产者" class="headerlink" title="3、生产者"></a>3、生产者</h2><h4 id="3-1、配置文件"><a href="#3-1、配置文件" class="headerlink" title="3.1、配置文件"></a>3.1、配置文件</h4><p>声明队列和交换机，并设置队列和交换机绑定的路由键。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DirectRabbitConfig</span> </span>&#123;</span><br><span class="line">    <span class="comment">//队列 起名：directQueue</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">directQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Queue(<span class="string">&quot;directQueue&quot;</span>, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Direct交换机 起名：directExchange</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DirectExchange <span class="title">directExchange</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DirectExchange(<span class="string">&quot;directExchange&quot;</span>, <span class="keyword">true</span>, <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//绑定  将队列和交换机绑定, 并设置路由键：directRouting</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Binding <span class="title">bindingDirect</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(directQueue()).to(directExchange()).with(<span class="string">&quot;directRouting&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>声明队列参数列表：<ul><li><code>name</code>：队列名称。</li><li><code>durable</code>：是否持久化，否则<code>RabbitMQ</code>服务端重启，队列就不再存在。</li><li><code>exclusive</code>：是否排他，即该队列是否只能被当前创建的连接使用，而且当连接关闭后队列即被删除。此参数优先级高于<code>durable</code>。</li><li><code>autoDelete</code>：是否自动删除，当没有生产者或者消费者使用此队列，该队列会自动删除。</li></ul></li><li>声明交换机参数列表：<ul><li><code>name</code>：交换机名称。</li><li><code>durable</code>：是否持久化，否则<code>RabbitMQ</code>服务端重启，队列就不再存在。</li><li><code>autoDelete</code>：是否自动删除，当没有生产者或者消费者使用此队列，该队列会自动删除。</li></ul></li></ul><h4 id="3-2、发送消息"><a href="#3-2、发送消息" class="headerlink" title="3.2、发送消息"></a>3.2、发送消息</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SendMessageController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;  <span class="comment">// 使用RabbitTemplate,这提供了接收/发送等等方法</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/sendDirectMessage&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sendDirectMessage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;messageId&quot;</span>, String.valueOf(UUID.randomUUID()));</span><br><span class="line">        map.put(<span class="string">&quot;messageData&quot;</span>, <span class="string">&quot;RabbitMQ&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;createTime&quot;</span>, LocalDateTime.now().format(DateTimeFormatter.ofPattern(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>)));</span><br><span class="line">        <span class="comment">// 将消息携带路由键值：directRouting 发送到交换机directExchange</span></span><br><span class="line">        rabbitTemplate.convertAndSend(<span class="string">&quot;directExchange&quot;</span>, <span class="string">&quot;directRouting&quot;</span>, map);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;ok&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>发送到指定的交换机上，同时指定路由键。<code>RabbitMQ</code>会根据路由键把消息推送至和该交换机绑定的队列中。</p><p><code>convertAndSend</code>函数还支持只指定消息发送的队列名称，可以不指定交换机名称；只要声明要发送的队列，也不需要和交换机绑定。不过并非不使用交换机，实际上是使用<code>RabbitMQ</code>自带的默认交换机和指定队列进行路由。比如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rabbitTemplate.convertAndSend(<span class="string">&quot;directQueue&quot;</span>, map);</span><br></pre></td></tr></table></figure><p>启动服务，用<code>postman</code>调用发送消息接口。</p><h4 id="3-3、查看RabbitMQ的后台管理界面"><a href="#3-3、查看RabbitMQ的后台管理界面" class="headerlink" title="3.3、查看RabbitMQ的后台管理界面"></a>3.3、查看<code>RabbitMQ</code>的后台管理界面</h4><p>可以看到已经有一条消息推送到队列中，等待被消费。<br><img src="https://zhaoxiaobin.coding.net/p/blog/d/zhaoxiaobin_img/git/raw/master/post/rabbitmq/rabbitmq-5-1.jpg" alt="-w831"></p><h4 id="3-4、查看交换机"><a href="#3-4、查看交换机" class="headerlink" title="3.4、查看交换机"></a>3.4、查看交换机</h4><p>可以看到交换机已经被创建出来了。<br><img src="https://zhaoxiaobin.coding.net/p/blog/d/zhaoxiaobin_img/git/raw/master/post/rabbitmq/rabbitmq-5-2.jpg" alt="-w602"></p><p>可以看到和队列的绑定关系。<br><img src="https://zhaoxiaobin.coding.net/p/blog/d/zhaoxiaobin_img/git/raw/master/post/rabbitmq/rabbitmq-5-3.jpg" alt="-w619"></p><h4 id="3-5、查看队列"><a href="#3-5、查看队列" class="headerlink" title="3.5、查看队列"></a>3.5、查看队列</h4><p>队列也已经被创建出来了。<br><img src="https://zhaoxiaobin.coding.net/p/blog/d/zhaoxiaobin_img/git/raw/master/post/rabbitmq/rabbitmq-5-4.jpg" alt="-w737"></p><p>查看绑定了哪些交换机。<br><img src="https://zhaoxiaobin.coding.net/p/blog/d/zhaoxiaobin_img/git/raw/master/post/rabbitmq/rabbitmq-5-5.jpg" alt="-w1270"></p><h2 id="4、消费者"><a href="#4、消费者" class="headerlink" title="4、消费者"></a>4、消费者</h2><p>通过注解<code>@RabbitListener</code>指定要消费的队列。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@RabbitListener(queues = &quot;directQueue&quot;)</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DirectReceiver</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RabbitHandler</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(Map testMessage)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;DirectReceiver消费者收到消息：&#123;&#125;&quot;</span>, JSONUtil.toJsonPrettyStr(testMessage));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重新启动服务，可以看到控制台打印输出，说明该条消息已经被消费成功了。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2020</span><span class="number">-09</span><span class="number">-13</span> <span class="number">20</span>:<span class="number">37</span>:<span class="number">19</span>,<span class="number">508</span> [INFO] [org.springframework.amqp.rabbit.RabbitListenerEndpointContainer#<span class="number">0</span><span class="number">-1</span>] [net.zhaoxiaobin.rabbitmq.consumer.direct.DirectReceiver:<span class="number">25</span>] [] DirectReceiver消费者收到消息：&#123;</span><br><span class="line">    <span class="string">&quot;createTime&quot;</span>: <span class="string">&quot;2020-09-13 20:37:19&quot;</span>,</span><br><span class="line">    <span class="string">&quot;messageId&quot;</span>: <span class="string">&quot;f5671a04-21ef-4ba5-8944-28d23ad4b0ad&quot;</span>,</span><br><span class="line">    <span class="string">&quot;messageData&quot;</span>: <span class="string">&quot;RabbitMQ&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查看后台管理界面，已经没有待消费的消息了。<br><img src="https://zhaoxiaobin.coding.net/p/blog/d/zhaoxiaobin_img/git/raw/master/post/rabbitmq/rabbitmq-5-6.jpg" alt="-w831"></p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://blog.csdn.net/qq_35387940/article/details/100514134">Springboot 整合RabbitMq ，用心看完这一篇就够了</a></li></ul><h2 id="代码地址"><a href="#代码地址" class="headerlink" title="代码地址"></a>代码地址</h2><ul><li>github：<a href="https://github.com/senlinmu1008/rabbitmq-action/tree/master/rabbitmq">https://github.com/senlinmu1008/rabbitmq-action/tree/master/rabbitmq</a></li><li>gitee：<a href="https://gitee.com/ppbin/rabbitmq-action/tree/master/rabbitmq">https://gitee.com/ppbin/rabbitmq-action/tree/master/rabbitmq</a><br><br><br></li></ul>]]></content>
      
      
      <categories>
          
          <category> RabbitMQ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RabbitMQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RabbitMQ原生API实现消息自动过期</title>
      <link href="RabbitMQ/RabbitMQ%E5%8E%9F%E7%94%9FAPI%E5%AE%9E%E7%8E%B0%E6%B6%88%E6%81%AF%E8%87%AA%E5%8A%A8%E8%BF%87%E6%9C%9F/"/>
      <url>RabbitMQ/RabbitMQ%E5%8E%9F%E7%94%9FAPI%E5%AE%9E%E7%8E%B0%E6%B6%88%E6%81%AF%E8%87%AA%E5%8A%A8%E8%BF%87%E6%9C%9F/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>主要有2种方式：</p><ol><li>指定一条消息的过期时间。</li><li>给队列设置消息过期时间，队列中的所有消息都有同样的过期时间。</li></ol><h2 id="1、指定消息的过期时间"><a href="#1、指定消息的过期时间" class="headerlink" title="1、指定消息的过期时间"></a>1、指定消息的过期时间</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProducerTTL</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String HOST = <span class="string">&quot;148.70.153.63&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String USER_NAME = <span class="string">&quot;libai&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException </span>&#123;</span><br><span class="line">        ConnectionFactory connectionFactory = <span class="keyword">new</span> ConnectionFactory();</span><br><span class="line">        connectionFactory.setHost(HOST);</span><br><span class="line">        connectionFactory.setPort(AMQP.PROTOCOL.PORT);</span><br><span class="line">        connectionFactory.setUsername(USER_NAME);</span><br><span class="line">        connectionFactory.setPassword(System.getProperty(<span class="string">&quot;password&quot;</span>));</span><br><span class="line">        connectionFactory.setVirtualHost(ConnectionFactory.DEFAULT_VHOST);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建连接和通道</span></span><br><span class="line">        <span class="meta">@Cleanup</span> Connection connection = connectionFactory.newConnection();</span><br><span class="line">        <span class="meta">@Cleanup</span> Channel channel = connection.createChannel();</span><br><span class="line"></span><br><span class="line">        String exchangeName = <span class="string">&quot;amq.direct&quot;</span>, queueName = <span class="string">&quot;TTLQueue&quot;</span>, routingKey = <span class="string">&quot;TTL&quot;</span>;</span><br><span class="line">        <span class="comment">// 声明交换机（如果不存在才创建），交换机名称、类型、交换机是否持久化</span></span><br><span class="line">        channel.exchangeDeclare(exchangeName, BuiltinExchangeType.DIRECT, <span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">// 声明队列（如果不存在才创建），队列名称、队列是否持久化、是否排他（连接可见性）、是否自动删除（所有消费者断开连接后删除队列）、参数</span></span><br><span class="line">        channel.queueDeclare(queueName, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">        <span class="comment">// 将队列和交换机绑定并指定路由键</span></span><br><span class="line">        channel.queueBind(queueName, exchangeName, routingKey);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 发送消息</span></span><br><span class="line">        String msg = <span class="string">&quot;测试消息自动过期&quot;</span>;</span><br><span class="line">        AMQP.BasicProperties properties = <span class="keyword">new</span> AMQP.BasicProperties.Builder()</span><br><span class="line">                .deliveryMode(<span class="number">1</span>) <span class="comment">// 1-表示消息不做持久化，2-表示消息会持久化到磁盘（对性能会有些影响）</span></span><br><span class="line">                .expiration(<span class="string">&quot;30000&quot;</span>) <span class="comment">// 设置消息过期时间，单位：毫秒</span></span><br><span class="line">                .build();</span><br><span class="line">        <span class="comment">// 把消息发送到指定的交换机，交换机根据路由键推送到绑定的队列中；交换机名称、路由键、属性、消息字节</span></span><br><span class="line">        channel.basicPublish(exchangeName, routingKey, properties, msg.getBytes());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里构建一个<code>AMQP.BasicProperties</code>对象，设置过期时间，推送消息时传入该对象就可以了。</p><p>消息进入队列后，等待30秒后，消息自动过期就失效了。</p><p><img src="https://zhaoxiaobin.coding.net/p/blog/d/zhaoxiaobin_img/git/raw/master/post/rabbitmq/rabbitmq-4-1.jpg" alt="-w878"></p><p><strong>注意</strong>：<br><code>RabbitMQ</code>只会对队列头部的消息进行过期淘汰。如果单独给消息设置TTL，先入队列的消息过期时间如果设置比较长，后入队列的设置时间比较短。会造成消息不会及时地过期淘汰，导致消息的堆积。</p><h2 id="2、给队列中的所有消息设置过期时间"><a href="#2、给队列中的所有消息设置过期时间" class="headerlink" title="2、给队列中的所有消息设置过期时间"></a>2、给队列中的所有消息设置过期时间</h2><p>需要把前面的<code>TTLQueue</code>队列删除，否则会报错。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProducerTTL</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String HOST = <span class="string">&quot;148.70.153.63&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String USER_NAME = <span class="string">&quot;libai&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException </span>&#123;</span><br><span class="line">        ConnectionFactory connectionFactory = <span class="keyword">new</span> ConnectionFactory();</span><br><span class="line">        connectionFactory.setHost(HOST);</span><br><span class="line">        connectionFactory.setPort(AMQP.PROTOCOL.PORT);</span><br><span class="line">        connectionFactory.setUsername(USER_NAME);</span><br><span class="line">        connectionFactory.setPassword(System.getProperty(<span class="string">&quot;password&quot;</span>));</span><br><span class="line">        connectionFactory.setVirtualHost(ConnectionFactory.DEFAULT_VHOST);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建连接和通道</span></span><br><span class="line">        <span class="meta">@Cleanup</span> Connection connection = connectionFactory.newConnection();</span><br><span class="line">        <span class="meta">@Cleanup</span> Channel channel = connection.createChannel();</span><br><span class="line"></span><br><span class="line">        String exchangeName = <span class="string">&quot;amq.direct&quot;</span>, queueName = <span class="string">&quot;TTLQueue&quot;</span>, routingKey = <span class="string">&quot;TTL&quot;</span>;</span><br><span class="line">        <span class="comment">// 声明交换机（如果不存在才创建），交换机名称、类型、交换机是否持久化</span></span><br><span class="line">        channel.exchangeDeclare(exchangeName, BuiltinExchangeType.DIRECT, <span class="keyword">true</span>);</span><br><span class="line">        Map&lt;String, Object&gt; argMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        argMap.put(<span class="string">&quot;x-message-ttl&quot;</span>, <span class="number">30</span> * <span class="number">1000</span>); <span class="comment">// 设置队列里消息的ttl的时间30s</span></span><br><span class="line">        <span class="comment">// 声明队列（如果不存在才创建），队列名称、队列是否持久化、是否排他（连接可见性）、是否自动删除（所有消费者断开连接后删除队列）、参数</span></span><br><span class="line">        channel.queueDeclare(queueName, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, argMap);</span><br><span class="line">        <span class="comment">// 将队列和交换机绑定并指定路由键</span></span><br><span class="line">        channel.queueBind(queueName, exchangeName, routingKey);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 发送消息</span></span><br><span class="line">        String msg = <span class="string">&quot;测试消息自动过期&quot;</span>;</span><br><span class="line">        <span class="comment">// 把消息发送到指定的交换机，交换机根据路由键推送到绑定的队列中；交换机名称、路由键、属性、消息字节</span></span><br><span class="line">        channel.basicPublish(exchangeName, routingKey, <span class="keyword">null</span>, msg.getBytes());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>声明1个<code>x-message-ttl</code>的属性，同时设置过期时间。在创建队列时，传入该参数。<br>凡是推送到该队列中的所有消息，都会有一个30秒后过期的属性。</p><p>可以看到创建的队列有<code>TTL</code>的特性，表示该队列中的消息会自动过期。</p><p><img src="https://zhaoxiaobin.coding.net/p/blog/d/zhaoxiaobin_img/git/raw/master/post/rabbitmq/rabbitmq-4-2.jpg" alt="-w989"></p><h2 id="代码地址"><a href="#代码地址" class="headerlink" title="代码地址"></a>代码地址</h2><ul><li>github：<a href="https://github.com/senlinmu1008/rabbitmq-action/tree/master/rabbitmq-ttl-dlx">https://github.com/senlinmu1008/rabbitmq-action/tree/master/rabbitmq-ttl-dlx</a></li><li>gitee：<a href="https://gitee.com/ppbin/rabbitmq-action/tree/master/rabbitmq-ttl-dlx">https://gitee.com/ppbin/rabbitmq-action/tree/master/rabbitmq-ttl-dlx</a><br><br><br></li></ul>]]></content>
      
      
      <categories>
          
          <category> RabbitMQ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RabbitMQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用jasypt对配置文件中敏感的配置项进行加密</title>
      <link href="SpringBoot/%E5%AE%89%E5%85%A8/%E7%94%A8jasypt%E5%AF%B9%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E4%B8%AD%E6%95%8F%E6%84%9F%E7%9A%84%E9%85%8D%E7%BD%AE%E9%A1%B9%E8%BF%9B%E8%A1%8C%E5%8A%A0%E5%AF%86/"/>
      <url>SpringBoot/%E5%AE%89%E5%85%A8/%E7%94%A8jasypt%E5%AF%B9%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E4%B8%AD%E6%95%8F%E6%84%9F%E7%9A%84%E9%85%8D%E7%BD%AE%E9%A1%B9%E8%BF%9B%E8%A1%8C%E5%8A%A0%E5%AF%86/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>之前看过一个例子，一个酒店管理公司的后台程序员把自家项目上传到了<code>github</code>，导致在配置文件中的数据库密码外泄。因此后果可想而知了…</p><p>我们在平时开发中，习惯把一些敏感的配置项以明文方式直接写在配置文件中。这样很容易导致密码泄露。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">cluster:</span></span><br><span class="line">      <span class="attr">nodes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="number">148.70</span><span class="number">.153</span><span class="number">.63</span><span class="string">:9426</span></span><br><span class="line">        <span class="bullet">-</span> <span class="number">148.70</span><span class="number">.153</span><span class="number">.63</span><span class="string">:9427</span></span><br><span class="line">        <span class="bullet">-</span> <span class="number">148.70</span><span class="number">.153</span><span class="number">.63</span><span class="string">:9428</span></span><br><span class="line">        <span class="bullet">-</span> <span class="number">148.70</span><span class="number">.153</span><span class="number">.63</span><span class="string">:9429</span></span><br><span class="line">        <span class="bullet">-</span> <span class="number">148.70</span><span class="number">.153</span><span class="number">.63</span><span class="string">:9430</span></span><br><span class="line">        <span class="bullet">-</span> <span class="number">148.70</span><span class="number">.153</span><span class="number">.63</span><span class="string">:9431</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br></pre></td></tr></table></figure><p>我之前的一些博客分享的源码中，配置文件中的敏感数据我都是在<code>yml</code>中随便写一个，然后把正确的参数填到启动参数中去覆盖jar包内的配置。如果配置项较多，也是比较麻烦的。</p><p>我们可以使用一个叫做<code>jasypt</code>的加密组件来解决上述的问题。</p><h2 id="1、Maven依赖"><a href="#1、Maven依赖" class="headerlink" title="1、Maven依赖"></a>1、Maven依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.ulisesbocchio<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jasypt-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2、应用示例"><a href="#2、应用示例" class="headerlink" title="2、应用示例"></a>2、应用示例</h2><h4 id="2-1、配置加密密钥"><a href="#2-1、配置加密密钥" class="headerlink" title="2.1、配置加密密钥"></a>2.1、配置加密密钥</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">jasypt:</span></span><br><span class="line">  <span class="attr">encryptor:</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">chili</span></span><br></pre></td></tr></table></figure><p>可以理解为jasypt会使用这个自定义加密密钥，对配置文件里的重要项进行加密。</p><h4 id="2-2、加密敏感数据获取密文"><a href="#2-2、加密敏感数据获取密文" class="headerlink" title="2.2、加密敏感数据获取密文"></a>2.2、加密敏感数据获取密文</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JasyptApplicationTests</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StringEncryptor encryptor;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testEncrypt</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(encryptor.encrypt(<span class="string">&quot;123456&quot;</span>)); <span class="comment">// LEvdXWT9sxdAQS3bcoJ4fIzaAbF+/43Oo/sm8ohv5CIg5NhW0C1gyEl/yYCAfCXA</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里写个临时的<code>Test</code>方法把加密后的密文输出来就行。每次测试密文都会不一样但解密后的明文都是一样的。</p><h4 id="2-3、配置密文数据"><a href="#2-3、配置密文数据" class="headerlink" title="2.3、配置密文数据"></a>2.3、配置密文数据</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">cluster:</span></span><br><span class="line">      <span class="attr">nodes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="number">148.70</span><span class="number">.153</span><span class="number">.63</span><span class="string">:9426</span></span><br><span class="line">        <span class="bullet">-</span> <span class="number">148.70</span><span class="number">.153</span><span class="number">.63</span><span class="string">:9427</span></span><br><span class="line">        <span class="bullet">-</span> <span class="number">148.70</span><span class="number">.153</span><span class="number">.63</span><span class="string">:9428</span></span><br><span class="line">        <span class="bullet">-</span> <span class="number">148.70</span><span class="number">.153</span><span class="number">.63</span><span class="string">:9429</span></span><br><span class="line">        <span class="bullet">-</span> <span class="number">148.70</span><span class="number">.153</span><span class="number">.63</span><span class="string">:9430</span></span><br><span class="line">        <span class="bullet">-</span> <span class="number">148.70</span><span class="number">.153</span><span class="number">.63</span><span class="string">:9431</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">ENC(LEvdXWT9sxdAQS3bcoJ4fIzaAbF+/43Oo/sm8ohv5CIg5NhW0C1gyEl/yYCAfCXA)</span></span><br></pre></td></tr></table></figure><p>密文需要用<code>ENC()</code>包装。如果想指定别的自定义标记，可以如下配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">jasypt:</span></span><br><span class="line">  <span class="attr">encryptor:</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">chili</span></span><br><span class="line">    <span class="attr">property:</span></span><br><span class="line">      <span class="attr">prefix:</span> <span class="string">PASSWORD(</span></span><br><span class="line">      <span class="attr">suffix:</span> <span class="string">)</span></span><br></pre></td></tr></table></figure><p>这样就可以用<code>PASSWORD()</code>来包装密文了，默认使用<code>ENC()</code>包装。</p><p><strong>在项目启动时，就会先把密文解密，最后再以明文方式注入配置属性中</strong></p><h4 id="2-4、问题改进"><a href="#2-4、问题改进" class="headerlink" title="2.4、问题改进"></a>2.4、问题改进</h4><p>上面的方式有一个很大的问题就是<code>jasypt.encryptor.password</code>密钥直接写在了配置文件中，知道密钥只需要将密文还原就可以得到明文，依旧会有密码泄露的风险。</p><p><strong>解决</strong>：<br>我们可以把<code>jasypt.encryptor.password</code>这项配置写在启动脚本中，配置成启动参数的方式，而不是写在工程的配置文件中。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">java -jar yourproject.jar --jasypt.encryptor.password=privateKey</span><br><span class="line"><span class="meta">#</span><span class="bash"> 或者</span></span><br><span class="line">java -Djasypt.encryptor.password=privateKey -jar yourproject.jar</span><br></pre></td></tr></table></figure><p>甚至还可以作为系统环境变量来带入。</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://www.jianshu.com/p/404a04b603f8">数据库密码配置项都不加密？心也太大了吧！</a></li></ul><h2 id="代码地址"><a href="#代码地址" class="headerlink" title="代码地址"></a>代码地址</h2><ul><li>github：<a href="https://github.com/senlinmu1008/spring-boot/tree/master/jasypt">https://github.com/senlinmu1008/spring-boot/tree/master/jasypt</a></li><li>gitee：<a href="https://gitee.com/ppbin/spring-boot/tree/master/jasypt">https://gitee.com/ppbin/spring-boot/tree/master/jasypt</a><br><br><br></li></ul>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jasypt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RabbitMQ原生API</title>
      <link href="RabbitMQ/RabbitMQ%E5%8E%9F%E7%94%9FAPI/"/>
      <url>RabbitMQ/RabbitMQ%E5%8E%9F%E7%94%9FAPI/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>使用<code>RabbitMQ</code>原生的API来操作消息的生产和消费。</p><p>首先先介绍一个简单的一个消息推送到接收的流程，提供一个简单的图：<br><img src="https://zhaoxiaobin.coding.net/p/blog/d/zhaoxiaobin_img/git/raw/master/post/rabbitmq/rabbitmq-3-1.png"></p><p>黄色的圈圈就是我们的消息推送服务，将消息推送到 中间方框里面也就是<code>RabbitMQ</code>的服务器，然后经过服务器里面的交换机、队列等各种关系将数据处理入列后，最终右边的蓝色圈圈消费者获取对应监听的消息。</p><p>常用的交换机有以下三种，因为消费者是从队列获取信息的，队列是绑定交换机的（一般），所以对应的消息推送/接收模式也会有以下几种：</p><h4 id="Direct-Exchange"><a href="#Direct-Exchange" class="headerlink" title="Direct Exchange "></a><code>Direct Exchange </code></h4><p>直连型交换机，根据消息携带的路由值将消息投递给对应队列。<br>大致流程，有一个队列绑定到一个直连交换机上，同时赋予一个路由键<code>routing key</code>。<br>然后当一个消息携带着路由值为X，这个消息通过生产者发送给交换机时，交换机就会根据这个路由值X去寻找绑定值也是X的队列。</p><h4 id="Fanout-Exchange"><a href="#Fanout-Exchange" class="headerlink" title="Fanout Exchange"></a><code>Fanout Exchange</code></h4><p>扇型交换机，这个交换机没有路由键概念，就算你绑了路由键也是无视的。 这个交换机在接收到消息后，会直接转发到绑定到它上面的所有队列。</p><h4 id="Topic-Exchange"><a href="#Topic-Exchange" class="headerlink" title="Topic Exchange"></a><code>Topic Exchange</code></h4><p>主题交换机，这个交换机其实跟直连交换机流程差不多，但是它的特点就是在它的路由键是有规则的。<br>简单地介绍下规则：<br><code>*</code>(星号) 用来表示一个单词 (必须出现的)<br><code>#</code>(井号) 用来表示任意数量（零个或多个）单词<br>通配的路由键是跟队列进行绑定的，举个小例子：<br>队列Q1路由键为<code>*.TT.*</code>，队列Q2路由键为<code>TT.#</code>；<br>如果一条消息携带的路由值为<code>A.TT.B</code>，那么队列Q1将会收到；<br>如果一条消息携带的路由值为<code>TT.AA.BB</code>，那么队列Q2将会收到；</p><p>当一个队列的绑定键为<code>#</code>（井号）的时候，这个队列将会无视消息的路由键，接收所有的消息。<br>当<code>*</code>(星号)和<code>#</code>(井号)这两个特殊字符都未在绑定键中出现的时候，此时主题交换机就拥有的直连交换机的行为。<br>所以主题交换机也就实现了扇形交换机和直连交换机的功能。</p><p>常用的就是以上3种交换机，另外还有<code>Header Exchange</code>头交换机，<code>Default Exchange</code>默认交换机，<code>Dead Letter Exchange</code>死信交换机。</p><h2 id="1、Maven依赖"><a href="#1、Maven依赖" class="headerlink" title="1、Maven依赖"></a>1、Maven依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2、生产消息"><a href="#2、生产消息" class="headerlink" title="2、生产消息"></a>2、生产消息</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Producer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String HOST = <span class="string">&quot;148.70.153.63&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String USER_NAME = <span class="string">&quot;libai&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException </span>&#123;</span><br><span class="line">        Producer producer = <span class="keyword">new</span> Producer();</span><br><span class="line">        <span class="comment">// 获取connectionFactory</span></span><br><span class="line">        ConnectionFactory connectionFactory = producer.getConnectionFactory();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建连接和通道</span></span><br><span class="line">        Connection connection = connectionFactory.newConnection();</span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line"></span><br><span class="line">        String exchangeName = <span class="string">&quot;amq.direct&quot;</span>, queueName = <span class="string">&quot;apiQueue1&quot;</span>, routingKey = <span class="string">&quot;RabbitMQ&quot;</span>;</span><br><span class="line">        <span class="comment">// 声明交换机（如果不存在才创建），交换机名称、类型、交换机是否持久化</span></span><br><span class="line">        channel.exchangeDeclare(exchangeName, BuiltinExchangeType.DIRECT, <span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">// 声明队列（如果不存在才创建），队列名称、队列是否持久化、是否排他（连接可见性）、是否自动删除（所有消费者断开连接后删除队列）、参数</span></span><br><span class="line">        channel.queueDeclare(queueName, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">        <span class="comment">// 将队列和交换机绑定并指定路由键</span></span><br><span class="line">        channel.queueBind(queueName, exchangeName, routingKey);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 发送消息</span></span><br><span class="line">        String msg = <span class="string">&quot;Hello RabbitMQ!&quot;</span>;</span><br><span class="line">        <span class="comment">// 把消息发送到指定的交换机，交换机根据路由键推送到绑定的队列中；交换机名称、路由键、属性、消息字节</span></span><br><span class="line">        channel.basicPublish(exchangeName, routingKey, <span class="keyword">null</span>, msg.getBytes());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 释放连接</span></span><br><span class="line">        channel.close();</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取连接工厂</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ConnectionFactory <span class="title">getConnectionFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ConnectionFactory connectionFactory = <span class="keyword">new</span> ConnectionFactory();</span><br><span class="line">        connectionFactory.setHost(HOST);</span><br><span class="line">        connectionFactory.setPort(AMQP.PROTOCOL.PORT);</span><br><span class="line">        connectionFactory.setUsername(USER_NAME);</span><br><span class="line">        connectionFactory.setPassword(System.getProperty(<span class="string">&quot;password&quot;</span>));</span><br><span class="line">        connectionFactory.setVirtualHost(ConnectionFactory.DEFAULT_VHOST);</span><br><span class="line">        <span class="keyword">return</span> connectionFactory;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>创建连接<code>Connection</code>和通道<code>Channel</code>。</li><li>声明交换机<code>Exchang</code>，如果不存在就会创建，可以指定交换机类型以及是否持久化。</li><li>声明队列<code>Queue</code>，如果不存在也会创建。</li><li>将队列<code>Queue</code>和交换机<code>Exchang</code>绑定，并指定绑定的路由键<code>RoutingKey</code>。</li><li>发送消息到指定的交换机<code>Exchang</code>，交换机会根据路由键<code>RoutingKey</code>找到绑定的队列<code>Queue</code>，并把消息发送到队列中。</li><li>关闭连接<code>Connection</code>和通道<code>Channel</code>。</li></ol><h2 id="3、消费消息"><a href="#3、消费消息" class="headerlink" title="3、消费消息"></a>3、消费消息</h2><h4 id="3-1、消费者主动拉取模式"><a href="#3-1、消费者主动拉取模式" class="headerlink" title="3.1、消费者主动拉取模式"></a>3.1、消费者主动拉取模式</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Consumer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException </span>&#123;</span><br><span class="line">        Producer producer = <span class="keyword">new</span> Producer();</span><br><span class="line">        <span class="comment">// 获取connectionFactory</span></span><br><span class="line">        ConnectionFactory connectionFactory = producer.getConnectionFactory();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建连接和通道</span></span><br><span class="line">        Connection connection = connectionFactory.newConnection();</span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 消费消息-客户端主动拉取模式、自动ACK确认</span></span><br><span class="line">        <span class="comment">// 性能较差，每次都要创建、关闭连接和通道。</span></span><br><span class="line">        GetResponse response = channel.basicGet(<span class="string">&quot;apiQueue1&quot;</span>, <span class="keyword">true</span>);</span><br><span class="line">        String msg = Optional.ofNullable(response).map(GetResponse::getBody).map(String::<span class="keyword">new</span>).orElse(<span class="keyword">null</span>);</span><br><span class="line">        log.info(<span class="string">&quot;消费消息:[&#123;&#125;]&quot;</span>, msg);</span><br><span class="line">        channel.close();</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种模式在创建连接和通道后，主动从server中拉取消息，效率、性能比较低下。</p><h4 id="3-2、server推送模式"><a href="#3-2、server推送模式" class="headerlink" title="3.2、server推送模式"></a>3.2、server推送模式</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Consumer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException </span>&#123;</span><br><span class="line">        Producer producer = <span class="keyword">new</span> Producer();</span><br><span class="line">        <span class="comment">// 获取connectionFactory</span></span><br><span class="line">        ConnectionFactory connectionFactory = producer.getConnectionFactory();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建连接和通道</span></span><br><span class="line">        Connection connection = connectionFactory.newConnection();</span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 消费消息-server推送模式，创建连接和通道后，等待队列推送消息然后进行消费</span></span><br><span class="line">        <span class="comment">// 不能关闭连接和通道</span></span><br><span class="line">        com.rabbitmq.client.Consumer consumer = <span class="keyword">new</span> DefaultConsumer(channel) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                <span class="keyword">long</span> now = System.currentTimeMillis();</span><br><span class="line">                <span class="keyword">if</span> (now % <span class="number">3</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                    log.info(<span class="string">&quot;手动确认消费消息:[&#123;&#125;]&quot;</span>, <span class="keyword">new</span> String(body));</span><br><span class="line">                    <span class="comment">// 消息唯一标记、是否确认多条（true则批量确认小于当前标记号的所有消息）</span></span><br><span class="line">                    channel.basicAck(envelope.getDeliveryTag(), <span class="keyword">false</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (now % <span class="number">3</span> == <span class="number">1</span>) &#123;</span><br><span class="line">                    log.info(<span class="string">&quot;basicNack:[手动拒绝消息，重回队列]&quot;</span>);</span><br><span class="line">                    <span class="comment">// 消息唯一标记、是否拒绝多条（true则批量拒绝小于当前标记号的所有消息）、是否重回队列</span></span><br><span class="line">                    <span class="comment">// 重回队列后仍旧会被当前消费者再次消费</span></span><br><span class="line">                    channel.basicNack(envelope.getDeliveryTag(), <span class="keyword">false</span>, <span class="keyword">true</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (now % <span class="number">3</span> == <span class="number">2</span>) &#123;</span><br><span class="line">                    log.info(<span class="string">&quot;basicReject:[手动拒绝消息，重回队列]&quot;</span>);</span><br><span class="line">                    <span class="comment">// 只能拒绝单条消息，消息唯一标记、是否重回队列</span></span><br><span class="line">                    <span class="comment">// 重回队列后仍旧会被当前消费者再次消费</span></span><br><span class="line">                    channel.basicReject(envelope.getDeliveryTag(), <span class="keyword">true</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">// 进入消费状态、手动ACK</span></span><br><span class="line">        channel.basicConsume(<span class="string">&quot;apiQueue1&quot;</span>, <span class="keyword">false</span>, consumer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种模式在创建连接和通道后就进入等待消费的状态，等待队列推送消息然后进行消费。<br>手动ACK模式，在成功消费消息后需要手动ACK确认，也可以拒绝当前消息并指定是否重回队列中被再次消费。</p><p><img src="https://zhaoxiaobin.coding.net/p/blog/d/zhaoxiaobin_img/git/raw/master/post/rabbitmq/rabbitmq-3-2.jpg" alt="-w1598"></p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://blog.csdn.net/weixin_34416649/article/details/92501280">Rabbitmq之消息过期设置</a></li><li><a href="https://blog.csdn.net/fly_leopard/article/details/102821776">rabbitmq basicReject / basicNack / basicRecover区别</a></li><li><a href="https://blog.csdn.net/qq_35387940/article/details/100514134">Springboot 整合RabbitMq ，用心看完这一篇就够了</a></li></ul><h2 id="代码地址"><a href="#代码地址" class="headerlink" title="代码地址"></a>代码地址</h2><ul><li>github：<a href="https://github.com/senlinmu1008/rabbitmq-action/tree/master/rabbitmq-native">https://github.com/senlinmu1008/rabbitmq-action/tree/master/rabbitmq-native</a></li><li>gitee：<a href="https://gitee.com/ppbin/rabbitmq-action/tree/master/rabbitmq-native">https://gitee.com/ppbin/rabbitmq-action/tree/master/rabbitmq-native</a><br><br><br></li></ul>]]></content>
      
      
      <categories>
          
          <category> RabbitMQ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RabbitMQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS7安装RabbitMQ（单机）</title>
      <link href="RabbitMQ/CentOS7%E5%AE%89%E8%A3%85RabbitMQ%EF%BC%88%E5%8D%95%E6%9C%BA%EF%BC%89/"/>
      <url>RabbitMQ/CentOS7%E5%AE%89%E8%A3%85RabbitMQ%EF%BC%88%E5%8D%95%E6%9C%BA%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><ul><li>Linux版本：CentOS 7</li><li>RabbitMQ版本：3.7.14</li><li>Erlang版本：20.3.4</li><li>socat版本：1.7.3.2</li></ul><h4 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h4><ul><li>由于<code>RabbitMQ</code>是基于<code>Erlang</code>语言开发，所以在安装<code>RabbitMQ</code>之前, 需要先安装<code>Erlang</code>；<code>RabbitMQ</code>和<code>Erlang</code>版本需要对应，可以参考官网给出的列表：<a href="https://www.rabbitmq.com/which-erlang.html">https://www.rabbitmq.com/which-erlang.html</a></li><li><code>RabbitMQ</code>需要<code>socat</code>依赖，所以需要安装<code>socat</code>。</li></ul><h2 id="1、安装包下载安装"><a href="#1、安装包下载安装" class="headerlink" title="1、安装包下载安装"></a>1、安装包下载安装</h2><h4 id="1-1、下载安装socat"><a href="#1-1、下载安装socat" class="headerlink" title="1.1、下载安装socat"></a>1.1、下载安装socat</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 下载</span></span><br><span class="line">wget http://repo.iotti.biz/CentOS/7/x86_64/socat-1.7.3.2-5.el7.lux.x86_64.rpm</span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装</span></span><br><span class="line">rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm</span><br></pre></td></tr></table></figure><h4 id="1-2、下载安装Erlang"><a href="#1-2、下载安装Erlang" class="headerlink" title="1.2、下载安装Erlang"></a>1.2、下载安装Erlang</h4><p>github下载地址：<a href="https://github.com/rabbitmq/erlang-rpm/tags">https://github.com/rabbitmq/erlang-rpm/tags</a><br>选择版本<code>20.3.4</code>下载<code>rpm</code>安装包。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 安装</span></span><br><span class="line">rpm -ivh erlang-20.3.4-1.el7.centos.x86_64.rpm</span><br></pre></td></tr></table></figure><h4 id="1-3、下载安装RabbitMQ"><a href="#1-3、下载安装RabbitMQ" class="headerlink" title="1.3、下载安装RabbitMQ"></a>1.3、下载安装RabbitMQ</h4><p>github下载地址：<a href="https://github.com/rabbitmq/rabbitmq-server/tags">https://github.com/rabbitmq/rabbitmq-server/tags</a><br>官方下载地址：<a href="https://dl.bintray.com/rabbitmq/all/rabbitmq-server/">https://dl.bintray.com/rabbitmq/all/rabbitmq-server/</a><br>选择版本<code>3.7.14</code>下载<code>rpm</code>安装包。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 安装</span></span><br><span class="line">rpm -ivh rabbitmq-server-3.7.14-1.el7.noarch.rpm</span><br></pre></td></tr></table></figure><h4 id="1-4、启停RabbitMQ"><a href="#1-4、启停RabbitMQ" class="headerlink" title="1.4、启停RabbitMQ"></a>1.4、启停RabbitMQ</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service rabbitmq-server start|stop</span><br></pre></td></tr></table></figure><h2 id="2、RabbitMQ后台管理"><a href="#2、RabbitMQ后台管理" class="headerlink" title="2、RabbitMQ后台管理"></a>2、RabbitMQ后台管理</h2><h4 id="2-1、安装后台管理插件"><a href="#2-1、安装后台管理插件" class="headerlink" title="2.1、安装后台管理插件"></a>2.1、安装后台管理插件</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rabbitmq-plugins enable rabbitmq_management</span><br></pre></td></tr></table></figure><h4 id="2-2、放开访问端口"><a href="#2-2、放开访问端口" class="headerlink" title="2.2、放开访问端口"></a>2.2、放开访问端口</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> RabbitMQ通讯端口</span></span><br><span class="line">firewall-cmd --zone=public --add-port=5672/tcp --permanent</span><br><span class="line"><span class="meta">#</span><span class="bash"> RabbitMQ后台管理页面端口</span></span><br><span class="line">firewall-cmd --zone=public --add-port=15672/tcp --permanent</span><br><span class="line"><span class="meta">#</span><span class="bash"> 重启防火墙</span></span><br><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure><h4 id="2-3、登录后台管理"><a href="#2-3、登录后台管理" class="headerlink" title="2.3、登录后台管理"></a>2.3、登录后台管理</h4><p>浏览器访问页面<code>http://ip:port/15672</code>可以打开后台管理页面。<br><img src="https://zhaoxiaobin.coding.net/p/blog/d/zhaoxiaobin_img/git/raw/master/post/rabbitmq/rabbitmq-2-1.jpg" alt="-w661"></p><p><strong>默认自带的<code>guest</code>用户只允许本地机器访问登录（提示<code>User can only log in via localhost</code>），可以通过以下步骤解决</strong>：</p><ol><li><code>cd /etc/rabbitmq</code></li><li><code>vi rabbitmq.config</code></li><li>写入<code>[&#123;rabbit, [&#123;loopback_users, []&#125;]&#125;].</code>，保存退出。</li><li>重启RabbitMQ，<code>service rabbitmq-server restart</code></li><li>用账号<code>guest</code>、密码<code>guest</code>登录。</li></ol><p><strong>或者创建新的管理员用户登录</strong></p><ol><li>创建用户：<code>rabbitmqctl add_user 用户名 密码</code></li><li>赋予角色：<code>rabbitmqctl set_user_tags 用户名 administrator</code></li><li>用新创建的账号密码登录。</li></ol><p>登录后页面会显示版本信息，我们可以查看消息队列的状态，也可以管理交换机、队列、用户等数据。</p><p><img src="https://zhaoxiaobin.coding.net/p/blog/d/zhaoxiaobin_img/git/raw/master/post/rabbitmq/rabbitmq-2-2.jpg" alt="-w1629"></p><h4 id="2-4、解决后台管理页面打开特别慢"><a href="#2-4、解决后台管理页面打开特别慢" class="headerlink" title="2.4、解决后台管理页面打开特别慢"></a>2.4、解决后台管理页面打开特别慢</h4><p>本人在刚好安装好以后，发现打开和登录管理页面特别慢，连接<code>RabbitMQ</code>有时候也会超时，后经排查发现是解析主机名的问题，在<code>hosts</code>文件中配上当前主机名即可解决。</p><ol><li><code>vi /etc/hosts</code></li><li>在<code>127.0.0.1</code> 后追加当前主机名称。</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4 libai</span><br></pre></td></tr></table></figure><h2 id="3、RabbitMQ命令总结"><a href="#3、RabbitMQ命令总结" class="headerlink" title="3、RabbitMQ命令总结"></a>3、RabbitMQ命令总结</h2><h4 id="3-1、启停RabbitMQ"><a href="#3-1、启停RabbitMQ" class="headerlink" title="3.1、启停RabbitMQ"></a>3.1、启停RabbitMQ</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 开启</span></span><br><span class="line">service rabbitmq-server start</span><br><span class="line"><span class="meta">#</span><span class="bash"> 关闭</span></span><br><span class="line">service rabbitmq-server stop</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看状态</span></span><br><span class="line">service rabbitmq-server status</span><br></pre></td></tr></table></figure><h4 id="3-2、安装卸载后台管理插件"><a href="#3-2、安装卸载后台管理插件" class="headerlink" title="3.2、安装卸载后台管理插件"></a>3.2、安装卸载后台管理插件</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 安装</span></span><br><span class="line">rabbitmq-plugins enable rabbitmq_management</span><br><span class="line"><span class="meta">#</span><span class="bash"> 卸载</span></span><br><span class="line">rabbitmq-plugins disable rabbitmq_management</span><br></pre></td></tr></table></figure><h4 id="3-3、RabbitMQ设置开机启动"><a href="#3-3、RabbitMQ设置开机启动" class="headerlink" title="3.3、RabbitMQ设置开机启动"></a>3.3、RabbitMQ设置开机启动</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 开机启动</span></span><br><span class="line">systemctl enable rabbitmq-server</span><br><span class="line"><span class="meta">#</span><span class="bash"> 关闭开机启动</span></span><br><span class="line">systemctl disable rabbitmq-server</span><br></pre></td></tr></table></figure><h4 id="3-4、用户管理"><a href="#3-4、用户管理" class="headerlink" title="3.4、用户管理"></a>3.4、用户管理</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 创建用户</span></span><br><span class="line">rabbitmqctl add_user 用户名 密码</span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除用户</span></span><br><span class="line">rabbitmqctl delete_user 用户名</span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改密码</span></span><br><span class="line">rabbitmqctl change_password 用户名 密码</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看当前用户列表</span></span><br><span class="line">rabbitmqctl list_users</span><br></pre></td></tr></table></figure><h4 id="3-5、角色管理"><a href="#3-5、角色管理" class="headerlink" title="3.5、角色管理"></a>3.5、角色管理</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 角色名 administrator|monitoring|policymaker|management</span></span><br><span class="line">rabbitmqctl set_user_tags 用户名 角色名</span><br></pre></td></tr></table></figure><p>按照个人理解，用户角色可分为五类，超级管理员, 监控者, 策略制定者, 普通管理者以及其他。</p><ol><li><p><strong>超级管理员(administrator)</strong><br>可登陆管理控制台(启用management plugin的情况下)，可查看所有的信息，并且可以对用户，策略(policy)进行操作。</p></li><li><p><strong>监控者(monitoring)</strong><br>可登陆管理控制台(启用management plugin的情况下)，同时可以查看rabbitmq节点的相关信息(进程数，内存使用情况，磁盘使用情况等)</p></li><li><p><strong>策略制定者(policymaker)</strong><br>可登陆管理控制台(启用management plugin的情况下), 同时可以对policy进行管理。但无法查看节点的相关信息(上图红框标识的部分)。<br>与administrator的对比，administrator能看到这些内容</p></li><li><p><strong>普通管理者(management)</strong><br>仅可登陆管理控制台(启用management plugin的情况下)，无法看到节点信息，也无法对策略进行管理。</p></li><li><p><strong>其他</strong><br>无法登陆管理控制台，通常就是普通的生产者和消费者。</p></li></ol><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://www.jianshu.com/p/ee9f7594212b">Linux centos7安装RabbitMQ</a></li><li><a href="https://www.cnblogs.com/mingaixin/p/4134920.html">rabbitmq的web管理界面无法使用guest用户登录</a></li><li><a href="https://blog.csdn.net/xiuniu/article/details/90299087">如何解决Rabbitmq连接超时问题？</a><br><br><br></li></ul>]]></content>
      
      
      <categories>
          
          <category> RabbitMQ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RabbitMQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RabbitMQ介绍</title>
      <link href="RabbitMQ/RabbitMQ%E4%BB%8B%E7%BB%8D/"/>
      <url>RabbitMQ/RabbitMQ%E4%BB%8B%E7%BB%8D/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p><code>RabbitMQ</code>作为目前应用相当广泛的消息中间件，在企业级应用、微服务应用中充当着重要的角色。特别是在一些典型的应用场景以及业务模块中具有重要的作用，比如业务服务模块解耦、异步通信、高并发限流、超时业务、数据延迟处理等都可以使用<code>RabbitMQ</code>。</p><h2 id="1、使用场景"><a href="#1、使用场景" class="headerlink" title="1、使用场景"></a>1、使用场景</h2><h4 id="1-1、发布-订阅"><a href="#1-1、发布-订阅" class="headerlink" title="1.1、发布/订阅"></a>1.1、发布/订阅</h4><p>“发布/订阅”是<code>RabbitMQ</code>的重要功能，可以用”发布/订阅”功能来实现通知功能。消费者（<code>consumer</code>）一直监听<code>RabbitMQ</code>的数据。如果<code>RabbitMQ</code>有数据，则消费者会按照”先进先出”规则逐条进行消费。而生产者（<code>producer</code>）只需要将数据存入<code>RabbitMQ</code>。这样既降低了生产者应用和消费者应用之间的耦合度，也确保了消息通知的及时性。不需要生产者和消费者同时在线，且不影响系统的性能。</p><p>“发布/订阅”功能支持3种模式：一对一、一对多、广播。</p><p><strong>解耦</strong></p><p>看这么个场景。A 系统发送数据到 BCD 三个系统，通过接口调用发送。如果 E 系统也要这个数据呢？那如果 C 系统现在不需要了呢？<br><img src="https://zhaoxiaobin.coding.net/p/blog/d/zhaoxiaobin_img/git/raw/master/post/rabbitmq/rabbitmq-1-1.png"><br>在这个场景中，A 系统跟其它各种乱七八糟的系统严重耦合，A 系统产生一条比较关键的数据，很多系统都需要 A 系统将这个数据发送过来。A 系统要时时刻刻考虑 BCDE 四个系统如果挂了该咋办？要不要重发，要不要把消息存起来？</p><p>如果使用 MQ，A 系统产生一条数据，发送到 MQ 里面去，哪个系统需要数据自己去 MQ 里面消费。如果新系统需要数据，直接从 MQ 里消费即可；如果某个系统不需要这条数据了，就取消对 MQ 消息的消费即可。这样下来，A 系统压根儿不需要去考虑要给谁发送数据，不需要维护这个代码，也不需要考虑人家是否调用成功、失败超时等情况。</p><p><strong>总结</strong>：通过一个 MQ，<code>Pub/Sub</code>发布订阅消息这么一个模型，A 系统就跟其它系统彻底解耦了。</p><h4 id="1-2、异步任务"><a href="#1-2、异步任务" class="headerlink" title="1.2、异步任务"></a>1.2、异步任务</h4><p>如果在一次请求过程中，涉及多个任务，其中一些任务可能会比较耗时，但这些任务的执行顺序并不影响整个业务的处理结果，则可以把这些耗时的任务放入消息队列中去处理，以便加快请求的响应速度。</p><p>比如一些网站的注册功能，需要发送邮件/短信验证码，则可以使用<code>RabbitMQ</code>的消息队列来实现，这样可以及时提醒用户操作已经成功，等待收到验证码验证即可。</p><h4 id="1-3、削峰填谷"><a href="#1-3、削峰填谷" class="headerlink" title="1.3、削峰填谷"></a>1.3、削峰填谷</h4><p>每天 0:00 到 12:00，A 系统风平浪静，每秒并发请求数量就 50 个。结果每次一到 12:00 ~ 13:00 ，每秒并发请求数量突然会暴增到 5k+ 条。但是系统是直接基于 MySQL 的，大量的请求涌入 MySQL，每秒钟对 MySQL 执行约 5k 条 SQL。</p><p>一般的 MySQL，扛到每秒 2k 个请求就差不多了，如果每秒请求到 5k 的话，可能就直接把 MySQL 给打死了，导致系统崩溃，用户也就没法再使用系统了。</p><p>但是高峰期一过，到了下午的时候，就成了低峰期，可能也就 1w 的用户同时在网站上操作，每秒中的请求数量可能也就 50 个请求，对整个系统几乎没有任何的压力。<br><img src="https://zhaoxiaobin.coding.net/p/blog/d/zhaoxiaobin_img/git/raw/master/post/rabbitmq/rabbitmq-1-2.png"><br>如果使用 MQ，每秒 5k 个请求写入 MQ，A 系统每秒钟最多处理 2k 个请求，因为 MySQL 每秒钟最多处理 2k 个。A 系统从 MQ 中慢慢拉取请求，每秒钟就拉取 2k 个请求，不要超过自己每秒能处理的最大请求数量就 ok，这样下来，哪怕是高峰期的时候，A 系统也绝对不会挂掉。而 MQ 每秒钟 5k 个请求进来，就 2k 个请求出去，结果就导致在中午高峰期（1 个小时），可能有几十万甚至几百万的请求积压在 MQ 中。</p><p><img src="https://zhaoxiaobin.coding.net/p/blog/d/zhaoxiaobin_img/git/raw/master/post/rabbitmq/rabbitmq-1-3.png"><br>这个短暂的高峰期积压是 ok 的，因为高峰期过了之后，每秒钟就 50 个请求进 MQ，但是 A 系统依然会按照每秒 2k 个请求的速度在处理。所以说，只要高峰期一过，A 系统就会快速将积压的消息给解决掉。</p><p><strong>总结</strong>：可以用MQ将大量的请求数据临时存起来，然后让消费端按照一定的速率慢慢去消费，可以有效减轻服务器部分时段的压力。</p><h4 id="1-4、跨平台通信"><a href="#1-4、跨平台通信" class="headerlink" title="1.4、跨平台通信"></a>1.4、跨平台通信</h4><p>由于消息队列是无关平台和语言的，而且语义上也不是函数调用，所以<code>RabbitMQ</code>可以用于不同开发语言开发的应用间的通信，实现企业应用集成。</p><h4 id="1-5、消息延迟"><a href="#1-5、消息延迟" class="headerlink" title="1.5、消息延迟"></a>1.5、消息延迟</h4><p>当消息由生产者发出后，消费者不是立即拿到消息。而是等待指定时间后才拿到消息进行消费。</p><p>一般要实现消息队列的延迟功能，可以采用官方提供的插件<code>rabbitmq_delayed_message_exchagne</code>，但<code>RabbitMQ</code>版本必须是<code>3.5.8</code>以上才支持该插件，如果低于这个版本则可以利用<code>死信队列</code>来完成这个功能。</p><h4 id="1-6、RPC（远程过程调用）"><a href="#1-6、RPC（远程过程调用）" class="headerlink" title="1.6、RPC（远程过程调用）"></a>1.6、RPC（远程过程调用）</h4><p>在实际的应用场景中，有时需要一些同步处理，以等待服务器端将消息处理完成后再进行下一步处理，这相当于RPC（<code>Remote Procedure Call</code>，远程过程调用）。<br><br><br></p>]]></content>
      
      
      <categories>
          
          <category> RabbitMQ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RabbitMQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何在过滤器中修改http请求体和响应体</title>
      <link href="SpringBoot/%E5%AE%89%E5%85%A8/%E5%A6%82%E4%BD%95%E5%9C%A8%E8%BF%87%E6%BB%A4%E5%99%A8%E4%B8%AD%E4%BF%AE%E6%94%B9http%E8%AF%B7%E6%B1%82%E4%BD%93%E5%92%8C%E5%93%8D%E5%BA%94%E4%BD%93/"/>
      <url>SpringBoot/%E5%AE%89%E5%85%A8/%E5%A6%82%E4%BD%95%E5%9C%A8%E8%BF%87%E6%BB%A4%E5%99%A8%E4%B8%AD%E4%BF%AE%E6%94%B9http%E8%AF%B7%E6%B1%82%E4%BD%93%E5%92%8C%E5%93%8D%E5%BA%94%E4%BD%93/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>在一些业务场景中，需要对http的请求体和响应体做加解密的操作，如果在controller中来调用加解密函数，会增加代码的耦合度，同时也会增加调试的难度。</p><p>参考spring中http请求的链路，选择过滤器来对请求和响应做加解密的调用。只需要在过滤器中对符合条件的url做拦截处理即可。</p><p>一般在过滤器中修改请求体和响应体，以往需要自行创建Wrapper包装类，从原请求Request对象中读取原请求体，修改后重新放入新的请求对象中等等操作……非常麻烦。如果可以在过滤器中只定义加解密的函数，然后调用一个API传入这些加解密函数，中间操作统统不管，这样用起来岂不是更爽！</p><p><img src="https://zhaoxiaobin.coding.net/p/blog/d/zhaoxiaobin_img/git/raw/master/post/springboot/filter-decrpty-1.jpg"></p><h2 id="1、启动类配置注解"><a href="#1、启动类配置注解" class="headerlink" title="1、启动类配置注解"></a>1、启动类配置注解</h2><p>新增注解<code>@ServletComponentScan</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@ServletComponentScan</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpdecryptApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(HttpdecryptApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2、过滤器实现"><a href="#2、过滤器实现" class="headerlink" title="2、过滤器实现"></a>2、过滤器实现</h2><h4 id="2-1、用Base64算法做加解密示例"><a href="#2-1、用Base64算法做加解密示例" class="headerlink" title="2.1、用Base64算法做加解密示例"></a>2.1、用Base64算法做加解密示例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebFilter(urlPatterns = &#123;&quot;/decrypt/*&quot;&#125;, filterName = &quot;decryptFilter&quot;)</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DecryptFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 1.原请求/响应对象强转</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        HttpServletRequest originalRequest = (HttpServletRequest) request;</span><br><span class="line">        HttpServletResponse originalResponse = (HttpServletResponse) response;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 2.读取原请求体（密文），执行修改请求体函数得到修改后的请求体（明文），然后构建新的请求对象（包含修改后的请求体）</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        String originalRequestBody = ServletUtil.readRequestBody(originalRequest); <span class="comment">// 读取原请求体（密文）</span></span><br><span class="line">        String modifyRequestBody = <span class="keyword">this</span>.decryptBody(originalRequestBody); <span class="comment">// 修改请求体（明文）</span></span><br><span class="line">        HttpServletRequest orginalRequest = (HttpServletRequest) request;</span><br><span class="line">        ModifyRequestBodyWrapper requestWrapper = <span class="keyword">new</span> ModifyRequestBodyWrapper(orginalRequest, modifyRequestBody);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 3.构建新的响应对象，执行调用链（用新的请求对象和响应对象）</span></span><br><span class="line"><span class="comment">         * 得到应用层的响应后（明文），执行修改响应体函数，最后得到需要响应给调用方的响应体（密文）</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        ModifyResponseBodyWrapper responseWrapper = <span class="keyword">new</span> ModifyResponseBodyWrapper(originalResponse);</span><br><span class="line">        chain.doFilter(requestWrapper, responseWrapper);</span><br><span class="line">        String originalResponseBody = responseWrapper.getResponseBody(); <span class="comment">// 原响应体（明文）</span></span><br><span class="line">        String modifyResponseBody = <span class="keyword">this</span>.encryptBody(originalResponseBody); <span class="comment">// 修改后的响应体（密文）</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 4.将修改后的响应体用原响应对象的输出流来输出</span></span><br><span class="line"><span class="comment">         * 要保证响应类型和原请求中的一致，并重新设置响应体大小</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        originalResponse.setContentType(requestWrapper.getOrginalRequest().getContentType()); <span class="comment">// 与请求时保持一致</span></span><br><span class="line">        <span class="keyword">byte</span>[] responseData = modifyResponseBody.getBytes(responseWrapper.getCharacterEncoding()); <span class="comment">// 编码与实际响应一致</span></span><br><span class="line">        originalResponse.setContentLength(responseData.length);</span><br><span class="line">        <span class="meta">@Cleanup</span> ServletOutputStream out = originalResponse.getOutputStream();</span><br><span class="line">        out.write(responseData);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 解密函数，用Base64进行解密</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> originalBody 加密的请求体（密文）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">decryptBody</span><span class="params">(String originalBody)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Base64.decodeToString(originalBody);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 加密函数，用Base64进行加密</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> originalBody 需要加密的响应体（明文）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">encryptBody</span><span class="params">(String originalBody)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Base64.encodeToString(originalBody);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>使用步骤</strong>：</p><ol><li>实现<code>Filter</code>接口。</li><li>使用<code>@WebFilter</code>注解指定拦截的url，可以配置多个url。</li></ol><p><strong>处理逻辑</strong></p><ol><li>从servlet中读取原请求体（密文）。</li><li>调用解密函数获得明文。</li><li>构建新的请求对象，包装修改后的请求体（明文）。</li><li>构建新的响应对象，调用链调用应用层获得响应。</li><li>从新的响应对象中获得响应体（明文）。</li><li>调用加密函数对响应体进行加密。</li><li>用原响应对象的输出流，将加密后的密文响应体输出。</li></ol><p>函数中使用的请求包装类<code>ModifyRequestBodyWrapper</code>和响应包装类<code>ModifyResponseBodyWrapper</code>在文末附录中贴出，可以直接copy到项目工程中使用。</p><h2 id="3、测试验证"><a href="#3、测试验证" class="headerlink" title="3、测试验证"></a>3、测试验证</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/decrypt&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@PostMapping(&quot;/test&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">(<span class="meta">@RequestBody</span> String requestBody)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;经过解密后的数据:&#123;&#125;&quot;</span>, requestBody);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success-交易成功&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpdecryptApplicationTests</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        HttpResponse response = HttpRequest</span><br><span class="line">                .post(<span class="string">&quot;http://127.0.0.1:10400/decrypt/test&quot;</span>)</span><br><span class="line">                .body(<span class="string">&quot;eyJlbmNyeXB0SW5mbyI6IuWKoOWvhuaVsOaNriIsInZlcnNpb24iOiIxLjAifQ==&quot;</span>)</span><br><span class="line">                .send();</span><br><span class="line">        String result = response.bodyText();</span><br><span class="line">        System.out.println(Base64.decodeToString(result)); <span class="comment">// success-交易成功</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4、优化改进"><a href="#4、优化改进" class="headerlink" title="4、优化改进"></a>4、优化改进</h2><p>以上就是以往的处理方式；对于过滤器中的处理逻辑，如果项目中做不同的加解密每次都要这样去实现，未免有些冗余。</p><p>重新分析不难发现在过滤器中的处理逻辑始终都是不变的，对于不同的加解密方式只有加解密函数是变化的。为此可以引入函数式编程的方式，对于处理逻辑进行封装，每次只需要定义不同的加解密函数然后调用封装好的API即可。</p><p><strong>改进后的过滤器</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebFilter(urlPatterns = &#123;&quot;/decrypt/*&quot;&#125;, filterName = &quot;decryptFilter&quot;)</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DecryptFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        Function&lt;String, String&gt; modifyRequestBodyFun = Base64::decodeToString; <span class="comment">// 解密函数</span></span><br><span class="line">        Function&lt;String, String&gt; modifyResponseBodyFun = Base64::encodeToString; <span class="comment">// 加密函数</span></span><br><span class="line">        HttpUtil.modifyHttpData(request, response, chain, modifyRequestBodyFun, modifyResponseBodyFun);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>只需要在过滤器上配置需要拦截的url列表、定义加解密函数然后调用封装好的API即可。</li><li>过滤器中不会改变请求和响应的字符集，都是沿用原来的。</li><li>只能针对于带有请求体的请求做加解密处理。</li><li>另外<code>modifyHttpData</code>函数有另外的重载，支持修改<code>Content-Type</code>。</li></ol><p><code>HttpUtil</code>也在文末附录中贴出，直接copy到项目工程中使用。</p><p>对于函数式编程不熟悉的同学可以去学习下Java中如何使用 <code>lambda</code> 表达式和Java的几种内置的函数接口（JDK1.8版本及以上才支持）；上面的<code>lambda</code> 表达式其实是一种简写的方式，还可以用其最一般化的方式来表示。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Function&lt;String, String&gt; modifyRequestBodyFun = (originalBody) -&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> Base64.decodeToString(originalBody);</span><br><span class="line">&#125;;</span><br><span class="line">Function&lt;String, String&gt; modifyResponseBodyFun = (originalBody) -&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> Base64.encodeToString(originalBody);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://www.cnblogs.com/kaile/p/9990117.html">SpringBoot框架中，使用过滤器进行加密解密操作</a></li></ul><h2 id="代码地址"><a href="#代码地址" class="headerlink" title="代码地址"></a>代码地址</h2><ul><li>github：<a href="https://github.com/senlinmu1008/spring-boot/tree/master/httpdecrypt">https://github.com/senlinmu1008/spring-boot/tree/master/httpdecrypt</a></li><li>gitee：<a href="https://gitee.com/ppbin/spring-boot/tree/master/httpdecrypt">https://gitee.com/ppbin/spring-boot/tree/master/httpdecrypt</a></li></ul><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><p><strong>请求包装类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 修改http请求体和contentType后构建新的请求对象</span></span><br><span class="line"><span class="comment"> * 只针对请求体可读的请求类型</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhaoxb</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2019-09-26 17:49</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ModifyRequestBodyWrapper</span> <span class="keyword">extends</span> <span class="title">HttpServletRequestWrapper</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 原请求对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> HttpServletRequest orginalRequest;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改后的请求体</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String modifyRequestBody;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改后的请求类型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String contentType;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改请求体，请求类型沿用原来的</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> orginalRequest    原请求对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> modifyRequestBody 修改后的请求体</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ModifyRequestBodyWrapper</span><span class="params">(HttpServletRequest orginalRequest, String modifyRequestBody)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(orginalRequest, modifyRequestBody, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改请求体和请求类型</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> orginalRequest    原请求对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> modifyRequestBody 修改后的请求体</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> contentType       修改后的请求类型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ModifyRequestBodyWrapper</span><span class="params">(HttpServletRequest orginalRequest, String modifyRequestBody, String contentType)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(orginalRequest);</span><br><span class="line">        <span class="keyword">this</span>.modifyRequestBody = modifyRequestBody;</span><br><span class="line">        <span class="keyword">this</span>.orginalRequest = orginalRequest;</span><br><span class="line">        <span class="keyword">this</span>.contentType = contentType;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构建新的输入流，在新的输入流中放入修改后的请求体（使用原请求中的字符集）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 新的输入流（包含修改后的请求体）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@SneakyThrows</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletInputStream <span class="title">getInputStream</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ServletInputStream() &#123;</span><br><span class="line">            <span class="keyword">private</span> InputStream in = <span class="keyword">new</span> ByteArrayInputStream(modifyRequestBody.getBytes(orginalRequest.getCharacterEncoding()));</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> in.read();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isFinished</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isReady</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setReadListener</span><span class="params">(ReadListener readListener)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取新的请求体大小</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@SneakyThrows</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getContentLength</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> modifyRequestBody.getBytes(orginalRequest.getCharacterEncoding()).length;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取新的请求体大小</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@SneakyThrows</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getContentLengthLong</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> modifyRequestBody.getBytes(orginalRequest.getCharacterEncoding()).length;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取新的请求类型，默认沿用原请求的</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getContentType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> StringUtils.isBlank(contentType) ? orginalRequest.getContentType() : contentType;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改contentType</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name 请求头</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Enumeration&lt;String&gt; <span class="title">getHeaders</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != name &amp;&amp; name.replace(<span class="string">&quot;-&quot;</span>, <span class="string">&quot;&quot;</span>).toLowerCase().equals(<span class="string">&quot;contenttype&quot;</span>) &amp;&amp; !StringUtils.isBlank(contentType)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Enumeration&lt;String&gt;() &#123;</span><br><span class="line">                <span class="keyword">private</span> <span class="keyword">boolean</span> hasGetted = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasMoreElements</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> !hasGetted;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> String <span class="title">nextElement</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">if</span> (hasGetted) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        hasGetted = <span class="keyword">true</span>;</span><br><span class="line">                        <span class="keyword">return</span> contentType;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.getHeaders(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>响应包装类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 构建新的响应对象，缓存响应体</span></span><br><span class="line"><span class="comment"> * 可以通过此对象获取响应体，然后进行修改，通过原响应流返回给调用方</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhaoxb</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2019-09-26 17:52</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ModifyResponseBodyWrapper</span> <span class="keyword">extends</span> <span class="title">HttpServletResponseWrapper</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 原响应对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> HttpServletResponse originalResponse;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 缓存响应体的输出流（低级流）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> ByteArrayOutputStream baos;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 输出响应体的高级流</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> ServletOutputStream out;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 输出响应体的字符流</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> PrintWriter writer;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构建新的响应对象</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> resp 原响应对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@SneakyThrows</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ModifyResponseBodyWrapper</span><span class="params">(HttpServletResponse resp)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(resp);</span><br><span class="line">        <span class="keyword">this</span>.originalResponse = resp;</span><br><span class="line">        <span class="keyword">this</span>.baos = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        <span class="keyword">this</span>.out = <span class="keyword">new</span> SubServletOutputStream(baos);</span><br><span class="line">        <span class="keyword">this</span>.writer = <span class="keyword">new</span> PrintWriter(<span class="keyword">new</span> OutputStreamWriter(baos));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取输出流</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletOutputStream <span class="title">getOutputStream</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> out;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取输出流（字符）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PrintWriter <span class="title">getWriter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> writer;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取响应体</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getResponseBody</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.getResponseBody(<span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过指定字符集获取响应体</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> charset 字符集，指定响应体的编码格式</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getResponseBody</span><span class="params">(String charset)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 应用层会用ServletOutputStream或PrintWriter字符流来输出响应</span></span><br><span class="line"><span class="comment">         * 需要把这2个流中的数据强制刷到ByteArrayOutputStream这个流中，否则取不到响应数据或数据不完整</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        out.flush();</span><br><span class="line">        writer.flush();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> String(baos.toByteArray(), StringUtils.isBlank(charset) ? <span class="keyword">this</span>.getCharacterEncoding() : charset);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 输出流，应用层会用此流来写出响应体</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">SubServletOutputStream</span> <span class="keyword">extends</span> <span class="title">ServletOutputStream</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> ByteArrayOutputStream baos;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">SubServletOutputStream</span><span class="params">(ByteArrayOutputStream baos)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.baos = baos;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">            baos.write(b);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">byte</span>[] b)</span> </span>&#123;</span><br><span class="line">            baos.write(b, <span class="number">0</span>, b.length);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isReady</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setWriteListener</span><span class="params">(WriteListener writeListener)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>HttpUtil封装工具类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpUtil</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改http请求体/响应体</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> originalRequest       原请求对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> originalResponse      原响应对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> chain                 调用链</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> modifyRequestBodyFun  修改请求体函数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> modifyResponseBodyFun 修改响应体函数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> ServletException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">modifyHttpData</span><span class="params">(ServletRequest originalRequest, ServletResponse originalResponse, FilterChain chain,</span></span></span><br><span class="line"><span class="function"><span class="params">                                      Function&lt;String, String&gt; modifyRequestBodyFun, Function&lt;String, String&gt; modifyResponseBodyFun)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        modifyHttpData(originalRequest, originalResponse, chain, modifyRequestBodyFun, modifyResponseBodyFun, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改http请求体/响应体</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request               原请求对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response              原响应对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> chain                 调用链</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> modifyRequestBodyFun  修改请求体函数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> modifyResponseBodyFun 修改响应体函数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> requestContentType    修改后的请求类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> ServletException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">modifyHttpData</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain,</span></span></span><br><span class="line"><span class="function"><span class="params">                                      Function&lt;String, String&gt; modifyRequestBodyFun, Function&lt;String, String&gt; modifyResponseBodyFun,</span></span></span><br><span class="line"><span class="function"><span class="params">                                      String requestContentType)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 1.原请求/响应对象强转</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        HttpServletRequest originalRequest = (HttpServletRequest) request;</span><br><span class="line">        HttpServletResponse originalResponse = (HttpServletResponse) response;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 2.读取原请求体（密文），执行修改请求体函数得到修改后的请求体（明文），然后构建新的请求对象（包含修改后的请求体）</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        String originalRequestBody = ServletUtil.readRequestBody(originalRequest); <span class="comment">// 读取原请求体（密文）</span></span><br><span class="line">        String modifyRequestBody = modifyRequestBodyFun.apply(originalRequestBody); <span class="comment">// 修改请求体（明文）</span></span><br><span class="line">        ModifyRequestBodyWrapper requestWrapper = modifyRequestBodyAndContentType(originalRequest, modifyRequestBody, requestContentType);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 3.构建新的响应对象，执行调用链（用新的请求对象和响应对象）</span></span><br><span class="line"><span class="comment">         * 得到应用层的响应后（明文），执行修改响应体函数，最后得到需要响应给调用方的响应体（密文）</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        ModifyResponseBodyWrapper responseWrapper = getHttpResponseWrapper(originalResponse);</span><br><span class="line">        chain.doFilter(requestWrapper, responseWrapper);</span><br><span class="line">        String originalResponseBody = responseWrapper.getResponseBody(); <span class="comment">// 原响应体（明文）</span></span><br><span class="line">        String modifyResponseBody = modifyResponseBodyFun.apply(originalResponseBody); <span class="comment">// 修改后的响应体（密文）</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 4.将修改后的响应体用原响应对象的输出流来输出</span></span><br><span class="line"><span class="comment">         * 要保证响应类型和原请求中的一致，并重新设置响应体大小</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        originalResponse.setContentType(requestWrapper.getOrginalRequest().getContentType()); <span class="comment">// 与请求时保持一致</span></span><br><span class="line">        <span class="keyword">byte</span>[] responseData = modifyResponseBody.getBytes(responseWrapper.getCharacterEncoding()); <span class="comment">// 编码与实际响应一致</span></span><br><span class="line">        originalResponse.setContentLength(responseData.length);</span><br><span class="line">        <span class="meta">@Cleanup</span> ServletOutputStream out = originalResponse.getOutputStream();</span><br><span class="line">        out.write(responseData);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改请求体</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request           原请求</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> modifyRequestBody 修改后的请求体</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ModifyRequestBodyWrapper <span class="title">modifyRequestBody</span><span class="params">(ServletRequest request, String modifyRequestBody)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> modifyRequestBodyAndContentType(request, modifyRequestBody, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改请求体和请求类型</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request           原请求</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> modifyRequestBody 修改后的请求体</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> contentType       请求类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ModifyRequestBodyWrapper <span class="title">modifyRequestBodyAndContentType</span><span class="params">(ServletRequest request, String modifyRequestBody, String contentType)</span> </span>&#123;</span><br><span class="line">        log.debug(<span class="string">&quot;ContentType改为 -&gt; &#123;&#125;&quot;</span>, contentType);</span><br><span class="line">        HttpServletRequest orginalRequest = (HttpServletRequest) request;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ModifyRequestBodyWrapper(orginalRequest, modifyRequestBody, contentType);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用原响应对象来构建新的http响应包装对象</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response 原响应对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ModifyResponseBodyWrapper <span class="title">getHttpResponseWrapper</span><span class="params">(ServletResponse response)</span> </span>&#123;</span><br><span class="line">        HttpServletResponse originalResponse = (HttpServletResponse) response;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ModifyResponseBodyWrapper(originalResponse);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br><br></p>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redlock实现分布式锁</title>
      <link href="Redis/Redlock%E5%AE%9E%E7%8E%B0%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/"/>
      <url>Redis/Redlock%E5%AE%9E%E7%8E%B0%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>之前使用<code>redisson</code>的普通分布式锁方案不能解决对于集群或者哨兵模式下的主从切换场景导致锁丢失的问题。<code>redisson</code>还对<code>redlock</code>算法进行了封装，可以解决主从切换导致的锁丢失问题。</p><p>需要注意的是，只有充分了解普通分布式锁是如何实现的，才能更好的了解<code>redlock</code>分布式锁的实现，因为<code>redlock</code>分布式锁的实现完全基于普通分布式锁。</p><h2 id="1、Redlock算法"><a href="#1、Redlock算法" class="headerlink" title="1、Redlock算法"></a>1、Redlock算法</h2><p>在Redis的分布式环境中，我们假设有N个完全互相独立的Redis节点，在N个Redis实例上使用与在Redis单实例下相同方法获取锁和释放锁。（可以是N个单机节点，也可以是N个<code>sentinel</code>或者是N个<code>cluster</code>集群）</p><p>现在假设有5个Redis主节点(大于等于3的奇数个)，这样基本保证他们不会同时都宕掉，获取锁和释放锁的过程中，客户端会执行以下操作:</p><ul><li>获取当前Unix时间，以毫秒为单位。</li><li>依次尝试从5个实例，使用相同的key和具有唯一性的value（例如UUID）获取锁。当向Redis请求获取锁时，客户端应该设置一个网络连接和响应超时时间，这个超时时间应该小于锁的失效时间。例如你的锁自动失效时间为10秒，则超时时间应该在5-50毫秒之间。这样可以避免服务器端Redis已经挂掉的情况下，客户端还在死死地等待响应结果。如果服务器端没有在规定时间内响应，客户端应该尽快尝试去另外一个Redis实例请求获取锁。</li><li>客户端使用当前时间减去开始获取锁时间（步骤1记录的时间）就得到获取锁使用的时间。当且仅当从大多数（N/2+1，这里是3个节点）的Redis节点都取到锁，并且使用的时间小于锁失效时间时，锁才算获取成功。</li><li>如果取到了锁，key的真正有效时间等于有效时间减去获取锁所使用的时间（步骤3计算的结果）。</li><li>如果因为某些原因，获取锁失败（没有在至少N/2+1个Redis实例取到锁或者取锁时间已经超过了有效时间），客户端应该在所有的Redis实例上进行解锁（即便某些Redis实例根本就没有加锁成功，防止某些节点获取到锁但是客户端没有得到响应而导致接下来的一段时间不能被重新获取锁）。</li></ul><h2 id="2、Redlock示例"><a href="#2、Redlock示例" class="headerlink" title="2、Redlock示例"></a>2、Redlock示例</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDisLock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 配置多台互相独立的redis单机节点</span></span><br><span class="line">    Config config1 = <span class="keyword">new</span> Config();</span><br><span class="line">    config1.useSingleServer().setAddress(<span class="string">&quot;redis://172.16.122.104:6379&quot;</span>).setDatabase(<span class="number">0</span>);</span><br><span class="line">    Config config2 = <span class="keyword">new</span> Config();</span><br><span class="line">    config2.useSingleServer().setAddress(<span class="string">&quot;redis://172.16.122.104:6380&quot;</span>).setDatabase(<span class="number">0</span>);</span><br><span class="line">    Config config3 = <span class="keyword">new</span> Config();</span><br><span class="line">    config3.useSingleServer().setAddress(<span class="string">&quot;redis://172.16.122.104:6381&quot;</span>).setDatabase(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构建RedissonClient</span></span><br><span class="line">    RedissonClient redissonClient1 = Redisson.create(config1);</span><br><span class="line">    RedissonClient redissonClient2 = Redisson.create(config2);</span><br><span class="line">    RedissonClient redissonClient3 = Redisson.create(config3);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 5个线程并发去获取锁</span></span><br><span class="line">    IntStream.range(<span class="number">0</span>, <span class="number">5</span>).parallel().forEach(i -&gt; tryRedlock(redissonClient1, redissonClient2, redissonClient3));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SneakyThrows</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">tryRedlock</span><span class="params">(RedissonClient... redissonClients)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 构建Redlock对象</span></span><br><span class="line">    RLock[] rLock = <span class="keyword">new</span> RLock[redissonClients.length];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; rLock.length; i++) &#123;</span><br><span class="line">        rLock[i] = redissonClients[i].getLock(<span class="string">&quot;redlock&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    RLock redLock = <span class="keyword">new</span> RedissonRedLock(rLock);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 基于Redlock对象去操作，与redisson实现普通的分布式锁一样</span></span><br><span class="line">    <span class="comment">// 获取锁最多等待500ms，10s后key过期自动释放锁</span></span><br><span class="line">    <span class="keyword">boolean</span> tryLock = redLock.tryLock(<span class="number">500</span>, <span class="number">10000</span>, TimeUnit.MILLISECONDS);</span><br><span class="line">    <span class="keyword">if</span> (tryLock) &#123;</span><br><span class="line">        <span class="comment">// 获取到锁后开始执行对资源的操作</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            log.info(<span class="string">&quot;当前线程:[&#123;&#125;]获得锁&quot;</span>, Thread.currentThread().getName());</span><br><span class="line">            <span class="comment">// 操作资源...</span></span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            redLock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;当前线程:[&#123;&#125;]没有获得锁&quot;</span>, Thread.currentThread().getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>与<code>redisson</code>的普通分布式锁相比，只是会有多个<code>RedissonClient</code>（每个对应1个redis节点）构建出多个<code>RLock</code>对象，再由这多个<code>RLock</code>对象构建成<code>RedissonRedLock</code>对象。由这个对象去获取和释放锁的步骤与用<code>redisson</code>的普通分布式锁步骤一模一样。</p><p>因为<code>redlock</code>是基于多节点的redis来实现的，其中1个节点故障并不影响其它节点持有锁，所以<code>redlock</code>的可靠性来的更高。</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://mp.weixin.qq.com/s/8uhYult2h_YUHT7q7YCKYQ">Redisson实现Redis分布式锁的N种姿势</a></li><li><a href="https://zhuanlan.zhihu.com/p/101216704">基于Redis的分布式锁和Redlock算法</a></li></ul><p>关于Redis分布式锁的安全性问题，在分布式系统专家<code>Martin Kleppmann</code>和redis的作者<code>antirez</code>之间已经发生过一场争论，下面是神仙打架的文章地址：</p><ul><li><a href="https://mp.weixin.qq.com/s/JTsJCDuasgIJ0j95K8Ay8w">基于Redis的分布式锁到底安全吗（上）？</a></li><li><a href="https://mp.weixin.qq.com/s/4CUe7OpM6y1kQRK8TOC_qQ">基于Redis的分布式锁到底安全吗（下）？</a></li></ul><h2 id="代码地址"><a href="#代码地址" class="headerlink" title="代码地址"></a>代码地址</h2><ul><li>github：<a href="https://github.com/senlinmu1008/redis-action/tree/master/redlock">https://github.com/senlinmu1008/redis-action/tree/master/redlock</a></li><li>gitee：<a href="https://gitee.com/ppbin/redis-action/tree/master/redlock">https://gitee.com/ppbin/redis-action/tree/master/redlock</a><br><br><br></li></ul>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
            <tag> 分布式锁 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redisson实现分布式锁</title>
      <link href="Redis/Redisson%E5%AE%9E%E7%8E%B0%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/"/>
      <url>Redis/Redisson%E5%AE%9E%E7%8E%B0%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>之前一篇介绍了使用<code>setnx</code>命令实现分布式锁，但是使用这种方式不是那么严谨，需要我们自行做一些额外操作（<code>setnx + lua</code>方式）来保证锁的健壮性。<br><code>redisson</code>为此就做了一些封装，使得我们使用分布式锁时应用就可以简单许多。</p><h2 id="1、Maven依赖"><a href="#1、Maven依赖" class="headerlink" title="1、Maven依赖"></a>1、Maven依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.redisson<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>redisson-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.11.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2、redisson配置"><a href="#2、redisson配置" class="headerlink" title="2、redisson配置"></a>2、redisson配置</h2><h4 id="2-1、yml配置"><a href="#2-1、yml配置" class="headerlink" title="2.1、yml配置"></a>2.1、yml配置</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">30800</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">cluster:</span></span><br><span class="line">      <span class="attr">nodes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="number">148.70</span><span class="number">.153</span><span class="number">.63</span><span class="string">:9426</span></span><br><span class="line">        <span class="bullet">-</span> <span class="number">148.70</span><span class="number">.153</span><span class="number">.63</span><span class="string">:9427</span></span><br><span class="line">        <span class="bullet">-</span> <span class="number">148.70</span><span class="number">.153</span><span class="number">.63</span><span class="string">:9428</span></span><br><span class="line">        <span class="bullet">-</span> <span class="number">148.70</span><span class="number">.153</span><span class="number">.63</span><span class="string">:9429</span></span><br><span class="line">        <span class="bullet">-</span> <span class="number">148.70</span><span class="number">.153</span><span class="number">.63</span><span class="string">:9430</span></span><br><span class="line">        <span class="bullet">-</span> <span class="number">148.70</span><span class="number">.153</span><span class="number">.63</span><span class="string">:9431</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">password</span></span><br><span class="line">    <span class="attr">timeout:</span> <span class="number">2000</span></span><br></pre></td></tr></table></figure><p>这里沿用之前使用<code>RedisTemplate</code>时的配置方式。</p><h4 id="2-2、构建RedissonClient。"><a href="#2-2、构建RedissonClient。" class="headerlink" title="2.2、构建RedissonClient。"></a>2.2、构建<code>RedissonClient</code>。</h4><p>集群<code>Cluster</code>模式下配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DisLockConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisProperties redisProperties;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Cluster集群模式构建 RedissonClient</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RedissonClient <span class="title">clusterRedissonClient</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Config config = <span class="keyword">new</span> Config();</span><br><span class="line">        ClusterServersConfig clusterServersConfig = config.useClusterServers()</span><br><span class="line">                .setPassword(redisProperties.getPassword())</span><br><span class="line">                .setScanInterval(<span class="number">5000</span>);</span><br><span class="line"><span class="comment">//        config.setLockWatchdogTimeout(60 * 1000); // watch dog看门狗默认锁过期时间</span></span><br><span class="line">        <span class="comment">// 注册集群各个节点</span></span><br><span class="line">        <span class="keyword">for</span> (String node : redisProperties.getCluster().getNodes()) &#123;</span><br><span class="line">            clusterServersConfig.addNodeAddress(<span class="string">&quot;redis://&quot;</span>.concat(node));</span><br><span class="line">        &#125;</span><br><span class="line">        RedissonClient redissonClient = Redisson.create(config);</span><br><span class="line">        <span class="keyword">return</span> redissonClient;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在redis的不同模式下，构造<code>config</code>的方式是有区别的。</p><p><strong>单机模式</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> RedissonClient <span class="title">singleRedissonClient</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Config config = <span class="keyword">new</span> Config();</span><br><span class="line">    config.useSingleServer().setAddress(<span class="string">&quot;redis://ip:port&quot;</span>)</span><br><span class="line">            .setPassword(<span class="string">&quot;password&quot;</span>)</span><br><span class="line">            .setDatabase(<span class="number">0</span>);</span><br><span class="line">    RedissonClient redissonClient = Redisson.create(config);</span><br><span class="line">    <span class="keyword">return</span> redissonClient;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>哨兵模式<code>Sentinel</code></strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> RedissonClient <span class="title">sentinelRedissonClient</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Config config = <span class="keyword">new</span> Config();</span><br><span class="line">    config.useSentinelServers().addSentinelAddress(<span class="string">&quot;redis://ip1:port1&quot;</span>,</span><br><span class="line">            <span class="string">&quot;redis://ip2:port2&quot;</span>,</span><br><span class="line">            <span class="string">&quot;redis://ip3:port3&quot;</span>)</span><br><span class="line">            .setMasterName(<span class="string">&quot;mymaster&quot;</span>)</span><br><span class="line">            .setPassword(<span class="string">&quot;password&quot;</span>)</span><br><span class="line">            .setDatabase(<span class="number">0</span>);</span><br><span class="line">    RedissonClient redissonClient = Redisson.create(config);</span><br><span class="line">    <span class="keyword">return</span> redissonClient;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3、锁应用"><a href="#3、锁应用" class="headerlink" title="3、锁应用"></a>3、锁应用</h2><h3 id="3-1、锁自动过期"><a href="#3-1、锁自动过期" class="headerlink" title="3.1、锁自动过期"></a>3.1、锁自动过期</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedissonApplicationTests</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedissonClient redissonClient;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDisLock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 5个线程并发去获取锁</span></span><br><span class="line">        IntStream.range(<span class="number">0</span>, <span class="number">5</span>).parallel().forEach(i -&gt; tryLock());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SneakyThrows</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">tryLock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        RLock disLock = redissonClient.getLock(<span class="string">&quot;disLock&quot;</span>);</span><br><span class="line">        <span class="comment">// 获取锁最多等待500ms，10s后key过期自动释放锁</span></span><br><span class="line">        <span class="keyword">boolean</span> tryLock = disLock.tryLock(<span class="number">500</span>, <span class="number">10000</span>, TimeUnit.MILLISECONDS);</span><br><span class="line">        <span class="keyword">if</span> (tryLock) &#123;</span><br><span class="line">            <span class="comment">// 获取到锁后开始执行对资源的操作</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                log.info(<span class="string">&quot;当前线程:[&#123;&#125;]获得锁&quot;</span>, Thread.currentThread().getName());</span><br><span class="line">                <span class="comment">// 操作资源...</span></span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                disLock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            log.info(<span class="string">&quot;当前线程:[&#123;&#125;]没有获得锁&quot;</span>, Thread.currentThread().getName());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>获取<code>RLock</code>同时指定key。</li><li>尝试获取锁，同时指定获取锁的最大阻塞时间、锁过期时间。</li><li>获得锁的线程进行资源操作。</li><li>最后一定要释放锁。</li></ol><p><strong>结果</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">当前线程:[ForkJoinPool.commonPool-worker-11]获得锁</span><br><span class="line">当前线程:[main]获得锁</span><br><span class="line">当前线程:[ForkJoinPool.commonPool-worker-2]没有获得锁</span><br><span class="line">当前线程:[ForkJoinPool.commonPool-worker-13]没有获得锁</span><br><span class="line">当前线程:[ForkJoinPool.commonPool-worker-9]获得锁</span><br></pre></td></tr></table></figure><p>多次测试可以看出，至少会有1个线程可以获取到锁，其它线程能否获取到锁取决于之前的锁是否已经被释放了。</p><p><strong>查看redis</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:9426&gt; hgetall disLock</span><br><span class="line">af0cc1b2-7896-4eb4-ba2b-efe5bbcb403a:53</span><br><span class="line">1</span><br></pre></td></tr></table></figure><p>第一个元素：uuid:线程id。<br>第二个元素：当前线程持有锁的次数，即重入的次数。</p><h3 id="3-2、watch-dog看门狗机制"><a href="#3-2、watch-dog看门狗机制" class="headerlink" title="3.2、watch dog看门狗机制"></a>3.2、watch dog看门狗机制</h3><p>如果使用锁自动过期方式，假设客户端在拿到锁之后执行的业务时间比较长，在此期间锁被释放，其它线程依旧可以获取到锁，<code>redisson</code>提供一种<code>watch dog</code>看门狗的机制来解决这个问题。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedissonApplicationTests</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedissonClient redissonClient;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDisLock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 5个线程并发去获取锁</span></span><br><span class="line">        IntStream.range(<span class="number">0</span>, <span class="number">5</span>).parallel().forEach(i -&gt; lock());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SneakyThrows</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        RLock disLock = redissonClient.getLock(<span class="string">&quot;disLock&quot;</span>);</span><br><span class="line">        <span class="comment">// 获取锁最多等待500ms，这里不要显示指定锁过期时间</span></span><br><span class="line">        <span class="comment">// 默认30秒后自动过期，每隔30/3=10秒，看门狗（守护线程）会去续期锁，重设为30秒</span></span><br><span class="line">        <span class="keyword">boolean</span> tryLock = disLock.tryLock(<span class="number">500</span>, TimeUnit.MILLISECONDS);</span><br><span class="line">        <span class="keyword">if</span> (tryLock) &#123;</span><br><span class="line">            <span class="comment">// 获取到锁后开始执行对资源的操作</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                log.info(<span class="string">&quot;当前线程:[&#123;&#125;]获得锁&quot;</span>, Thread.currentThread().getName());</span><br><span class="line">                <span class="comment">// 操作资源...</span></span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                disLock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            log.info(<span class="string">&quot;当前线程:[&#123;&#125;]没有获得锁&quot;</span>, Thread.currentThread().getName());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看门狗机制如下图所示：</p><p><img src="https://zhaoxiaobin.coding.net/p/blog/d/zhaoxiaobin_img/git/raw/master/post/redis/15973333033351/16241732254891.jpg"></p><p>默认情况下，看门狗的过期时间是30s，每隔30/3=10秒，看门狗（守护线程）会去续期锁，重设为30秒。可以通过修改<code>Config.lockWatchdogTimeout</code>来另行指定看门狗的过期时间。</p><p><strong>看门狗机制真的万无一失吗</strong>？极端情况下：</p><ol><li>P：<code>Process Pause</code>，进程暂停（GC）<br>客户端获取到锁之后进入GC进而导致看门狗没有及时续期，最后锁过期。本质上还是锁过期时间设短导致的，一般只要远大于通常GC所暂停的时间就可以了，一般不太会发生。</li></ol><ul><li>C：<code>Clock Drift</code>，时钟漂移<br>redis服务端所在的服务器时钟发生较大的向前跳跃，导致锁提前过期被释放。这个一般也不会发生，除非人为的进行暴力运维。</li></ul><h2 id="4、锁的重入"><a href="#4、锁的重入" class="headerlink" title="4、锁的重入"></a>4、锁的重入</h2><p><code>redisson</code>支持锁的可重入，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="meta">@SneakyThrows</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testTryLockAgain</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    RLock disLock = redissonClient.getLock(<span class="string">&quot;disLock&quot;</span>);</span><br><span class="line">    <span class="comment">// 获取锁最多等待500ms，10s后key过期自动释放锁</span></span><br><span class="line">    <span class="keyword">boolean</span> tryLock = disLock.tryLock(<span class="number">500</span>, <span class="number">10000</span>, TimeUnit.MILLISECONDS);</span><br><span class="line">    <span class="keyword">if</span> (tryLock) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            log.info(<span class="string">&quot;当前线程:[&#123;&#125;]获得锁,持有锁次数:[&#123;&#125;]&quot;</span>, Thread.currentThread().getName(), disLock.getHoldCount());</span><br><span class="line">            <span class="comment">// 操作资源...</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 测试可重入，锁过期时间会重新计时</span></span><br><span class="line">            <span class="keyword">boolean</span> tryLockAgain = disLock.tryLock(<span class="number">500</span>, <span class="number">10000</span>, TimeUnit.MILLISECONDS);</span><br><span class="line">            log.info(<span class="string">&quot;当前线程:[&#123;&#125;]是否再次拿到锁:[&#123;&#125;],持有锁次数:[&#123;&#125;]&quot;</span>, Thread.currentThread().getName(), tryLockAgain, disLock.getHoldCount());</span><br><span class="line">            <span class="comment">// 再次操作资源...</span></span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            disLock.unlock();</span><br><span class="line">            log.info(<span class="string">&quot;当前线程是否持有锁:[&#123;&#125;],持有锁次数:[&#123;&#125;]&quot;</span>, disLock.isHeldByCurrentThread(), disLock.getHoldCount());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;当前线程:[&#123;&#125;]没有获得锁&quot;</span>, Thread.currentThread().getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>结果</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">当前线程:[main]获得锁,持有锁次数:[1]</span><br><span class="line">当前线程:[main]是否再次拿到锁:[true],持有锁次数:[2]</span><br><span class="line">当前线程是否持有锁:[true],持有锁次数:[1]</span><br></pre></td></tr></table></figure><p>经过测试可以看到，已经拿到锁的线程可以重复拿到锁，并且持有锁的次数会+1；<br>但是在释放锁的时候，发现只释放了一次，并没有完全释放锁。这会导致其他线程不能及时地获取到锁。</p><p>通过查看分析<code>unlock()</code>源码就可以印证测试的结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> RFuture&lt;Boolean&gt; <span class="title">unlockInnerAsync</span><span class="params">(<span class="keyword">long</span> threadId)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> commandExecutor.evalWriteAsync(getName(), LongCodec.INSTANCE, RedisCommands.EVAL_BOOLEAN,</span><br><span class="line">            <span class="comment">// 如果分布式锁存在，但是value不匹配，表示锁已经被占用，那么直接返回</span></span><br><span class="line">            <span class="string">&quot;if (redis.call(&#x27;hexists&#x27;, KEYS[1], ARGV[3]) == 0) then &quot;</span> +</span><br><span class="line">                <span class="string">&quot;return nil;&quot;</span> +</span><br><span class="line">            <span class="string">&quot;end; &quot;</span> +</span><br><span class="line">            <span class="comment">// 如果就是当前线程占有分布式锁，那么将重入次数减1</span></span><br><span class="line">            <span class="string">&quot;local counter = redis.call(&#x27;hincrby&#x27;, KEYS[1], ARGV[3], -1); &quot;</span> +</span><br><span class="line">            <span class="comment">// 重入次数减1后的值如果大于0，表示分布式锁有重入过，那么只设置失效时间，还不能删除</span></span><br><span class="line">            <span class="string">&quot;if (counter &gt; 0) then &quot;</span> +</span><br><span class="line">                <span class="string">&quot;redis.call(&#x27;pexpire&#x27;, KEYS[1], ARGV[2]); &quot;</span> +</span><br><span class="line">                <span class="string">&quot;return 0; &quot;</span> +</span><br><span class="line">            <span class="string">&quot;else &quot;</span> +</span><br><span class="line">                <span class="comment">// 重入次数减1后的值如果为0，表示分布式锁只获取过1次，那么删除这个KEY，并发布解锁消息</span></span><br><span class="line">                <span class="string">&quot;redis.call(&#x27;del&#x27;, KEYS[1]); &quot;</span> +</span><br><span class="line">                <span class="string">&quot;redis.call(&#x27;publish&#x27;, KEYS[2], ARGV[1]); &quot;</span> +</span><br><span class="line">                <span class="string">&quot;return 1; &quot;</span>+</span><br><span class="line">            <span class="string">&quot;end; &quot;</span> +</span><br><span class="line">            <span class="string">&quot;return nil;&quot;</span>,</span><br><span class="line">            Arrays.&lt;Object&gt;asList(getName(), getChannelName()), LockPubSub.UNLOCK_MESSAGE, internalLockLeaseTime, getLockName(threadId));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>改进</strong></p><ol><li>每次重入锁后都执行一次释放锁的操作。</li><li>或者通过<code>forceUnlock()</code>函数强制释放当前线程持有的锁，只需要在最后释放一次即可。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">finally</span> &#123;</span><br><span class="line">    disLock.forceUnlock();</span><br><span class="line">    log.info(<span class="string">&quot;当前线程是否持有锁:[&#123;&#125;],持有锁次数:[&#123;&#125;]&quot;</span>, disLock.isHeldByCurrentThread(), disLock.getHoldCount());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5、总结"><a href="#5、总结" class="headerlink" title="5、总结"></a>5、总结</h2><p>之前使用<code>setnx</code>命令实现分布式锁会有一些问题，比如<strong>不可重入、非阻塞、误解别的线程的锁、未执行完锁就失效、主从切换锁丢失</strong>；其中一些问题我们可以增加代码来解决，但是同样会增加业务代码的复杂度；</p><p><code>redisson</code>则支持<strong>锁的可重入和等待获取锁，并在解锁时判断是否是当前线程持有的锁，以及有看门狗机制防止锁过期程序还未执行完的问题</strong>，对于这些功能<code>redisson</code>已经做好了封装，简化了业务代码。</p><p>但是依旧会有1个问题，主从切换导致的锁丢失，场景如下：</p><ul><li><p>在Redis的master节点上拿到了锁；</p></li><li><p>但是这个加锁的key还没有同步到slave节点；</p></li><li><p>master故障，发生故障转移，slave节点升级为master节点；</p></li><li><p>导致锁丢失。</p><p>对于这个问题就可以使用<code>Redlock</code>机制来解决，接下来的文章会介绍到<code>Redlock</code>。</p></li></ul><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://mp.weixin.qq.com/s/8uhYult2h_YUHT7q7YCKYQ">Redisson实现Redis分布式锁的N种姿势</a></li><li><a href="https://www.cnblogs.com/keeya/p/14332131.html">Redisson 分布式锁实战与 watch dog 机制解读</a></li></ul><h2 id="代码地址"><a href="#代码地址" class="headerlink" title="代码地址"></a>代码地址</h2><ul><li>github：<a href="https://github.com/senlinmu1008/redis-action/tree/master/redisson">https://github.com/senlinmu1008/redis-action/tree/master/redisson</a></li><li>gitee：<a href="https://gitee.com/ppbin/redis-action/tree/master/redisson">https://gitee.com/ppbin/redis-action/tree/master/redisson</a><br><br><br></li></ul>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
            <tag> 分布式锁 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis的Setnx命令实现分布式锁</title>
      <link href="Redis/Redis%E7%9A%84Setnx%E5%91%BD%E4%BB%A4%E5%AE%9E%E7%8E%B0%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/"/>
      <url>Redis/Redis%E7%9A%84Setnx%E5%91%BD%E4%BB%A4%E5%AE%9E%E7%8E%B0%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>首先，分布式锁和我们平常讲到的锁原理基本一样，目的就是确保在多个线程并发时，只有一个线程在同一刻操作这个业务或者说方法、变量。</p><p>在一个进程中，也就是一个jvm或者说应用中，我们很容易去处理控制，在<code>java.util</code>并发包中已经为我们提供了这些方法去加锁，比如<code>synchronized</code>关键字或者<code>Lock</code>锁，都可以处理。</p><p>但是如果在分布式环境下，要保证多个线程同时只有1个能访问某个资源，就需要用到分布式锁。这里我们将介绍用Redis的<code>setnx</code>命令来实现分布式锁。</p><p>其实目前通常所说的<code>setnx</code>命令，并非单指redis的<code>setnx key value</code>这条命令，这条命令可能会在后期redis版本中删除。</p><p>一般代指redis中对<code>set</code>命令加上<code>nx</code>参数进行使用，<code>set</code>这个命令，目前已经支持这么多参数可选：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SET key value [EX seconds] [PX milliseconds] [NX|XX]</span><br></pre></td></tr></table></figure><p>从 Redis 2.6.12 版本开始， SET 命令的行为可以通过一系列参数来修改：</p><ul><li>EX second ：设置键的过期时间为 second 秒。 SET key value EX second 效果等同于 SETEX key second value 。</li><li>PX millisecond ：设置键的过期时间为 millisecond 毫秒。 SET key value PX millisecond 效果等同于 PSETEX key millisecond value 。</li><li>NX ：只在键不存在时，才对键进行设置操作。 SET key value NX 效果等同于 SETNX key value 。</li><li>XX ：只在键已经存在时，才对键进行设置操作。</li></ul><h2 id="1、示例"><a href="#1、示例" class="headerlink" title="1、示例"></a>1、示例</h2><p>注入bean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ValueOperations&lt;String, String&gt; <span class="title">stringOperations</span><span class="params">(StringRedisTemplate redisTemplate)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> redisTemplate.opsForValue();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SetnxTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ValueOperations&lt;String, String&gt; stringOperations;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate&lt;String, Object&gt; redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSetnx</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 同时并发5个线程竞争去获取锁</span></span><br><span class="line">        IntStream.range(<span class="number">0</span>, <span class="number">5</span>).parallel().forEach(i -&gt; &#123;</span><br><span class="line">            String uuid = IdUtil.randomUUID();</span><br><span class="line">            Boolean lock = stringOperations.setIfAbsent(<span class="string">&quot;lock&quot;</span>, uuid, <span class="number">10</span>, TimeUnit.SECONDS);</span><br><span class="line">            log.info(<span class="string">&quot;是否获取锁:[&#123;&#125;]&quot;</span>, lock);</span><br><span class="line">            <span class="keyword">if</span> (!lock) <span class="keyword">return</span>;</span><br><span class="line">            <span class="comment">// 获得锁后的操作</span></span><br><span class="line">            <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 最后释放锁</span></span><br><span class="line">            redisTemplate.delete(<span class="string">&quot;lock&quot;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里同时启动5个线程并发往redis中存储<code>lock</code>这个key（key可以自定义，但需要一致），同时设置10秒的过期时间。<br><code>setIfAbsent</code>这个函数实现的功能与<code>setnx</code>命令一样，代表如果没有这个key则set成功获取到锁，否则set失败没有获取到锁。<br>获得锁后进行资源的操作，最后释放锁。</p><p><strong>执行效果</strong>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">2020-08-13 22:23:48,200 [INFO] [ForkJoinPool.commonPool-worker-9] [net.zhaoxiaobin.redistemplate.SetnxTest:31] [] 是否获取锁:[true]</span><br><span class="line">2020-08-13 22:23:48,278 [INFO] [ForkJoinPool.commonPool-worker-4] [net.zhaoxiaobin.redistemplate.SetnxTest:31] [] 是否获取锁:[false]</span><br><span class="line">2020-08-13 22:23:48,278 [INFO] [ForkJoinPool.commonPool-worker-2] [net.zhaoxiaobin.redistemplate.SetnxTest:31] [] 是否获取锁:[false]</span><br><span class="line">2020-08-13 22:23:48,278 [INFO] [main] [net.zhaoxiaobin.redistemplate.SetnxTest:31] [] 是否获取锁:[false]</span><br><span class="line">2020-08-13 22:23:48,279 [INFO] [ForkJoinPool.commonPool-worker-11] [net.zhaoxiaobin.redistemplate.SetnxTest:31] [] 是否获取锁:[false]</span><br></pre></td></tr></table></figure><p>可以看到同时只有1个线程能够获取到锁。</p><h2 id="2、总结"><a href="#2、总结" class="headerlink" title="2、总结"></a>2、总结</h2><p>使用<code>setnx</code>命令方式虽然操作比较简单方便，但是会有如下问题：</p><blockquote><p>1.当前线程如果获得了锁就不能再重入了（在锁释放前不能再获得锁）。</p></blockquote><p> 可以在再次获取锁时，如果锁被占用就get值，判断值是否是当前线程存的随机值，如果是则再次执行<code>set</code>命令重新上锁；当然为了保证原子性这些操作都要用<code>lua</code>脚本来执行。</p><blockquote><p>2.获取锁方式非阻塞，其它线程没有获取到锁就只能失败返回了，只适合于个别业务场景。</p></blockquote><p> 可以使用<code>while</code>循环重复执行<code>setnx</code>命令，并设置一个超时时间退出循环。</p><blockquote><p>3.锁过期时间如果设置太短或者拿到锁的线程执行完方法耗时特别长，方法没等执行完，锁就自动释放了，然后别的线程也能拿到锁，导致不安全的操作。类似的还有几种情况：</p></blockquote><blockquote><p>因为网络延迟，等拿到锁时，锁已经过期了，可以设置超时时间远小于锁自动过期时间来解决。</p></blockquote><blockquote><p>程序拿到锁后进入GC导致程序暂定，恢复后锁过期了。</p></blockquote><blockquote><p>Redis所在的机器发生了时钟漂移（Clock Drift），时间向前跳跃导致锁提前过期。</p></blockquote><p>可以尽量把锁自动过期的时间设的冗余一些。但也不能彻底解决。</p><blockquote><p>4.锁自动过期后，第二个线程拿到锁开始操作，第一个拿到锁的等执行完回手就把别人的锁给删了，那么就会产生并发安全问题。</p></blockquote><p> 可以在删除锁的时候先get值，判断值是否是当前线程存的随机值，只有相同才执行删锁的操作；当然也要使用<code>lua</code>脚本执行来保证原子性。</p><blockquote><p>5.在<code>Cluster</code>集群模式下，如果redis出现故障，进行主从切换，这个时候主机的锁如果还未同步到从机上，就会导致其他线程同样也可以获取到锁。</p></blockquote><p><strong>分布式锁需要满足的特性</strong></p><ul><li>互斥性。</li><li>锁超时。</li><li>支持阻塞和非阻塞。</li><li>可重入性。</li><li>高可用。</li></ul><p>综上：使用<code>setnx</code>命令来实现分布式锁并不是一个很严谨的方案，如果是Java技术栈，我们可以使用<code>Redisson</code>库来解决以上问题，接下来的文章会介绍如何使用。</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://zhuanlan.zhihu.com/p/51042458">阿里P8架构师谈（分布式系列）：分布式锁的3种实现（数据库、缓存、Zookeeper)</a><br><br><br></li></ul>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
            <tag> 分布式锁 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Redis实现分布式Session</title>
      <link href="Redis/%E4%BD%BF%E7%94%A8Redis%E5%AE%9E%E7%8E%B0%E5%88%86%E5%B8%83%E5%BC%8FSession/"/>
      <url>Redis/%E4%BD%BF%E7%94%A8Redis%E5%AE%9E%E7%8E%B0%E5%88%86%E5%B8%83%E5%BC%8FSession/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>在分布式环境中，如果用户在A服务器登录，在下一步操作时如果转发到B服务器，如果这时候没有做Session共享则会导致用户需要再次登录。我们可以使用Redis来缓存Session，然后共享给集群来解决这个问题。</p><h2 id="1、Maven依赖"><a href="#1、Maven依赖" class="headerlink" title="1、Maven依赖"></a>1、Maven依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.session<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-session-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2、应用配置redis"><a href="#2、应用配置redis" class="headerlink" title="2、应用配置redis"></a>2、应用配置redis</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">30600</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">redis-session</span></span><br><span class="line">  <span class="comment"># redis配置</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">cluster:</span></span><br><span class="line">      <span class="attr">nodes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="number">148.70</span><span class="number">.153</span><span class="number">.63</span><span class="string">:9426</span></span><br><span class="line">        <span class="bullet">-</span> <span class="number">148.70</span><span class="number">.153</span><span class="number">.63</span><span class="string">:9427</span></span><br><span class="line">        <span class="bullet">-</span> <span class="number">148.70</span><span class="number">.153</span><span class="number">.63</span><span class="string">:9428</span></span><br><span class="line">        <span class="bullet">-</span> <span class="number">148.70</span><span class="number">.153</span><span class="number">.63</span><span class="string">:9429</span></span><br><span class="line">        <span class="bullet">-</span> <span class="number">148.70</span><span class="number">.153</span><span class="number">.63</span><span class="string">:9430</span></span><br><span class="line">        <span class="bullet">-</span> <span class="number">148.70</span><span class="number">.153</span><span class="number">.63</span><span class="string">:9431</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">password</span></span><br><span class="line">    <span class="attr">timeout:</span> <span class="number">60000</span></span><br></pre></td></tr></table></figure><p>这个时候，就已经完成了Session的分布式共享的配置，我们不需要在应用上做任何操作。因为Spring对于Session的缓存和获取已经做了封装，所以对于应用是无感的。我们只需要在应用层获取Session即可。</p><h2 id="3、测试验证"><a href="#3、测试验证" class="headerlink" title="3、测试验证"></a>3、测试验证</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SessionController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/getSessionId&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSessionId</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">        String sessionId = request.getSession().getId();</span><br><span class="line">        <span class="keyword">return</span> sessionId;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><p>在实际应用中，是由<code>Nginx</code>这种反向代理服务器转发给后面的服务器，客户端访问的地址始终是一样的。这里为了方便演示，分别用2个端口<code>30600</code>、<code>30700</code>启动服务，代表2台不同的服务器。</p></li><li><p>打开浏览器分别访问：<br><code>http://127.0.0.1:30600/getSessionId</code><br><code>http://127.0.0.1:30700/getSessionId</code><br>可以看到获取的SessionId是一样的，说明2个服务已经共享了Session。</p></li></ol><h2 id="4、指定分布式Session过期时间"><a href="#4、指定分布式Session过期时间" class="headerlink" title="4、指定分布式Session过期时间"></a>4、指定分布式Session过期时间</h2><p>原<code>server.session.timeout </code>配置Session过期时间不再生效。<br>需要通过在启动类添加注解<code>@EnableRedisHttpSession</code>来指定Session过期时间。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableRedisHttpSession(maxInactiveIntervalInSeconds = 3600)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisSessionApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(RedisSessionApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="代码地址"><a href="#代码地址" class="headerlink" title="代码地址"></a>代码地址</h2><ul><li>github：<a href="https://github.com/senlinmu1008/redis-action/tree/master/redis-session">https://github.com/senlinmu1008/redis-action/tree/master/redis-session</a></li><li>gitee：<a href="https://gitee.com/ppbin/redis-action/tree/master/redis-session">https://gitee.com/ppbin/redis-action/tree/master/redis-session</a><br><br><br></li></ul>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringCache使用Redis来缓存热点数据</title>
      <link href="Redis/SpringCache%E4%BD%BF%E7%94%A8Redis%E6%9D%A5%E7%BC%93%E5%AD%98%E7%83%AD%E7%82%B9%E6%95%B0%E6%8D%AE/"/>
      <url>Redis/SpringCache%E4%BD%BF%E7%94%A8Redis%E6%9D%A5%E7%BC%93%E5%AD%98%E7%83%AD%E7%82%B9%E6%95%B0%E6%8D%AE/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>在很多应用场景中通常是获取前后相同或更新不频繁的数据，比如访问产品信息数据、网页数据。如果没有使用缓存，则访问每次需要重复请求数据库，这会导致大部分时间都耗费在数据库查询和方法调用上，因为数据库进行I/O操作非常耗费时间，这时就可以利用Spring Cache来解决。</p><p>Spring Cache 是Spring提供的一整套缓存解决方案。它本身并不提供缓存实现，而是提供统一的接口和代码规范、配置、注解等，以便整合各种Cache方案，使用户不用关心Cache的细节。</p><p>Spring Cache作用在方法上。当调用一个缓存方法时，会把方法参数和返回结果作为一个“键值对”（key/value）存放在缓存中，下次用同样的参数来调用该方法时将不再执行该方法，而是直接从缓存中获取结果进行返回。所以在使用Spring Cache时，要保证在缓存的方法和方法参数相同时返回相同的结果。</p><h2 id="1、声明式注解"><a href="#1、声明式注解" class="headerlink" title="1、声明式注解"></a>1、声明式注解</h2><table><thead><tr><th align="center">注解</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">@EnableCaching</td><td align="center">启动类声明，用来开启缓存</td></tr><tr><td align="center">@Cacheable</td><td align="center">可以作用在类和方法上，以键值对的方式缓存类或方法的返回值</td></tr><tr><td align="center">@CachePut</td><td align="center">方法被调用，然后结果被缓存</td></tr><tr><td align="center">@CacheEvict</td><td align="center">清空缓存</td></tr><tr><td align="center">@Caching</td><td align="center">用来组合多个注解标签</td></tr></tbody></table><ul><li><code>@Cacheable</code>会先查询是否已有缓存，没有则再执行方法，将返回值缓存起来，key可以有默认策略和自定义策略。用于查询热点数据。</li><li><code>@CachePut</code>每次都会执行方法，并将方法的返回值缓存。用于更新数据。</li></ul><h2 id="2、Maven依赖"><a href="#2、Maven依赖" class="headerlink" title="2、Maven依赖"></a>2、Maven依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3、应用缓存"><a href="#3、应用缓存" class="headerlink" title="3、应用缓存"></a>3、应用缓存</h2><h4 id="3-1、Redis配置类"><a href="#3-1、Redis配置类" class="headerlink" title="3.1、Redis配置类"></a>3.1、Redis配置类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableCaching</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisConfig</span> <span class="keyword">extends</span> <span class="title">CachingConfigurerSupport</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 缓存管理器，适合2.x版本</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> redisConnectionFactory</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CacheManager <span class="title">cacheManager</span><span class="params">(RedisConnectionFactory redisConnectionFactory)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 对于指定的cacheNames设置缓存的过期时长</span></span><br><span class="line">        Map&lt;String, RedisCacheConfiguration&gt; cacheConfigMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        cacheConfigMap.put(<span class="string">&quot;users&quot;</span>, <span class="keyword">this</span>.getCacheConfigurationWithTtl(<span class="number">2</span> * <span class="number">60</span> * <span class="number">60</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 构建CacheManager对象，指定的cacheNames过期时长为2小时，其它默认为1小时</span></span><br><span class="line">        <span class="keyword">return</span> RedisCacheManager.builder(redisConnectionFactory)</span><br><span class="line">                .withInitialCacheConfigurations(cacheConfigMap)</span><br><span class="line">                .cacheDefaults(<span class="keyword">this</span>.getCacheConfigurationWithTtl(<span class="number">1</span> * <span class="number">60</span> * <span class="number">60</span>))</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置缓存过期时长</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> seconds 过期时长</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> RedisCacheConfiguration <span class="title">getCacheConfigurationWithTtl</span><span class="params">(<span class="keyword">long</span> seconds)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 序列化设置</span></span><br><span class="line">        Jackson2JsonRedisSerializer jacksonSeial = <span class="keyword">new</span> Jackson2JsonRedisSerializer(Object.class);</span><br><span class="line">        ObjectMapper om = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">        <span class="comment">// 指定要序列化的域，field,get和set,以及修饰符范围，ANY是都有包括private和public</span></span><br><span class="line">        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</span><br><span class="line">        <span class="comment">// 指定序列化输入的类型，类必须是非final修饰的，final修饰的类，比如String,Integer等会抛出异常</span></span><br><span class="line">        om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL); <span class="comment">// 2.1.x</span></span><br><span class="line"><span class="comment">//        om.activateDefaultTyping(LaissezFaireSubTypeValidator.instance, ObjectMapper.DefaultTyping.NON_FINAL); // 2.2.x</span></span><br><span class="line">        jacksonSeial.setObjectMapper(om);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 基本配置</span></span><br><span class="line">        RedisCacheConfiguration redisCacheConfiguration = RedisCacheConfiguration</span><br><span class="line">                .defaultCacheConfig()</span><br><span class="line">                .serializeKeysWith(RedisSerializationContext.SerializationPair.fromSerializer(<span class="keyword">new</span> StringRedisSerializer()))</span><br><span class="line">                .serializeValuesWith(RedisSerializationContext.SerializationPair.fromSerializer(jacksonSeial))</span><br><span class="line">                <span class="comment">// 不缓存null</span></span><br><span class="line">                .disableCachingNullValues()</span><br><span class="line">                <span class="comment">// 缓存数据保存时长</span></span><br><span class="line">                .entryTtl(Duration.ofSeconds(seconds));</span><br><span class="line">        <span class="keyword">return</span> redisCacheConfiguration;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里主要配置了序列化方式和对于不同缓存的过期时长设置。</p><h4 id="3-2、数据层"><a href="#3-2、数据层" class="headerlink" title="3.2、数据层"></a>3.2、数据层</h4><p>建表语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="keyword">user</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">user</span> (</span><br><span class="line">    <span class="keyword">id</span> <span class="built_in">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">    <span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">64</span>) <span class="keyword">COMMENT</span> <span class="string">&#x27;姓名&#x27;</span>,</span><br><span class="line">    age <span class="built_in">int</span>(<span class="number">4</span>) <span class="keyword">COMMENT</span> <span class="string">&#x27;年龄&#x27;</span>,</span><br><span class="line">    PRIMARY <span class="keyword">KEY</span> (<span class="keyword">id</span>)</span><br><span class="line">)<span class="keyword">COMMENT</span> = <span class="string">&#x27;用户表&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">user</span> <span class="keyword">values</span> (<span class="number">1</span>, <span class="string">&#x27;赵晓斌&#x27;</span>, <span class="number">28</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">user</span> <span class="keyword">values</span> (<span class="number">2</span>, <span class="string">&#x27;李白&#x27;</span>, <span class="number">22</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">user</span> <span class="keyword">values</span> (<span class="number">3</span>, <span class="string">&#x27;宋老三&#x27;</span>, <span class="number">30</span>);</span><br></pre></td></tr></table></figure><p>实体类，一定要实现<code>Serializable</code>接口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">5485617646232613710L</span>;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> == o) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span> || getClass() != o.getClass()) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        User user = (User) o;</span><br><span class="line">        <span class="keyword">return</span> age == user.age &amp;&amp;</span><br><span class="line">                Objects.equals(id, user.id) &amp;&amp;</span><br><span class="line">                Objects.equals(name, user.name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Objects.hash(id, name, age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>缓存层接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserCacheService</span> </span>&#123;</span><br><span class="line">    <span class="function">User <span class="title">findById</span><span class="params">(Long id)</span></span>;</span><br><span class="line">    <span class="function">User <span class="title">updateUserById</span><span class="params">(User user)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">deleteById</span><span class="params">(Long id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里采用Mybatis来操作数据库，具体操作和配置不在这里展开。</p><h4 id="3-3、缓存查询数据"><a href="#3-3、缓存查询数据" class="headerlink" title="3.3、缓存查询数据"></a>3.3、缓存查询数据</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@CacheConfig(cacheNames = &quot;users&quot;)</span> <span class="comment">// 缓存名称，也是key前缀</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserCacheServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserCacheService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Cacheable(key = &quot;#p0&quot;)</span> <span class="comment">// 取第一个参数作为key的一部分，比如users::1</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">findById</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userDao.findById(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据key值查询缓存，如果没有则执行方法查询数据库，将结果缓存起来，下次同样的key查询时直接从缓存取值返回，不再执行方法。</p><ul><li><code>@CacheConfig</code>注解指定缓存key的前缀为<code>users</code>。</li><li><code>@Cacheable</code>等注解指定key时，使用SpEL表达式：<ul><li><code>#p0</code>：表示取第一个参数。</li><li><code>#p0.id</code>：表示取第一个参数的id属性。</li><li><code>#id</code>：表示取参数id。</li></ul></li></ul><h4 id="3-4、更新缓存数据"><a href="#3-4、更新缓存数据" class="headerlink" title="3.4、更新缓存数据"></a>3.4、更新缓存数据</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@CachePut(key = &quot;#p0.id&quot;)</span> <span class="comment">// 访问bean属性</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">updateUserById</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">    userDao.updateUserById(user);</span><br><span class="line">    <span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>每次更新完数据库后，同步更新缓存中的数据。需要保持和缓存时的key相同。</p><h4 id="3-5、删除缓存数据"><a href="#3-5、删除缓存数据" class="headerlink" title="3.5、删除缓存数据"></a>3.5、删除缓存数据</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@CacheEvict(key = &quot;#id&quot;)</span> <span class="comment">// 可以用形参名表示key，allEntries = true 则代表 users:: 开头的键全部删除</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteById</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">    userDao.deleteById(id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在删除完数据库的数据后，同步删除缓存中的数据。也是需要保持和缓存时的key相同。<br>如果需要批量删除某一类key，只需要把<code>@CacheEvict</code>注解中的<code>allEntries</code>属性设为<code>true</code>，那就会清空所有缓存数据（仅限于同一个<code>cacheNames</code>也就是<code>@CacheConfig</code>注解指定的key前缀）。</p><h2 id="4、测试验证"><a href="#4、测试验证" class="headerlink" title="4、测试验证"></a>4、测试验证</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CacheController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserCacheService userCacheService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/findById&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">findById</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userCacheService.findById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/updateUserById&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateUserById</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        userCacheService.updateUserById(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/deleteById&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteById</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        userCacheService.deleteById(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><p>在第一次查询时，可以看到有查询数据库的日志输出。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Creating a new SqlSession</span><br><span class="line">SqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@608e7bd3] was not registered for synchronization because synchronization is not active</span><br><span class="line">JDBC Connection [com.mysql.cj.jdbc.ConnectionImpl@4945f51a] will not be managed by Spring</span><br><span class="line">==&gt;  Preparing: select id, name, age from user where id = ? </span><br><span class="line">==&gt; Parameters: 3(Long)</span><br><span class="line">&lt;==    Columns: id, name, age</span><br><span class="line">&lt;==        Row: 3, ares, 33</span><br><span class="line">&lt;==      Total: 1</span><br><span class="line">Closing non transactional SqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@608e7bd3]</span><br></pre></td></tr></table></figure></li><li><p>查询Redis，可以看到已经有数据缓存了，过期时间就是前面配置中设置的2小时。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:9427&gt; keys *</span><br><span class="line">users::3</span><br><span class="line">127.0.0.1:9427&gt; get users::3</span><br><span class="line">[&quot;net.zhaoxiaobin.cache.domain.User&quot;,&#123;&quot;id&quot;:3,&quot;name&quot;:&quot;ares&quot;,&quot;age&quot;:22&#125;]</span><br><span class="line">127.0.0.1:9427&gt; ttl users::3</span><br><span class="line">7185</span><br></pre></td></tr></table></figure></li><li><p>再次查询，发现依旧可以得到相同结果，但没有查询数据库的日志输出，说明缓存生效了。</p></li><li><p>修改字段更新数据库，然后再查询，可以看到缓存数据也被更新。</p></li><li><p>删除一条数据后，再根据id查询就得到空，说明缓存中的这条数据也已被删除了。</p></li></ol><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://blog.csdn.net/qq_41911570/article/details/107036486">Spring Boot之使用SpringCache和Redis</a></li><li><a href="https://www.jianshu.com/p/c997e2b714b5">Spring cache整合Redis，并给它一个过期时间！</a></li></ul><h2 id="代码地址"><a href="#代码地址" class="headerlink" title="代码地址"></a>代码地址</h2><ul><li>github：<a href="https://github.com/senlinmu1008/redis-action/tree/master/rediscache">https://github.com/senlinmu1008/redis-action/tree/master/rediscache</a></li><li>gitee：<a href="https://gitee.com/ppbin/redis-action/tree/master/rediscache">https://gitee.com/ppbin/redis-action/tree/master/rediscache</a><br><br><br></li></ul>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IDEA常用插件</title>
      <link href="Java%E5%BC%80%E5%8F%91/%E5%85%B6%E5%AE%83/IDEA%E5%B8%B8%E7%94%A8%E6%8F%92%E4%BB%B6/"/>
      <url>Java%E5%BC%80%E5%8F%91/%E5%85%B6%E5%AE%83/IDEA%E5%B8%B8%E7%94%A8%E6%8F%92%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>列举IDEA中常用的开发插件。可以在IDEA中自行选择下载安装。<br><img src="https://zhaoxiaobin.coding.net/p/blog/d/zhaoxiaobin_img/git/raw/master/post/other/other-5-1.jpg" alt="-w1109"></p><h2 id="1、Statistic"><a href="#1、Statistic" class="headerlink" title="1、Statistic"></a>1、Statistic</h2><p>用于统计工程代码行数。总行数、注释行数、空行数都会统计列举出来。</p><p><img src="https://zhaoxiaobin.coding.net/p/blog/d/zhaoxiaobin_img/git/raw/master/post/other/other-5-2.jpg" alt="-w1635"></p><h2 id="2、Maven-Helper"><a href="#2、Maven-Helper" class="headerlink" title="2、Maven Helper"></a>2、Maven Helper</h2><p>可以更直观地查看项目中的所有Maven依赖，帮助我们更好地排除依赖的冲突。<br>支持列表和树形结构展示依赖关系，同时支持搜索功能、一键排除冲突依赖。</p><p><img src="https://zhaoxiaobin.coding.net/p/blog/d/zhaoxiaobin_img/git/raw/master/post/other/other-5-3.jpg" alt="-w1282"></p><h2 id="3、Lombok"><a href="#3、Lombok" class="headerlink" title="3、Lombok"></a>3、Lombok</h2><p>编译器插件，通过一些注解比如<code>@Data</code>来修改字节码文件，自动生成<code>get/set</code>方法，使源码更加地简洁。</p><p><img src="https://zhaoxiaobin.coding.net/p/blog/d/zhaoxiaobin_img/git/raw/master/post/other/other-5-4.jpg" alt="-w1109"></p><h2 id="4、Alibaba-Cloud-Toolkit"><a href="#4、Alibaba-Cloud-Toolkit" class="headerlink" title="4、Alibaba Cloud Toolkit"></a>4、Alibaba Cloud Toolkit</h2><p>阿里云自研的部署插件。<br>支持一键完成编译、打包、FTP上传服务器指定目录、执行启动命令、查看日志等操作。<br>同时还支持SSH、FTP等功能。</p><p><img src="https://zhaoxiaobin.coding.net/p/blog/d/zhaoxiaobin_img/git/raw/master/post/other/other-5-5.jpg" alt="-w1183"></p><h2 id="5、CamelCase"><a href="#5、CamelCase" class="headerlink" title="5、CamelCase"></a>5、CamelCase</h2><p>各种规则的变量命名快捷转换。快捷键<code> Alt+Shift+U</code>，也可以自定义。</p><p><img src="https://zhaoxiaobin.coding.net/p/blog/d/zhaoxiaobin_img/git/raw/master/post/other/other-5-6.jpg" alt="-w1109"><br><br><br></p>]]></content>
      
      
      <categories>
          
          <category> Java开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IDEA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTTP响应码详解</title>
      <link href="%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/http/HTTP%E5%93%8D%E5%BA%94%E7%A0%81%E8%AF%A6%E8%A7%A3/"/>
      <url>%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/http/HTTP%E5%93%8D%E5%BA%94%E7%A0%81%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><blockquote><p>200  服务器成功返回网页<br>404  请求的网页不存在<br>503  服务不可用</p></blockquote><h2 id="1xx（临时响应）"><a href="#1xx（临时响应）" class="headerlink" title="1xx（临时响应）"></a>1xx（临时响应）</h2><p><strong>表示临时响应并需要请求者继续执行操作的状态代码。</strong></p><ul><li>100（继续）请求者应当继续提出请求。服务器返回此代码表示已收到请求的第一部分，正在等待其余部分。 </li><li>101（切换协议）请求者已要求服务器切换协议，服务器已确认并准备切换。</li></ul><h2 id="2xx-（成功）"><a href="#2xx-（成功）" class="headerlink" title="2xx （成功）"></a>2xx （成功）</h2><p><strong>表示成功处理了请求的状态代码。</strong></p><ul><li>200（成功）服务器已成功处理了请求。通常，这表示服务器提供了请求的网页。</li><li>201（已创建）请求成功并且服务器创建了新的资源。</li><li>202（已接受） 服务器已接受请求，但尚未处理。</li><li>203（非授权信息）服务器已成功处理了请求，但返回的信息可能来自另一来源。</li><li>204（无内容）服务器成功处理了请求，但没有返回任何内容。</li><li>205（重置内容）服务器成功处理了请求，但没有返回任何内容。</li><li>206（部分内容）服务器成功处理了部分 GET 请求。</li></ul><h2 id="3xx-（重定向）"><a href="#3xx-（重定向）" class="headerlink" title="3xx （重定向）"></a>3xx （重定向）</h2><p><strong>表示要完成请求，需要进一步操作。通常，这些状态代码用来重定向。</strong></p><ul><li>300（多种选择）针对请求，服务器可执行多种操作。服务器可根据请求者 (user agent) 选择一项操作，或提供操作列表供请求者选择。</li><li>301（永久移动）请求的网页已永久移动到新位置。服务器返回此响应（对 GET 或 HEAD 请求的响应）时，会自动将请求者转到新位置。</li><li>302（临时移动）服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求。</li><li>303（查看其他位置）请求者应当对不同的位置使用单独的 GET 请求来检索响应时，服务器返回此代码。</li><li>304（未修改）自从上次请求后，请求的网页未修改过。服务器返回此响应时，不会返回网页内容。</li><li>305（使用代理）请求者只能使用代理访问请求的网页。如果服务器返回此响应，还表示请求者应使用代理。</li><li>307（临时重定向）服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求。</li></ul><h2 id="4xx（请求错误）"><a href="#4xx（请求错误）" class="headerlink" title="4xx（请求错误）"></a>4xx（请求错误）</h2><p><strong>这些状态代码表示请求可能出错，妨碍了服务器的处理。</strong></p><ul><li>400（错误请求）服务器不理解请求的语法。</li><li>401（未授权）请求要求身份验证。对于需要登录的网页，服务器可能返回此响应。</li><li>403（禁止）服务器拒绝请求。</li><li>404（未找到）服务器找不到请求的网页。</li><li>405（方法禁用）禁用请求中指定的方法。</li><li>406（不接受）无法使用请求的内容特性响应请求的网页。</li><li>407（需要代理授权）此状态代码与 401（未授权）类似，但指定请求者应当授权使用代理。</li><li>408（请求超时）服务器等候请求时发生超时。</li><li>409（冲突）服务器在完成请求时发生冲突。服务器必须在响应中包含有关冲突的信息。</li><li>410（已删除）如果请求的资源已永久删除，服务器就会返回此响应。</li><li>411（需要有效长度）服务器不接受不含有效内容长度标头字段的请求。</li><li>412（未满足前提条件）服务器未满足请求者在请求中设置的其中一个前提条件。</li><li>413（请求实体过大）服务器无法处理请求，因为请求实体过大，超出服务器的处理能力。</li><li>414（请求的 URI 过长）请求的 URI（通常为网址）过长，服务器无法处理。</li><li>415（不支持的媒体类型）请求的格式不受请求页面的支持。</li><li>416（请求范围不符合要求）如果页面无法提供请求的范围，则服务器会返回此状态代码。</li><li>417（未满足期望值）服务器未满足”期望”请求标头字段的要求。</li></ul><h2 id="5xx（服务器错误）"><a href="#5xx（服务器错误）" class="headerlink" title="5xx（服务器错误）"></a>5xx（服务器错误）</h2><p><strong>这些状态代码表示服务器在尝试处理请求时发生内部错误。这些错误可能是服务器本身的错误，而不是请求出错。</strong></p><ul><li>500（服务器内部错误）服务器遇到错误，无法完成请求。</li><li>501（尚未实施）服务器不具备完成请求的功能。例如，服务器无法识别请求方法时可能会返回此代码。</li><li>502（错误网关）服务器作为网关或代理，从上游服务器收到无效响应。</li><li>503（服务不可用）服务器目前无法使用（由于超载或停机维护）。通常，这只是暂时状态。</li><li>504（网关超时）服务器作为网关或代理，但是没有及时从上游服务器收到请求。</li><li>505（HTTP 版本不受支持）服务器不支持请求中所用的 HTTP 协议版本。</li></ul><h3 id="RFC-6585-发布文档描述了-4-个新的-HTTP-状态码。"><a href="#RFC-6585-发布文档描述了-4-个新的-HTTP-状态码。" class="headerlink" title="RFC 6585 发布文档描述了 4 个新的 HTTP 状态码。"></a>RFC 6585 发布文档描述了 4 个新的 HTTP 状态码。</h3><p>HTTP 协议还在变化？是的，HTTP 协议一直在演变，新的状态码对于开发 REST 服务或者说是基于 HTTP 的服务非常有用，下面我们为你详细介绍这四个新的状态码以及是否应该使用。</p><p><strong><em>428 Precondition Required (要求先决条件)</em></strong><br>先决条件是客户端发送 HTTP 请求时，如果想要请求能成功必须满足一些预设的条件。</p><p>一个好的例子就是 If-None-Match 头，经常在 GET 请求中使用，如果指定了 If-None-Match ，那么客户端只在响应中的 ETag 改变后才会重新接收回应。</p><p>先决条件的另外一个例子就是 If-Match 头，这个一般用在 PUT 请求上用于指示只更新没被改变的资源，这在多个客户端使用 HTTP 服务时用来防止彼此间不会覆盖相同内容。</p><p>当服务器端使用 428 Precondition Required 状态码时，表示客户端必须发送上述的请求头才能执行请求，这个方法为服务器提供一种有效的方法来阻止 ‘lost update’ 问题。</p><p><strong><em>429 Too Many Requests (太多请求)</em></strong><br>当你需要限制客户端请求某个服务数量时，该状态码就很有用，也就是请求速度限制。</p><p>在此之前，有一些类似的状态码，例如 ‘509 Bandwidth Limit Exceeded’. Twitter 使用 420 （这不是HTTP定义的状态码）</p><p>如果你希望限制客户端对服务的请求数，可使用 429 状态码，同时包含一个 Retry-After 响应头用于告诉客户端多长时间后可以再次请求服务。</p><p><strong><em>431 Request Header Fields Too Large (请求头字段太大)</em></strong><br>某些情况下，客户端发送 HTTP 请求头会变得很大，那么服务器可发送 431 Request Header Fields Too Large 来指明该问题。</p><p><strong><em>511 Network Authentication Required (要求网络认证)</em></strong><br>对我来说这个状态码很有趣，如果你在开发一个 HTTP 服务器，你不一定需要处理该状态码，但如果你在编写 HTTP 客户端，那这个状态码就非常重要。</p><p>如果你频繁使用笔记本和智能手机，你可能会注意到大量的公用 WIFI 服务要求你必须接受一些协议或者必须登录后才能使用。这是通过拦截HTTP流量，当用户试图访问网络返回一个重定向和登录，这很讨厌，但是实际情况就是这样的。使用这些“拦截”客户端，会有一些讨厌的副作用。在 RFC 中有提到这两个的例子：</p><blockquote><ul><li>如果你在登录WIFI前访问某个网站，网络设备将会拦截首个请求，这些设备往往也有自己的网站图标 ‘favicon.ico’。登录后您会发现，有一段时间内你访问的网站图标一直是WIFI登录网站的图标。</li><li>如果客户端使用HTTP请求来查找文档（可能是JSON），网络将会响应一个登录页，这样你的客户端就会解析错误并导致客户端运行异常，在现实中这种问题非常常见。</li></ul></blockquote><p>因此 511 状态码的提出就是为了解决这个问题。</p><p>如果你正在编写 HTTP 的客户端，你最好还是检查 511 状态码以确认是否需要认证后才能访问。</p><p>转载自：<a href="https://mp.weixin.qq.com/s/gKZNcKzk5yq0Q9OA4TLCYg">科普扫盲，HTTP Status Code详解，从此排错无忧！</a><br><br><br></p>]]></content>
      
      
      <categories>
          
          <category> 网络协议 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTTP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RedisTemplate应用</title>
      <link href="Redis/RedisTemplate%E5%BA%94%E7%94%A8/"/>
      <url>Redis/RedisTemplate%E5%BA%94%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>介绍Redis常用的5种数据类型的操作API。</p><h2 id="1、导入依赖"><a href="#1、导入依赖" class="headerlink" title="1、导入依赖"></a>1、导入依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2、添加配置"><a href="#2、添加配置" class="headerlink" title="2、添加配置"></a>2、添加配置</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line"><span class="comment">#    单机配置</span></span><br><span class="line"><span class="comment">#    host: 172.16.122.104</span></span><br><span class="line"><span class="comment">#    port: 6379</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#    集群多节点配置</span></span><br><span class="line">    <span class="attr">cluster:</span></span><br><span class="line">      <span class="attr">nodes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="number">172.16</span><span class="number">.122</span><span class="number">.101</span><span class="string">:6379</span></span><br><span class="line">        <span class="bullet">-</span> <span class="number">172.16</span><span class="number">.122</span><span class="number">.101</span><span class="string">:6380</span></span><br><span class="line">        <span class="bullet">-</span> <span class="number">172.16</span><span class="number">.122</span><span class="number">.102</span><span class="string">:6379</span></span><br><span class="line">        <span class="bullet">-</span> <span class="number">172.16</span><span class="number">.122</span><span class="number">.102</span><span class="string">:6380</span></span><br><span class="line">        <span class="bullet">-</span> <span class="number">172.16</span><span class="number">.122</span><span class="number">.103</span><span class="string">:6379</span></span><br><span class="line">        <span class="bullet">-</span> <span class="number">172.16</span><span class="number">.122</span><span class="number">.103</span><span class="string">:6380</span></span><br><span class="line">    <span class="attr">password:</span></span><br><span class="line">    <span class="attr">timeout:</span> <span class="number">2000</span></span><br></pre></td></tr></table></figure><p><strong>如果redis以单机方式部署，则需要配置<code>host</code>和<code>port</code>节点。</strong><br><strong>如果以cluster方式部署，就需要配置每个节点ip和端口号。</strong></p><h2 id="3、RedisTemplate配置"><a href="#3、RedisTemplate配置" class="headerlink" title="3、RedisTemplate配置"></a>3、RedisTemplate配置</h2><p>SpringBoot是以条件注解来启用默认的<code>RedisTemplate</code>和<code>StringRedisTemplate</code>，具体可以查看<code>RedisAutoConfiguration</code>这个类的源码。如果我们自定义<code>RedisTemplate</code>对象并注入Spring容器，则默认的不会生效。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RedisTemplate&lt;String,Object&gt; <span class="title">redisTemplate</span><span class="params">(RedisConnectionFactory redisConnectionFactory)</span> </span>&#123;</span><br><span class="line">        RedisTemplate&lt;String, Object&gt; template = <span class="keyword">new</span> RedisTemplate&lt;&gt;();</span><br><span class="line">        <span class="comment">// 配置连接工厂</span></span><br><span class="line">        template.setConnectionFactory(redisConnectionFactory);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用Jackson2JsonRedisSerializer来序列化和反序列化redis的value值（默认使用JDK的序列化方式）</span></span><br><span class="line">        Jackson2JsonRedisSerializer jacksonSeial = <span class="keyword">new</span> Jackson2JsonRedisSerializer(Object.class);</span><br><span class="line"></span><br><span class="line">        ObjectMapper om = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">        <span class="comment">// 指定要序列化的域，field,get和set,以及修饰符范围，ANY是都有包括private和public</span></span><br><span class="line">        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</span><br><span class="line">        <span class="comment">// 指定序列化输入的类型，类必须是非final修饰的，final修饰的类，比如String,Integer等会抛出异常</span></span><br><span class="line">        om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL); <span class="comment">// 2.1.x</span></span><br><span class="line"><span class="comment">//        om.activateDefaultTyping(LaissezFaireSubTypeValidator.instance, ObjectMapper.DefaultTyping.NON_FINAL); // 2.2.x</span></span><br><span class="line">        jacksonSeial.setObjectMapper(om);</span><br><span class="line">        <span class="comment">// 使用StringRedisSerializer来序列化和反序列化redis的key值</span></span><br><span class="line">        template.setKeySerializer(<span class="keyword">new</span> StringRedisSerializer());</span><br><span class="line">        <span class="comment">// 值采用json序列化</span></span><br><span class="line">        template.setValueSerializer(jacksonSeial);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置hash key 和value序列化模式</span></span><br><span class="line">        template.setHashKeySerializer(<span class="keyword">new</span> StringRedisSerializer());</span><br><span class="line">        template.setHashValueSerializer(jacksonSeial);</span><br><span class="line">        template.afterPropertiesSet();</span><br><span class="line">        <span class="keyword">return</span> template;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 对redis字符串类型数据操作</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> redisTemplate</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ValueOperations&lt;String, String&gt; <span class="title">stringOperations</span><span class="params">(StringRedisTemplate redisTemplate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForValue();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 对POJO类型序列化和反序列化操作，存储还是以字符串形式</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> redisTemplate</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ValueOperations&lt;String, Object&gt; <span class="title">valueOperations</span><span class="params">(RedisTemplate&lt;String, Object&gt; redisTemplate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForValue();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 对hash类型的数据操作</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> redisTemplate</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> HashOperations&lt;String, String, Object&gt; <span class="title">hashOperations</span><span class="params">(RedisTemplate&lt;String, Object&gt; redisTemplate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 对链表类型的数据操作</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> redisTemplate</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListOperations&lt;String, Object&gt; <span class="title">listOperations</span><span class="params">(RedisTemplate&lt;String, Object&gt; redisTemplate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForList();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 对无序集合类型的数据操作</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> redisTemplate</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SetOperations&lt;String, Object&gt; <span class="title">setOperations</span><span class="params">(RedisTemplate&lt;String, Object&gt; redisTemplate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForSet();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 对有序集合类型的数据操作</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> redisTemplate</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ZSetOperations&lt;String, Object&gt; <span class="title">zSetOperations</span><span class="params">(RedisTemplate&lt;String, Object&gt; redisTemplate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForZSet();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里同时提供6个对象用以对Redis的操作，这6个对象对应Redis的5种数据结构。这里为了使用方便，<code>ValueOperations</code>类型有2个对象，分别操作字符串和POJO。</p><ol><li><strong>stringOperations</strong>：对字符串类型数据操作。</li><li><strong>valueOperations</strong>：对POJO类型序列化和反序列化操作，存储还是以字符串形式。</li><li><strong>hashOperations</strong>：对hash类型的数据操作。</li><li><strong>listOperations</strong>：对链表类型的数据操作。</li><li><strong>setOperations</strong>：对无序集合类型的数据操作。</li><li><strong>zSetOperations</strong>：对有序集合类型的数据操作。</li></ol><h2 id="4、代码示例"><a href="#4、代码示例" class="headerlink" title="4、代码示例"></a>4、代码示例</h2><h4 id="4-1、定义POJO"><a href="#4-1、定义POJO" class="headerlink" title="4.1、定义POJO"></a>4.1、定义POJO</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 密码，序列化时忽略此属性</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@JsonIgnore</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 年龄</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 性别 1=男 2=女 其他=保密</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer sex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-2、测试案例"><a href="#4-2、测试案例" class="headerlink" title="4.2、测试案例"></a>4.2、测试案例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedistemplateApplicationTests</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate&lt;String, Object&gt; redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ValueOperations&lt;String, String&gt; stringOperations;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ValueOperations&lt;String, Object&gt; valueOperations;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> HashOperations&lt;String, String, Object&gt; hashOperations;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ListOperations&lt;String, Object&gt; listOperations;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SetOperations&lt;String, Object&gt; setOperations;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ZSetOperations&lt;String, Object&gt; zSetOperations;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String key = <span class="string">&quot;name&quot;</span>;</span><br><span class="line">        <span class="comment">// set 并设置过期时间</span></span><br><span class="line">        stringOperations.set(key, <span class="string">&quot;李白&quot;</span>, <span class="number">1</span>, TimeUnit.SECONDS);</span><br><span class="line">        <span class="comment">// get</span></span><br><span class="line">        log.info(stringOperations.get(key));</span><br><span class="line">        <span class="comment">// 查询key剩余时间SECONDS</span></span><br><span class="line">        log.info(redisTemplate.getExpire(key, TimeUnit.MILLISECONDS) + <span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="comment">// 删除key</span></span><br><span class="line">        redisTemplate.delete(key);</span><br><span class="line">        <span class="comment">// 判断key是否存在</span></span><br><span class="line">        log.info(redisTemplate.hasKey(key) + <span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 序列化POJO和反序列化</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testPOJO</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String key = <span class="string">&quot;libai&quot;</span>;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setId(<span class="number">1L</span>);</span><br><span class="line">        user.setUsername(<span class="string">&quot;李白&quot;</span>);</span><br><span class="line">        user.setPassword(<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">        user.setAge(<span class="number">28</span>);</span><br><span class="line">        user.setSex(<span class="number">1</span>);</span><br><span class="line">        valueOperations.set(key, user, <span class="number">1</span>, TimeUnit.SECONDS);</span><br><span class="line">        User result = (User) valueOperations.get(key);</span><br><span class="line">        log.info(JSONUtil.toJsonPrettyStr(result));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testHash</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String key = <span class="string">&quot;hashKey&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 单个put</span></span><br><span class="line">        hashOperations.put(key, <span class="string">&quot;name&quot;</span>, <span class="string">&quot;李白&quot;</span>);</span><br><span class="line">        hashOperations.put(key, <span class="string">&quot;age&quot;</span>, <span class="number">30</span>);</span><br><span class="line">        hashOperations.put(key, <span class="string">&quot;gender&quot;</span>, <span class="number">1</span>);</span><br><span class="line">        <span class="comment">// 批量put</span></span><br><span class="line">        Map&lt;String, Object&gt; myMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        myMap.put(<span class="string">&quot;address&quot;</span>, <span class="string">&quot;长安&quot;</span>);</span><br><span class="line">        myMap.put(<span class="string">&quot;salary&quot;</span>, <span class="number">2000.5</span>);</span><br><span class="line">        hashOperations.putAll(key, myMap);</span><br><span class="line">        <span class="comment">// 指定过期时间</span></span><br><span class="line">        redisTemplate.expire(key, <span class="number">10</span>, TimeUnit.SECONDS);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// get指定散列的单个key</span></span><br><span class="line">        log.info(hashOperations.get(key, <span class="string">&quot;name&quot;</span>) + <span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="comment">// 删除指定散列中的某些key</span></span><br><span class="line">        hashOperations.delete(key, <span class="string">&quot;name&quot;</span>, <span class="string">&quot;salary&quot;</span>);</span><br><span class="line">        <span class="comment">// 判断指定散列是否包含某个key</span></span><br><span class="line">        log.info(hashOperations.hasKey(key, <span class="string">&quot;salary&quot;</span>) + <span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取指定的整个散列</span></span><br><span class="line">        Map&lt;String, Object&gt; map = hashOperations.entries(key);</span><br><span class="line">        log.info(JSONUtil.toJsonPrettyStr(map));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取散列所有的key集合</span></span><br><span class="line">        Set&lt;String&gt; keySet = hashOperations.keys(key);</span><br><span class="line">        log.info(JSONUtil.toJsonPrettyStr(keySet));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取散列键值对数</span></span><br><span class="line">        Long size = hashOperations.size(key);</span><br><span class="line">        log.info(size + <span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取散列所有的value列表</span></span><br><span class="line">        List&lt;Object&gt; values = hashOperations.values(key);</span><br><span class="line">        log.info(JSONUtil.toJsonPrettyStr(values));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testlist</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String key = <span class="string">&quot;listKey&quot;</span>;</span><br><span class="line"></span><br><span class="line">        User user1 = <span class="keyword">new</span> User();</span><br><span class="line">        user1.setId(<span class="number">1L</span>);</span><br><span class="line">        user1.setUsername(<span class="string">&quot;aa&quot;</span>);</span><br><span class="line">        user1.setPassword(<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">        user1.setAge(<span class="number">28</span>);</span><br><span class="line">        user1.setSex(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        User user2 = <span class="keyword">new</span> User();</span><br><span class="line">        user2.setId(<span class="number">2L</span>);</span><br><span class="line">        user2.setUsername(<span class="string">&quot;bb&quot;</span>);</span><br><span class="line">        user2.setPassword(<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">        user2.setAge(<span class="number">55</span>);</span><br><span class="line">        user2.setSex(<span class="number">2</span>);</span><br><span class="line">        listOperations.rightPush(key, user1);</span><br><span class="line">        listOperations.rightPush(key, user2);</span><br><span class="line">        <span class="comment">// 指定过期时间</span></span><br><span class="line">        redisTemplate.expire(key, <span class="number">10</span>, TimeUnit.SECONDS);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 遍历列表</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; listOperations.size(key); i++) &#123;</span><br><span class="line">            User user = (User) listOperations.index(key, i); <span class="comment">// 根据下标访问列表中的元素</span></span><br><span class="line"><span class="comment">//            User user = (User) listOperations.leftPop(key); // 出队</span></span><br><span class="line">            log.info(JSONUtil.toJsonPrettyStr(user));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取列表指定范围</span></span><br><span class="line"><span class="comment">//        List&lt;User&gt; userList = (List) listOperations.range(key, 0, listOperations.size(key));</span></span><br><span class="line">        <span class="comment">// 获取所有元素</span></span><br><span class="line">        List&lt;User&gt; userList = (List) listOperations.range(key, <span class="number">0</span>, -<span class="number">1</span>);</span><br><span class="line">        log.info(JSONUtil.toJsonPrettyStr(userList));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 不可重复集合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String key = <span class="string">&quot;setKey&quot;</span>;</span><br><span class="line"></span><br><span class="line">        Long num = setOperations.add(key, <span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>, <span class="string">&quot;b&quot;</span>);</span><br><span class="line">        redisTemplate.expire(key, <span class="number">10</span>, TimeUnit.SECONDS);</span><br><span class="line">        log.info(<span class="string">&quot;存储数量:&#123;&#125;&quot;</span>, num); <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 判断是否成员</span></span><br><span class="line">        log.info(setOperations.isMember(key, <span class="string">&quot;a&quot;</span>) + <span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取整个无序集合</span></span><br><span class="line">        Set&lt;Object&gt; members = setOperations.members(key);</span><br><span class="line">        log.info(JSONUtil.toJsonPrettyStr(members));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 集合每个value需要关联1个double类型的数字</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testZset</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 批量添加</span></span><br><span class="line">        ZSetOperations.TypedTuple&lt;Object&gt; tuple1 = <span class="keyword">new</span> DefaultTypedTuple&lt;&gt;(<span class="string">&quot;libai&quot;</span>, <span class="number">1.1</span>);</span><br><span class="line">        ZSetOperations.TypedTuple&lt;Object&gt; tuple2 = <span class="keyword">new</span> DefaultTypedTuple&lt;&gt;(<span class="string">&quot;zhaoxb&quot;</span>, <span class="number">14.8</span>);</span><br><span class="line">        ZSetOperations.TypedTuple&lt;Object&gt; tuple3 = <span class="keyword">new</span> DefaultTypedTuple&lt;&gt;(<span class="string">&quot;cc&quot;</span>, -<span class="number">3.2</span>);</span><br><span class="line">        Set&lt;ZSetOperations.TypedTuple&lt;Object&gt;&gt; set = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        set.add(tuple1);</span><br><span class="line">        set.add(tuple2);</span><br><span class="line">        set.add(tuple3);</span><br><span class="line">        zSetOperations.add(<span class="string">&quot;zset&quot;</span>, set);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 单个添加</span></span><br><span class="line">        zSetOperations.add(<span class="string">&quot;zset&quot;</span>, <span class="string">&quot;jj&quot;</span>, <span class="number">0.7</span>);</span><br><span class="line">        zSetOperations.add(<span class="string">&quot;zset&quot;</span>, <span class="string">&quot;kk&quot;</span>, <span class="number">3.5</span>);</span><br><span class="line">        log.info(<span class="string">&quot;zset:&#123;&#125;&quot;</span>, zSetOperations.range(<span class="string">&quot;zset&quot;</span>, <span class="number">0</span>, -<span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取元素排名，从0开始</span></span><br><span class="line">        Long rank = zSetOperations.rank(<span class="string">&quot;zset&quot;</span>, <span class="string">&quot;zhaoxb&quot;</span>);</span><br><span class="line">        log.info(<span class="string">&quot;zhaoxb排名:[&#123;&#125;]&quot;</span>, rank);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 根据分数值大小统计范围（包含头尾）</span></span><br><span class="line">        Set&lt;Object&gt; rangeByScore = zSetOperations.rangeByScore(<span class="string">&quot;zset&quot;</span>, <span class="number">0</span>, <span class="number">10</span>);</span><br><span class="line">        Long rangeSize = zSetOperations.count(<span class="string">&quot;zset&quot;</span>, <span class="number">0</span>, <span class="number">10</span>);</span><br><span class="line">        log.info(<span class="string">&quot;截取[0,10]范围内元素zset:&#123;&#125;,共有:[&#123;&#125;]&quot;</span>, rangeByScore, rangeSize);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取指定元素的score</span></span><br><span class="line">        Double score1 = zSetOperations.score(<span class="string">&quot;zset&quot;</span>, <span class="string">&quot;zhaoxb&quot;</span>);</span><br><span class="line">        Double score2 = zSetOperations.score(<span class="string">&quot;zset&quot;</span>, <span class="string">&quot;zxb&quot;</span>);</span><br><span class="line">        log.info(<span class="string">&quot;存在元素的score:[&#123;&#125;],不存在元素的score:[&#123;&#125;]&quot;</span>, score1, score2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 删除指定元素</span></span><br><span class="line">        zSetOperations.remove(<span class="string">&quot;zset&quot;</span>, <span class="string">&quot;jj&quot;</span>, <span class="string">&quot;kk&quot;</span>);</span><br><span class="line">        log.info(<span class="string">&quot;删除指定元素后,zset:&#123;&#125;&quot;</span>, zSetOperations.range(<span class="string">&quot;zset&quot;</span>, <span class="number">0</span>, -<span class="number">1</span>));</span><br><span class="line">        <span class="comment">// 删除score在某一范围内的元素（包含头尾）</span></span><br><span class="line">        zSetOperations.removeRangeByScore(<span class="string">&quot;zset&quot;</span>, -<span class="number">3.2</span>, <span class="number">1.1</span>);</span><br><span class="line">        log.info(<span class="string">&quot;删除score在某一范围内的元素,zset:&#123;&#125;&quot;</span>, zSetOperations.range(<span class="string">&quot;zset&quot;</span>, <span class="number">0</span>, -<span class="number">1</span>));</span><br><span class="line">        <span class="comment">// 删除指定排序范围内的元素</span></span><br><span class="line">        zSetOperations.removeRange(<span class="string">&quot;zset&quot;</span>, <span class="number">0</span>, -<span class="number">1</span>);</span><br><span class="line">        log.info(<span class="string">&quot;删除指定排序范围内的元素,zset:&#123;&#125;&quot;</span>, zSetOperations.range(<span class="string">&quot;zset&quot;</span>, <span class="number">0</span>, -<span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5、设置Lettuce连接池"><a href="#5、设置Lettuce连接池" class="headerlink" title="5、设置Lettuce连接池"></a>5、设置Lettuce连接池</h2><p>Lettuce是基于Netty实现的，1个连接可以同时给多个线程复用并且保证线程安全。如果需要多个连接可以自定义连接池。</p><ol><li><p>导入依赖。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-pool2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>添加配置，可以根据实际需要设置。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">lettuce:</span></span><br><span class="line">      <span class="attr">pool:</span></span><br><span class="line">        <span class="attr">max-active:</span> <span class="number">32</span></span><br><span class="line">        <span class="attr">max-idle:</span> <span class="number">8</span></span><br><span class="line">        <span class="attr">min-idle:</span> <span class="number">2</span></span><br><span class="line">        <span class="attr">max-wait:</span> <span class="number">10000</span>   </span><br></pre></td></tr></table></figure></li></ol><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://www.jianshu.com/p/feef1421ab0b">【SpringBoot2.0系列07】SpringBoot之redis使用（Lettuce版本）</a></li><li><a href="https://www.jianshu.com/p/8d3c70f33727">SpringBoot整合redis——redisTemplate（一）</a></li></ul><h2 id="代码地址"><a href="#代码地址" class="headerlink" title="代码地址"></a>代码地址</h2><ul><li>github：<a href="https://github.com/senlinmu1008/redis-action/tree/master/redistemplate">https://github.com/senlinmu1008/redis-action/tree/master/redistemplate</a></li><li>gitee：<a href="https://gitee.com/ppbin/redis-action/tree/master/redistemplate">https://gitee.com/ppbin/redis-action/tree/master/redistemplate</a><br><br><br></li></ul>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot集成Jedis(二)</title>
      <link href="Redis/SpringBoot%E9%9B%86%E6%88%90Jedis(%E4%BA%8C)/"/>
      <url>Redis/SpringBoot%E9%9B%86%E6%88%90Jedis(%E4%BA%8C)/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><ul><li>SpringBoot2.1.4</li><li>操作Redis集群。</li></ul><h2 id="1、Spring配置Bean"><a href="#1、Spring配置Bean" class="headerlink" title="1、Spring配置Bean"></a>1、Spring配置Bean</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> JedisCluster <span class="title">jedisCluster</span><span class="params">(JedisPoolConfig jedisPoolConfig)</span> </span>&#123;</span><br><span class="line">    Set&lt;HostAndPort&gt; nodeSet = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">    nodeSet.add(<span class="keyword">new</span> HostAndPort(<span class="string">&quot;172.16.122.101&quot;</span>, <span class="number">6379</span>));</span><br><span class="line">    nodeSet.add(<span class="keyword">new</span> HostAndPort(<span class="string">&quot;172.16.122.101&quot;</span>, <span class="number">6380</span>));</span><br><span class="line">    nodeSet.add(<span class="keyword">new</span> HostAndPort(<span class="string">&quot;172.16.122.102&quot;</span>, <span class="number">6379</span>));</span><br><span class="line">    nodeSet.add(<span class="keyword">new</span> HostAndPort(<span class="string">&quot;172.16.122.102&quot;</span>, <span class="number">6380</span>));</span><br><span class="line">    nodeSet.add(<span class="keyword">new</span> HostAndPort(<span class="string">&quot;172.16.122.103&quot;</span>, <span class="number">6379</span>));</span><br><span class="line">    nodeSet.add(<span class="keyword">new</span> HostAndPort(<span class="string">&quot;172.16.122.103&quot;</span>, <span class="number">6380</span>));</span><br><span class="line">    JedisCluster jedisCluster = <span class="keyword">new</span> JedisCluster(nodeSet, <span class="number">2000</span>, jedisPoolConfig);</span><br><span class="line"></span><br><span class="line">    log.info(<span class="string">&quot;=====创建JedisCluster=====&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> jedisCluster;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2、代码测试示例"><a href="#2、代码测试示例" class="headerlink" title="2、代码测试示例"></a>2、代码测试示例</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> JedisCluster jedisCluster; <span class="comment">// 集群操作</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">TestJedisCluster</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// jedisCluster</span></span><br><span class="line">  jedisCluster.set(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;zxb&quot;</span>);</span><br><span class="line">  jedisCluster.set(<span class="string">&quot;age&quot;</span>, <span class="string">&quot;28&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// get</span></span><br><span class="line">  log.info(jedisCluster.get(<span class="string">&quot;name&quot;</span>));</span><br><span class="line"></span><br><span class="line">  <span class="comment">// exists</span></span><br><span class="line">  log.info(jedisCluster.exists(<span class="string">&quot;age&quot;</span>) + <span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// expire</span></span><br><span class="line">  jedisCluster.expire(<span class="string">&quot;name&quot;</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ttl</span></span><br><span class="line">  log.info(jedisCluster.ttl(<span class="string">&quot;name&quot;</span>) + <span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ++ --</span></span><br><span class="line">  log.info(jedisCluster.incr(<span class="string">&quot;age&quot;</span>) + <span class="string">&quot;&quot;</span>);</span><br><span class="line">  log.info(jedisCluster.decr(<span class="string">&quot;age&quot;</span>) + <span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// del</span></span><br><span class="line">  jedisCluster.del(<span class="string">&quot;age&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="http://doc.redisfans.com/">Redis 命令参考</a></li></ul><h2 id="代码地址"><a href="#代码地址" class="headerlink" title="代码地址"></a>代码地址</h2><ul><li>github：<a href="https://github.com/senlinmu1008/redis-action/tree/master/jedis">https://github.com/senlinmu1008/redis-action/tree/master/jedis</a></li><li>gitee：<a href="https://gitee.com/ppbin/redis-action/tree/master/jedis">https://gitee.com/ppbin/redis-action/tree/master/jedis</a><br><br><br></li></ul>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot集成Jedis(一)</title>
      <link href="Redis/SpringBoot%E9%9B%86%E6%88%90Jedis(%E4%B8%80)/"/>
      <url>Redis/SpringBoot%E9%9B%86%E6%88%90Jedis(%E4%B8%80)/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><ul><li>SpringBoot2.1.4</li><li>操作Redis单机。</li></ul><h2 id="1、导入Jedis依赖"><a href="#1、导入Jedis依赖" class="headerlink" title="1、导入Jedis依赖"></a>1、导入Jedis依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>redis.clients<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2、添加配置"><a href="#2、添加配置" class="headerlink" title="2、添加配置"></a>2、添加配置</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">30300</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">jedis</span></span><br><span class="line">    </span><br><span class="line"><span class="comment"># 这里我们是自己去实例化jedis的相关Bean（JedisPoolConfig、JedisPool...），并没有使用到RedisTemplate</span></span><br><span class="line"><span class="comment"># 所以并不需要像网上一些教程那样配置在spring节点下（spring.redis.jedis.pool.max-active...）</span></span><br><span class="line"><span class="attr">jedis:</span></span><br><span class="line">  <span class="attr">host:</span> <span class="number">172.16</span><span class="number">.122</span><span class="number">.104</span></span><br><span class="line">  <span class="attr">password:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">  <span class="attr">timeout:</span> <span class="number">2000</span></span><br><span class="line">  <span class="attr">maxTotal:</span> <span class="number">15</span> <span class="comment"># 最大连接数</span></span><br><span class="line">  <span class="attr">maxIdle:</span> <span class="number">10</span> <span class="comment"># 最大空闲连接</span></span><br><span class="line">  <span class="attr">minIdle:</span> <span class="number">5</span> <span class="comment"># 最小空闲连接</span></span><br><span class="line">  <span class="attr">maxWaitMillis:</span> <span class="number">10000</span> <span class="comment"># 获取连接最大等待时间</span></span><br><span class="line">  <span class="attr">testOnBorrow:</span> <span class="literal">true</span> <span class="comment"># 获取连接时检测是否可用</span></span><br></pre></td></tr></table></figure><h2 id="3、Spring配置Bean"><a href="#3、Spring配置Bean" class="headerlink" title="3、Spring配置Bean"></a>3、Spring配置Bean</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> JedisPoolConfig <span class="title">jedisPoolConfig</span><span class="params">(<span class="meta">@Value(&quot;$&#123;jedis.maxTotal&#125;&quot;)</span> <span class="keyword">int</span> maxActive,</span></span></span><br><span class="line"><span class="function"><span class="params">                                       <span class="meta">@Value(&quot;$&#123;jedis.maxIdle&#125;&quot;)</span> <span class="keyword">int</span> maxIdle,</span></span></span><br><span class="line"><span class="function"><span class="params">                                       <span class="meta">@Value(&quot;$&#123;jedis.minIdle&#125;&quot;)</span> <span class="keyword">int</span> minIdle,</span></span></span><br><span class="line"><span class="function"><span class="params">                                       <span class="meta">@Value(&quot;$&#123;jedis.maxWaitMillis&#125;&quot;)</span> <span class="keyword">long</span> maxWaitMillis,</span></span></span><br><span class="line"><span class="function"><span class="params">                                       <span class="meta">@Value(&quot;$&#123;jedis.testOnBorrow&#125;&quot;)</span> <span class="keyword">boolean</span> testOnBorrow)</span> </span>&#123;</span><br><span class="line">    JedisPoolConfig jedisPoolConfig = <span class="keyword">new</span> JedisPoolConfig();</span><br><span class="line">    jedisPoolConfig.setMaxTotal(maxActive);</span><br><span class="line">    jedisPoolConfig.setMaxIdle(maxIdle);</span><br><span class="line">    jedisPoolConfig.setMinIdle(minIdle);</span><br><span class="line">    jedisPoolConfig.setMaxWaitMillis(maxWaitMillis);</span><br><span class="line">    jedisPoolConfig.setTestOnBorrow(testOnBorrow);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> jedisPoolConfig;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> JedisPool <span class="title">jedisPool</span><span class="params">(<span class="meta">@Value(&quot;$&#123;jedis.host&#125;&quot;)</span> String host,</span></span></span><br><span class="line"><span class="function"><span class="params">                           <span class="meta">@Value(&quot;$&#123;jedis.password&#125;&quot;)</span> String password,</span></span></span><br><span class="line"><span class="function"><span class="params">                           <span class="meta">@Value(&quot;$&#123;jedis.port&#125;&quot;)</span> <span class="keyword">int</span> port,</span></span></span><br><span class="line"><span class="function"><span class="params">                           <span class="meta">@Value(&quot;$&#123;jedis.timeout&#125;&quot;)</span> <span class="keyword">int</span> timeout, JedisPoolConfig jedisPoolConfig)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    log.info(<span class="string">&quot;=====创建JedisPool连接池=====&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(StringUtils.isNotEmpty(password)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> JedisPool(jedisPoolConfig, host, port, timeout, password);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> JedisPool(jedisPoolConfig, host, port, timeout);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4、代码示例"><a href="#4、代码示例" class="headerlink" title="4、代码示例"></a>4、代码示例</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service(&quot;jedisService&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JedisServiceImpl</span> <span class="keyword">implements</span> <span class="title">JedisService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JedisPool jedisPool;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(String key, String value)</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Cleanup</span> Jedis jedis = jedisPool.getResource();</span><br><span class="line">        jedis.set(key, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">get</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Cleanup</span> Jedis jedis = jedisPool.getResource();</span><br><span class="line">        <span class="keyword">return</span> jedis.get(key);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="http://doc.redisfans.com/">Redis 命令参考</a></li></ul><h2 id="代码地址"><a href="#代码地址" class="headerlink" title="代码地址"></a>代码地址</h2><ul><li>github：<a href="https://github.com/senlinmu1008/redis-action/tree/master/jedis">https://github.com/senlinmu1008/redis-action/tree/master/jedis</a></li><li>gitee：<a href="https://gitee.com/ppbin/redis-action/tree/master/jedis">https://gitee.com/ppbin/redis-action/tree/master/jedis</a><br><br><br></li></ul>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL8限定IP访问</title>
      <link href="Database/MySQL/MySQL8%E9%99%90%E5%AE%9AIP%E8%AE%BF%E9%97%AE/"/>
      <url>Database/MySQL/MySQL8%E9%99%90%E5%AE%9AIP%E8%AE%BF%E9%97%AE/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><ul><li>MySQL版本：8.0.13</li></ul><ol><li><p>登录Mysql。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure></li><li><p>切换database。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use mysql;</span><br></pre></td></tr></table></figure></li><li><p>创建用户同时指定可访问的ip,可以用%来通配某段域。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE USER &#x27;root&#x27;@&#x27;xxx.xxx.xx.%&#x27; IDENTIFIED WITH mysql_native_password BY &#x27;Password123#&#x27;;</span><br></pre></td></tr></table></figure></li><li><p>给刚创建的 <code>user@ip</code> 组合赋予所有权限。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GRANT ALL PRIVILEGES ON *.* TO &#x27;root&#x27;@&#x27;xxx.xxx.xx.%&#x27;;</span><br></pre></td></tr></table></figure></li><li><p>刷新生效。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flush privileges;</span><br></pre></td></tr></table></figure></li><li><p>查看用户表。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from user;</span><br></pre></td></tr></table></figure></li></ol><p><strong>用户可以重复创建，user@ip 组合唯一即可</strong>。</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://blog.csdn.net/weixin_42054155/article/details/103438061">Mysql8.0创建用户限制指定IP可访问</a><br><br><br></li></ul>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL8 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Java操作Redis服务端</title>
      <link href="Redis/%E4%BD%BF%E7%94%A8Java%E6%93%8D%E4%BD%9CRedis%E6%9C%8D%E5%8A%A1%E7%AB%AF/"/>
      <url>Redis/%E4%BD%BF%E7%94%A8Java%E6%93%8D%E4%BD%9CRedis%E6%9C%8D%E5%8A%A1%E7%AB%AF/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><ul><li>Jedis</li><li>JedisCluster</li><li>Lettuce</li><li>RedisTemplate</li></ul><h2 id="1、Redis应用场景"><a href="#1、Redis应用场景" class="headerlink" title="1、Redis应用场景"></a>1、Redis应用场景</h2><ol><li>缓存热点数据，减轻数据库查询压力。</li><li>限时业务用于存储临时数据，比如token、验证码等，减轻数据库读写压力。</li><li>计数器，社交网站的点赞数、转发数、浏览数存储，和对于一些网关应用进行流量统计用于限流等场景，减轻数据库写压力。</li><li>消息的发布与订阅，类似于MQ的机制。</li><li>实现分布式锁。</li><li>分布式Session。</li></ol><h2 id="2、Java客户端"><a href="#2、Java客户端" class="headerlink" title="2、Java客户端"></a>2、Java客户端</h2><ul><li><strong>Jedis</strong>：以前Java基本使用Jedis作为操作Redis的客户端，Jedis在实现上是直接连接的redis server，如果在多线程环境下是非线程安全的，这个时候只有使用连接池，为每个Jedis实例增加物理连接。如果在cluster模式下，需要使用JedisCluster来操作Redis的集群。</li><li><strong>Lettuce</strong>：Lettuce的连接是基于Netty的，连接实例（StatefulRedisConnection）可以在多个线程间并发访问，因为StatefulRedisConnection是线程安全的，所以一个连接实例（StatefulRedisConnection）就可以满足多线程环境下的并发访问，当然这个也是可伸缩的设计，一个连接实例不够的情况也可以按需增加连接实例。</li><li><strong>RedisTemplate</strong>：Spring对于Redis操作的近一次封装，对于一些底层操作的差异进行了屏蔽，提供的API更加灵活方便。在SpringBoot1.x版本中默认使用Jedis作为实现，在2.x版本中则默认使用Lettuce作为实现。</li></ul><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://www.jianshu.com/p/feef1421ab0b">【SpringBoot2.0系列07】SpringBoot之redis使用（Lettuce版本）</a><br><br><br></li></ul>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis5.x在云服务器搭建集群</title>
      <link href="Redis/Redis5.x%E5%9C%A8%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA%E9%9B%86%E7%BE%A4/"/>
      <url>Redis/Redis5.x%E5%9C%A8%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA%E9%9B%86%E7%BE%A4/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><ul><li>腾讯云：CentOS7.6 1台</li><li>Redis版本：5.0.8</li><li>1机6节点、3主3从</li></ul><h2 id="1、准备工作"><a href="#1、准备工作" class="headerlink" title="1、准备工作"></a>1、准备工作</h2><ol><li><p>安装Redis5.0.8版本至<code>/usr/local/redis/</code>目录下。（参考：<a href="https://www.jianshu.com/p/d90da9b760bb">Redis安装</a>）</p></li><li><p>给每个实例创建1个目录，以端口号为区分，用来存放持久化文件和日志等文件。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir /usr/local/redis/<span class="number">900</span>&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;</span><br></pre></td></tr></table></figure></li><li><p>在<code>/usr/local/redis/config/</code>目录下给每个实例拷贝1个redis配置文件，以每个实例的端口号进行区分。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">redis9001.conf</span><br><span class="line">redis9002.conf</span><br><span class="line">redis9003.conf</span><br><span class="line">redis9004.conf</span><br><span class="line">redis9005.conf</span><br><span class="line">redis9006.conf</span><br></pre></td></tr></table></figure><p>每个配置文件在原来的<code>redis.conf</code>的配置基础上更改以下配置，这里以9001为例。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span>-mode no</span><br><span class="line">port <span class="number">9001</span></span><br><span class="line">daemonize yes</span><br><span class="line">pidfile /usr/local/redis/<span class="number">9001</span>/redis_9001.pid</span><br><span class="line">logfile <span class="string">&quot;/usr/local/redis/9001/redis_9001.log&quot;</span></span><br><span class="line">dbfilename dump_9001.rdb</span><br><span class="line">dir /usr/local/redis/<span class="number">9001</span></span><br><span class="line">appendonly yes</span><br><span class="line">appendfilename <span class="string">&quot;appendonly_9001.aof&quot;</span></span><br><span class="line">cluster-enabled yes</span><br><span class="line">cluster-config-file /usr/local/redis/<span class="number">9001</span>/nodes<span class="number">-9001.</span>conf</span><br><span class="line">cluster-node-timeout <span class="number">15000</span></span><br><span class="line">cluster-replica-validity-factor <span class="number">10</span></span><br><span class="line">cluster-migration-barrier <span class="number">1</span></span><br><span class="line">cluster-require-full-coverage no</span><br></pre></td></tr></table></figure></li><li><p>启动redis。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/redis/bin/redis-server /usr/local/redis/config/redis9001.conf</span><br><span class="line">/usr/local/redis/bin/redis-server /usr/local/redis/config/redis9002.conf</span><br><span class="line">/usr/local/redis/bin/redis-server /usr/local/redis/config/redis9003.conf</span><br><span class="line">/usr/local/redis/bin/redis-server /usr/local/redis/config/redis9004.conf</span><br><span class="line">/usr/local/redis/bin/redis-server /usr/local/redis/config/redis9005.conf</span><br><span class="line">/usr/local/redis/bin/redis-server /usr/local/redis/config/redis9006.conf</span><br></pre></td></tr></table></figure></li></ol><h2 id="2、集群搭建"><a href="#2、集群搭建" class="headerlink" title="2、集群搭建"></a>2、集群搭建</h2><ol><li><p>为了能让外网访问，需要云服务器开放端口，这里不仅需要开放<code>9001-9006</code>的端口，还需要开放<code>19001-19006</code>的端口，否则集群搭建不了。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --zone=<span class="keyword">public</span> --add-port=<span class="number">900</span>&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;/tcp --permanent</span><br><span class="line">firewall-cmd --zone=<span class="keyword">public</span> --add-port=<span class="number">1900</span>&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;/tcp --permanent</span><br><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure></li><li><p>创建集群，每个节点以外网ip进行注册。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/redis/bin/redis-cli --cluster create <span class="number">148.70</span><span class="number">.153</span><span class="number">.63</span>:<span class="number">9001</span> <span class="number">148.70</span><span class="number">.153</span><span class="number">.63</span>:<span class="number">9002</span> <span class="number">148.70</span><span class="number">.153</span><span class="number">.63</span>:<span class="number">9003</span> <span class="number">148.70</span><span class="number">.153</span><span class="number">.63</span>:<span class="number">9004</span> <span class="number">148.70</span><span class="number">.153</span><span class="number">.63</span>:<span class="number">9005</span> <span class="number">148.70</span><span class="number">.153</span><span class="number">.63</span>:<span class="number">9006</span> --cluster-replicas <span class="number">1</span></span><br></pre></td></tr></table></figure></li><li><p>验证集群可用性，用如下命令进入客户端，进行get、set操作看是否可以。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./redis-cli -c -p <span class="number">9001</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="3、Java应用"><a href="#3、Java应用" class="headerlink" title="3、Java应用"></a>3、Java应用</h2><ol><li><p>本人在搭完后用SpringBoot2.x版本的RedisTemplate操作Redis发现一个很奇怪的问题：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2020</span>-<span class="number">05</span>-<span class="number">12</span> <span class="number">22</span>:<span class="number">15</span>:<span class="number">31</span>,<span class="number">218</span> [WARN] [lettuce-nioEventLoop-<span class="number">4</span>-<span class="number">7</span>] [io.lettuce.core.cluster.topology.ClusterTopologyRefresh:<span class="number">243</span>] [] Unable to connect to <span class="number">172.27</span>.<span class="number">0.10</span>:<span class="number">9006</span></span><br><span class="line">java.util.concurrent.CompletionException: io.netty.channel.ConnectTimeoutException: connection timed out: /<span class="number">172.27</span>.<span class="number">0.10</span>:<span class="number">9006</span></span><br><span class="line">at java.util.concurrent.CompletableFuture.encodeThrowable(CompletableFuture.java:<span class="number">292</span>)</span><br><span class="line">at java.util.concurrent.CompletableFuture.completeThrowable(CompletableFuture.java:<span class="number">308</span>)</span><br><span class="line">at java.util.concurrent.CompletableFuture.uniApply(CompletableFuture.java:<span class="number">593</span>)</span><br><span class="line">at java.util.concurrent.CompletableFuture$UniApply.tryFire(CompletableFuture.java:<span class="number">577</span>)</span><br><span class="line">at java.util.concurrent.CompletableFuture.postComplete(CompletableFuture.java:<span class="number">474</span>)</span><br><span class="line">at java.util.concurrent.CompletableFuture.completeExceptionally(CompletableFuture.java:<span class="number">1977</span>)</span><br><span class="line">at io.lettuce.core.AbstractRedisClient.lambda$initializeChannelAsync0$<span class="number">4</span>(AbstractRedisClient.java:<span class="number">330281199210082216</span>)</span><br><span class="line">at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:<span class="number">502</span>)</span><br><span class="line">at io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:<span class="number">495</span>)</span><br><span class="line">at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:<span class="number">474</span>)</span><br><span class="line">at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:<span class="number">415</span>)</span><br><span class="line">at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:<span class="number">540</span>)</span><br><span class="line">at io.netty.util.concurrent.DefaultPromise.setFailure0(DefaultPromise.java:<span class="number">533</span>)</span><br><span class="line">at io.netty.util.concurrent.DefaultPromise.tryFailure(DefaultPromise.java:<span class="number">114</span>)</span><br><span class="line">at io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe$<span class="number">1.</span>run(AbstractNioChannel.java:<span class="number">269</span>)</span><br><span class="line">at io.netty.util.concurrent.PromiseTask$RunnableAdapter.call(PromiseTask.java:<span class="number">38</span>)</span><br><span class="line">at io.netty.util.concurrent.ScheduledFutureTask.run(ScheduledFutureTask.java:<span class="number">127</span>)</span><br><span class="line">at io.netty.util.concurrent.AbstractEventExecutor.safeExecute(AbstractEventExecutor.java:<span class="number">163</span>)</span><br><span class="line">at io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:<span class="number">404</span>)</span><br><span class="line">at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:<span class="number">495</span>)</span><br><span class="line">at io.netty.util.concurrent.SingleThreadEventExecutor$<span class="number">5.</span>run(SingleThreadEventExecutor.java:<span class="number">905</span>)</span><br><span class="line">at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:<span class="number">30</span>)</span><br><span class="line">at java.lang.Thread.run(Thread.java:<span class="number">748</span>)</span><br><span class="line">Caused by: io.netty.channel.ConnectTimeoutException: connection timed out: /<span class="number">172.27</span>.<span class="number">0.10</span>:<span class="number">9006</span></span><br><span class="line">at io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe$<span class="number">1.</span>run(AbstractNioChannel.java:<span class="number">267</span>)</span><br><span class="line">... <span class="number">8</span> common frames omitted</span><br></pre></td></tr></table></figure><ul><li>第一次执行操作总是特别慢，有时候执行成功但会提示上述的报错，有时候干脆执行也失败。</li><li>报错提示居然是连接不了我云服务器的内网ip地址，而且我在自己的虚拟机上从来没有过这个问题。</li><li>因为SpringBoot从2.x版本开始默认使用lettuce作为操作redis的实现，我把这个依赖排除然后自行引入jedis包，再次操作发现没有问题。</li></ul></li><li><p>原因排查。<br>查了相关资料，发现整合SpringBoot以后，客户端在连接redis某个节点时，会通过<code>cluster slots</code>命令去获取集群中的槽点信息。通过这个命令返回的每个节点除了自身节点是内网ip外其他节点均为公网ip，而这些节点信息源自于我们之前在配置文件中配的<code>cluster-config-file /usr/local/redis/9001/nodes-9001.conf</code>这个文件。这个文件是由集群创建时生成的，在生成自身节点时读取的ip是网卡ip，而云服务器的网卡ip即为内网ip地址。知道了问题源头就好解决了。</p></li><li><p>故障排除。<br>这里以9001为例，修改<code>/usr/local/redis/9001/nodes-9001.conf</code>这个文件，将内网ip改为外网ip。<br><img src="https://zhaoxiaobin.coding.net/p/blog/d/zhaoxiaobin_img/git/raw/master/post/redis/redis-6-1.jpg" alt="-w701"><br>按同样方法依次修改每个节点的node文件，重启redis，这时候再试发现一切都正常了。</p></li></ol><h2 id="4、设置密码"><a href="#4、设置密码" class="headerlink" title="4、设置密码"></a>4、设置密码</h2><ol><li><p>如果在云服务器搭建的redis，最好修改默认端口并设置强度较高的密码。这里需要设置2个密码：<br><strong>requirepass</strong>：对登录权限做限制即校验客户端的连接，主要是在主节点配置。<br><strong>masterauth</strong>：主要是针对master对应的slave节点设置的，在slave节点数据同步的时候用到，主要是在从节点配置。<br>实际上为了运维方便以及考虑到主从切换，一般会为每个节点同时配置这2个参数且密码相同。</p></li><li><p>挨个登录每个节点的redis客户端设置密码。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">config <span class="built_in">set</span> requirepass <span class="number">123456</span></span><br><span class="line">config <span class="built_in">set</span> masterauth <span class="number">123456</span></span><br><span class="line">auth  <span class="number">123456</span></span><br><span class="line">config rewrite</span><br></pre></td></tr></table></figure><p>查看配置文件末尾就会发现多了2行配置，就是我们设置的密码。<br>如果直接在<code>redis.conf</code>配置文件上修改则需要重启redis后才会生效。<br>再次登录客户端则需要使用密码。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./redis-cli -c -p <span class="number">9001</span> -a <span class="number">123456</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://www.jianshu.com/p/7fec6d0d0ae0">云服务器部署Redis集群（Cluster模式）及Spring Boot整合问题</a></li><li><a href="https://www.cnblogs.com/xuchen0117/p/11672231.html">设置Redis集群访问密码（不停机设置）</a></li><li><a href="https://blog.csdn.net/damanchen/article/details/100584275">redis集群的密码信息存在哪？是如何更新的？关于requirepass和masterauth的问题</a><br><br><br></li></ul>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RedisCluster动态缩容</title>
      <link href="Redis/RedisCluster%E5%8A%A8%E6%80%81%E7%BC%A9%E5%AE%B9/"/>
      <url>Redis/RedisCluster%E5%8A%A8%E6%80%81%E7%BC%A9%E5%AE%B9/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><ul><li>在扩容基础上演示缩容。</li></ul><h2 id="1、下线迁移槽"><a href="#1、下线迁移槽" class="headerlink" title="1、下线迁移槽"></a>1、下线迁移槽</h2><ul><li><code>--cluster-from</code>：要删除的主节点id。</li><li><code>--cluster-to</code>：接收迁移槽的主节点id。</li><li><code>--cluster-slots</code>：迁移槽的数量。</li><li>最后1个是集群现有的任意1个节点。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/redis/bin/redis-cli --cluster reshard --cluster-from <span class="number">6</span>ad45a1a6b276d487a927b9cb7b284edf1690e21 --cluster-to e1e369014d2ffd33f3548cc75d64789048a9b2bf --cluster-slots <span class="number">1365</span> <span class="number">172.16</span><span class="number">.122</span><span class="number">.101</span>:<span class="number">6379</span></span><br><span class="line">/usr/local/redis/bin/redis-cli --cluster reshard --cluster-from <span class="number">6</span>ad45a1a6b276d487a927b9cb7b284edf1690e21 --cluster-to <span class="number">85f</span>496b8891263e334bd6a43816d4ea465fbe8cf --cluster-slots <span class="number">1365</span> <span class="number">172.16</span><span class="number">.122</span><span class="number">.102</span>:<span class="number">6379</span></span><br><span class="line">/usr/local/redis/bin/redis-cli --cluster reshard --cluster-from <span class="number">6</span>ad45a1a6b276d487a927b9cb7b284edf1690e21 --cluster-to <span class="number">1</span>d1ffb6589d25040c3f5d2bbea7d6503dd6a39dc --cluster-slots <span class="number">1366</span> <span class="number">172.16</span><span class="number">.122</span><span class="number">.103</span>:<span class="number">6379</span></span><br></pre></td></tr></table></figure><h2 id="2、删除节点"><a href="#2、删除节点" class="headerlink" title="2、删除节点"></a>2、删除节点</h2><ul><li>需要指定集群现有的任意1个节点。</li><li>最后填写要删除的节点id。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/redis/bin/redis-cli --cluster del-node <span class="number">172.16</span><span class="number">.122</span><span class="number">.101</span>:<span class="number">6379</span> <span class="number">6</span>ad45a1a6b276d487a927b9cb7b284edf1690e21</span><br><span class="line">/usr/local/redis/bin/redis-cli --cluster del-node <span class="number">172.16</span><span class="number">.122</span><span class="number">.101</span>:<span class="number">6379</span> d00cd575adab36b53e6b8cf29664a77807c9ded5</span><br></pre></td></tr></table></figure><ul><li>至此，集群缩容已经完成。<br><br><br></li></ul>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RedisCluster动态扩容</title>
      <link href="Redis/RedisCluster%E5%8A%A8%E6%80%81%E6%89%A9%E5%AE%B9/"/>
      <url>Redis/RedisCluster%E5%8A%A8%E6%80%81%E6%89%A9%E5%AE%B9/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><ul><li>集群可水平扩展，据官方文档称可以线性扩展到1000节点。</li><li>这里为了演示方便，主从会在同一台机器上。</li></ul><h2 id="1、启动实例"><a href="#1、启动实例" class="headerlink" title="1、启动实例"></a>1、启动实例</h2><ol><li>按照之前Cluster搭建方式，重新在新的一台机器上启动2个实例，1主1从。</li></ol><h2 id="2、加入节点"><a href="#2、加入节点" class="headerlink" title="2、加入节点"></a>2、加入节点</h2><ol><li><p>利用<code>redis-cli</code>工具增加主节点，第1个节点是需要新加入的主节点，第2个节点是既有集群中的任意1个节点。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/redis/bin/redis-cli --cluster add-node <span class="number">172.16</span><span class="number">.122</span><span class="number">.104</span>:<span class="number">6379</span> <span class="number">172.16</span><span class="number">.122</span><span class="number">.101</span>:<span class="number">6379</span></span><br></pre></td></tr></table></figure><p><img src="https://zhaoxiaobin.coding.net/p/blog/d/zhaoxiaobin_img/git/raw/master/post/redis/redis-4-1.jpg" alt="Xnip2020-05-01_22-16-05"></p></li><li><p>查看集群节点信息，这里也可以不进入<code>redis-cli</code>客户端去查看。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/redis/bin/redis-cli -p <span class="number">6379</span> cluster nodes</span><br></pre></td></tr></table></figure><p><img src="https://zhaoxiaobin.coding.net/p/blog/d/zhaoxiaobin_img/git/raw/master/post/redis/redis-4-2.jpg" alt="Xnip2020-05-01_22-21-44"></p></li><li><p>增加从节点。需要另外指定<code>--cluster-slave</code>、<code>--cluster-master-id</code>以及主节点id参数。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/redis/bin/redis-cli --cluster add-node <span class="number">172.16</span><span class="number">.122</span><span class="number">.104</span>:<span class="number">6380</span> <span class="number">172.16</span><span class="number">.122</span><span class="number">.101</span>:<span class="number">6379</span> --cluster-slave --cluster-master-id <span class="number">6</span>ad45a1a6b276d487a927b9cb7b284edf1690e21</span><br></pre></td></tr></table></figure><p><img src="https://zhaoxiaobin.coding.net/p/blog/d/zhaoxiaobin_img/git/raw/master/post/redis/redis-4-3.jpg" alt="Xnip2020-05-01_22-18-40"></p></li><li><p>再次查看集群各节点信息。<br><img src="https://zhaoxiaobin.coding.net/p/blog/d/zhaoxiaobin_img/git/raw/master/post/redis/redis-4-4.jpg" alt="Xnip2020-05-01_22-22-23"></p></li></ol><h2 id="3、迁移槽位和数据"><a href="#3、迁移槽位和数据" class="headerlink" title="3、迁移槽位和数据"></a>3、迁移槽位和数据</h2><ol><li><p>重新分配槽位。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 最后填写集群中任意<span class="number">1</span>个节点都行。</span><br><span class="line">/usr/local/redis/bin/redis-cli --cluster reshard <span class="number">172.16</span><span class="number">.122</span><span class="number">.101</span>:<span class="number">6379</span></span><br></pre></td></tr></table></figure><p><img src="https://zhaoxiaobin.coding.net/p/blog/d/zhaoxiaobin_img/git/raw/master/post/redis/redis-4-5.jpg" alt="Xnip2020-05-01_22-30-32"></p><ul><li>指定分配的槽位数量。</li><li>指定获取这些槽位的主节点id。</li><li>填写<code>all</code>表示要迁移的这些槽位由集群中原有的各个主节点平均分摊给新加入的主节点。</li><li>会有一次确认，输入yes即可，稍等一会槽位就会迁移到新的主节点上。</li></ul></li><li><p>再次确认集群各节点信息，可以看到新加入的节点已经获得槽位了。<br><img src="https://zhaoxiaobin.coding.net/p/blog/d/zhaoxiaobin_img/git/raw/master/post/redis/redis-4-6.jpg" alt="-w1290"></p></li><li><p>至此，新加入的节点就可以开始正常工作了。</p></li></ol><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://www.bilibili.com/video/BV1RE411y7LV?from=search&seid=16920078600613328845">最详细的redis集群教程-过1024节的程序员必备的面试宝典【鲁班学院】</a><br><br><br></li></ul>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RedisCluster高可用集群搭建（二）</title>
      <link href="Redis/RedisCluster%E9%AB%98%E5%8F%AF%E7%94%A8%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
      <url>Redis/RedisCluster%E9%AB%98%E5%8F%AF%E7%94%A8%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><ul><li>这里并非使用原生方式来搭建集群。</li><li>Redis5.x版本使用<code>redis-cli</code>工具搭建集群，不再像Redis4.x版本使用Ruby搭建，会更方便一些。</li><li>如果有特殊的搭建要求，则需要按照原始方式搭建，原生方式采用各个节点先meet再指派槽最后分配主从来完成集群的搭建。</li></ul><h2 id="1、各节点加入集群"><a href="#1、各节点加入集群" class="headerlink" title="1、各节点加入集群"></a>1、各节点加入集群</h2><ol><li><p>3机6节点的主从拓扑，上下对应主从关系且主从节点错开在不同机器上。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">172.16</span><span class="number">.122</span><span class="number">.101</span>:<span class="number">6379</span>（主） <span class="number">172.16</span><span class="number">.122</span><span class="number">.102</span>:<span class="number">6379</span>（主） <span class="number">172.16</span><span class="number">.122</span><span class="number">.103</span>:<span class="number">6379</span>（主）</span><br><span class="line"><span class="number">172.16</span><span class="number">.122</span><span class="number">.102</span>:<span class="number">6380</span>（从） <span class="number">172.16</span><span class="number">.122</span><span class="number">.103</span>:<span class="number">6380</span>（从） <span class="number">172.16</span><span class="number">.122</span><span class="number">.101</span>:<span class="number">6380</span>（从）</span><br></pre></td></tr></table></figure></li><li><p>在任意一台机器上执行以下命令，前3台为主机，后3台为从机，顺序一一对应。根据实际情况需要把ip地址和端口替换一下。<code>--cluster-replicas 1</code>参数表示主从节点是1:1关系。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/redis/bin/redis-cli --cluster create <span class="number">172.16</span><span class="number">.122</span><span class="number">.101</span>:<span class="number">6379</span> <span class="number">172.16</span><span class="number">.122</span><span class="number">.102</span>:<span class="number">6379</span> <span class="number">172.16</span><span class="number">.122</span><span class="number">.103</span>:<span class="number">6379</span> <span class="number">172.16</span><span class="number">.122</span><span class="number">.102</span>:<span class="number">6380</span> <span class="number">172.16</span><span class="number">.122</span><span class="number">.103</span>:<span class="number">6380</span> <span class="number">172.16</span><span class="number">.122</span><span class="number">.101</span>:<span class="number">6380</span> --cluster-replicas <span class="number">1</span></span><br></pre></td></tr></table></figure></li><li><p>手动确认yes<br><img src="https://zhaoxiaobin.coding.net/p/blog/d/zhaoxiaobin_img/git/raw/master/post/redis/redis-3-1.jpg" alt="-w571"></p><p>然后会看到下图，表示搭建OK。原生方式的先meet再指派槽最后分配主从的3个步骤现在仅用一行命令就已经完成了。<br><img src="https://zhaoxiaobin.coding.net/p/blog/d/zhaoxiaobin_img/git/raw/master/post/redis/redis-3-2.jpg" alt="Xnip2020-04-29_16-49-40"></p></li></ol><h2 id="2、查看集群信息"><a href="#2、查看集群信息" class="headerlink" title="2、查看集群信息"></a>2、查看集群信息</h2><ol><li><p>进入客户端。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/redis/bin/redis-cli -p <span class="number">6379</span></span><br></pre></td></tr></table></figure></li><li><p>查看集群信息，状态已经OK。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; cluster info</span><br><span class="line">cluster_state:ok</span><br><span class="line">cluster_slots_assigned:<span class="number">16384</span></span><br><span class="line">cluster_slots_ok:<span class="number">16384</span></span><br><span class="line">cluster_slots_pfail:<span class="number">0</span></span><br><span class="line">cluster_slots_fail:<span class="number">0</span></span><br><span class="line">cluster_known_nodes:<span class="number">6</span></span><br><span class="line">cluster_size:<span class="number">3</span></span><br><span class="line">cluster_current_epoch:<span class="number">7</span></span><br><span class="line">cluster_my_epoch:<span class="number">7</span></span><br><span class="line">cluster_stats_messages_ping_sent:<span class="number">11979</span></span><br><span class="line">cluster_stats_messages_pong_sent:<span class="number">12091</span></span><br><span class="line">cluster_stats_messages_sent:<span class="number">24070</span></span><br><span class="line">cluster_stats_messages_ping_received:<span class="number">12091</span></span><br><span class="line">cluster_stats_messages_pong_received:<span class="number">11832</span></span><br><span class="line">cluster_stats_messages_received:<span class="number">23923</span></span><br></pre></td></tr></table></figure></li><li><p>查看集群各节点信息，可以看到每个节点的主从关系以及槽点的分配。</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">127.0.0.1</span>:<span class="string">6379&gt; cluster nodes</span></span><br><span class="line"><span class="attr">e1e369014d2ffd33f3548cc75d64789048a9b2bf</span> <span class="string">172.16.122.101:6379@16379 myself,master - 0 1588327299000 9 connected 0-5460</span></span><br><span class="line"><span class="attr">642b908e7c225daf7fa606201b938507cd33393d</span> <span class="string">172.16.122.101:6380@16380 slave 1d1ffb6589d25040c3f5d2bbea7d6503dd6a39dc 0 1588327300414 6 connected</span></span><br><span class="line"><span class="attr">7b639ed82eae9ee6e4b17dfd25b09be1604f280d</span> <span class="string">172.16.122.102:6380@16380 slave e1e369014d2ffd33f3548cc75d64789048a9b2bf 0 1588327299000 9 connected</span></span><br><span class="line"><span class="attr">639af5949611f931584a7dfc72f8841ff09d9ffd</span> <span class="string">172.16.122.103:6380@16380 slave 85f496b8891263e334bd6a43816d4ea465fbe8cf 0 1588327300000 5 connected</span></span><br><span class="line"><span class="attr">1d1ffb6589d25040c3f5d2bbea7d6503dd6a39dc</span> <span class="string">172.16.122.103:6379@16379 master - 0 1588327300000 3 connected 10923-16383</span></span><br><span class="line"><span class="attr">85f496b8891263e334bd6a43816d4ea465fbe8cf</span> <span class="string">172.16.122.102:6379@16379 master - 0 1588327301419 2 connected 5461-10922</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="3、简单操作"><a href="#3、简单操作" class="headerlink" title="3、简单操作"></a>3、简单操作</h2><ol><li><p>set key</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; <span class="built_in">set</span> hello world</span><br><span class="line">(error) MOVED <span class="number">866</span> <span class="number">172.16</span><span class="number">.122</span><span class="number">.101</span>:<span class="number">6379</span></span><br></pre></td></tr></table></figure><ul><li>可能成功也有可能会报错，报错是因为redis根据crc16算法算出存储该key的槽位不属于当前节点。<code>exit</code>或<code>quit</code>命令退出客户端，我们需要以下命令重新进入客户端。（如果需要支持中文则要再加上<code>--raw</code>参数）</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/redis/bin/redis-cli -p <span class="number">6379</span> -c</span><br></pre></td></tr></table></figure><ul><li>再执行就OK了，并且会提示重定向到槽位所属的节点。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; <span class="built_in">set</span> hello world</span><br><span class="line">-&gt; Redirected to slot [<span class="number">866</span>] located at <span class="number">172.16</span><span class="number">.122</span><span class="number">.101</span>:<span class="number">6379</span></span><br><span class="line">OK</span><br><span class="line"><span class="number">172.16</span><span class="number">.122</span><span class="number">.101</span>:<span class="number">6379</span>&gt;</span><br></pre></td></tr></table></figure></li><li><p>get key</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">172.16</span><span class="number">.122</span><span class="number">.101</span>:<span class="number">6379</span>&gt; get hello</span><br><span class="line"><span class="string">&quot;world&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>del key</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">172.16</span><span class="number">.122</span><span class="number">.101</span>:<span class="number">6379</span>&gt; del hello</span><br><span class="line">(integer) <span class="number">1</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="4、启停集群"><a href="#4、启停集群" class="headerlink" title="4、启停集群"></a>4、启停集群</h2><ol><li><p>关闭1台机器的所有实例。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pkill redis</span><br></pre></td></tr></table></figure></li><li><p>挨个关闭1台机器的实例。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/redis/bin/redis-cli -p <span class="number">6379</span> shutdown</span><br><span class="line">/usr/local/redis/bin/redis-cli -p <span class="number">6380</span> shutdown</span><br></pre></td></tr></table></figure></li><li><p>再次重启时不需要再搭起集群，redis会读取保留集群信息的文件恢复集群关系。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/redis/nodes<span class="number">-6379.</span>conf</span><br><span class="line">/usr/local/redis/nodes<span class="number">-6380.</span>conf</span><br></pre></td></tr></table></figure></li></ol><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://blog.csdn.net/chendaike/article/details/97235828">CentOS7下搭建 Redis-5.0.5集群环境</a></li><li><a href="https://www.bilibili.com/video/BV1RE411y7LV?from=search&seid=16920078600613328845">最详细的redis集群教程-过1024节的程序员必备的面试宝典【鲁班学院】</a><br><br><br></li></ul>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RedisCluster高可用集群搭建（一）</title>
      <link href="Redis/RedisCluster%E9%AB%98%E5%8F%AF%E7%94%A8%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>Redis/RedisCluster%E9%AB%98%E5%8F%AF%E7%94%A8%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><ul><li>Linux版本：CentOS7.7</li><li>Redis版本：5.0.8</li><li>方案：3机6节点，分别是3主3从，主从错开在不同机器上。</li></ul><h2 id="1、Redis集群演进过程"><a href="#1、Redis集群演进过程" class="headerlink" title="1、Redis集群演进过程"></a>1、Redis集群演进过程</h2><ol><li><strong>单机版</strong>：持久化是最简单的高可用方法（有时甚至不被归为高可用的手段），主要作用是数据备份，即将数据存储在硬盘， 保证数据不会因进程退出而丢失。</li><li><strong>主从复制</strong>：复制主要实现了数据的多机备份，以及对于读操作的负载均衡和简单的故障恢复。缺陷是故障恢复无法自动化；写操作无法负载均衡；存储能力受到单机的限制。</li><li><strong>哨兵（Sentinel）</strong>：在复制的基础上，哨兵实现了自动化的故障恢复。缺陷是写操作无法负载均衡；存储能力受到单机的限制。</li><li><strong>Cluster集群</strong>：通过集群，Redis解决了写操作无法负载均衡，以及存储能力受到单机限制的问题，而且也具有故障迁移（主从切换）的功能。实现了较为完善的高可用方案。</li></ol><h2 id="2、Cluster集群架构"><a href="#2、Cluster集群架构" class="headerlink" title="2、Cluster集群架构"></a>2、Cluster集群架构</h2><p><img src="https://zhaoxiaobin.coding.net/p/blog/d/zhaoxiaobin_img/git/raw/master/post/redis/redis-2-1.jpg" alt="-w949"></p><ol><li>Redis在存储时会根据key进行crc16算法，将算法的结果对16384取模，最后的结果即对应存储的槽位。</li><li>Redis共有16384个槽位，在集群搭建时需要把这些槽位分配给每个主节点，可以根据机器性能以及存储能力按权重分配，一般是平均分配。</li><li>各个主节点之间不会进行数据同步，只存储对应槽位的数据。各从节点备份对应主节点的数据，所以主从需要错开在不同机器上。</li></ol><h2 id="3、修改配置文件"><a href="#3、修改配置文件" class="headerlink" title="3、修改配置文件"></a>3、修改配置文件</h2><ol><li><p>在<code>/usr/local/redis/config</code>目录下准备2个原始的<code>redis.conf</code>文件，分别给2个实例启动使用。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">redis6379.conf</span><br><span class="line">redis6380.conf</span><br></pre></td></tr></table></figure></li><li><p>修改<code>redis6379.conf</code>文件的部分配置。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># bind 127.0.0.1</span></span><br><span class="line"><span class="keyword">protected</span>-mode no</span><br><span class="line">port <span class="number">6379</span></span><br><span class="line">daemonize yes</span><br><span class="line">pidfile /usr/local/redis/redis_6379.pid</span><br><span class="line">logfile <span class="string">&quot;/usr/local/redis/redis_6379.log&quot;</span></span><br><span class="line">dbfilename dump_6379.rdb</span><br><span class="line">dir /usr/local/redis/</span><br><span class="line">appendonly yes</span><br><span class="line">appendfilename <span class="string">&quot;appendonly_6379.aof&quot;</span></span><br><span class="line">cluster-enabled yes</span><br><span class="line">cluster-config-file /usr/local/redis/nodes<span class="number">-6379.</span>conf</span><br><span class="line">cluster-node-timeout <span class="number">15000</span></span><br><span class="line">cluster-replica-validity-factor <span class="number">10</span></span><br><span class="line">cluster-migration-barrier <span class="number">1</span></span><br><span class="line">cluster-require-full-coverage no</span><br></pre></td></tr></table></figure></li><li><p>修改<code>redis6380.conf</code>文件的部分配置。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># bind 127.0.0.1</span></span><br><span class="line"><span class="keyword">protected</span>-mode no</span><br><span class="line">port <span class="number">6380</span></span><br><span class="line">daemonize yes</span><br><span class="line">pidfile /usr/local/redis/redis_6380.pid</span><br><span class="line">logfile <span class="string">&quot;/usr/local/redis/redis_6380.log&quot;</span></span><br><span class="line">dbfilename dump_6380.rdb</span><br><span class="line">dir /usr/local/redis/</span><br><span class="line">appendonly yes</span><br><span class="line">appendfilename <span class="string">&quot;appendonly_6380.aof&quot;</span></span><br><span class="line">cluster-enabled yes</span><br><span class="line">cluster-config-file /usr/local/redis/nodes<span class="number">-6380.</span>conf</span><br><span class="line">cluster-node-timeout <span class="number">15000</span></span><br><span class="line">cluster-replica-validity-factor <span class="number">10</span></span><br><span class="line">cluster-migration-barrier <span class="number">1</span></span><br><span class="line">cluster-require-full-coverage no</span><br></pre></td></tr></table></figure></li><li><p>这里开启了RDB和AOF混合持久化的模式，如果是Redis4.x版本需要改以下配置，Redis5.x版本默认开启混合持久化模式。另外<code>redis.conf</code>配置的中文版会在文末贴出。</p></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aof-use-rdb-preamble yes</span><br></pre></td></tr></table></figure><h2 id="4、启动实例"><a href="#4、启动实例" class="headerlink" title="4、启动实例"></a>4、启动实例</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/redis/bin/redis-server /usr/local/redis/config/redis6379.conf</span><br><span class="line">/usr/local/redis/bin/redis-server /usr/local/redis/config/redis6380.conf</span><br></pre></td></tr></table></figure><p><strong>按以上方式如法炮制，给另外2台机器安装好Redis并启动相应实例，查看每台机器进程是否启动。</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ps aux|grep redis</span><br><span class="line">root       <span class="number">2308</span>  <span class="number">0.2</span>  <span class="number">0.6</span> <span class="number">160552</span>  <span class="number">3352</span> ?        Ssl  <span class="number">14</span>:<span class="number">20</span>   <span class="number">0</span>:<span class="number">13</span> /usr/local/redis/bin/redis-server *:<span class="number">6379</span> [cluster]</span><br><span class="line">root       <span class="number">2313</span>  <span class="number">0.1</span>  <span class="number">0.6</span> <span class="number">156968</span>  <span class="number">3328</span> ?        Ssl  <span class="number">14</span>:<span class="number">20</span>   <span class="number">0</span>:<span class="number">13</span> /usr/local/redis/bin/redis-server *:<span class="number">6380</span> [cluster]</span><br></pre></td></tr></table></figure><h2 id="5、查看集群信息"><a href="#5、查看集群信息" class="headerlink" title="5、查看集群信息"></a>5、查看集群信息</h2><ol><li><p>进入Redis客户端，<code>-p</code> 参数是指定实例的启动端口，不加此参数默认就是6379端口。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/redis/bin/redis-cli -p <span class="number">6379</span></span><br></pre></td></tr></table></figure></li><li><p>查看集群信息，因为集群还未搭建完成，所以状态是失败的。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; cluster info</span><br><span class="line">cluster_state:fail</span><br><span class="line">cluster_slots_assigned:<span class="number">0</span></span><br><span class="line">cluster_slots_ok:<span class="number">0</span></span><br><span class="line">cluster_slots_pfail:<span class="number">0</span></span><br><span class="line">cluster_slots_fail:<span class="number">0</span></span><br><span class="line">cluster_known_nodes:<span class="number">1</span></span><br><span class="line">cluster_size:<span class="number">0</span></span><br><span class="line">cluster_current_epoch:<span class="number">0</span></span><br><span class="line">cluster_my_epoch:<span class="number">0</span></span><br><span class="line">cluster_stats_messages_sent:<span class="number">0</span></span><br><span class="line">cluster_stats_messages_received:<span class="number">0</span></span><br></pre></td></tr></table></figure></li><li><p>尝试写入数据，应该会报错。</p></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; <span class="built_in">set</span> hello world</span><br><span class="line">(error) CLUSTERDOWN The cluster is down</span><br></pre></td></tr></table></figure><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://blog.csdn.net/chendaike/article/details/97235828">CentOS7下搭建 Redis-5.0.5集群环境</a></li><li><a href="https://www.bilibili.com/video/BV1RE411y7LV?from=search&seid=16920078600613328845">最详细的redis集群教程-过1024节的程序员必备的面试宝典【鲁班学院】</a></li></ul><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><ul><li>Redis配置中文版</li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br><span class="line">747</span><br><span class="line">748</span><br><span class="line">749</span><br><span class="line">750</span><br><span class="line">751</span><br><span class="line">752</span><br><span class="line">753</span><br><span class="line">754</span><br><span class="line">755</span><br><span class="line">756</span><br><span class="line">757</span><br><span class="line">758</span><br><span class="line">759</span><br><span class="line">760</span><br><span class="line">761</span><br><span class="line">762</span><br><span class="line">763</span><br><span class="line">764</span><br><span class="line">765</span><br><span class="line">766</span><br><span class="line">767</span><br><span class="line">768</span><br><span class="line">769</span><br><span class="line">770</span><br><span class="line">771</span><br><span class="line">772</span><br><span class="line">773</span><br><span class="line">774</span><br><span class="line">775</span><br><span class="line">776</span><br><span class="line">777</span><br><span class="line">778</span><br><span class="line">779</span><br><span class="line">780</span><br><span class="line">781</span><br><span class="line">782</span><br><span class="line">783</span><br><span class="line">784</span><br><span class="line">785</span><br><span class="line">786</span><br><span class="line">787</span><br><span class="line">788</span><br><span class="line">789</span><br><span class="line">790</span><br><span class="line">791</span><br><span class="line">792</span><br><span class="line">793</span><br><span class="line">794</span><br><span class="line">795</span><br><span class="line">796</span><br><span class="line">797</span><br><span class="line">798</span><br><span class="line">799</span><br><span class="line">800</span><br><span class="line">801</span><br><span class="line">802</span><br><span class="line">803</span><br><span class="line">804</span><br><span class="line">805</span><br><span class="line">806</span><br><span class="line">807</span><br><span class="line">808</span><br><span class="line">809</span><br><span class="line">810</span><br><span class="line">811</span><br><span class="line">812</span><br><span class="line">813</span><br><span class="line">814</span><br><span class="line">815</span><br><span class="line">816</span><br><span class="line">817</span><br><span class="line">818</span><br><span class="line">819</span><br><span class="line">820</span><br><span class="line">821</span><br><span class="line">822</span><br><span class="line">823</span><br><span class="line">824</span><br><span class="line">825</span><br><span class="line">826</span><br><span class="line">827</span><br><span class="line">828</span><br><span class="line">829</span><br><span class="line">830</span><br><span class="line">831</span><br><span class="line">832</span><br><span class="line">833</span><br><span class="line">834</span><br><span class="line">835</span><br><span class="line">836</span><br><span class="line">837</span><br><span class="line">838</span><br><span class="line">839</span><br><span class="line">840</span><br><span class="line">841</span><br><span class="line">842</span><br><span class="line">843</span><br><span class="line">844</span><br><span class="line">845</span><br><span class="line">846</span><br><span class="line">847</span><br><span class="line">848</span><br><span class="line">849</span><br><span class="line">850</span><br><span class="line">851</span><br><span class="line">852</span><br><span class="line">853</span><br><span class="line">854</span><br><span class="line">855</span><br><span class="line">856</span><br><span class="line">857</span><br><span class="line">858</span><br><span class="line">859</span><br><span class="line">860</span><br><span class="line">861</span><br><span class="line">862</span><br><span class="line">863</span><br><span class="line">864</span><br><span class="line">865</span><br><span class="line">866</span><br><span class="line">867</span><br><span class="line">868</span><br><span class="line">869</span><br><span class="line">870</span><br><span class="line">871</span><br><span class="line">872</span><br><span class="line">873</span><br><span class="line">874</span><br><span class="line">875</span><br><span class="line">876</span><br><span class="line">877</span><br><span class="line">878</span><br><span class="line">879</span><br><span class="line">880</span><br><span class="line">881</span><br><span class="line">882</span><br><span class="line">883</span><br><span class="line">884</span><br><span class="line">885</span><br><span class="line">886</span><br><span class="line">887</span><br><span class="line">888</span><br><span class="line">889</span><br><span class="line">890</span><br><span class="line">891</span><br><span class="line">892</span><br><span class="line">893</span><br><span class="line">894</span><br><span class="line">895</span><br><span class="line">896</span><br><span class="line">897</span><br><span class="line">898</span><br><span class="line">899</span><br><span class="line">900</span><br><span class="line">901</span><br><span class="line">902</span><br><span class="line">903</span><br><span class="line">904</span><br><span class="line">905</span><br><span class="line">906</span><br><span class="line">907</span><br><span class="line">908</span><br><span class="line">909</span><br><span class="line">910</span><br><span class="line">911</span><br><span class="line">912</span><br><span class="line">913</span><br><span class="line">914</span><br><span class="line">915</span><br><span class="line">916</span><br><span class="line">917</span><br><span class="line">918</span><br><span class="line">919</span><br><span class="line">920</span><br><span class="line">921</span><br><span class="line">922</span><br><span class="line">923</span><br><span class="line">924</span><br><span class="line">925</span><br><span class="line">926</span><br><span class="line">927</span><br><span class="line">928</span><br><span class="line">929</span><br><span class="line">930</span><br><span class="line">931</span><br><span class="line">932</span><br><span class="line">933</span><br><span class="line">934</span><br><span class="line">935</span><br><span class="line">936</span><br><span class="line">937</span><br><span class="line">938</span><br><span class="line">939</span><br><span class="line">940</span><br><span class="line">941</span><br><span class="line">942</span><br><span class="line">943</span><br><span class="line">944</span><br><span class="line">945</span><br><span class="line">946</span><br><span class="line">947</span><br><span class="line">948</span><br><span class="line">949</span><br><span class="line">950</span><br><span class="line">951</span><br><span class="line">952</span><br><span class="line">953</span><br><span class="line">954</span><br><span class="line">955</span><br><span class="line">956</span><br><span class="line">957</span><br><span class="line">958</span><br><span class="line">959</span><br><span class="line">960</span><br><span class="line">961</span><br><span class="line">962</span><br><span class="line">963</span><br><span class="line">964</span><br><span class="line">965</span><br><span class="line">966</span><br><span class="line">967</span><br><span class="line">968</span><br><span class="line">969</span><br><span class="line">970</span><br><span class="line">971</span><br><span class="line">972</span><br><span class="line">973</span><br><span class="line">974</span><br><span class="line">975</span><br><span class="line">976</span><br><span class="line">977</span><br><span class="line">978</span><br><span class="line">979</span><br><span class="line">980</span><br><span class="line">981</span><br><span class="line">982</span><br><span class="line">983</span><br><span class="line">984</span><br><span class="line">985</span><br><span class="line">986</span><br><span class="line">987</span><br><span class="line">988</span><br><span class="line">989</span><br><span class="line">990</span><br><span class="line">991</span><br><span class="line">992</span><br><span class="line">993</span><br><span class="line">994</span><br><span class="line">995</span><br><span class="line">996</span><br><span class="line">997</span><br><span class="line">998</span><br><span class="line">999</span><br><span class="line">1000</span><br><span class="line">1001</span><br><span class="line">1002</span><br><span class="line">1003</span><br><span class="line">1004</span><br><span class="line">1005</span><br><span class="line">1006</span><br><span class="line">1007</span><br><span class="line">1008</span><br><span class="line">1009</span><br><span class="line">1010</span><br><span class="line">1011</span><br><span class="line">1012</span><br><span class="line">1013</span><br><span class="line">1014</span><br><span class="line">1015</span><br><span class="line">1016</span><br><span class="line">1017</span><br><span class="line">1018</span><br><span class="line">1019</span><br><span class="line">1020</span><br><span class="line">1021</span><br><span class="line">1022</span><br><span class="line">1023</span><br><span class="line">1024</span><br><span class="line">1025</span><br><span class="line">1026</span><br><span class="line">1027</span><br><span class="line">1028</span><br><span class="line">1029</span><br><span class="line">1030</span><br><span class="line">1031</span><br><span class="line">1032</span><br><span class="line">1033</span><br><span class="line">1034</span><br><span class="line">1035</span><br><span class="line">1036</span><br><span class="line">1037</span><br><span class="line">1038</span><br><span class="line">1039</span><br><span class="line">1040</span><br><span class="line">1041</span><br><span class="line">1042</span><br><span class="line">1043</span><br><span class="line">1044</span><br><span class="line">1045</span><br><span class="line">1046</span><br><span class="line">1047</span><br><span class="line">1048</span><br><span class="line">1049</span><br><span class="line">1050</span><br><span class="line">1051</span><br><span class="line">1052</span><br><span class="line">1053</span><br><span class="line">1054</span><br><span class="line">1055</span><br><span class="line">1056</span><br><span class="line">1057</span><br><span class="line">1058</span><br><span class="line">1059</span><br><span class="line">1060</span><br><span class="line">1061</span><br><span class="line">1062</span><br><span class="line">1063</span><br><span class="line">1064</span><br><span class="line">1065</span><br><span class="line">1066</span><br><span class="line">1067</span><br><span class="line">1068</span><br><span class="line">1069</span><br><span class="line">1070</span><br><span class="line">1071</span><br><span class="line">1072</span><br><span class="line">1073</span><br><span class="line">1074</span><br><span class="line">1075</span><br><span class="line">1076</span><br><span class="line">1077</span><br><span class="line">1078</span><br><span class="line">1079</span><br><span class="line">1080</span><br><span class="line">1081</span><br><span class="line">1082</span><br><span class="line">1083</span><br><span class="line">1084</span><br><span class="line">1085</span><br><span class="line">1086</span><br><span class="line">1087</span><br><span class="line">1088</span><br><span class="line">1089</span><br><span class="line">1090</span><br><span class="line">1091</span><br><span class="line">1092</span><br><span class="line">1093</span><br><span class="line">1094</span><br><span class="line">1095</span><br><span class="line">1096</span><br><span class="line">1097</span><br><span class="line">1098</span><br><span class="line">1099</span><br><span class="line">1100</span><br><span class="line">1101</span><br><span class="line">1102</span><br><span class="line">1103</span><br><span class="line">1104</span><br><span class="line">1105</span><br><span class="line">1106</span><br><span class="line">1107</span><br><span class="line">1108</span><br><span class="line">1109</span><br><span class="line">1110</span><br><span class="line">1111</span><br><span class="line">1112</span><br><span class="line">1113</span><br><span class="line">1114</span><br><span class="line">1115</span><br><span class="line">1116</span><br><span class="line">1117</span><br><span class="line">1118</span><br><span class="line">1119</span><br><span class="line">1120</span><br><span class="line">1121</span><br><span class="line">1122</span><br><span class="line">1123</span><br><span class="line">1124</span><br><span class="line">1125</span><br><span class="line">1126</span><br><span class="line">1127</span><br><span class="line">1128</span><br><span class="line">1129</span><br><span class="line">1130</span><br><span class="line">1131</span><br><span class="line">1132</span><br><span class="line">1133</span><br><span class="line">1134</span><br><span class="line">1135</span><br><span class="line">1136</span><br><span class="line">1137</span><br><span class="line">1138</span><br><span class="line">1139</span><br><span class="line">1140</span><br><span class="line">1141</span><br><span class="line">1142</span><br><span class="line">1143</span><br><span class="line">1144</span><br><span class="line">1145</span><br><span class="line">1146</span><br><span class="line">1147</span><br><span class="line">1148</span><br><span class="line">1149</span><br><span class="line">1150</span><br><span class="line">1151</span><br><span class="line">1152</span><br><span class="line">1153</span><br><span class="line">1154</span><br><span class="line">1155</span><br><span class="line">1156</span><br><span class="line">1157</span><br><span class="line">1158</span><br><span class="line">1159</span><br><span class="line">1160</span><br><span class="line">1161</span><br><span class="line">1162</span><br><span class="line">1163</span><br><span class="line">1164</span><br><span class="line">1165</span><br><span class="line">1166</span><br><span class="line">1167</span><br><span class="line">1168</span><br><span class="line">1169</span><br><span class="line">1170</span><br><span class="line">1171</span><br><span class="line">1172</span><br><span class="line">1173</span><br><span class="line">1174</span><br><span class="line">1175</span><br><span class="line">1176</span><br><span class="line">1177</span><br><span class="line">1178</span><br><span class="line">1179</span><br><span class="line">1180</span><br><span class="line">1181</span><br><span class="line">1182</span><br><span class="line">1183</span><br><span class="line">1184</span><br><span class="line">1185</span><br><span class="line">1186</span><br><span class="line">1187</span><br><span class="line">1188</span><br><span class="line">1189</span><br><span class="line">1190</span><br><span class="line">1191</span><br><span class="line">1192</span><br><span class="line">1193</span><br><span class="line">1194</span><br><span class="line">1195</span><br><span class="line">1196</span><br><span class="line">1197</span><br><span class="line">1198</span><br><span class="line">1199</span><br><span class="line">1200</span><br><span class="line">1201</span><br><span class="line">1202</span><br><span class="line">1203</span><br><span class="line">1204</span><br><span class="line">1205</span><br><span class="line">1206</span><br><span class="line">1207</span><br><span class="line">1208</span><br><span class="line">1209</span><br><span class="line">1210</span><br><span class="line">1211</span><br><span class="line">1212</span><br><span class="line">1213</span><br><span class="line">1214</span><br><span class="line">1215</span><br><span class="line">1216</span><br><span class="line">1217</span><br><span class="line">1218</span><br><span class="line">1219</span><br><span class="line">1220</span><br><span class="line">1221</span><br><span class="line">1222</span><br><span class="line">1223</span><br><span class="line">1224</span><br><span class="line">1225</span><br><span class="line">1226</span><br><span class="line">1227</span><br><span class="line">1228</span><br><span class="line">1229</span><br><span class="line">1230</span><br><span class="line">1231</span><br><span class="line">1232</span><br><span class="line">1233</span><br><span class="line">1234</span><br><span class="line">1235</span><br><span class="line">1236</span><br><span class="line">1237</span><br><span class="line">1238</span><br><span class="line">1239</span><br><span class="line">1240</span><br><span class="line">1241</span><br><span class="line">1242</span><br><span class="line">1243</span><br><span class="line">1244</span><br><span class="line">1245</span><br><span class="line">1246</span><br><span class="line">1247</span><br><span class="line">1248</span><br><span class="line">1249</span><br><span class="line">1250</span><br><span class="line">1251</span><br><span class="line">1252</span><br><span class="line">1253</span><br><span class="line">1254</span><br><span class="line">1255</span><br><span class="line">1256</span><br><span class="line">1257</span><br><span class="line">1258</span><br><span class="line">1259</span><br><span class="line">1260</span><br><span class="line">1261</span><br><span class="line">1262</span><br><span class="line">1263</span><br><span class="line">1264</span><br><span class="line">1265</span><br><span class="line">1266</span><br><span class="line">1267</span><br><span class="line">1268</span><br><span class="line">1269</span><br><span class="line">1270</span><br><span class="line">1271</span><br><span class="line">1272</span><br><span class="line">1273</span><br><span class="line">1274</span><br><span class="line">1275</span><br><span class="line">1276</span><br><span class="line">1277</span><br><span class="line">1278</span><br><span class="line">1279</span><br><span class="line">1280</span><br><span class="line">1281</span><br><span class="line">1282</span><br><span class="line">1283</span><br><span class="line">1284</span><br><span class="line">1285</span><br><span class="line">1286</span><br><span class="line">1287</span><br><span class="line">1288</span><br><span class="line">1289</span><br><span class="line">1290</span><br><span class="line">1291</span><br><span class="line">1292</span><br><span class="line">1293</span><br><span class="line">1294</span><br><span class="line">1295</span><br><span class="line">1296</span><br><span class="line">1297</span><br><span class="line">1298</span><br><span class="line">1299</span><br><span class="line">1300</span><br><span class="line">1301</span><br><span class="line">1302</span><br><span class="line">1303</span><br><span class="line">1304</span><br><span class="line">1305</span><br><span class="line">1306</span><br><span class="line">1307</span><br><span class="line">1308</span><br><span class="line">1309</span><br><span class="line">1310</span><br><span class="line">1311</span><br><span class="line">1312</span><br><span class="line">1313</span><br><span class="line">1314</span><br><span class="line">1315</span><br><span class="line">1316</span><br><span class="line">1317</span><br><span class="line">1318</span><br><span class="line">1319</span><br><span class="line">1320</span><br><span class="line">1321</span><br><span class="line">1322</span><br><span class="line">1323</span><br><span class="line">1324</span><br><span class="line">1325</span><br><span class="line">1326</span><br><span class="line">1327</span><br><span class="line">1328</span><br><span class="line">1329</span><br><span class="line">1330</span><br><span class="line">1331</span><br><span class="line">1332</span><br><span class="line">1333</span><br><span class="line">1334</span><br><span class="line">1335</span><br><span class="line">1336</span><br><span class="line">1337</span><br><span class="line">1338</span><br><span class="line">1339</span><br><span class="line">1340</span><br><span class="line">1341</span><br><span class="line">1342</span><br><span class="line">1343</span><br><span class="line">1344</span><br><span class="line">1345</span><br><span class="line">1346</span><br><span class="line">1347</span><br><span class="line">1348</span><br><span class="line">1349</span><br><span class="line">1350</span><br><span class="line">1351</span><br><span class="line">1352</span><br><span class="line">1353</span><br><span class="line">1354</span><br><span class="line">1355</span><br><span class="line">1356</span><br><span class="line">1357</span><br><span class="line">1358</span><br><span class="line">1359</span><br><span class="line">1360</span><br><span class="line">1361</span><br><span class="line">1362</span><br><span class="line">1363</span><br><span class="line">1364</span><br><span class="line">1365</span><br><span class="line">1366</span><br><span class="line">1367</span><br><span class="line">1368</span><br><span class="line">1369</span><br><span class="line">1370</span><br><span class="line">1371</span><br><span class="line">1372</span><br><span class="line">1373</span><br><span class="line">1374</span><br><span class="line">1375</span><br><span class="line">1376</span><br><span class="line">1377</span><br><span class="line">1378</span><br><span class="line">1379</span><br><span class="line">1380</span><br><span class="line">1381</span><br><span class="line">1382</span><br><span class="line">1383</span><br><span class="line">1384</span><br><span class="line">1385</span><br><span class="line">1386</span><br><span class="line">1387</span><br><span class="line">1388</span><br><span class="line">1389</span><br><span class="line">1390</span><br><span class="line">1391</span><br><span class="line">1392</span><br><span class="line">1393</span><br><span class="line">1394</span><br><span class="line">1395</span><br><span class="line">1396</span><br><span class="line">1397</span><br><span class="line">1398</span><br><span class="line">1399</span><br><span class="line">1400</span><br><span class="line">1401</span><br><span class="line">1402</span><br><span class="line">1403</span><br><span class="line">1404</span><br><span class="line">1405</span><br><span class="line">1406</span><br><span class="line">1407</span><br><span class="line">1408</span><br><span class="line">1409</span><br><span class="line">1410</span><br><span class="line">1411</span><br><span class="line">1412</span><br><span class="line">1413</span><br><span class="line">1414</span><br><span class="line">1415</span><br><span class="line">1416</span><br><span class="line">1417</span><br><span class="line">1418</span><br><span class="line">1419</span><br><span class="line">1420</span><br><span class="line">1421</span><br><span class="line">1422</span><br><span class="line">1423</span><br><span class="line">1424</span><br><span class="line">1425</span><br><span class="line">1426</span><br><span class="line">1427</span><br><span class="line">1428</span><br><span class="line">1429</span><br><span class="line">1430</span><br><span class="line">1431</span><br><span class="line">1432</span><br><span class="line">1433</span><br><span class="line">1434</span><br><span class="line">1435</span><br><span class="line">1436</span><br><span class="line">1437</span><br><span class="line">1438</span><br><span class="line">1439</span><br><span class="line">1440</span><br><span class="line">1441</span><br><span class="line">1442</span><br><span class="line">1443</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Redis configuration file example.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Note that in order to read the configuration file, Redis must be</span></span><br><span class="line"><span class="comment"># started with the file path as first argument:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># ./redis-server /path/to/redis.conf</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Note on units: when memory size is needed, it is possible to specify</span></span><br><span class="line"><span class="comment"># it in the usual form of 1k 5GB 4M and so forth:</span></span><br><span class="line"><span class="comment"># 配置大小单位,开头定义了一些基本的度量单位，只支持bytes，不支持bit  对大小写不敏感</span></span><br><span class="line"><span class="comment"># 1k =&gt; 1000 bytes</span></span><br><span class="line"><span class="comment"># 1kb =&gt; 1024 bytes</span></span><br><span class="line"><span class="comment"># 1m =&gt; 1000000 bytes</span></span><br><span class="line"><span class="comment"># 1mb =&gt; 1024*1024 bytes</span></span><br><span class="line"><span class="comment"># 1g =&gt; 1000000000 bytes</span></span><br><span class="line"><span class="comment"># 1gb =&gt; 1024*1024*1024 bytes</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># units are case insensitive so 1GB 1Gb 1gB are all the same.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">################################## INCLUDES ###################################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Include one or more other config files here.  This is useful if you</span></span><br><span class="line"><span class="comment"># have a standard template that goes to all Redis servers but also need</span></span><br><span class="line"><span class="comment"># to customize a few per-server settings.  Include files can include</span></span><br><span class="line"><span class="comment"># other files, so use this wisely.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Notice option &quot;include&quot; won&#x27;t be rewritten by command &quot;CONFIG REWRITE&quot;</span></span><br><span class="line"><span class="comment"># from admin or Redis Sentinel. Since Redis always uses the last processed</span></span><br><span class="line"><span class="comment"># line as value of a configuration directive, you&#x27;d better put includes</span></span><br><span class="line"><span class="comment"># at the beginning of this file to avoid overwriting config change at runtime.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># If instead you are interested in using includes to override configuration</span></span><br><span class="line"><span class="comment"># options, it is better to use include as the last line.</span></span><br><span class="line"><span class="comment"># 引入其他文件</span></span><br><span class="line"><span class="comment"># include /path/to/local.conf</span></span><br><span class="line"><span class="comment"># include /path/to/other.conf</span></span><br><span class="line"></span><br><span class="line"><span class="comment">################################## MODULES #####################################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Load modules at startup. If the server is not able to load modules</span></span><br><span class="line"><span class="comment"># it will abort. It is possible to use multiple loadmodule directives.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># loadmodule /path/to/my_module.so</span></span><br><span class="line"><span class="comment"># loadmodule /path/to/other_module.so</span></span><br><span class="line"></span><br><span class="line"><span class="comment">################################## NETWORK #####################################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># By default, if no &quot;bind&quot; configuration directive is specified, Redis listens</span></span><br><span class="line"><span class="comment"># for connections from all the network interfaces available on the server.</span></span><br><span class="line"><span class="comment"># It is possible to listen to just one or multiple selected interfaces using</span></span><br><span class="line"><span class="comment"># the &quot;bind&quot; configuration directive, followed by one or more IP addresses.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Examples:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># bind 192.168.1.100 10.0.0.1</span></span><br><span class="line"><span class="comment"># bind 127.0.0.1 ::1</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># ~~~ WARNING ~~~ If the computer running Redis is directly exposed to the</span></span><br><span class="line"><span class="comment"># internet, binding to all the interfaces is dangerous and will expose the</span></span><br><span class="line"><span class="comment"># instance to everybody on the internet. So by default we uncomment the</span></span><br><span class="line"><span class="comment"># following bind directive, that will force Redis to listen only into</span></span><br><span class="line"><span class="comment"># the IPv4 loopback interface address (this means Redis will be able to</span></span><br><span class="line"><span class="comment"># accept connections only from clients running into the same computer it</span></span><br><span class="line"><span class="comment"># is running).</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># IF YOU ARE SURE YOU WANT YOUR INSTANCE TO LISTEN TO ALL THE INTERFACES</span></span><br><span class="line"><span class="comment"># JUST COMMENT THE FOLLOWING LINE.</span></span><br><span class="line"><span class="comment"># ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span></span><br><span class="line"><span class="comment"># 绑定Ip   指定可以连接本实例Redis的ip  如果注释（删掉）则任意IP都可以连接</span></span><br><span class="line"><span class="attr">bind</span> <span class="string">127.0.0.1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Protected mode is a layer of security protection, in order to avoid that</span></span><br><span class="line"><span class="comment"># Redis instances left open on the internet are accessed and exploited.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># When protected mode is on and if:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 1) The server is not binding explicitly to a set of addresses using the</span></span><br><span class="line"><span class="comment">#    &quot;bind&quot; directive.</span></span><br><span class="line"><span class="comment"># 2) No password is configured.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># The server only accepts connections from clients connecting from the</span></span><br><span class="line"><span class="comment"># IPv4 and IPv6 loopback addresses 127.0.0.1 and ::1, and from Unix domain</span></span><br><span class="line"><span class="comment"># sockets.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># By default protected mode is enabled. You should disable it only if</span></span><br><span class="line"><span class="comment"># you are sure you want clients from other hosts to connect to Redis</span></span><br><span class="line"><span class="comment"># even if no authentication is configured, nor a specific set of interfaces</span></span><br><span class="line"><span class="comment"># are explicitly listed using the &quot;bind&quot; directive.</span></span><br><span class="line"><span class="comment">#禁止外网访问redis，如果启用了，即使注释掉了bind 127.0.0.1，再访问redis的时候还是无法连接的</span></span><br><span class="line"><span class="comment">#它启用的条件有两个，第一是没有使用bind，第二是没有设置访问密码。</span></span><br><span class="line"><span class="meta">protected-mode</span> <span class="string">yes</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Accept connections on the specified port, default is 6379 (IANA #815344).</span></span><br><span class="line"><span class="comment"># If port 0 is specified Redis will not listen on a TCP socket.</span></span><br><span class="line"><span class="comment">#指定Redis的端口</span></span><br><span class="line"><span class="attr">port</span> <span class="string">6379</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># TCP listen() backlog.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># In high requests-per-second environments you need an high backlog in order</span></span><br><span class="line"><span class="comment"># to avoid slow clients connections issues. Note that the Linux kernel</span></span><br><span class="line"><span class="comment"># will silently truncate it to the value of /proc/sys/net/core/somaxconn so</span></span><br><span class="line"><span class="comment"># make sure to raise both the value of somaxconn and tcp_max_syn_backlog</span></span><br><span class="line"><span class="comment"># in order to get the desired effect.</span></span><br><span class="line"><span class="comment"># 此参数确定了TCP连接中已完成队列(完成三次握手之后)的长度， </span></span><br><span class="line"><span class="comment"># 当然此值必须不大于Linux系统定义的/proc/sys/net/core/somaxconn值，默认是511，</span></span><br><span class="line"><span class="comment"># 而Linux的默认参数值是128。当系统并发量大并且客户端速度缓慢的时候，可以将这二个参数一起参考设定。</span></span><br><span class="line"><span class="comment"># 在高并发环境下你需要一个高backlog值来避免慢客户端连接问题</span></span><br><span class="line"><span class="meta">tcp-backlog</span> <span class="string">511</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Unix socket.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Specify the path for the Unix socket that will be used to listen for</span></span><br><span class="line"><span class="comment"># incoming connections. There is no default, so Redis will not listen</span></span><br><span class="line"><span class="comment"># on a unix socket when not specified.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># unixsocket /tmp/redis.sock</span></span><br><span class="line"><span class="comment"># unixsocketperm 700</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Close the connection after a client is idle for N seconds (0 to disable)</span></span><br><span class="line"><span class="comment"># 当客户端闲置多长时间后关闭连接，如果指定为0，表示关闭该功能</span></span><br><span class="line"><span class="attr">timeout</span> <span class="string">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># TCP keepalive.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># If non-zero, use SO_KEEPALIVE to send TCP ACKs to clients in absence</span></span><br><span class="line"><span class="comment"># of communication. This is useful for two reasons:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 1) Detect dead peers.</span></span><br><span class="line"><span class="comment"># 2) Take the connection alive from the point of view of network</span></span><br><span class="line"><span class="comment">#    equipment in the middle.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># On Linux, the specified value (in seconds) is the period used to send ACKs.</span></span><br><span class="line"><span class="comment"># Note that to close the connection the double of the time is needed.</span></span><br><span class="line"><span class="comment"># On other kernels the period depends on the kernel configuration.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># A reasonable value for this option is 300 seconds, which is the new</span></span><br><span class="line"><span class="comment"># Redis default starting with Redis 3.2.1.</span></span><br><span class="line"><span class="comment"># 设置多长时间检测死连接 单位为秒，如果设置为0，则不会进行Keepalive检测</span></span><br><span class="line"><span class="meta">tcp-keepalive</span> <span class="string">300</span></span><br><span class="line"></span><br><span class="line"><span class="comment">################################# GENERAL #####################################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># By default Redis does not run as a daemon. Use &#x27;yes&#x27; if you need it.</span></span><br><span class="line"><span class="comment"># Note that Redis will write a pid file in /var/run/redis.pid when daemonized.</span></span><br><span class="line"><span class="comment"># 是否以守护进程启动</span></span><br><span class="line"><span class="attr">daemonize</span> <span class="string">no</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># If you run Redis from upstart or systemd, Redis can interact with your</span></span><br><span class="line"><span class="comment"># supervision tree. Options:</span></span><br><span class="line"><span class="comment">#   supervised no      - no supervision interaction</span></span><br><span class="line"><span class="comment">#   supervised upstart - signal upstart by putting Redis into SIGSTOP mode</span></span><br><span class="line"><span class="comment">#   supervised systemd - signal systemd by writing READY=1 to $NOTIFY_SOCKET</span></span><br><span class="line"><span class="comment">#   supervised auto    - detect upstart or systemd method based on</span></span><br><span class="line"><span class="comment">#                        UPSTART_JOB or NOTIFY_SOCKET environment variables</span></span><br><span class="line"><span class="comment"># <span class="doctag">Note:</span> these supervision methods only signal &quot;process is ready.&quot;</span></span><br><span class="line"><span class="comment">#       They do not enable continuous liveness pings back to your supervisor.</span></span><br><span class="line"><span class="comment">#可以通过upstart和systemd管理Redis守护进程，这个参数是和具体的操作系统相关的。</span></span><br><span class="line"><span class="attr">supervised</span> <span class="string">no</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># If a pid file is specified, Redis writes it where specified at startup</span></span><br><span class="line"><span class="comment"># and removes it at exit.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># When the server runs non daemonized, no pid file is created if none is</span></span><br><span class="line"><span class="comment"># specified in the configuration. When the server is daemonized, the pid file</span></span><br><span class="line"><span class="comment"># is used even if not specified, defaulting to &quot;/var/run/redis.pid&quot;.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Creating a pid file is best effort: if Redis is not able to create it</span></span><br><span class="line"><span class="comment"># nothing bad happens, the server will start and run normally.</span></span><br><span class="line"><span class="comment">#当Redis以守护进程方式运行时，Redis默认会把pid写入/var/run/redis.pid文件，可以通过pidfile指定</span></span><br><span class="line"><span class="attr">pidfile</span> <span class="string">/var/run/redis_6379.pid</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Specify the server verbosity level.</span></span><br><span class="line"><span class="comment"># This can be one of:</span></span><br><span class="line"><span class="comment"># debug (a lot of information, useful for development/testing)</span></span><br><span class="line"><span class="comment"># verbose (many rarely useful info, but not a mess like the debug level)</span></span><br><span class="line"><span class="comment"># notice (moderately verbose, what you want in production probably)</span></span><br><span class="line"><span class="comment"># warning (only very important / critical messages are logged)</span></span><br><span class="line"><span class="comment">#设置日志的级别  debug、verbose、notice、warning，默认为verbose</span></span><br><span class="line"><span class="attr">loglevel</span> <span class="string">notice</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Specify the log file name. Also the empty string can be used to force</span></span><br><span class="line"><span class="comment"># Redis to log on the standard output. Note that if you use standard</span></span><br><span class="line"><span class="comment"># output for logging but daemonize, logs will be sent to /dev/null</span></span><br><span class="line"><span class="comment">#日志文件的位置，当指定为空字符串时，为标准输出，如果redis已守护进程模式运行，那么日志将会输出到  /dev/null 。</span></span><br><span class="line"><span class="attr">logfile</span> <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># To enable logging to the system logger, just set &#x27;syslog-enabled&#x27; to yes,</span></span><br><span class="line"><span class="comment"># and optionally update the other syslog parameters to suit your needs.</span></span><br><span class="line"><span class="comment"># syslog-enabled no</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Specify the syslog identity.</span></span><br><span class="line"><span class="comment"># syslog-ident redis</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Specify the syslog facility. Must be USER or between LOCAL0-LOCAL7.</span></span><br><span class="line"><span class="comment"># syslog-facility local0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Set the number of databases. The default database is DB 0, you can select</span></span><br><span class="line"><span class="comment"># a different one on a per-connection basis using SELECT &lt;dbid&gt; where</span></span><br><span class="line"><span class="comment"># dbid is a number between 0 and &#x27;databases&#x27;-1</span></span><br><span class="line"><span class="comment"># 设置数据库的数目。默认的数据库是DB 0 ，可以在每个连接上使用select  &lt;dbid&gt; 命令选择一个不同的数据库，dbid是一个介于0到databases - 1 之间的数值。</span></span><br><span class="line"><span class="attr">databases</span> <span class="string">16</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># By default Redis shows an ASCII art logo only when started to log to the</span></span><br><span class="line"><span class="comment"># standard output and if the standard output is a TTY. Basically this means</span></span><br><span class="line"><span class="comment"># that normally a logo is displayed only in interactive sessions.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># However it is possible to force the pre-4.0 behavior and always show a</span></span><br><span class="line"><span class="comment"># ASCII art logo in startup logs by setting the following option to yes.</span></span><br><span class="line"><span class="meta">always-show-logo</span> <span class="string">yes</span></span><br><span class="line"></span><br><span class="line"><span class="comment">################################ SNAPSHOTTING  ################################</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Save the DB on disk:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#   save &lt;seconds&gt; &lt;changes&gt;</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#   Will save the DB if both the given number of seconds and the given</span></span><br><span class="line"><span class="comment">#   number of write operations against the DB occurred.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#   In the example below the behaviour will be to save:</span></span><br><span class="line"><span class="comment">#   after 900 sec (15 min) if at least 1 key changed</span></span><br><span class="line"><span class="comment">#   after 300 sec (5 min) if at least 10 keys changed</span></span><br><span class="line"><span class="comment">#   after 60 sec if at least 10000 keys changed</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#   <span class="doctag">Note:</span> you can disable saving completely by commenting out all &quot;save&quot; lines.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#   It is also possible to remove all the previously configured save</span></span><br><span class="line"><span class="comment">#   points by adding a save directive with a single empty string argument</span></span><br><span class="line"><span class="comment">#   like in the following example:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#   save &quot;&quot;</span></span><br><span class="line"><span class="comment"># 指定在多长时间内，有多少次更新操作，就将数据同步到数据文件，可以多个条件配合</span></span><br><span class="line"><span class="comment"># 这里表示900秒（15分钟）内有1个更改，300秒（5分钟）内有10个更改以及60秒内有10000个更改</span></span><br><span class="line"><span class="comment"># 如果想禁用RDB持久化的策略，只要不设置任何save指令，或者给save传入一个空字符串参数也可以</span></span><br><span class="line"><span class="attr">save</span> <span class="string">900 1</span></span><br><span class="line"><span class="attr">save</span> <span class="string">300 10</span></span><br><span class="line"><span class="attr">save</span> <span class="string">60 10000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># By default Redis will stop accepting writes if RDB snapshots are enabled</span></span><br><span class="line"><span class="comment"># (at least one save point) and the latest background save failed.</span></span><br><span class="line"><span class="comment"># This will make the user aware (in a hard way) that data is not persisting</span></span><br><span class="line"><span class="comment"># on disk properly, otherwise chances are that no one will notice and some</span></span><br><span class="line"><span class="comment"># disaster will happen.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># If the background saving process will start working again Redis will</span></span><br><span class="line"><span class="comment"># automatically allow writes again.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># However if you have setup your proper monitoring of the Redis server</span></span><br><span class="line"><span class="comment"># and persistence, you may want to disable this feature so that Redis will</span></span><br><span class="line"><span class="comment"># continue to work as usual even if there are problems with disk,</span></span><br><span class="line"><span class="comment"># permissions, and so forth.</span></span><br><span class="line"><span class="comment"># 默认情况下，如果 redis 最后一次的后台保存失败，redis 将停止接受写操作，这样以一种强硬的方式让用户知道数据不能正确的持久化到磁盘， </span></span><br><span class="line"><span class="comment"># 否则就会没人注意到灾难的发生。 如果后台保存进程重新启动工作了，redis 也将自动的允许写操作。</span></span><br><span class="line"><span class="comment"># 如果配置成no，表示你不在乎数据不一致或者有其他的手段发现和控制</span></span><br><span class="line"><span class="meta">stop-writes-on-bgsave-error</span> <span class="string">yes</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Compress string objects using LZF when dump .rdb databases?</span></span><br><span class="line"><span class="comment"># For default that&#x27;s set to &#x27;yes&#x27; as it&#x27;s almost always a win.</span></span><br><span class="line"><span class="comment"># If you want to save some CPU in the saving child set it to &#x27;no&#x27; but</span></span><br><span class="line"><span class="comment"># the dataset will likely be bigger if you have compressible values or keys.</span></span><br><span class="line"><span class="comment"># 对于存储到磁盘中的快照(rdb)，可以设置是否进行压缩存储。如果是的话，redis会采用</span></span><br><span class="line"><span class="comment"># LZF算法进行压缩。如果你不想消耗CPU来进行压缩的话，可以设置为关闭此功能</span></span><br><span class="line"><span class="attr">rdbcompression</span> <span class="string">yes</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Since version 5 of RDB a CRC64 checksum is placed at the end of the file.</span></span><br><span class="line"><span class="comment"># This makes the format more resistant to corruption but there is a performance</span></span><br><span class="line"><span class="comment"># hit to pay (around 10%) when saving and loading RDB files, so you can disable it</span></span><br><span class="line"><span class="comment"># for maximum performances.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># RDB files created with checksum disabled have a checksum of zero that will</span></span><br><span class="line"><span class="comment"># tell the loading code to skip the check.</span></span><br><span class="line"><span class="comment"># 在存储快照后，还可以让redis使用CRC64算法来进行数据校验，但是这样做会增加大约</span></span><br><span class="line"><span class="comment"># 10%的性能消耗，如果希望获取到最大的性能提升，可以关闭此功能</span></span><br><span class="line"><span class="attr">rdbchecksum</span> <span class="string">yes</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># The filename where to dump the DB</span></span><br><span class="line"><span class="comment">#rdb文件的名字。</span></span><br><span class="line"><span class="attr">dbfilename</span> <span class="string">dump.rdb</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># The working directory.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># The DB will be written inside this directory, with the filename specified</span></span><br><span class="line"><span class="comment"># above using the &#x27;dbfilename&#x27; configuration directive.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># The Append Only File will also be created inside this directory.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Note that you must specify a directory here, not a file name.</span></span><br><span class="line"><span class="comment"># dbfilename文件存放目录。必须是一个目录，aof文件也会保存到该目录下。</span></span><br><span class="line"><span class="attr">dir</span> <span class="string">./</span></span><br><span class="line"></span><br><span class="line"><span class="comment">################################# REPLICATION #################################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Master-Replica replication. Use replicaof to make a Redis instance a copy of</span></span><br><span class="line"><span class="comment"># another Redis server. A few things to understand ASAP about Redis replication.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#   +------------------+      +---------------+</span></span><br><span class="line"><span class="comment">#   |      Master      | ---&gt; |    Replica    |</span></span><br><span class="line"><span class="comment">#   | (receive writes) |      |  (exact copy) |</span></span><br><span class="line"><span class="comment">#   +------------------+      +---------------+</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 1) Redis replication is asynchronous, but you can configure a master to</span></span><br><span class="line"><span class="comment">#    stop accepting writes if it appears to be not connected with at least</span></span><br><span class="line"><span class="comment">#    a given number of replicas.</span></span><br><span class="line"><span class="comment"># 2) Redis replicas are able to perform a partial resynchronization with the</span></span><br><span class="line"><span class="comment">#    master if the replication link is lost for a relatively small amount of</span></span><br><span class="line"><span class="comment">#    time. You may want to configure the replication backlog size (see the next</span></span><br><span class="line"><span class="comment">#    sections of this file) with a sensible value depending on your needs.</span></span><br><span class="line"><span class="comment"># 3) Replication is automatic and does not need user intervention. After a</span></span><br><span class="line"><span class="comment">#    network partition replicas automatically try to reconnect to masters</span></span><br><span class="line"><span class="comment">#    and resynchronize with them.</span></span><br><span class="line"><span class="comment">#设置当本机为slave服务时，设置master服务的IP地址及端口，在Redis启动时，它会自动从master进行数据同步</span></span><br><span class="line"><span class="comment"># replicaof &lt;masterip&gt; &lt;masterport&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># If the master is password protected (using the &quot;requirepass&quot; configuration</span></span><br><span class="line"><span class="comment"># directive below) it is possible to tell the replica to authenticate before</span></span><br><span class="line"><span class="comment"># starting the replication synchronization process, otherwise the master will</span></span><br><span class="line"><span class="comment"># refuse the replica request.</span></span><br><span class="line"><span class="comment">#当master服务设置了密码保护时，slave服务连接master的密码</span></span><br><span class="line"><span class="comment"># masterauth &lt;master-password&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># When a replica loses its connection with the master, or when the replication</span></span><br><span class="line"><span class="comment"># is still in progress, the replica can act in two different ways:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 1) if replica-serve-stale-data is set to &#x27;yes&#x27; (the default) the replica will</span></span><br><span class="line"><span class="comment">#    still reply to client requests, possibly with out of date data, or the</span></span><br><span class="line"><span class="comment">#    data set may just be empty if this is the first synchronization.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 2) if replica-serve-stale-data is set to &#x27;no&#x27; the replica will reply with</span></span><br><span class="line"><span class="comment">#    an error &quot;SYNC with master in progress&quot; to all the kind of commands</span></span><br><span class="line"><span class="comment">#    but to INFO, replicaOF, AUTH, PING, SHUTDOWN, REPLCONF, ROLE, CONFIG,</span></span><br><span class="line"><span class="comment">#    SUBSCRIBE, UNSUBSCRIBE, PSUBSCRIBE, PUNSUBSCRIBE, PUBLISH, PUBSUB,</span></span><br><span class="line"><span class="comment">#    COMMAND, POST, HOST: and LATENCY.</span></span><br><span class="line"><span class="comment">#当一个slave与master失去联系时，或者复制正在进行的时候，slave应对请求的行为: </span></span><br><span class="line"><span class="comment">#如果为 yes（默认值） ，slave 仍然会应答客户端请求，但返回的数据可能是过时，或者数据可能是空的在第一次同步的时候</span></span><br><span class="line"><span class="comment">#如果为 no ，在你执行除了 info 和 salveof 之外的其他命令时，slave 都将返回一个 &quot;SYNC with master in progress&quot; 的错误。</span></span><br><span class="line"><span class="meta">replica-serve-stale-data</span> <span class="string">yes</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># You can configure a replica instance to accept writes or not. Writing against</span></span><br><span class="line"><span class="comment"># a replica instance may be useful to store some ephemeral data (because data</span></span><br><span class="line"><span class="comment"># written on a replica will be easily deleted after resync with the master) but</span></span><br><span class="line"><span class="comment"># may also cause problems if clients are writing to it because of a</span></span><br><span class="line"><span class="comment"># misconfiguration.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Since Redis 2.6 by default replicas are read-only.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># <span class="doctag">Note:</span> read only replicas are not designed to be exposed to untrusted clients</span></span><br><span class="line"><span class="comment"># on the internet. It&#x27;s just a protection layer against misuse of the instance.</span></span><br><span class="line"><span class="comment"># Still a read only replica exports by default all the administrative commands</span></span><br><span class="line"><span class="comment"># such as CONFIG, DEBUG, and so forth. To a limited extent you can improve</span></span><br><span class="line"><span class="comment"># security of read only replicas using &#x27;rename-command&#x27; to shadow all the</span></span><br><span class="line"><span class="comment"># administrative / dangerous commands.</span></span><br><span class="line"><span class="comment">#设置slave是否是只读的。从2.6版起，slave默认是只读的。</span></span><br><span class="line"><span class="meta">replica-read-only</span> <span class="string">yes</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Replication SYNC strategy: disk or socket.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># -------------------------------------------------------</span></span><br><span class="line"><span class="comment"># WARNING: DISKLESS REPLICATION IS EXPERIMENTAL CURRENTLY</span></span><br><span class="line"><span class="comment"># -------------------------------------------------------</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># New replicas and reconnecting replicas that are not able to continue the replication</span></span><br><span class="line"><span class="comment"># process just receiving differences, need to do what is called a &quot;full</span></span><br><span class="line"><span class="comment"># synchronization&quot;. An RDB file is transmitted from the master to the replicas.</span></span><br><span class="line"><span class="comment"># The transmission can happen in two different ways:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 1) Disk-backed: The Redis master creates a new process that writes the RDB</span></span><br><span class="line"><span class="comment">#                 file on disk. Later the file is transferred by the parent</span></span><br><span class="line"><span class="comment">#                 process to the replicas incrementally.</span></span><br><span class="line"><span class="comment"># 2) Diskless: The Redis master creates a new process that directly writes the</span></span><br><span class="line"><span class="comment">#              RDB file to replica sockets, without touching the disk at all.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># With disk-backed replication, while the RDB file is generated, more replicas</span></span><br><span class="line"><span class="comment"># can be queued and served with the RDB file as soon as the current child producing</span></span><br><span class="line"><span class="comment"># the RDB file finishes its work. With diskless replication instead once</span></span><br><span class="line"><span class="comment"># the transfer starts, new replicas arriving will be queued and a new transfer</span></span><br><span class="line"><span class="comment"># will start when the current one terminates.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># When diskless replication is used, the master waits a configurable amount of</span></span><br><span class="line"><span class="comment"># time (in seconds) before starting the transfer in the hope that multiple replicas</span></span><br><span class="line"><span class="comment"># will arrive and the transfer can be parallelized.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># With slow disks and fast (large bandwidth) networks, diskless replication</span></span><br><span class="line"><span class="comment"># works better.</span></span><br><span class="line"><span class="comment"># 主从数据复制是否使用无硬盘复制功能。</span></span><br><span class="line"><span class="meta">repl-diskless-sync</span> <span class="string">no</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># When diskless replication is enabled, it is possible to configure the delay</span></span><br><span class="line"><span class="comment"># the server waits in order to spawn the child that transfers the RDB via socket</span></span><br><span class="line"><span class="comment"># to the replicas.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># This is important since once the transfer starts, it is not possible to serve</span></span><br><span class="line"><span class="comment"># new replicas arriving, that will be queued for the next RDB transfer, so the server</span></span><br><span class="line"><span class="comment"># waits a delay in order to let more replicas arrive.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># The delay is specified in seconds, and by default is 5 seconds. To disable</span></span><br><span class="line"><span class="comment"># it entirely just set it to 0 seconds and the transfer will start ASAP.</span></span><br><span class="line"><span class="meta">repl-diskless-sync-delay</span> <span class="string">5</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Replicas send PINGs to server in a predefined interval. It&#x27;s possible to change</span></span><br><span class="line"><span class="comment"># this interval with the repl_ping_replica_period option. The default value is 10</span></span><br><span class="line"><span class="comment"># seconds.</span></span><br><span class="line"><span class="comment"># 指定slave定期ping master的周期，默认10秒钟。</span></span><br><span class="line"><span class="comment"># repl-ping-replica-period 10</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># The following option sets the replication timeout for:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 1) Bulk transfer I/O during SYNC, from the point of view of replica.</span></span><br><span class="line"><span class="comment"># 2) Master timeout from the point of view of replicas (data, pings).</span></span><br><span class="line"><span class="comment"># 3) Replica timeout from the point of view of masters (REPLCONF ACK pings).</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># It is important to make sure that this value is greater than the value</span></span><br><span class="line"><span class="comment"># specified for repl-ping-replica-period otherwise a timeout will be detected</span></span><br><span class="line"><span class="comment"># every time there is low traffic between the master and the replica.</span></span><br><span class="line"><span class="comment">#设置主库批量数据传输时间或者ping回复时间间隔，默认值是60秒 。</span></span><br><span class="line"><span class="comment"># repl-timeout 60</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Disable TCP_NODELAY on the replica socket after SYNC?</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># If you select &quot;yes&quot; Redis will use a smaller number of TCP packets and</span></span><br><span class="line"><span class="comment"># less bandwidth to send data to replicas. But this can add a delay for</span></span><br><span class="line"><span class="comment"># the data to appear on the replica side, up to 40 milliseconds with</span></span><br><span class="line"><span class="comment"># Linux kernels using a default configuration.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># If you select &quot;no&quot; the delay for data to appear on the replica side will</span></span><br><span class="line"><span class="comment"># be reduced but more bandwidth will be used for replication.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># By default we optimize for low latency, but in very high traffic conditions</span></span><br><span class="line"><span class="comment"># or when the master and replicas are many hops away, turning this to &quot;yes&quot; may</span></span><br><span class="line"><span class="comment"># be a good idea.</span></span><br><span class="line"><span class="comment">#指定向slave同步数据时，是否禁用socket的NO_DELAY选项。</span></span><br><span class="line"><span class="comment">#若配置为“yes”，则禁用NO_DELAY，则TCP协议栈会合并小包统一发送，这样可以减少主从节点间的包数量并节省带宽，但会增加数据同步到 slave的时间。</span></span><br><span class="line"><span class="comment">#若配置为“no”，表明启用NO_DELAY，则TCP协议栈不会延迟小包的发送时机，这样数据同步的延时会减少，但需要更大的带宽。 </span></span><br><span class="line"><span class="comment">#通常情况下，应该配置为no以降低同步延时，但在主从节点间网络负载已经很高的情况下，可以配置为yes。</span></span><br><span class="line"><span class="meta">repl-disable-tcp-nodelay</span> <span class="string">no</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Set the replication backlog size. The backlog is a buffer that accumulates</span></span><br><span class="line"><span class="comment"># replica data when replicas are disconnected for some time, so that when a replica</span></span><br><span class="line"><span class="comment"># wants to reconnect again, often a full resync is not needed, but a partial</span></span><br><span class="line"><span class="comment"># resync is enough, just passing the portion of data the replica missed while</span></span><br><span class="line"><span class="comment"># disconnected.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># The bigger the replication backlog, the longer the time the replica can be</span></span><br><span class="line"><span class="comment"># disconnected and later be able to perform a partial resynchronization.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># The backlog is only allocated once there is at least a replica connected.</span></span><br><span class="line"><span class="comment"># 设置主从复制backlog容量大小。这个 backlog 是一个用来在 slaves 被断开连接时存放 slave 数据的 buffer，</span></span><br><span class="line"><span class="comment"># 所以当一个 slave 想要重新连接，通常不希望全部重新同步，只是部分同步就够了，仅仅传递 slave 在断开连接时丢失的这部分数据。</span></span><br><span class="line"><span class="comment"># 这个值越大，salve 可以断开连接的时间就越长。</span></span><br><span class="line"><span class="comment"># repl-backlog-size 1mb</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># After a master has no longer connected replicas for some time, the backlog</span></span><br><span class="line"><span class="comment"># will be freed. The following option configures the amount of seconds that</span></span><br><span class="line"><span class="comment"># need to elapse, starting from the time the last replica disconnected, for</span></span><br><span class="line"><span class="comment"># the backlog buffer to be freed.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Note that replicas never free the backlog for timeout, since they may be</span></span><br><span class="line"><span class="comment"># promoted to masters later, and should be able to correctly &quot;partially</span></span><br><span class="line"><span class="comment"># resynchronize&quot; with the replicas: hence they should always accumulate backlog.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># A value of 0 means to never release the backlog.</span></span><br><span class="line"><span class="comment">#配置当master和slave失去联系多少秒之后，清空backlog释放空间。当配置成0时，表示永远不清空。</span></span><br><span class="line"><span class="comment"># repl-backlog-ttl 3600</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># The replica priority is an integer number published by Redis in the INFO output.</span></span><br><span class="line"><span class="comment"># It is used by Redis Sentinel in order to select a replica to promote into a</span></span><br><span class="line"><span class="comment"># master if the master is no longer working correctly.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># A replica with a low priority number is considered better for promotion, so</span></span><br><span class="line"><span class="comment"># for instance if there are three replicas with priority 10, 100, 25 Sentinel will</span></span><br><span class="line"><span class="comment"># pick the one with priority 10, that is the lowest.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># However a special priority of 0 marks the replica as not able to perform the</span></span><br><span class="line"><span class="comment"># role of master, so a replica with priority of 0 will never be selected by</span></span><br><span class="line"><span class="comment"># Redis Sentinel for promotion.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># By default the priority is 100.</span></span><br><span class="line"><span class="comment">#当 master 不能正常工作的时候，Redis Sentinel 会从 slaves 中选出一个新的 master，这个值越小，就越会被优先选中，但是如果是 0 ， 那是意味着这个 slave 不可能被选中。 默认优先级为 100。</span></span><br><span class="line"><span class="meta">replica-priority</span> <span class="string">100</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># It is possible for a master to stop accepting writes if there are less than</span></span><br><span class="line"><span class="comment"># N replicas connected, having a lag less or equal than M seconds.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># The N replicas need to be in &quot;online&quot; state.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># The lag in seconds, that must be &lt;= the specified value, is calculated from</span></span><br><span class="line"><span class="comment"># the last ping received from the replica, that is usually sent every second.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># This option does not GUARANTEE that N replicas will accept the write, but</span></span><br><span class="line"><span class="comment"># will limit the window of exposure for lost writes in case not enough replicas</span></span><br><span class="line"><span class="comment"># are available, to the specified number of seconds.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># For example to require at least 3 replicas with a lag &lt;= 10 seconds use:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># min-replicas-to-write 3</span></span><br><span class="line"><span class="comment"># min-replicas-max-lag 10</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Setting one or the other to 0 disables the feature.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># By default min-replicas-to-write is set to 0 (feature disabled) and</span></span><br><span class="line"><span class="comment"># min-replicas-max-lag is set to 10.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># A Redis master is able to list the address and port of the attached</span></span><br><span class="line"><span class="comment"># replicas in different ways. For example the &quot;INFO replication&quot; section</span></span><br><span class="line"><span class="comment"># offers this information, which is used, among other tools, by</span></span><br><span class="line"><span class="comment"># Redis Sentinel in order to discover replica instances.</span></span><br><span class="line"><span class="comment"># Another place where this info is available is in the output of the</span></span><br><span class="line"><span class="comment"># &quot;ROLE&quot; command of a master.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># The listed IP and address normally reported by a replica is obtained</span></span><br><span class="line"><span class="comment"># in the following way:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#   IP: The address is auto detected by checking the peer address</span></span><br><span class="line"><span class="comment">#   of the socket used by the replica to connect with the master.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#   Port: The port is communicated by the replica during the replication</span></span><br><span class="line"><span class="comment">#   handshake, and is normally the port that the replica is using to</span></span><br><span class="line"><span class="comment">#   listen for connections.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># However when port forwarding or Network Address Translation (NAT) is</span></span><br><span class="line"><span class="comment"># used, the replica may be actually reachable via different IP and port</span></span><br><span class="line"><span class="comment"># pairs. The following two options can be used by a replica in order to</span></span><br><span class="line"><span class="comment"># report to its master a specific set of IP and port, so that both INFO</span></span><br><span class="line"><span class="comment"># and ROLE will report those values.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># There is no need to use both the options if you need to override just</span></span><br><span class="line"><span class="comment"># the port or the IP address.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># replica-announce-ip 5.5.5.5</span></span><br><span class="line"><span class="comment"># replica-announce-port 1234</span></span><br><span class="line"></span><br><span class="line"><span class="comment">################################## SECURITY ###################################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Require clients to issue AUTH &lt;PASSWORD&gt; before processing any other</span></span><br><span class="line"><span class="comment"># commands.  This might be useful in environments in which you do not trust</span></span><br><span class="line"><span class="comment"># others with access to the host running redis-server.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># This should stay commented out for backward compatibility and because most</span></span><br><span class="line"><span class="comment"># people do not need auth (e.g. they run their own servers).</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Warning: since Redis is pretty fast an outside user can try up to</span></span><br><span class="line"><span class="comment"># 150k passwords per second against a good box. This means that you should</span></span><br><span class="line"><span class="comment"># use a very strong password otherwise it will be very easy to break.</span></span><br><span class="line"><span class="comment"># 设置Redis连接密码，如果配置了连接密码，客户端在连接Redis时需要通过AUTH &lt;password&gt;命令提供密码，默认关闭</span></span><br><span class="line"><span class="comment"># requirepass foobared</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Command renaming.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># It is possible to change the name of dangerous commands in a shared</span></span><br><span class="line"><span class="comment"># environment. For instance the CONFIG command may be renamed into something</span></span><br><span class="line"><span class="comment"># hard to guess so that it will still be available for internal-use tools</span></span><br><span class="line"><span class="comment"># but not available for general clients.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Example:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># rename-command CONFIG b840fc02d524045429941cc15f59e41cb7be6c52</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># It is also possible to completely kill a command by renaming it into</span></span><br><span class="line"><span class="comment"># an empty string:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># rename-command CONFIG &quot;&quot;</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Please note that changing the name of commands that are logged into the</span></span><br><span class="line"><span class="comment"># AOF file or transmitted to replicas may cause problems.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">################################### CLIENTS ####################################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Set the max number of connected clients at the same time. By default</span></span><br><span class="line"><span class="comment"># this limit is set to 10000 clients, however if the Redis server is not</span></span><br><span class="line"><span class="comment"># able to configure the process file limit to allow for the specified limit</span></span><br><span class="line"><span class="comment"># the max number of allowed clients is set to the current file limit</span></span><br><span class="line"><span class="comment"># minus 32 (as Redis reserves a few file descriptors for internal uses).</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Once the limit is reached Redis will close all the new connections sending</span></span><br><span class="line"><span class="comment"># an error &#x27;max number of clients reached&#x27;.</span></span><br><span class="line"><span class="comment">#设置同一时间最大客户端连接数，Redis可以同时打开的客户端连接数为Redis进程可以打开的最大文件描述符数，</span></span><br><span class="line"><span class="comment">#如果设置 maxclients 0，表示不作限制。当客户端连接数到达限制时，Redis会关闭新的连接并向客户端返回max number of clients reached错误信息</span></span><br><span class="line"><span class="comment"># maxclients 10000</span></span><br><span class="line"></span><br><span class="line"><span class="comment">############################## MEMORY MANAGEMENT ################################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Set a memory usage limit to the specified amount of bytes.</span></span><br><span class="line"><span class="comment"># When the memory limit is reached Redis will try to remove keys</span></span><br><span class="line"><span class="comment"># according to the eviction policy selected (see maxmemory-policy).</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># If Redis can&#x27;t remove keys according to the policy, or if the policy is</span></span><br><span class="line"><span class="comment"># set to &#x27;noeviction&#x27;, Redis will start to reply with errors to commands</span></span><br><span class="line"><span class="comment"># that would use more memory, like SET, LPUSH, and so on, and will continue</span></span><br><span class="line"><span class="comment"># to reply to read-only commands like GET.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># This option is usually useful when using Redis as an LRU or LFU cache, or to</span></span><br><span class="line"><span class="comment"># set a hard memory limit for an instance (using the &#x27;noeviction&#x27; policy).</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># WARNING: If you have replicas attached to an instance with maxmemory on,</span></span><br><span class="line"><span class="comment"># the size of the output buffers needed to feed the replicas are subtracted</span></span><br><span class="line"><span class="comment"># from the used memory count, so that network problems / resyncs will</span></span><br><span class="line"><span class="comment"># not trigger a loop where keys are evicted, and in turn the output</span></span><br><span class="line"><span class="comment"># buffer of replicas is full with DELs of keys evicted triggering the deletion</span></span><br><span class="line"><span class="comment"># of more keys, and so forth until the database is completely emptied.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># In short... if you have replicas attached it is suggested that you set a lower</span></span><br><span class="line"><span class="comment"># limit for maxmemory so that there is some free RAM on the system for replica</span></span><br><span class="line"><span class="comment"># output buffers (but this is not needed if the policy is &#x27;noeviction&#x27;).</span></span><br><span class="line"><span class="comment"># 指定Redis最大内存限制，Redis在启动时会把数据加载到内存中，达到最大内存后，Redis会先尝试清除已到期或即将到期的Key，</span></span><br><span class="line"><span class="comment"># 当此方法处理后，仍然到达最大内存设置，将无法再进行写入操作，但仍然可以进行读取操作。</span></span><br><span class="line"><span class="comment"># Redis新的vm机制，会把Key存放内存，Value会存放在swap区</span></span><br><span class="line"><span class="comment"># maxmemory &lt;bytes&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># MAXMEMORY POLICY: how Redis will select what to remove when maxmemory</span></span><br><span class="line"><span class="comment"># is reached. You can select among five behaviors:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># volatile-lru -&gt; Evict using approximated LRU among the keys with an expire set.</span></span><br><span class="line"><span class="comment"># allkeys-lru -&gt; Evict any key using approximated LRU.</span></span><br><span class="line"><span class="comment"># volatile-lfu -&gt; Evict using approximated LFU among the keys with an expire set.</span></span><br><span class="line"><span class="comment"># allkeys-lfu -&gt; Evict any key using approximated LFU.</span></span><br><span class="line"><span class="comment"># volatile-random -&gt; Remove a random key among the ones with an expire set.</span></span><br><span class="line"><span class="comment"># allkeys-random -&gt; Remove a random key, any key.</span></span><br><span class="line"><span class="comment"># volatile-ttl -&gt; Remove the key with the nearest expire time (minor TTL)</span></span><br><span class="line"><span class="comment"># noeviction -&gt; Don&#x27;t evict anything, just return an error on write operations.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># LRU means Least Recently Used</span></span><br><span class="line"><span class="comment"># LFU means Least Frequently Used</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Both LRU, LFU and volatile-ttl are implemented using approximated</span></span><br><span class="line"><span class="comment"># randomized algorithms.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># <span class="doctag">Note:</span> with any of the above policies, Redis will return an error on write</span></span><br><span class="line"><span class="comment">#       operations, when there are no suitable keys for eviction.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#       At the date of writing these commands are: set setnx setex syc</span></span><br><span class="line"><span class="comment">#       incr decr rpush lpush rpushx lpushx linsert lset rpoplpush sadd</span></span><br><span class="line"><span class="comment">#       sinter sinterstore sunion sunionstore sdiff sdiffstore zadd zincrby</span></span><br><span class="line"><span class="comment">#       zunionstore zinterstore hset hsetnx hmset hincrby incrby decrby</span></span><br><span class="line"><span class="comment">#       getset mset msetnx exec sort</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># The default is:</span></span><br><span class="line"><span class="comment">#当内存使用达到最大值时，redis使用的清除策略。有以下几种可以选择（明明有6种，官方配置文件里却说有5种可以选择？）：</span></span><br><span class="line"><span class="comment"># 1）volatile-lru   利用LRU算法移除设置过过期时间的key (LRU:最近使用 Least Recently Used ) </span></span><br><span class="line"><span class="comment"># 2）allkeys-lru   利用LRU算法移除任何key </span></span><br><span class="line"><span class="comment"># 3）volatile-random 移除设置过过期时间的随机key </span></span><br><span class="line"><span class="comment"># 4）allkeys-random  移除随机key </span></span><br><span class="line"><span class="comment"># 5）volatile-ttl   移除即将过期的key(minor TTL) </span></span><br><span class="line"><span class="comment"># 6）noeviction  不移除任何key，只是返回一个写错误 。默认选项</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># maxmemory-policy noeviction</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># LRU, LFU and minimal TTL algorithms are not precise algorithms but approximated</span></span><br><span class="line"><span class="comment"># algorithms (in order to save memory), so you can tune it for speed or</span></span><br><span class="line"><span class="comment"># accuracy. For default Redis will check five keys and pick the one that was</span></span><br><span class="line"><span class="comment"># used less recently, you can change the sample size using the following</span></span><br><span class="line"><span class="comment"># configuration directive.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># The default of 5 produces good enough results. 10 Approximates very closely</span></span><br><span class="line"><span class="comment"># true LRU but costs more CPU. 3 is faster but not very accurate.</span></span><br><span class="line"><span class="comment"># LRU 和 minimal TTL 算法都不是精准的算法，但是相对精确的算法(为了节省内存)，随意你可以选择样本大小进行检测。redis默认选择5个样本进行检测，你可以通过maxmemory-samples进行设置样本数。</span></span><br><span class="line"><span class="comment"># maxmemory-samples 5</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Starting from Redis 5, by default a replica will ignore its maxmemory setting</span></span><br><span class="line"><span class="comment"># (unless it is promoted to master after a failover or manually). It means</span></span><br><span class="line"><span class="comment"># that the eviction of keys will be just handled by the master, sending the</span></span><br><span class="line"><span class="comment"># DEL commands to the replica as keys evict in the master side.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># This behavior ensures that masters and replicas stay consistent, and is usually</span></span><br><span class="line"><span class="comment"># what you want, however if your replica is writable, or you want the replica to have</span></span><br><span class="line"><span class="comment"># a different memory setting, and you are sure all the writes performed to the</span></span><br><span class="line"><span class="comment"># replica are idempotent, then you may change this default (but be sure to understand</span></span><br><span class="line"><span class="comment"># what you are doing).</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Note that since the replica by default does not evict, it may end using more</span></span><br><span class="line"><span class="comment"># memory than the one set via maxmemory (there are certain buffers that may</span></span><br><span class="line"><span class="comment"># be larger on the replica, or data structures may sometimes take more memory and so</span></span><br><span class="line"><span class="comment"># forth). So make sure you monitor your replicas and make sure they have enough</span></span><br><span class="line"><span class="comment"># memory to never hit a real out-of-memory condition before the master hits</span></span><br><span class="line"><span class="comment"># the configured maxmemory setting.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># replica-ignore-maxmemory yes</span></span><br><span class="line"></span><br><span class="line"><span class="comment">############################# LAZY FREEING ####################################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Redis has two primitives to delete keys. One is called DEL and is a blocking</span></span><br><span class="line"><span class="comment"># deletion of the object. It means that the server stops processing new commands</span></span><br><span class="line"><span class="comment"># in order to reclaim all the memory associated with an object in a synchronous</span></span><br><span class="line"><span class="comment"># way. If the key deleted is associated with a small object, the time needed</span></span><br><span class="line"><span class="comment"># in order to execute the DEL command is very small and comparable to most other</span></span><br><span class="line"><span class="comment"># O(1) or O(log_N) commands in Redis. However if the key is associated with an</span></span><br><span class="line"><span class="comment"># aggregated value containing millions of elements, the server can block for</span></span><br><span class="line"><span class="comment"># a long time (even seconds) in order to complete the operation.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># For the above reasons Redis also offers non blocking deletion primitives</span></span><br><span class="line"><span class="comment"># such as UNLINK (non blocking DEL) and the ASYNC option of FLUSHALL and</span></span><br><span class="line"><span class="comment"># FLUSHDB commands, in order to reclaim memory in background. Those commands</span></span><br><span class="line"><span class="comment"># are executed in constant time. Another thread will incrementally free the</span></span><br><span class="line"><span class="comment"># object in the background as fast as possible.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># DEL, UNLINK and ASYNC option of FLUSHALL and FLUSHDB are user-controlled.</span></span><br><span class="line"><span class="comment"># It&#x27;s up to the design of the application to understand when it is a good</span></span><br><span class="line"><span class="comment"># idea to use one or the other. However the Redis server sometimes has to</span></span><br><span class="line"><span class="comment"># delete keys or flush the whole database as a side effect of other operations.</span></span><br><span class="line"><span class="comment"># Specifically Redis deletes objects independently of a user call in the</span></span><br><span class="line"><span class="comment"># following scenarios:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 1) On eviction, because of the maxmemory and maxmemory policy configurations,</span></span><br><span class="line"><span class="comment">#    in order to make room for new data, without going over the specified</span></span><br><span class="line"><span class="comment">#    memory limit.</span></span><br><span class="line"><span class="comment"># 2) Because of expire: when a key with an associated time to live (see the</span></span><br><span class="line"><span class="comment">#    EXPIRE command) must be deleted from memory.</span></span><br><span class="line"><span class="comment"># 3) Because of a side effect of a command that stores data on a key that may</span></span><br><span class="line"><span class="comment">#    already exist. For example the RENAME command may delete the old key</span></span><br><span class="line"><span class="comment">#    content when it is replaced with another one. Similarly SUNIONSTORE</span></span><br><span class="line"><span class="comment">#    or SORT with STORE option may delete existing keys. The SET command</span></span><br><span class="line"><span class="comment">#    itself removes any old content of the specified key in order to replace</span></span><br><span class="line"><span class="comment">#    it with the specified string.</span></span><br><span class="line"><span class="comment"># 4) During replication, when a replica performs a full resynchronization with</span></span><br><span class="line"><span class="comment">#    its master, the content of the whole database is removed in order to</span></span><br><span class="line"><span class="comment">#    load the RDB file just transferred.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># In all the above cases the default is to delete objects in a blocking way,</span></span><br><span class="line"><span class="comment"># like if DEL was called. However you can configure each case specifically</span></span><br><span class="line"><span class="comment"># in order to instead release memory in a non-blocking way like if UNLINK</span></span><br><span class="line"><span class="comment"># was called, using the following configuration directives:</span></span><br><span class="line"></span><br><span class="line"><span class="meta">lazyfree-lazy-eviction</span> <span class="string">no</span></span><br><span class="line"><span class="meta">lazyfree-lazy-expire</span> <span class="string">no</span></span><br><span class="line"><span class="meta">lazyfree-lazy-server-del</span> <span class="string">no</span></span><br><span class="line"><span class="meta">replica-lazy-flush</span> <span class="string">no</span></span><br><span class="line"></span><br><span class="line"><span class="comment">############################## APPEND ONLY MODE ###############################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># By default Redis asynchronously dumps the dataset on disk. This mode is</span></span><br><span class="line"><span class="comment"># good enough in many applications, but an issue with the Redis process or</span></span><br><span class="line"><span class="comment"># a power outage may result into a few minutes of writes lost (depending on</span></span><br><span class="line"><span class="comment"># the configured save points).</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># The Append Only File is an alternative persistence mode that provides</span></span><br><span class="line"><span class="comment"># much better durability. For instance using the default data fsync policy</span></span><br><span class="line"><span class="comment"># (see later in the config file) Redis can lose just one second of writes in a</span></span><br><span class="line"><span class="comment"># dramatic event like a server power outage, or a single write if something</span></span><br><span class="line"><span class="comment"># wrong with the Redis process itself happens, but the operating system is</span></span><br><span class="line"><span class="comment"># still running correctly.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># AOF and RDB persistence can be enabled at the same time without problems.</span></span><br><span class="line"><span class="comment"># If the AOF is enabled on startup Redis will load the AOF, that is the file</span></span><br><span class="line"><span class="comment"># with the better durability guarantees.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Please check http://redis.io/topics/persistence for more information.</span></span><br><span class="line"><span class="comment"># 是否启用aof持久化方式 。否在每次更新操作后进行日志记录，Redis在默认情况下是异步的把数据写入磁盘，如果不开启，可能会在断电时导致一段时间内的数据丢失。</span></span><br><span class="line"><span class="comment"># 因为 redis本身同步数据文件是按上面save条件来同步的，所以有的数据会在一段时间内只存在于内存中。默认为no</span></span><br><span class="line"><span class="attr">appendonly</span> <span class="string">no</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># The name of the append only file (default: &quot;appendonly.aof&quot;)</span></span><br><span class="line"><span class="comment"># 指定更新日志（aof）文件名，默认为appendonly.aof</span></span><br><span class="line"><span class="attr">appendfilename</span> <span class="string">&quot;appendonly.aof&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># The fsync() call tells the Operating System to actually write data on disk</span></span><br><span class="line"><span class="comment"># instead of waiting for more data in the output buffer. Some OS will really flush</span></span><br><span class="line"><span class="comment"># data on disk, some other OS will just try to do it ASAP.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Redis supports three different modes:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># no: don&#x27;t fsync, just let the OS flush the data when it wants. Faster.</span></span><br><span class="line"><span class="comment"># always: fsync after every write to the append only log. Slow, Safest.</span></span><br><span class="line"><span class="comment"># everysec: fsync only one time every second. Compromise.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># The default is &quot;everysec&quot;, as that&#x27;s usually the right compromise between</span></span><br><span class="line"><span class="comment"># speed and data safety. It&#x27;s up to you to understand if you can relax this to</span></span><br><span class="line"><span class="comment"># &quot;no&quot; that will let the operating system flush the output buffer when</span></span><br><span class="line"><span class="comment"># it wants, for better performances (but if you can live with the idea of</span></span><br><span class="line"><span class="comment"># some data loss consider the default persistence mode that&#x27;s snapshotting),</span></span><br><span class="line"><span class="comment"># or on the contrary, use &quot;always&quot; that&#x27;s very slow but a bit safer than</span></span><br><span class="line"><span class="comment"># everysec.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># More details please check the following article:</span></span><br><span class="line"><span class="comment"># http://antirez.com/post/redis-persistence-demystified.html</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># If unsure, use &quot;everysec&quot;.</span></span><br><span class="line"><span class="comment">#指定更新日志条件，共有3个可选值： </span></span><br><span class="line"><span class="comment">#  no：表示等操作系统进行数据缓存同步到磁盘（快，持久化没保证） </span></span><br><span class="line"><span class="comment">#  always：同步持久化，每次发生数据变更时，立即记录到磁盘（慢，安全） </span></span><br><span class="line"><span class="comment">#  everysec：表示每秒同步一次（默认值,很快，但可能会丢失一秒以内的数据）</span></span><br><span class="line"><span class="comment"># appendfsync always</span></span><br><span class="line"><span class="attr">appendfsync</span> <span class="string">everysec</span></span><br><span class="line"><span class="comment"># appendfsync no</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># When the AOF fsync policy is set to always or everysec, and a background</span></span><br><span class="line"><span class="comment"># saving process (a background save or AOF log background rewriting) is</span></span><br><span class="line"><span class="comment"># performing a lot of I/O against the disk, in some Linux configurations</span></span><br><span class="line"><span class="comment"># Redis may block too long on the fsync() call. Note that there is no fix for</span></span><br><span class="line"><span class="comment"># this currently, as even performing fsync in a different thread will block</span></span><br><span class="line"><span class="comment"># our synchronous write(2) call.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># In order to mitigate this problem it&#x27;s possible to use the following option</span></span><br><span class="line"><span class="comment"># that will prevent fsync() from being called in the main process while a</span></span><br><span class="line"><span class="comment"># BGSAVE or BGREWRITEAOF is in progress.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># This means that while another child is saving, the durability of Redis is</span></span><br><span class="line"><span class="comment"># the same as &quot;appendfsync none&quot;. In practical terms, this means that it is</span></span><br><span class="line"><span class="comment"># possible to lose up to 30 seconds of log in the worst scenario (with the</span></span><br><span class="line"><span class="comment"># default Linux settings).</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># If you have latency problems turn this to &quot;yes&quot;. Otherwise leave it as</span></span><br><span class="line"><span class="comment"># &quot;no&quot; that is the safest pick from the point of view of durability.</span></span><br><span class="line"><span class="comment"># 指定是否在后台aof文件rewrite期间调用fsync，默认为no，表示要调用fsync（无论后台是否有子进程在刷盘）。</span></span><br><span class="line"><span class="comment"># Redis在后台写RDB文件或重写AOF文件期间会存在大量磁盘IO，此时，在某些linux系统中，调用fsync可能会阻塞。</span></span><br><span class="line"><span class="comment">#如果应用系统无法忍受延迟，而可以容忍少量的数据丢失，则设置为yes。如果应用系统无法忍受数据丢失，则设置为no。</span></span><br><span class="line"><span class="meta">no-appendfsync-on-rewrite</span> <span class="string">no</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Automatic rewrite of the append only file.</span></span><br><span class="line"><span class="comment"># Redis is able to automatically rewrite the log file implicitly calling</span></span><br><span class="line"><span class="comment"># BGREWRITEAOF when the AOF log size grows by the specified percentage.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># This is how it works: Redis remembers the size of the AOF file after the</span></span><br><span class="line"><span class="comment"># latest rewrite (if no rewrite has happened since the restart, the size of</span></span><br><span class="line"><span class="comment"># the AOF at startup is used).</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># This base size is compared to the current size. If the current size is</span></span><br><span class="line"><span class="comment"># bigger than the specified percentage, the rewrite is triggered. Also</span></span><br><span class="line"><span class="comment"># you need to specify a minimal size for the AOF file to be rewritten, this</span></span><br><span class="line"><span class="comment"># is useful to avoid rewriting the AOF file even if the percentage increase</span></span><br><span class="line"><span class="comment"># is reached but it is still pretty small.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Specify a percentage of zero in order to disable the automatic AOF</span></span><br><span class="line"><span class="comment"># rewrite feature.</span></span><br><span class="line"><span class="comment">#当AOF文件增长到一定大小的时候Redis能够调用 BGREWRITEAOF 对日志文件进行重写 。当AOF文件大小的增长率大于该配置项时自动开启重写。</span></span><br><span class="line"><span class="meta">auto-aof-rewrite-percentage</span> <span class="string">100</span></span><br><span class="line"><span class="comment">#当AOF文件增长到一定大小的时候Redis能够调用 BGREWRITEAOF 对日志文件进行重写 。当AOF文件大小大于该配置项时自动开启重写</span></span><br><span class="line"><span class="meta">auto-aof-rewrite-min-size</span> <span class="string">64mb</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># An AOF file may be found to be truncated at the end during the Redis</span></span><br><span class="line"><span class="comment"># startup process, when the AOF data gets loaded back into memory.</span></span><br><span class="line"><span class="comment"># This may happen when the system where Redis is running</span></span><br><span class="line"><span class="comment"># crashes, especially when an ext4 filesystem is mounted without the</span></span><br><span class="line"><span class="comment"># data=ordered option (however this can&#x27;t happen when Redis itself</span></span><br><span class="line"><span class="comment"># crashes or aborts but the operating system still works correctly).</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Redis can either exit with an error when this happens, or load as much</span></span><br><span class="line"><span class="comment"># data as possible (the default now) and start if the AOF file is found</span></span><br><span class="line"><span class="comment"># to be truncated at the end. The following option controls this behavior.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># If aof-load-truncated is set to yes, a truncated AOF file is loaded and</span></span><br><span class="line"><span class="comment"># the Redis server starts emitting a log to inform the user of the event.</span></span><br><span class="line"><span class="comment"># Otherwise if the option is set to no, the server aborts with an error</span></span><br><span class="line"><span class="comment"># and refuses to start. When the option is set to no, the user requires</span></span><br><span class="line"><span class="comment"># to fix the AOF file using the &quot;redis-check-aof&quot; utility before to restart</span></span><br><span class="line"><span class="comment"># the server.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Note that if the AOF file will be found to be corrupted in the middle</span></span><br><span class="line"><span class="comment"># the server will still exit with an error. This option only applies when</span></span><br><span class="line"><span class="comment"># Redis will try to read more data from the AOF file but not enough bytes</span></span><br><span class="line"><span class="comment"># will be found.</span></span><br><span class="line"><span class="comment">#redis在启动时可以加载被截断的AOF文件，而不需要先执行redis-check-aof 工具。</span></span><br><span class="line"><span class="meta">aof-load-truncated</span> <span class="string">yes</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># When rewriting the AOF file, Redis is able to use an RDB preamble in the</span></span><br><span class="line"><span class="comment"># AOF file for faster rewrites and recoveries. When this option is turned</span></span><br><span class="line"><span class="comment"># on the rewritten AOF file is composed of two different stanzas:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#   [RDB file][AOF tail]</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># When loading Redis recognizes that the AOF file starts with the &quot;REDIS&quot;</span></span><br><span class="line"><span class="comment"># string and loads the prefixed RDB file, and continues loading the AOF</span></span><br><span class="line"><span class="comment"># tail.</span></span><br><span class="line"><span class="comment">#是否开启混合持久化</span></span><br><span class="line"><span class="meta">aof-use-rdb-preamble</span> <span class="string">yes</span></span><br><span class="line"></span><br><span class="line"><span class="comment">################################ LUA SCRIPTING  ###############################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Max execution time of a Lua script in milliseconds.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># If the maximum execution time is reached Redis will log that a script is</span></span><br><span class="line"><span class="comment"># still in execution after the maximum allowed time and will start to</span></span><br><span class="line"><span class="comment"># reply to queries with an error.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># When a long running script exceeds the maximum execution time only the</span></span><br><span class="line"><span class="comment"># SCRIPT KILL and SHUTDOWN NOSAVE commands are available. The first can be</span></span><br><span class="line"><span class="comment"># used to stop a script that did not yet called write commands. The second</span></span><br><span class="line"><span class="comment"># is the only way to shut down the server in the case a write command was</span></span><br><span class="line"><span class="comment"># already issued by the script but the user doesn&#x27;t want to wait for the natural</span></span><br><span class="line"><span class="comment"># termination of the script.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Set it to 0 or a negative value for unlimited execution without warnings.</span></span><br><span class="line"><span class="comment">#一个Lua脚本最长的执行时间，单位为毫秒，如果为0或负数表示无限执行时间</span></span><br><span class="line"><span class="meta">lua-time-limit</span> <span class="string">5000</span></span><br><span class="line"></span><br><span class="line"><span class="comment">################################ REDIS CLUSTER  ###############################</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++</span></span><br><span class="line"><span class="comment"># WARNING EXPERIMENTAL: Redis Cluster is considered to be stable code, however</span></span><br><span class="line"><span class="comment"># in order to mark it as &quot;mature&quot; we need to wait for a non trivial percentage</span></span><br><span class="line"><span class="comment"># of users to deploy it in production.</span></span><br><span class="line"><span class="comment"># ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Normal Redis instances can&#x27;t be part of a Redis Cluster; only nodes that are</span></span><br><span class="line"><span class="comment"># started as cluster nodes can. In order to start a Redis instance as a</span></span><br><span class="line"><span class="comment"># cluster node enable the cluster support uncommenting the following:</span></span><br><span class="line"><span class="comment"># 是否开启cluster集群模式 如果配置yes则开启集群功能，此redis实例作为集群的一个节点，否则，它是一个普通的单一的redis实例。</span></span><br><span class="line"><span class="comment"># cluster-enabled yes</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Every cluster node has a cluster configuration file. This file is not</span></span><br><span class="line"><span class="comment"># intended to be edited by hand. It is created and updated by Redis nodes.</span></span><br><span class="line"><span class="comment"># Every Redis Cluster node requires a different cluster configuration file.</span></span><br><span class="line"><span class="comment"># Make sure that instances running in the same system do not have</span></span><br><span class="line"><span class="comment"># overlapping cluster configuration file names.</span></span><br><span class="line"><span class="comment">#虽然此配置的名字叫&quot;集群配置文件&quot;，但是此配置文件不能人工编辑，它是集群节点自动维护的文件，</span></span><br><span class="line"><span class="comment">#主要用于记录集群中有哪些节点、他们的状态以及一些持久化参数等，方便在重启时恢复这些状态。通常是在收到请求之后这个文件就会被更新。</span></span><br><span class="line"><span class="comment"># cluster-config-file nodes-6379.conf</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Cluster node timeout is the amount of milliseconds a node must be unreachable</span></span><br><span class="line"><span class="comment"># for it to be considered in failure state.</span></span><br><span class="line"><span class="comment"># Most other internal time limits are multiple of the node timeout.</span></span><br><span class="line"><span class="comment">#这是集群中的节点能够失联的最大时间，超过这个时间，该节点就会被认为故障。如果主节点超过这个时间还是不可达，则用它的从节点将启动故障迁移，升级成主节点。</span></span><br><span class="line"><span class="comment"># cluster-node-timeout 15000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># A replica of a failing master will avoid to start a failover if its data</span></span><br><span class="line"><span class="comment"># looks too old.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># There is no simple way for a replica to actually have an exact measure of</span></span><br><span class="line"><span class="comment"># its &quot;data age&quot;, so the following two checks are performed:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 1) If there are multiple replicas able to failover, they exchange messages</span></span><br><span class="line"><span class="comment">#    in order to try to give an advantage to the replica with the best</span></span><br><span class="line"><span class="comment">#    replication offset (more data from the master processed).</span></span><br><span class="line"><span class="comment">#    Replicas will try to get their rank by offset, and apply to the start</span></span><br><span class="line"><span class="comment">#    of the failover a delay proportional to their rank.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 2) Every single replica computes the time of the last interaction with</span></span><br><span class="line"><span class="comment">#    its master. This can be the last ping or command received (if the master</span></span><br><span class="line"><span class="comment">#    is still in the &quot;connected&quot; state), or the time that elapsed since the</span></span><br><span class="line"><span class="comment">#    disconnection with the master (if the replication link is currently down).</span></span><br><span class="line"><span class="comment">#    If the last interaction is too old, the replica will not try to failover</span></span><br><span class="line"><span class="comment">#    at all.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># The point &quot;2&quot; can be tuned by user. Specifically a replica will not perform</span></span><br><span class="line"><span class="comment"># the failover if, since the last interaction with the master, the time</span></span><br><span class="line"><span class="comment"># elapsed is greater than:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#   (node-timeout * replica-validity-factor) + repl-ping-replica-period</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># So for example if node-timeout is 30 seconds, and the replica-validity-factor</span></span><br><span class="line"><span class="comment"># is 10, and assuming a default repl-ping-replica-period of 10 seconds, the</span></span><br><span class="line"><span class="comment"># replica will not try to failover if it was not able to talk with the master</span></span><br><span class="line"><span class="comment"># for longer than 310 seconds.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># A large replica-validity-factor may allow replicas with too old data to failover</span></span><br><span class="line"><span class="comment"># a master, while a too small value may prevent the cluster from being able to</span></span><br><span class="line"><span class="comment"># elect a replica at all.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># For maximum availability, it is possible to set the replica-validity-factor</span></span><br><span class="line"><span class="comment"># to a value of 0, which means, that replicas will always try to failover the</span></span><br><span class="line"><span class="comment"># master regardless of the last time they interacted with the master.</span></span><br><span class="line"><span class="comment"># (However they&#x27;ll always try to apply a delay proportional to their</span></span><br><span class="line"><span class="comment"># offset rank).</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Zero is the only value able to guarantee that when all the partitions heal</span></span><br><span class="line"><span class="comment"># the cluster will always be able to continue.</span></span><br><span class="line"><span class="comment">#如果设置成０，则无论从节点与主节点失联多久，从节点都会尝试升级成主节点。</span></span><br><span class="line"><span class="comment">#如果设置成正数，则cluster-node-timeout乘以cluster-slave-validity-factor得到的时间，是从节点与主节点失联后，</span></span><br><span class="line"><span class="comment">#此从节点数据有效的最长时间，超过这个时间，从节点不会启动故障迁移。</span></span><br><span class="line"><span class="comment">#假设cluster-node-timeout=5，cluster-slave-validity-factor=10，则如果从节点跟主节点失联超过50秒，此从节点不能成为主节点。</span></span><br><span class="line"><span class="comment">#注意，如果此参数配置为非0，将可能出现由于某主节点失联却没有从节点能顶上的情况，从而导致集群不能正常工作，</span></span><br><span class="line"><span class="comment">#在这种情况下，只有等到原来的主节点重新回归到集群，集群才恢复运作。</span></span><br><span class="line"><span class="comment"># cluster-replica-validity-factor 10</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Cluster replicas are able to migrate to orphaned masters, that are masters</span></span><br><span class="line"><span class="comment"># that are left without working replicas. This improves the cluster ability</span></span><br><span class="line"><span class="comment"># to resist to failures as otherwise an orphaned master can&#x27;t be failed over</span></span><br><span class="line"><span class="comment"># in case of failure if it has no working replicas.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Replicas migrate to orphaned masters only if there are still at least a</span></span><br><span class="line"><span class="comment"># given number of other working replicas for their old master. This number</span></span><br><span class="line"><span class="comment"># is the &quot;migration barrier&quot;. A migration barrier of 1 means that a replica</span></span><br><span class="line"><span class="comment"># will migrate only if there is at least 1 other working replica for its master</span></span><br><span class="line"><span class="comment"># and so forth. It usually reflects the number of replicas you want for every</span></span><br><span class="line"><span class="comment"># master in your cluster.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Default is 1 (replicas migrate only if their masters remain with at least</span></span><br><span class="line"><span class="comment"># one replica). To disable migration just set it to a very large value.</span></span><br><span class="line"><span class="comment"># A value of 0 can be set but is useful only for debugging and dangerous</span></span><br><span class="line"><span class="comment"># in production.</span></span><br><span class="line"><span class="comment">#master的slave数量大于该值，slave才能迁移到其他孤立master上，如这个参数若被设为2，那么只有当一个主节点拥有2 个可工作的从节点时，它的一个从节点会尝试迁移。</span></span><br><span class="line"><span class="comment">#不建议设置为0</span></span><br><span class="line"><span class="comment">#想禁用可以设置一个非常大的值</span></span><br><span class="line"><span class="comment">#如果小于0则启动失败</span></span><br><span class="line"><span class="comment"># cluster-migration-barrier 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># By default Redis Cluster nodes stop accepting queries if they detect there</span></span><br><span class="line"><span class="comment"># is at least an hash slot uncovered (no available node is serving it).</span></span><br><span class="line"><span class="comment"># This way if the cluster is partially down (for example a range of hash slots</span></span><br><span class="line"><span class="comment"># are no longer covered) all the cluster becomes, eventually, unavailable.</span></span><br><span class="line"><span class="comment"># It automatically returns available as soon as all the slots are covered again.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># However sometimes you want the subset of the cluster which is working,</span></span><br><span class="line"><span class="comment"># to continue to accept queries for the part of the key space that is still</span></span><br><span class="line"><span class="comment"># covered. In order to do so, just set the cluster-require-full-coverage</span></span><br><span class="line"><span class="comment"># option to no.</span></span><br><span class="line"><span class="comment"># 表示当负责一个插槽的主库下线且没有相应的从库进行故障恢复时，是否整个集群不可用？</span></span><br><span class="line"><span class="comment"># cluster-require-full-coverage yes</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># This option, when set to yes, prevents replicas from trying to failover its</span></span><br><span class="line"><span class="comment"># master during master failures. However the master can still perform a</span></span><br><span class="line"><span class="comment"># manual failover, if forced to do so.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># This is useful in different scenarios, especially in the case of multiple</span></span><br><span class="line"><span class="comment"># data center operations, where we want one side to never be promoted if not</span></span><br><span class="line"><span class="comment"># in the case of a total DC failure.</span></span><br><span class="line"><span class="comment"># cluster-replica-no-failover no</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># In order to setup your cluster make sure to read the documentation</span></span><br><span class="line"><span class="comment"># available at http://redis.io web site.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">########################## CLUSTER DOCKER/NAT support  ########################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># In certain deployments, Redis Cluster nodes address discovery fails, because</span></span><br><span class="line"><span class="comment"># addresses are NAT-ted or because ports are forwarded (the typical case is</span></span><br><span class="line"><span class="comment"># Docker and other containers).</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># In order to make Redis Cluster working in such environments, a static</span></span><br><span class="line"><span class="comment"># configuration where each node knows its public address is needed. The</span></span><br><span class="line"><span class="comment"># following two options are used for this scope, and are:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># * cluster-announce-ip</span></span><br><span class="line"><span class="comment"># * cluster-announce-port</span></span><br><span class="line"><span class="comment"># * cluster-announce-bus-port</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Each instruct the node about its address, client port, and cluster message</span></span><br><span class="line"><span class="comment"># bus port. The information is then published in the header of the bus packets</span></span><br><span class="line"><span class="comment"># so that other nodes will be able to correctly map the address of the node</span></span><br><span class="line"><span class="comment"># publishing the information.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># If the above options are not used, the normal Redis Cluster auto-detection</span></span><br><span class="line"><span class="comment"># will be used instead.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Note that when remapped, the bus port may not be at the fixed offset of</span></span><br><span class="line"><span class="comment"># clients port + 10000, so you can specify any port and bus-port depending</span></span><br><span class="line"><span class="comment"># on how they get remapped. If the bus-port is not set, a fixed offset of</span></span><br><span class="line"><span class="comment"># 10000 will be used as usually.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Example:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># cluster-announce-ip 10.1.1.5</span></span><br><span class="line"><span class="comment"># cluster-announce-port 6379</span></span><br><span class="line"><span class="comment"># cluster-announce-bus-port 6380</span></span><br><span class="line"></span><br><span class="line"><span class="comment">################################## SLOW LOG ###################################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># The Redis Slow Log is a system to log queries that exceeded a specified</span></span><br><span class="line"><span class="comment"># execution time. The execution time does not include the I/O operations</span></span><br><span class="line"><span class="comment"># like talking with the client, sending the reply and so forth,</span></span><br><span class="line"><span class="comment"># but just the time needed to actually execute the command (this is the only</span></span><br><span class="line"><span class="comment"># stage of command execution where the thread is blocked and can not serve</span></span><br><span class="line"><span class="comment"># other requests in the meantime).</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># You can configure the slow log with two parameters: one tells Redis</span></span><br><span class="line"><span class="comment"># what is the execution time, in microseconds, to exceed in order for the</span></span><br><span class="line"><span class="comment"># command to get logged, and the other parameter is the length of the</span></span><br><span class="line"><span class="comment"># slow log. When a new command is logged the oldest one is removed from the</span></span><br><span class="line"><span class="comment"># queue of logged commands.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># The following time is expressed in microseconds, so 1000000 is equivalent</span></span><br><span class="line"><span class="comment"># to one second. Note that a negative number disables the slow log, while</span></span><br><span class="line"><span class="comment"># a value of zero forces the logging of every command.</span></span><br><span class="line"><span class="meta">slowlog-log-slower-than</span> <span class="string">10000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># There is no limit to this length. Just be aware that it will consume memory.</span></span><br><span class="line"><span class="comment"># You can reclaim memory used by the slow log with SLOWLOG RESET.</span></span><br><span class="line"><span class="meta">slowlog-max-len</span> <span class="string">128</span></span><br><span class="line"></span><br><span class="line"><span class="comment">################################ LATENCY MONITOR ##############################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># The Redis latency monitoring subsystem samples different operations</span></span><br><span class="line"><span class="comment"># at runtime in order to collect data related to possible sources of</span></span><br><span class="line"><span class="comment"># latency of a Redis instance.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Via the LATENCY command this information is available to the user that can</span></span><br><span class="line"><span class="comment"># print graphs and obtain reports.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># The system only logs operations that were performed in a time equal or</span></span><br><span class="line"><span class="comment"># greater than the amount of milliseconds specified via the</span></span><br><span class="line"><span class="comment"># latency-monitor-threshold configuration directive. When its value is set</span></span><br><span class="line"><span class="comment"># to zero, the latency monitor is turned off.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># By default latency monitoring is disabled since it is mostly not needed</span></span><br><span class="line"><span class="comment"># if you don&#x27;t have latency issues, and collecting data has a performance</span></span><br><span class="line"><span class="comment"># impact, that while very small, can be measured under big load. Latency</span></span><br><span class="line"><span class="comment"># monitoring can easily be enabled at runtime using the command</span></span><br><span class="line"><span class="comment"># &quot;CONFIG SET latency-monitor-threshold &lt;milliseconds&gt;&quot; if needed.</span></span><br><span class="line"><span class="meta">latency-monitor-threshold</span> <span class="string">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">############################# EVENT NOTIFICATION ##############################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Redis can notify Pub/Sub clients about events happening in the key space.</span></span><br><span class="line"><span class="comment"># This feature is documented at http://redis.io/topics/notifications</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># For instance if keyspace events notification is enabled, and a client</span></span><br><span class="line"><span class="comment"># performs a DEL operation on key &quot;foo&quot; stored in the Database 0, two</span></span><br><span class="line"><span class="comment"># messages will be published via Pub/Sub:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># PUBLISH __keyspace@0__:foo del</span></span><br><span class="line"><span class="comment"># PUBLISH __keyevent@0__:del foo</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># It is possible to select the events that Redis will notify among a set</span></span><br><span class="line"><span class="comment"># of classes. Every class is identified by a single character:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#  K     Keyspace events, published with __keyspace@&lt;db&gt;__ prefix.</span></span><br><span class="line"><span class="comment">#  E     Keyevent events, published with __keyevent@&lt;db&gt;__ prefix.</span></span><br><span class="line"><span class="comment">#  g     Generic commands (non-type specific) like DEL, EXPIRE, RENAME, ...</span></span><br><span class="line"><span class="comment">#  $     String commands</span></span><br><span class="line"><span class="comment">#  l     List commands</span></span><br><span class="line"><span class="comment">#  s     Set commands</span></span><br><span class="line"><span class="comment">#  h     Hash commands</span></span><br><span class="line"><span class="comment">#  z     Sorted set commands</span></span><br><span class="line"><span class="comment">#  x     Expired events (events generated every time a key expires)</span></span><br><span class="line"><span class="comment">#  e     Evicted events (events generated when a key is evicted for maxmemory)</span></span><br><span class="line"><span class="comment">#  A     Alias for g$lshzxe, so that the &quot;AKE&quot; string means all the events.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#  The &quot;notify-keyspace-events&quot; takes as argument a string that is composed</span></span><br><span class="line"><span class="comment">#  of zero or multiple characters. The empty string means that notifications</span></span><br><span class="line"><span class="comment">#  are disabled.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#  Example: to enable list and generic events, from the point of view of the</span></span><br><span class="line"><span class="comment">#           event name, use:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#  notify-keyspace-events Elg</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#  Example 2: to get the stream of the expired keys subscribing to channel</span></span><br><span class="line"><span class="comment">#             name __keyevent@0__:expired use:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#  notify-keyspace-events Ex</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#  By default all notifications are disabled because most users don&#x27;t need</span></span><br><span class="line"><span class="comment">#  this feature and the feature has some overhead. Note that if you don&#x27;t</span></span><br><span class="line"><span class="comment">#  specify at least one of K or E, no events will be delivered.</span></span><br><span class="line"><span class="meta">notify-keyspace-events</span> <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">############################### ADVANCED CONFIG ###############################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Hashes are encoded using a memory efficient data structure when they have a</span></span><br><span class="line"><span class="comment"># small number of entries, and the biggest entry does not exceed a given</span></span><br><span class="line"><span class="comment"># threshold. These thresholds can be configured using the following directives.</span></span><br><span class="line"><span class="meta">hash-max-ziplist-entries</span> <span class="string">512</span></span><br><span class="line"><span class="meta">hash-max-ziplist-value</span> <span class="string">64</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Lists are also encoded in a special way to save a lot of space.</span></span><br><span class="line"><span class="comment"># The number of entries allowed per internal list node can be specified</span></span><br><span class="line"><span class="comment"># as a fixed maximum size or a maximum number of elements.</span></span><br><span class="line"><span class="comment"># For a fixed maximum size, use -5 through -1, meaning:</span></span><br><span class="line"><span class="comment"># -5: max size: 64 Kb  &lt;-- not recommended for normal workloads</span></span><br><span class="line"><span class="comment"># -4: max size: 32 Kb  &lt;-- not recommended</span></span><br><span class="line"><span class="comment"># -3: max size: 16 Kb  &lt;-- probably not recommended</span></span><br><span class="line"><span class="comment"># -2: max size: 8 Kb   &lt;-- good</span></span><br><span class="line"><span class="comment"># -1: max size: 4 Kb   &lt;-- good</span></span><br><span class="line"><span class="comment"># Positive numbers mean store up to _exactly_ that number of elements</span></span><br><span class="line"><span class="comment"># per list node.</span></span><br><span class="line"><span class="comment"># The highest performing option is usually -2 (8 Kb size) or -1 (4 Kb size),</span></span><br><span class="line"><span class="comment"># but if your use case is unique, adjust the settings as necessary.</span></span><br><span class="line"><span class="meta">list-max-ziplist-size</span> <span class="string">-2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Lists may also be compressed.</span></span><br><span class="line"><span class="comment"># Compress depth is the number of quicklist ziplist nodes from *each* side of</span></span><br><span class="line"><span class="comment"># the list to *exclude* from compression.  The head and tail of the list</span></span><br><span class="line"><span class="comment"># are always uncompressed for fast push/pop operations.  Settings are:</span></span><br><span class="line"><span class="comment"># 0: disable all list compression</span></span><br><span class="line"><span class="comment"># 1: depth 1 means &quot;don&#x27;t start compressing until after 1 node into the list,</span></span><br><span class="line"><span class="comment">#    going from either the head or tail&quot;</span></span><br><span class="line"><span class="comment">#    So: [head]-&gt;node-&gt;node-&gt;...-&gt;node-&gt;[tail]</span></span><br><span class="line"><span class="comment">#    [head], [tail] will always be uncompressed; inner nodes will compress.</span></span><br><span class="line"><span class="comment"># 2: [head]-&gt;[next]-&gt;node-&gt;node-&gt;...-&gt;node-&gt;[prev]-&gt;[tail]</span></span><br><span class="line"><span class="comment">#    2 here means: don&#x27;t compress head or head-&gt;next or tail-&gt;prev or tail,</span></span><br><span class="line"><span class="comment">#    but compress all nodes between them.</span></span><br><span class="line"><span class="comment"># 3: [head]-&gt;[next]-&gt;[next]-&gt;node-&gt;node-&gt;...-&gt;node-&gt;[prev]-&gt;[prev]-&gt;[tail]</span></span><br><span class="line"><span class="comment"># etc.</span></span><br><span class="line"><span class="meta">list-compress-depth</span> <span class="string">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Sets have a special encoding in just one case: when a set is composed</span></span><br><span class="line"><span class="comment"># of just strings that happen to be integers in radix 10 in the range</span></span><br><span class="line"><span class="comment"># of 64 bit signed integers.</span></span><br><span class="line"><span class="comment"># The following configuration setting sets the limit in the size of the</span></span><br><span class="line"><span class="comment"># set in order to use this special memory saving encoding.</span></span><br><span class="line"><span class="meta">set-max-intset-entries</span> <span class="string">512</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Similarly to hashes and lists, sorted sets are also specially encoded in</span></span><br><span class="line"><span class="comment"># order to save a lot of space. This encoding is only used when the length and</span></span><br><span class="line"><span class="comment"># elements of a sorted set are below the following limits:</span></span><br><span class="line"><span class="meta">zset-max-ziplist-entries</span> <span class="string">128</span></span><br><span class="line"><span class="meta">zset-max-ziplist-value</span> <span class="string">64</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># HyperLogLog sparse representation bytes limit. The limit includes the</span></span><br><span class="line"><span class="comment"># 16 bytes header. When an HyperLogLog using the sparse representation crosses</span></span><br><span class="line"><span class="comment"># this limit, it is converted into the dense representation.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># A value greater than 16000 is totally useless, since at that point the</span></span><br><span class="line"><span class="comment"># dense representation is more memory efficient.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># The suggested value is ~ 3000 in order to have the benefits of</span></span><br><span class="line"><span class="comment"># the space efficient encoding without slowing down too much PFADD,</span></span><br><span class="line"><span class="comment"># which is O(N) with the sparse encoding. The value can be raised to</span></span><br><span class="line"><span class="comment"># ~ 10000 when CPU is not a concern, but space is, and the data set is</span></span><br><span class="line"><span class="comment"># composed of many HyperLogLogs with cardinality in the 0 - 15000 range.</span></span><br><span class="line"><span class="meta">hll-sparse-max-bytes</span> <span class="string">3000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Streams macro node max size / items. The stream data structure is a radix</span></span><br><span class="line"><span class="comment"># tree of big nodes that encode multiple items inside. Using this configuration</span></span><br><span class="line"><span class="comment"># it is possible to configure how big a single node can be in bytes, and the</span></span><br><span class="line"><span class="comment"># maximum number of items it may contain before switching to a new node when</span></span><br><span class="line"><span class="comment"># appending new stream entries. If any of the following settings are set to</span></span><br><span class="line"><span class="comment"># zero, the limit is ignored, so for instance it is possible to set just a</span></span><br><span class="line"><span class="comment"># max entires limit by setting max-bytes to 0 and max-entries to the desired</span></span><br><span class="line"><span class="comment"># value.</span></span><br><span class="line"><span class="meta">stream-node-max-bytes</span> <span class="string">4096</span></span><br><span class="line"><span class="meta">stream-node-max-entries</span> <span class="string">100</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Active rehashing uses 1 millisecond every 100 milliseconds of CPU time in</span></span><br><span class="line"><span class="comment"># order to help rehashing the main Redis hash table (the one mapping top-level</span></span><br><span class="line"><span class="comment"># keys to values). The hash table implementation Redis uses (see dict.c)</span></span><br><span class="line"><span class="comment"># performs a lazy rehashing: the more operation you run into a hash table</span></span><br><span class="line"><span class="comment"># that is rehashing, the more rehashing &quot;steps&quot; are performed, so if the</span></span><br><span class="line"><span class="comment"># server is idle the rehashing is never complete and some more memory is used</span></span><br><span class="line"><span class="comment"># by the hash table.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># The default is to use this millisecond 10 times every second in order to</span></span><br><span class="line"><span class="comment"># actively rehash the main dictionaries, freeing memory when possible.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># If unsure:</span></span><br><span class="line"><span class="comment"># use &quot;activerehashing no&quot; if you have hard latency requirements and it is</span></span><br><span class="line"><span class="comment"># not a good thing in your environment that Redis can reply from time to time</span></span><br><span class="line"><span class="comment"># to queries with 2 milliseconds delay.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># use &quot;activerehashing yes&quot; if you don&#x27;t have such hard requirements but</span></span><br><span class="line"><span class="comment"># want to free memory asap when possible.</span></span><br><span class="line"><span class="attr">activerehashing</span> <span class="string">yes</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># The client output buffer limits can be used to force disconnection of clients</span></span><br><span class="line"><span class="comment"># that are not reading data from the server fast enough for some reason (a</span></span><br><span class="line"><span class="comment"># common reason is that a Pub/Sub client can&#x27;t consume messages as fast as the</span></span><br><span class="line"><span class="comment"># publisher can produce them).</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># The limit can be set differently for the three different classes of clients:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># normal -&gt; normal clients including MONITOR clients</span></span><br><span class="line"><span class="comment"># replica  -&gt; replica clients</span></span><br><span class="line"><span class="comment"># pubsub -&gt; clients subscribed to at least one pubsub channel or pattern</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># The syntax of every client-output-buffer-limit directive is the following:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># client-output-buffer-limit &lt;class&gt; &lt;hard limit&gt; &lt;soft limit&gt; &lt;soft seconds&gt;</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># A client is immediately disconnected once the hard limit is reached, or if</span></span><br><span class="line"><span class="comment"># the soft limit is reached and remains reached for the specified number of</span></span><br><span class="line"><span class="comment"># seconds (continuously).</span></span><br><span class="line"><span class="comment"># So for instance if the hard limit is 32 megabytes and the soft limit is</span></span><br><span class="line"><span class="comment"># 16 megabytes / 10 seconds, the client will get disconnected immediately</span></span><br><span class="line"><span class="comment"># if the size of the output buffers reach 32 megabytes, but will also get</span></span><br><span class="line"><span class="comment"># disconnected if the client reaches 16 megabytes and continuously overcomes</span></span><br><span class="line"><span class="comment"># the limit for 10 seconds.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># By default normal clients are not limited because they don&#x27;t receive data</span></span><br><span class="line"><span class="comment"># without asking (in a push way), but just after a request, so only</span></span><br><span class="line"><span class="comment"># asynchronous clients may create a scenario where data is requested faster</span></span><br><span class="line"><span class="comment"># than it can read.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Instead there is a default limit for pubsub and replica clients, since</span></span><br><span class="line"><span class="comment"># subscribers and replicas receive data in a push fashion.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Both the hard or the soft limit can be disabled by setting them to zero.</span></span><br><span class="line"><span class="meta">client-output-buffer-limit</span> <span class="string">normal 0 0 0</span></span><br><span class="line"><span class="meta">client-output-buffer-limit</span> <span class="string">replica 256mb 64mb 60</span></span><br><span class="line"><span class="meta">client-output-buffer-limit</span> <span class="string">pubsub 32mb 8mb 60</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Client query buffers accumulate new commands. They are limited to a fixed</span></span><br><span class="line"><span class="comment"># amount by default in order to avoid that a protocol desynchronization (for</span></span><br><span class="line"><span class="comment"># instance due to a bug in the client) will lead to unbound memory usage in</span></span><br><span class="line"><span class="comment"># the query buffer. However you can configure it here if you have very special</span></span><br><span class="line"><span class="comment"># needs, such us huge multi/exec requests or alike.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># client-query-buffer-limit 1gb</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># In the Redis protocol, bulk requests, that are, elements representing single</span></span><br><span class="line"><span class="comment"># strings, are normally limited ot 512 mb. However you can change this limit</span></span><br><span class="line"><span class="comment"># here.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># proto-max-bulk-len 512mb</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Redis calls an internal function to perform many background tasks, like</span></span><br><span class="line"><span class="comment"># closing connections of clients in timeout, purging expired keys that are</span></span><br><span class="line"><span class="comment"># never requested, and so forth.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Not all tasks are performed with the same frequency, but Redis checks for</span></span><br><span class="line"><span class="comment"># tasks to perform according to the specified &quot;hz&quot; value.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># By default &quot;hz&quot; is set to 10. Raising the value will use more CPU when</span></span><br><span class="line"><span class="comment"># Redis is idle, but at the same time will make Redis more responsive when</span></span><br><span class="line"><span class="comment"># there are many keys expiring at the same time, and timeouts may be</span></span><br><span class="line"><span class="comment"># handled with more precision.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># The range is between 1 and 500, however a value over 100 is usually not</span></span><br><span class="line"><span class="comment"># a good idea. Most users should use the default of 10 and raise this up to</span></span><br><span class="line"><span class="comment"># 100 only in environments where very low latency is required.</span></span><br><span class="line"><span class="attr">hz</span> <span class="string">10</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Normally it is useful to have an HZ value which is proportional to the</span></span><br><span class="line"><span class="comment"># number of clients connected. This is useful in order, for instance, to</span></span><br><span class="line"><span class="comment"># avoid too many clients are processed for each background task invocation</span></span><br><span class="line"><span class="comment"># in order to avoid latency spikes.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Since the default HZ value by default is conservatively set to 10, Redis</span></span><br><span class="line"><span class="comment"># offers, and enables by default, the ability to use an adaptive HZ value</span></span><br><span class="line"><span class="comment"># which will temporary raise when there are many connected clients.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># When dynamic HZ is enabled, the actual configured HZ will be used as</span></span><br><span class="line"><span class="comment"># as a baseline, but multiples of the configured HZ value will be actually</span></span><br><span class="line"><span class="comment"># used as needed once more clients are connected. In this way an idle</span></span><br><span class="line"><span class="comment"># instance will use very little CPU time while a busy instance will be</span></span><br><span class="line"><span class="comment"># more responsive.</span></span><br><span class="line"><span class="meta">dynamic-hz</span> <span class="string">yes</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># When a child rewrites the AOF file, if the following option is enabled</span></span><br><span class="line"><span class="comment"># the file will be fsync-ed every 32 MB of data generated. This is useful</span></span><br><span class="line"><span class="comment"># in order to commit the file to the disk more incrementally and avoid</span></span><br><span class="line"><span class="comment"># big latency spikes.</span></span><br><span class="line"><span class="meta">aof-rewrite-incremental-fsync</span> <span class="string">yes</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># When redis saves RDB file, if the following option is enabled</span></span><br><span class="line"><span class="comment"># the file will be fsync-ed every 32 MB of data generated. This is useful</span></span><br><span class="line"><span class="comment"># in order to commit the file to the disk more incrementally and avoid</span></span><br><span class="line"><span class="comment"># big latency spikes.</span></span><br><span class="line"><span class="meta">rdb-save-incremental-fsync</span> <span class="string">yes</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Redis LFU eviction (see maxmemory setting) can be tuned. However it is a good</span></span><br><span class="line"><span class="comment"># idea to start with the default settings and only change them after investigating</span></span><br><span class="line"><span class="comment"># how to improve the performances and how the keys LFU change over time, which</span></span><br><span class="line"><span class="comment"># is possible to inspect via the OBJECT FREQ command.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># There are two tunable parameters in the Redis LFU implementation: the</span></span><br><span class="line"><span class="comment"># counter logarithm factor and the counter decay time. It is important to</span></span><br><span class="line"><span class="comment"># understand what the two parameters mean before changing them.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># The LFU counter is just 8 bits per key, it&#x27;s maximum value is 255, so Redis</span></span><br><span class="line"><span class="comment"># uses a probabilistic increment with logarithmic behavior. Given the value</span></span><br><span class="line"><span class="comment"># of the old counter, when a key is accessed, the counter is incremented in</span></span><br><span class="line"><span class="comment"># this way:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 1. A random number R between 0 and 1 is extracted.</span></span><br><span class="line"><span class="comment"># 2. A probability P is calculated as 1/(old_value*lfu_log_factor+1).</span></span><br><span class="line"><span class="comment"># 3. The counter is incremented only if R &lt; P.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># The default lfu-log-factor is 10. This is a table of how the frequency</span></span><br><span class="line"><span class="comment"># counter changes with a different number of accesses with different</span></span><br><span class="line"><span class="comment"># logarithmic factors:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># +--------+------------+------------+------------+------------+------------+</span></span><br><span class="line"><span class="comment"># | factor | 100 hits   | 1000 hits  | 100K hits  | 1M hits    | 10M hits   |</span></span><br><span class="line"><span class="comment"># +--------+------------+------------+------------+------------+------------+</span></span><br><span class="line"><span class="comment"># | 0      | 104        | 255        | 255        | 255        | 255        |</span></span><br><span class="line"><span class="comment"># +--------+------------+------------+------------+------------+------------+</span></span><br><span class="line"><span class="comment"># | 1      | 18         | 49         | 255        | 255        | 255        |</span></span><br><span class="line"><span class="comment"># +--------+------------+------------+------------+------------+------------+</span></span><br><span class="line"><span class="comment"># | 10     | 10         | 18         | 142        | 255        | 255        |</span></span><br><span class="line"><span class="comment"># +--------+------------+------------+------------+------------+------------+</span></span><br><span class="line"><span class="comment"># | 100    | 8          | 11         | 49         | 143        | 255        |</span></span><br><span class="line"><span class="comment"># +--------+------------+------------+------------+------------+------------+</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># <span class="doctag">NOTE:</span> The above table was obtained by running the following commands:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#   redis-benchmark -n 1000000 incr foo</span></span><br><span class="line"><span class="comment">#   redis-cli object freq foo</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># NOTE 2: The counter initial value is 5 in order to give new objects a chance</span></span><br><span class="line"><span class="comment"># to accumulate hits.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># The counter decay time is the time, in minutes, that must elapse in order</span></span><br><span class="line"><span class="comment"># for the key counter to be divided by two (or decremented if it has a value</span></span><br><span class="line"><span class="comment"># less &lt;= 10).</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># The default value for the lfu-decay-time is 1. A Special value of 0 means to</span></span><br><span class="line"><span class="comment"># decay the counter every time it happens to be scanned.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># lfu-log-factor 10</span></span><br><span class="line"><span class="comment"># lfu-decay-time 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">########################### ACTIVE DEFRAGMENTATION #######################</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># WARNING THIS FEATURE IS EXPERIMENTAL. However it was stress tested</span></span><br><span class="line"><span class="comment"># even in production and manually tested by multiple engineers for some</span></span><br><span class="line"><span class="comment"># time.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># What is active defragmentation?</span></span><br><span class="line"><span class="comment"># -------------------------------</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Active (online) defragmentation allows a Redis server to compact the</span></span><br><span class="line"><span class="comment"># spaces left between small allocations and deallocations of data in memory,</span></span><br><span class="line"><span class="comment"># thus allowing to reclaim back memory.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Fragmentation is a natural process that happens with every allocator (but</span></span><br><span class="line"><span class="comment"># less so with Jemalloc, fortunately) and certain workloads. Normally a server</span></span><br><span class="line"><span class="comment"># restart is needed in order to lower the fragmentation, or at least to flush</span></span><br><span class="line"><span class="comment"># away all the data and create it again. However thanks to this feature</span></span><br><span class="line"><span class="comment"># implemented by Oran Agra for Redis 4.0 this process can happen at runtime</span></span><br><span class="line"><span class="comment"># in an &quot;hot&quot; way, while the server is running.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Basically when the fragmentation is over a certain level (see the</span></span><br><span class="line"><span class="comment"># configuration options below) Redis will start to create new copies of the</span></span><br><span class="line"><span class="comment"># values in contiguous memory regions by exploiting certain specific Jemalloc</span></span><br><span class="line"><span class="comment"># features (in order to understand if an allocation is causing fragmentation</span></span><br><span class="line"><span class="comment"># and to allocate it in a better place), and at the same time, will release the</span></span><br><span class="line"><span class="comment"># old copies of the data. This process, repeated incrementally for all the keys</span></span><br><span class="line"><span class="comment"># will cause the fragmentation to drop back to normal values.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Important things to understand:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 1. This feature is disabled by default, and only works if you compiled Redis</span></span><br><span class="line"><span class="comment">#    to use the copy of Jemalloc we ship with the source code of Redis.</span></span><br><span class="line"><span class="comment">#    This is the default with Linux builds.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 2. You never need to enable this feature if you don&#x27;t have fragmentation</span></span><br><span class="line"><span class="comment">#    issues.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 3. Once you experience fragmentation, you can enable this feature when</span></span><br><span class="line"><span class="comment">#    needed with the command &quot;CONFIG SET activedefrag yes&quot;.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># The configuration parameters are able to fine tune the behavior of the</span></span><br><span class="line"><span class="comment"># defragmentation process. If you are not sure about what they mean it is</span></span><br><span class="line"><span class="comment"># a good idea to leave the defaults untouched.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Enabled active defragmentation</span></span><br><span class="line"><span class="comment"># activedefrag yes</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Minimum amount of fragmentation waste to start active defrag</span></span><br><span class="line"><span class="comment"># active-defrag-ignore-bytes 100mb</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Minimum percentage of fragmentation to start active defrag</span></span><br><span class="line"><span class="comment"># active-defrag-threshold-lower 10</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Maximum percentage of fragmentation at which we use maximum effort</span></span><br><span class="line"><span class="comment"># active-defrag-threshold-upper 100</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Minimal effort for defrag in CPU percentage</span></span><br><span class="line"><span class="comment"># active-defrag-cycle-min 5</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Maximal effort for defrag in CPU percentage</span></span><br><span class="line"><span class="comment"># active-defrag-cycle-max 75</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Maximum number of set/hash/zset/list fields that will be processed from</span></span><br><span class="line"><span class="comment"># the main dictionary scan</span></span><br><span class="line"><span class="comment"># active-defrag-max-scan-fields 1000</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis安装</title>
      <link href="Redis/Redis%E5%AE%89%E8%A3%85/"/>
      <url>Redis/Redis%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><ul><li>Linux版本：CentOS7.7</li><li>Redis版本：5.0.8</li></ul><h2 id="1、下载Redis"><a href="#1、下载Redis" class="headerlink" title="1、下载Redis"></a>1、下载Redis</h2><ul><li>方式一：官方下载地址 <a href="http://download.redis.io/releases/">http://download.redis.io/releases/</a> 选择对应版本下载后上传服务器。</li><li>方式二：<code>wget http://download.redis.io/releases/redis-5.0.8.tar.gz</code></li></ul><h2 id="2、解压安装"><a href="#2、解压安装" class="headerlink" title="2、解压安装"></a>2、解压安装</h2><ol><li><p>解压并编译。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tar -xvf redis-5.0.8.tar.gz</span><br><span class="line">cd redis-5.0.8</span><br><span class="line">make</span><br></pre></td></tr></table></figure><p>make如果报错，则需要安装gcc环境 <code>yum install gcc-c++</code></p></li><li><p>安装到<code>/usr/local/redis/</code>目录下，并复制配置文件。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cd src</span><br><span class="line">make install PREFIX=/usr/local/redis</span><br><span class="line">cd ../</span><br><span class="line">mkdir /usr/local/redis/config</span><br><span class="line">cp ./redis.conf /usr/local/redis/config/</span><br></pre></td></tr></table></figure></li></ol><h2 id="3、修改配置"><a href="#3、修改配置" class="headerlink" title="3、修改配置"></a>3、修改配置</h2><ol><li><p><code>vi /usr/local/redis/config/redis.conf</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 去除本地访问限制</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">bind</span> 127.0.0.1</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 关闭保护模式，否则外网不能访问Redis</span></span><br><span class="line">protected-mode no</span><br><span class="line"><span class="meta">#</span><span class="bash"> 是否以守护进程启动</span></span><br><span class="line">daemonize yes</span><br></pre></td></tr></table></figure></li><li><p><code>port</code>端口可改可不改，主要看有没有端口冲突。</p></li></ol><h2 id="4、启动Redis"><a href="#4、启动Redis" class="headerlink" title="4、启动Redis"></a>4、启动Redis</h2><ol><li>使用命令 <code>/usr/local/redis/bin/redis-server /usr/local/redis/config/redis.conf</code> 启动Redis。</li><li>查看进程 <code>ps aux|grep redis</code></li><li>查看端口 <code>netstat -tnlp|grep 6379</code></li></ol><h2 id="5、停Redis"><a href="#5、停Redis" class="headerlink" title="5、停Redis"></a>5、停Redis</h2><ul><li>使用<code>pkill redis</code>命令或者<code>/usr/local/redis/bin/redis-cli shutdown</code>来平滑关闭Redis进程。</li><li>一般不建议使用kill命令直接杀进程，可能会导致数据丢失。</li></ul><h2 id="6、卸载Redis"><a href="#6、卸载Redis" class="headerlink" title="6、卸载Redis"></a>6、卸载Redis</h2><ul><li>只需要删除安装目录即可 <code>rm -rf /usr/local/redis</code></li></ul><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://www.jianshu.com/p/564b0c1ccf53">Linux安装redis 完整步骤</a><br><br><br></li></ul>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot定时任务实现(二)</title>
      <link href="SpringBoot/%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/SpringBoot%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1%E5%AE%9E%E7%8E%B0(%E4%BA%8C)/"/>
      <url>SpringBoot/%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/SpringBoot%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1%E5%AE%9E%E7%8E%B0(%E4%BA%8C)/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>前面介绍通过使用<code>@Scheduled</code>注解来实现定时任务，这种方式虽然很简便，但是还不够灵活。比如在一些场景下，我们需要动态地去改变定时任务周期、实时启停定时任务。这就需要动态地去更改定时任务的相关参数配置。</p><p>此文介绍的方式只负责定时任务调度（非分布式调度），不管具体业务的执行结果，也不对多个定时任务做业务上前后顺序关联。</p><h2 id="1、Maven依赖"><a href="#1、Maven依赖" class="headerlink" title="1、Maven依赖"></a>1、Maven依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.15<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.oracle<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ojdbc6<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>11.2.0.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.karaf.scheduler<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>org.apache.karaf.scheduler.core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2、创建定时任务管理表"><a href="#2、创建定时任务管理表" class="headerlink" title="2、创建定时任务管理表"></a>2、创建定时任务管理表</h2><h4 id="2-1、MySQL"><a href="#2-1、MySQL" class="headerlink" title="2.1、MySQL"></a>2.1、MySQL</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> spring_schedule_cron (</span><br><span class="line">    <span class="keyword">id</span> <span class="built_in">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">    bean_name <span class="built_in">varchar</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;定时任务beanName&#x27;</span>,</span><br><span class="line">    cron_expression <span class="built_in">varchar</span>(<span class="number">16</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;cron表达式&#x27;</span>,</span><br><span class="line">    task_desc <span class="built_in">varchar</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;任务描述&#x27;</span>,</span><br><span class="line">    <span class="keyword">enable</span> <span class="built_in">tinyint</span> <span class="keyword">DEFAULT</span> <span class="number">1</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;状态 0-禁用 1-启用&#x27;</span>,</span><br><span class="line">    app_id <span class="built_in">varchar</span>(<span class="number">16</span>) <span class="keyword">COMMENT</span> <span class="string">&#x27;应用id&#x27;</span>,</span><br><span class="line">    PRIMARY <span class="keyword">KEY</span> (<span class="keyword">id</span>)</span><br><span class="line">)<span class="keyword">COMMENT</span> = <span class="string">&#x27;定时任务表&#x27;</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">UNIQUE</span> <span class="keyword">INDEX</span> spring_schedule_cron_index <span class="keyword">ON</span> spring_schedule_cron(bean_name, app_id);</span><br></pre></td></tr></table></figure><h4 id="2-2、Oracle"><a href="#2-2、Oracle" class="headerlink" title="2.2、Oracle"></a>2.2、Oracle</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> spring_schedule_cron (</span><br><span class="line">    <span class="keyword">id</span> <span class="built_in">NUMBER</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    bean_name <span class="built_in">VARCHAR2</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,<span class="comment">--COMMENT &#x27;定时任务beanName&#x27;</span></span><br><span class="line">    cron_expression <span class="built_in">VARCHAR2</span>(<span class="number">16</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,<span class="comment">--COMMENT &#x27;cron表达式&#x27;</span></span><br><span class="line">    task_desc <span class="built_in">VARCHAR2</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>, <span class="comment">--COMMENT &#x27;任务描述&#x27;,</span></span><br><span class="line">    <span class="keyword">enable</span> <span class="built_in">INTEGER</span> <span class="keyword">DEFAULT</span> <span class="number">1</span>, <span class="comment">--COMMENT &#x27;状态 0-禁用 1-启用&#x27;</span></span><br><span class="line">    app_id <span class="built_in">VARCHAR2</span>(<span class="number">16</span>), <span class="comment">--COMMENT &#x27;应用id&#x27;</span></span><br><span class="line">    PRIMARY <span class="keyword">KEY</span> (<span class="keyword">id</span>)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">COMMENT</span> <span class="keyword">ON</span> <span class="keyword">TABLE</span> spring_schedule_cron <span class="keyword">IS</span> <span class="string">&#x27;定时任务表&#x27;</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">UNIQUE</span> <span class="keyword">INDEX</span> spring_schedule_cron_index <span class="keyword">ON</span> spring_schedule_cron(bean_name, app_id);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 主键序列</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">sequence</span> seq_spring_schedule_cron;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">sequence</span> seq_spring_schedule_cron</span><br><span class="line"><span class="keyword">INCREMENT</span> <span class="keyword">BY</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">START</span> <span class="keyword">WITH</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">ORDER</span></span><br><span class="line"><span class="keyword">CACHE</span> <span class="number">20</span>;</span><br></pre></td></tr></table></figure><p>数据访问dao层可以参考文末的代码链接，这里就不再展示了。</p><h2 id="3、启动类配置"><a href="#3、启动类配置" class="headerlink" title="3、启动类配置"></a>3、启动类配置</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;net.zhaoxiaobin.task.dao&quot;)</span></span><br><span class="line"><span class="meta">@EnableAsync</span></span><br><span class="line"><span class="meta">@EnableScheduling</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TaskApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(TaskApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConditionalOnMissingBean(name = &quot;scheduleTaskExecutor&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Executor <span class="title">scheduleTaskExecutor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ThreadPoolTaskExecutor executor = <span class="keyword">new</span> ThreadPoolTaskExecutor();</span><br><span class="line">        executor.setCorePoolSize(<span class="number">20</span>); <span class="comment">// 核心线程数量，线程池创建时候初始化的线程数</span></span><br><span class="line">        executor.setMaxPoolSize(<span class="number">50</span>); <span class="comment">// 最大线程数，只有在缓冲队列满了之后才会申请超过核心线程数的线程</span></span><br><span class="line">        executor.setQueueCapacity(<span class="number">200</span>); <span class="comment">// 缓冲队列，用来缓冲执行任务的队列</span></span><br><span class="line">        executor.setKeepAliveSeconds(<span class="number">60</span>); <span class="comment">// 当超过了核心线程出之外的线程在空闲时间到达之后会被销毁</span></span><br><span class="line">        executor.setThreadNamePrefix(<span class="string">&quot;scheduleTask-&quot;</span>); <span class="comment">// 线程名前缀</span></span><br><span class="line">        executor.setWaitForTasksToCompleteOnShutdown(<span class="keyword">true</span>); <span class="comment">// 用来设置线程池关闭的时候等待所有任务都完成再继续销毁其他的Bean</span></span><br><span class="line">        executor.setAwaitTerminationSeconds(<span class="number">60</span> * <span class="number">5</span>); <span class="comment">// 该方法用来设置线程池中任务的等待时间，如果超过这个时候还没有销毁就强制销毁，以确保应用最后能够被关闭，而不是阻塞住。</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        1.AbortPolicy，ThreadPoolExecutor中默认的拒绝策略就是AbortPolicy，直接抛出异常。</span></span><br><span class="line"><span class="comment">        2.CallerRunsPolicy，CallerRunsPolicy在任务被拒绝添加后，会调用当前线程池的所在的线程去执行被拒绝的任务。</span></span><br><span class="line"><span class="comment">        3.DiscardPolicy，采用这个拒绝策略，会让被线程池拒绝的任务直接抛弃，不会抛异常也不会执行。</span></span><br><span class="line"><span class="comment">        4.DiscardOldestPolicy，当任务被拒绝添加时，会抛弃任务队列中最旧的任务也就是最先加入队列的，再把这个新任务添加进去。</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        executor.setRejectedExecutionHandler(<span class="keyword">new</span> ThreadPoolExecutor.DiscardPolicy());</span><br><span class="line">        <span class="keyword">return</span> executor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>启动类上需要添加<code>@EnableAsync</code>、<code>@EnableScheduling</code>用来启用异步功能和定时任务。</li><li>创建线程池并注入<code>Spring</code>容器用以定时任务的调度执行，这里使用条件注解<code>@ConditionalOnMissingBean</code>是为了此<strong>简易定时任务调度工程</strong>可以在被其它工程集成依赖的时候，能够在自己的工程中重新定义线程池<code>Executor</code>，用来覆盖默认的线程池配置。</li></ol><h2 id="4、动态定时任务配置类"><a href="#4、动态定时任务配置类" class="headerlink" title="4、动态定时任务配置类"></a>4、动态定时任务配置类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ScheduledConfig</span> <span class="keyword">implements</span> <span class="title">SchedulingConfigurer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ApplicationContext context;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SpringScheduleCronDao dao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;scheduleSwitch:false&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> scheduleSwitch;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;spring.application.name:appId&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String appId;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;server.port&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String port;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@SneakyThrows</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configureTasks</span><span class="params">(ScheduledTaskRegistrar taskRegistrar)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 定时任务开关</span></span><br><span class="line">        <span class="keyword">if</span> (!scheduleSwitch) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 查询所有定时任务</span></span><br><span class="line">        List&lt;SpringScheduleCron&gt; cronList = dao.findByAppId(appId);</span><br><span class="line">        <span class="keyword">for</span> (SpringScheduleCron originSpringScheduleCron : cronList) &#123;</span><br><span class="line">            ScheduleService scheduleBean = context.getBean(originSpringScheduleCron.getBeanName(), ScheduleService.class);</span><br><span class="line">            <span class="comment">// 注册定时任务</span></span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">            每次定时任务执行时，都会按顺序执行以下代码</span></span><br><span class="line"><span class="comment">            1.执行scheduleBean的run函数（在ScheduleService接口实现的Runnable方法），可以异步执行</span></span><br><span class="line"><span class="comment">            2.从表中查询当前定时任务最新的配置参数，更新下一次的执行周期</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            taskRegistrar.addTriggerTask(scheduleBean, triggerContext -&gt; &#123;</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            SpringScheduleCron springScheduleCron = dao.findByBeanName(appId, originSpringScheduleCron.getBeanName());</span><br><span class="line">                            String originalCronExpression = originSpringScheduleCron.getCronExpression();</span><br><span class="line">                            String currentCronExpression = springScheduleCron.getCronExpression();</span><br><span class="line">                            <span class="keyword">if</span> (!originalCronExpression.equals(currentCronExpression) &amp;&amp; CronExpression.isValidExpression(currentCronExpression)) &#123;</span><br><span class="line">                                log.info(<span class="string">&quot;=====更新[&#123;&#125;]最新cron表达式[&#123;&#125;]=====&quot;</span>, originSpringScheduleCron.getBeanName(), currentCronExpression);</span><br><span class="line">                                originSpringScheduleCron.setCronExpression(currentCronExpression);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                            log.error(<span class="string">&quot;=====更新cron表达式异常=====&quot;</span>, e);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">new</span> CronTrigger(originSpringScheduleCron.getCronExpression()).nextExecutionTime(triggerContext);</span><br><span class="line">                    &#125;</span><br><span class="line">            );</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 定时任务管理界面</span></span><br><span class="line">        InetAddress localHost = Inet4Address.getLocalHost();</span><br><span class="line">        String contextPath = <span class="string">&quot;http://&quot;</span>.concat(localHost.getHostAddress()).concat(<span class="string">&quot;:&quot;</span>).concat(port);</span><br><span class="line">        log.info(<span class="string">&quot;定时任务管理页面：&#123;&#125;&quot;</span>, contextPath.concat(<span class="string">&quot;/scheduleManagement/taskList&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>通过自定义配置类在服务启动时从数据库读取所有定时任务配置，将定时任务的每个实现类通过<code>addTriggerTask</code>方法注册到<code>taskRegistrar</code>对象中。</li><li>执行定时任务具体的业务逻辑，可以异步线程执行。</li><li>每次执行定时任务后，会根据<code>beanName</code>再次查库获取该定时任务的最新配置参数，更新下一次的执行周期。</li></ol><p><strong>因为是非分布式调度，集群环境可以通过定时任务开关只让一台运行定时任务调度，或者多台运行在具体实现上自行加锁。</strong></p><h2 id="5、定时任务接口和具体实现"><a href="#5、定时任务接口和具体实现" class="headerlink" title="5、定时任务接口和具体实现"></a>5、定时任务接口和具体实现</h2><h4 id="5-1、接口定义"><a href="#5-1、接口定义" class="headerlink" title="5.1、接口定义"></a>5.1、接口定义</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ScheduleService</span> <span class="keyword">extends</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    Logger log = LoggerFactory.getLogger(ScheduleService.class);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 获取当前执行的定时任务beanName</span></span><br><span class="line">        String classPath = <span class="keyword">this</span>.getClass().getName();</span><br><span class="line">        String className = classPath.substring(classPath.lastIndexOf(<span class="string">&quot;.&quot;</span>) + <span class="number">1</span>);</span><br><span class="line">        String beanName = (className.charAt(<span class="number">0</span>) + <span class="string">&quot;&quot;</span>).toLowerCase().concat(className.substring(<span class="number">1</span>));</span><br><span class="line">        <span class="comment">// 查询是否启用</span></span><br><span class="line">        Environment environment = SpringUtil.getBean(Environment.class);</span><br><span class="line">        String appId = environment.getProperty(<span class="string">&quot;spring.application.name&quot;</span>);</span><br><span class="line">        SpringScheduleCronDao dao = SpringUtil.getBean(SpringScheduleCronDao.class);</span><br><span class="line">        SpringScheduleCron springScheduleCron = dao.findByBeanName(appId, beanName);</span><br><span class="line">        <span class="keyword">if</span> (springScheduleCron.getEnable() != <span class="number">1</span>) &#123;</span><br><span class="line">            log.debug(<span class="string">&quot;=====[&#123;&#125;]不可用=====&quot;</span>, beanName);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        execute();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>每次执行定时任务时，先查表判断该定时任务是否启用，启用则再调用<code>execute</code>方法执行具体的业务逻辑。</p><h4 id="5-2、定时任务具体实现"><a href="#5-2、定时任务具体实现" class="headerlink" title="5.2、定时任务具体实现"></a>5.2、定时任务具体实现</h4><ol><li>需要实现ScheduleService接口。</li><li><code>beanName</code>需要使用默认的规则（类名首字母小写），不要自定义<code>beanName</code>。</li><li>为了防止定时任务异常导致定时任务调度的主线程挂掉或者定时任务执行耗时过长导致其它定时任务阻塞未被调度，最好需要以异步方式执行定时任务的具体业务逻辑。这里用到了我们之前创建的线程池来执行异步任务。</li></ol><p><strong>定时任务1</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Async</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ScheduleTask1</span> <span class="keyword">implements</span> <span class="title">ScheduleService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String now = DateUtil.now();</span><br><span class="line">        log.info(<span class="string">&quot;ScheduleTask1:[&#123;&#125;]&quot;</span>, now);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>定时任务2</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Async</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ScheduleTask2</span> <span class="keyword">implements</span> <span class="title">ScheduleService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String now = DateUtil.now();</span><br><span class="line">        log.info(<span class="string">&quot;ScheduleTask2:[&#123;&#125;]&quot;</span>, now);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>定时任务3</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Async</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ScheduleTask3</span> <span class="keyword">implements</span> <span class="title">ScheduleService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String now = DateUtil.now();</span><br><span class="line">        log.info(<span class="string">&quot;ScheduleTask3:[&#123;&#125;]&quot;</span>, now);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-3、定时任务配置入库"><a href="#5-3、定时任务配置入库" class="headerlink" title="5.3、定时任务配置入库"></a>5.3、定时任务配置入库</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- MySQL</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> spring_schedule_cron <span class="keyword">values</span> (<span class="number">1</span>, <span class="string">&#x27;scheduleTask1&#x27;</span>, <span class="string">&#x27;*/5 * * * * ?&#x27;</span>, <span class="string">&#x27;定时任务描述1&#x27;</span>, <span class="number">1</span>, <span class="string">&#x27;task&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> spring_schedule_cron <span class="keyword">values</span> (<span class="number">2</span>, <span class="string">&#x27;scheduleTask2&#x27;</span>, <span class="string">&#x27;*/6 * * * * ?&#x27;</span>, <span class="string">&#x27;定时任务描述2&#x27;</span>, <span class="number">1</span>, <span class="string">&#x27;task&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> spring_schedule_cron <span class="keyword">values</span> (<span class="number">3</span>, <span class="string">&#x27;scheduleTask3&#x27;</span>, <span class="string">&#x27;*/7 * * * * ?&#x27;</span>, <span class="string">&#x27;定时任务描述3&#x27;</span>, <span class="number">1</span>, <span class="string">&#x27;task&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">--Oracle</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> spring_schedule_cron <span class="keyword">values</span> (seq_spring_schedule_cron.NEXTVAL, <span class="string">&#x27;scheduleTask1&#x27;</span>, <span class="string">&#x27;*/3 * * * * ?&#x27;</span>, <span class="string">&#x27;定时任务描述1&#x27;</span>, <span class="number">1</span>, <span class="string">&#x27;task&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> spring_schedule_cron <span class="keyword">values</span> (seq_spring_schedule_cron.NEXTVAL, <span class="string">&#x27;scheduleTask2&#x27;</span>, <span class="string">&#x27;*/5 * * * * ?&#x27;</span>, <span class="string">&#x27;定时任务描述2&#x27;</span>, <span class="number">1</span>, <span class="string">&#x27;task&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> spring_schedule_cron <span class="keyword">values</span> (seq_spring_schedule_cron.NEXTVAL, <span class="string">&#x27;scheduleTask3&#x27;</span>, <span class="string">&#x27;*/7 * * * * ?&#x27;</span>, <span class="string">&#x27;定时任务描述3&#x27;</span>, <span class="number">1</span>, <span class="string">&#x27;task&#x27;</span>);</span><br></pre></td></tr></table></figure><h2 id="6、测试定时任务"><a href="#6、测试定时任务" class="headerlink" title="6、测试定时任务"></a>6、测试定时任务</h2><p>在配置文件<code>application.yml</code>中开启定时任务开关。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">scheduleSwitch:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>启动服务后可以看到，执行定时任务输出的日志。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2020-07-28 17:53:54,241 [INFO] [scheduleTask-2] [net.zhaoxiaobin.task.service.impl.ScheduleTask2:24] [] ScheduleTask2:[2020-07-28 17:53:54]</span><br><span class="line">2020-07-28 17:53:55,185 [INFO] [scheduleTask-3] [net.zhaoxiaobin.task.service.impl.ScheduleTask1:27] [] ScheduleTask1:[2020-07-28 17:53:55]</span><br><span class="line">2020-07-28 17:53:56,119 [INFO] [scheduleTask-4] [net.zhaoxiaobin.task.service.impl.ScheduleTask3:24] [] ScheduleTask3:[2020-07-28 17:53:56]</span><br></pre></td></tr></table></figure><h2 id="7、定时任务管理页面"><a href="#7、定时任务管理页面" class="headerlink" title="7、定时任务管理页面"></a>7、定时任务管理页面</h2><p><strong>采用<code>thymeleaf</code>模板实现任务调度中心的管理页面。具有以下功能</strong>：</p><ol><li>实时启停定时任务。</li><li>更改cron表达式（下一次执行才会更新开始生效）。</li><li>手动执行定时任务。</li><li>由于在服务启动时需要查库并注册所有定时任务，服务启动后添加并不生效，所以页面没有新增定时任务的功能。</li></ol><p><img src="https://zhaoxiaobin.coding.net/p/blog/d/zhaoxiaobin_img/git/raw/master/post/springboot/spring-schedule-1.jpg" alt="-w1361"></p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://zhuanlan.zhihu.com/p/79644891">在Spring Boot中优雅的实现定时任务</a></li></ul><h2 id="代码地址"><a href="#代码地址" class="headerlink" title="代码地址"></a>代码地址</h2><ul><li>github：<a href="https://github.com/senlinmu1008/spring-boot/tree/master/task">https://github.com/senlinmu1008/spring-boot/tree/master/task</a></li><li>gitee：<a href="https://gitee.com/ppbin/spring-boot/tree/master/task">https://gitee.com/ppbin/spring-boot/tree/master/task</a><br><br><br></li></ul>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot定时任务实现(一)</title>
      <link href="SpringBoot/%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/SpringBoot%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1%E5%AE%9E%E7%8E%B0(%E4%B8%80)/"/>
      <url>SpringBoot/%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/SpringBoot%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1%E5%AE%9E%E7%8E%B0(%E4%B8%80)/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>在一些业务场景中，需要自动的去执行一些功能代码，比如定时发送心跳等操作。</p><h2 id="1、启用定时任务"><a href="#1、启用定时任务" class="headerlink" title="1、启用定时任务"></a>1、启用定时任务</h2><p>在启动类上添加注解<code>@EnableScheduling</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableScheduling</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TaskApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(TaskApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2、创建定时任务配置类"><a href="#2、创建定时任务配置类" class="headerlink" title="2、创建定时任务配置类"></a>2、创建定时任务配置类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ScheduleTask</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * cron表达式</span></span><br><span class="line"><span class="comment">     * 每3秒执行一次</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Scheduled(cron = &quot;*/3 * * * * ?&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;======cron======&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 启动后10秒开始执行，固定5秒周期执行一次</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Scheduled(initialDelay = 10000, fixedRate = 5000)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;======fixedRate======&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 启动后10秒开始执行，距离上次执行结束之后20秒再开始执行下一次</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Scheduled(initialDelay = 10000, fixedDelay = 20000)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;======fixedDelay======&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>主要有3种方式设置执行周期：</p><ol><li>cron表达式：最灵活的方式，可以根据表达式设定执行时间。</li><li>fixedRate：固定周期执行，执行周期 = max(fixedRate, 业务代码执行耗时)。</li><li>fixedDelay：上一次执行结束之后开始计时，执行周期 = fixedDelay + 业务代码执行耗时。</li></ol><h2 id="3、异步执行定时任务"><a href="#3、异步执行定时任务" class="headerlink" title="3、异步执行定时任务"></a>3、异步执行定时任务</h2><p>如果在定时任务多，业务执行时间比较长的情况下，如果使用同步处理，就会发生定时任务不能及时执行的情况。就需要用到异步机制来执行定时任务。</p><h4 id="3-1、配置异步任务的线程池"><a href="#3-1、配置异步任务的线程池" class="headerlink" title="3.1、配置异步任务的线程池"></a>3.1、配置异步任务的线程池</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Executor <span class="title">taskExecutor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ThreadPoolTaskExecutor executor = <span class="keyword">new</span> ThreadPoolTaskExecutor();</span><br><span class="line">    executor.setCorePoolSize(<span class="number">20</span>);</span><br><span class="line">    executor.setMaxPoolSize(<span class="number">50</span>);</span><br><span class="line">    executor.setQueueCapacity(<span class="number">200</span>);</span><br><span class="line">    executor.setKeepAliveSeconds(<span class="number">60</span>);</span><br><span class="line">    executor.setThreadNamePrefix(<span class="string">&quot;scheduleTask-&quot;</span>);</span><br><span class="line">    executor.setAwaitTerminationSeconds(<span class="number">60</span> * <span class="number">5</span>);</span><br><span class="line">    executor.setRejectedExecutionHandler(<span class="keyword">new</span> ThreadPoolExecutor.CallerRunsPolicy());</span><br><span class="line">    <span class="keyword">return</span> executor;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-2、启动类添加-EnableAsync注解"><a href="#3-2、启动类添加-EnableAsync注解" class="headerlink" title="3.2、启动类添加@EnableAsync注解"></a>3.2、启动类添加<code>@EnableAsync</code>注解</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableScheduling</span></span><br><span class="line"><span class="meta">@EnableAsync</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TaskApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(TaskApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后在需要异步执行的定时任务方法或类上添加<code>@Async</code>注解即可生效。</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://blog.csdn.net/dkbnull/article/details/87659898">Spring Boot使用Schedule实现定时任务</a></li></ul><h2 id="代码地址"><a href="#代码地址" class="headerlink" title="代码地址"></a>代码地址</h2><ul><li>github：<a href="https://github.com/senlinmu1008/spring-boot/tree/master/task">https://github.com/senlinmu1008/spring-boot/tree/master/task</a></li><li>gitee：<a href="https://gitee.com/ppbin/spring-boot/tree/master/task">https://gitee.com/ppbin/spring-boot/tree/master/task</a><br><br><br></li></ul>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>卸载MySQL8</title>
      <link href="Database/MySQL/%E5%8D%B8%E8%BD%BDMySQL8/"/>
      <url>Database/MySQL/%E5%8D%B8%E8%BD%BDMySQL8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><ul><li>Linux版本：CentOS7.6</li><li>MySQL版本：8.0.13</li></ul><h2 id="1、卸载安装包"><a href="#1、卸载安装包" class="headerlink" title="1、卸载安装包"></a>1、卸载安装包</h2><ol><li><p><code>rpm -qa|grep mysql</code>查看mysql安装包。</p><p><img src="https://zhaoxiaobin.coding.net/p/blog/d/zhaoxiaobin_img/git/raw/master/post/mysql/mysql-2-1.jpg" alt="-w392"></p></li><li><p>卸载。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">rpm -e mysql-community-server-<span class="number">8.0</span>.<span class="number">13</span>-<span class="number">1.</span>el7.x86_64</span><br><span class="line">rpm -e mysql-community-client-<span class="number">8.0</span>.<span class="number">13</span>-<span class="number">1.</span>el7.x86_64</span><br><span class="line">rpm -e mysql-community-libs-<span class="number">8.0</span>.<span class="number">13</span>-<span class="number">1.</span>el7.x86_64</span><br><span class="line">rpm -e mysql-community-common-<span class="number">8.0</span>.<span class="number">13</span>-<span class="number">1.</span>el7.x86_64</span><br></pre></td></tr></table></figure></li></ol><h2 id="2、删除相关文件夹"><a href="#2、删除相关文件夹" class="headerlink" title="2、删除相关文件夹"></a>2、删除相关文件夹</h2><ol><li><p><code>find / -name mysql</code>查询所有mysql相关文件。</p><p><img src="https://zhaoxiaobin.coding.net/p/blog/d/zhaoxiaobin_img/git/raw/master/post/mysql/mysql-2-2.jpg" alt="-w419"></p></li><li><p><code>rm -rf /var/lib/mysql</code>即可。<br><br><br></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL8 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安装MySQL8</title>
      <link href="Database/MySQL/%E5%AE%89%E8%A3%85MySQL8/"/>
      <url>Database/MySQL/%E5%AE%89%E8%A3%85MySQL8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><ul><li>Linux版本：CentOS7.6</li><li>MySQL版本：8.0.13</li></ul><h2 id="1、下载MySQL8"><a href="#1、下载MySQL8" class="headerlink" title="1、下载MySQL8"></a>1、下载MySQL8</h2><ol><li>下载地址：<a href="https://downloads.mysql.com/archives/community/">https://downloads.mysql.com/archives/community/</a></li><li>选择版本和系统版本，然后Download。<br><img src="https://zhaoxiaobin.coding.net/p/blog/d/zhaoxiaobin_img/git/raw/master/post/mysql/mysql-1-1.jpg" alt="-w1458"></li></ol><h2 id="2、安装MySQL8"><a href="#2、安装MySQL8" class="headerlink" title="2、安装MySQL8"></a>2、安装MySQL8</h2><ol><li><p>登陆<strong>root</strong>用户。</p></li><li><p>上传安装包到服务器（或者可以在服务器直接使用wget命令进行下载），并解压。</p></li><li><p>卸载<code>mariadb</code>，会与MySQL安装冲突。</p><ul><li><code>rpm -qa | grep mariadb</code>查看有无<code>mariadb</code></li><li>如果有则删除<code>yum -y remove mariadb-libs.x86_64</code></li></ul></li><li><p>安装<code>numactl</code></p><ul><li><code>yum list installed|grep numactl</code></li><li>如果没有则<code>yum install numactl</code>，否则会在安装时报错</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">error:</span><br><span class="line">Failed dependencies:</span><br><span class="line">libnuma.so.<span class="number">1</span>()(<span class="number">64</span>bit) is needed by mysql-community-server-<span class="number">8.0</span>.<span class="number">13</span>-<span class="number">1.</span>el7.x86_64</span><br><span class="line">libnuma.so.<span class="number">1</span>(libnuma_1.<span class="number">1</span>)(<span class="number">64</span>bit) is needed by mysql-community-server-<span class="number">8.0</span>.<span class="number">13</span>-<span class="number">1.</span>el7.x86_64</span><br><span class="line">libnuma.so.<span class="number">1</span>(libnuma_1.<span class="number">2</span>)(<span class="number">64</span>bit) is needed by mysql-community-server-<span class="number">8.0</span>.<span class="number">13</span>-<span class="number">1.</span>el7.x86_64</span><br></pre></td></tr></table></figure></li><li><p>解压<code>tar -xvf mysql-8.0.13-1.el7.x86_64.rpm-bundle.tar</code></p></li><li><p>安装4个必须安装的包（需要按顺序安装）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">rpm -ivh mysql-community-common-<span class="number">8.0</span>.<span class="number">13</span>-<span class="number">1.</span>el7.x86_64.rpm</span><br><span class="line">rpm -ivh mysql-community-libs-<span class="number">8.0</span>.<span class="number">13</span>-<span class="number">1.</span>el7.x86_64.rpm</span><br><span class="line">rpm -ivh mysql-community-client-<span class="number">8.0</span>.<span class="number">13</span>-<span class="number">1.</span>el7.x86_64.rpm</span><br><span class="line">rpm -ivh mysql-community-server-<span class="number">8.0</span>.<span class="number">13</span>-<span class="number">1.</span>el7.x86_64.rpm</span><br></pre></td></tr></table></figure></li><li><p>安装另外4个非必须包（需要按顺序安装也可以不装跳过此步骤）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">rpm -ivh mysql-community-libs-compat-<span class="number">8.0</span>.<span class="number">13</span>-<span class="number">1.</span>el7.x86_64.rpm</span><br><span class="line">rpm -ivh mysql-community-embedded-compat-<span class="number">8.0</span>.<span class="number">13</span>-<span class="number">1.</span>el7.x86_64.rpm</span><br><span class="line">rpm -ivh mysql-community-devel-<span class="number">8.0</span>.<span class="number">13</span>-<span class="number">1.</span>el7.x86_64.rpm</span><br><span class="line">rpm -ivh mysql-community-test-<span class="number">8.0</span>.<span class="number">13</span>-<span class="number">1.</span>el7.x86_64.rpm</span><br></pre></td></tr></table></figure></li><li><p>启动<code>service mysqld start</code>并查看状态<code>service mysqld status</code></p></li></ol><h2 id="3、登陆MySQL8"><a href="#3、登陆MySQL8" class="headerlink" title="3、登陆MySQL8"></a>3、登陆MySQL8</h2><ol><li><p>查看临时密码<code>cat /var/log/mysqld.log</code><br><img src="https://zhaoxiaobin.coding.net/p/blog/d/zhaoxiaobin_img/git/raw/master/post/mysql/mysql-1-2.jpg" alt="-w1304"></p></li><li><p>使用临时密码登陆并修改密码。</p><ul><li><code>mysql -u root -p</code>回车输入临时密码。</li><li><code>alter USER &#39;root&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;新密码(必须包含：数字大小写字母特殊字符)&#39;;</code></li></ul></li><li><p>修改MySQL的<strong>root</strong>用户远程可以登陆</p><ul><li><code>use mysql;</code></li><li><code>select host, user from user;</code></li><li>如果<code>host</code>为<code>localhost</code>则执行<code>update user set host = &quot;%&quot; where user=&#39;root&#39;;</code></li><li>刷新生效<code>flush privileges;</code></li></ul></li><li><p>解决部分客户端无法连接的问题，比如<strong>dbvisualizer</strong>报<br><code>Unable to load authentication plugin &#39;caching_sha2_password</code></p><ul><li><code>mysql -u root -p</code>回车输入密码。</li><li><code>alter USER &#39;root&#39;@&#39;%&#39; IDENTIFIED WITH mysql_native_password BY &#39;root用户的密码&#39;;</code></li><li>刷新生效<code>flush privileges;</code></li></ul></li></ol><h2 id="4、更改时区"><a href="#4、更改时区" class="headerlink" title="4、更改时区"></a>4、更改时区</h2><p>1.查看当前时间。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">now</span>() <span class="keyword">from</span> dual;</span><br></pre></td></tr></table></figure><p>2.如果发现和当前系统时间不一致，则需要根据实际情况来修改。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> persist <span class="keyword">time_zone</span>=<span class="string">&#x27;-5:00&#x27;</span>;</span><br><span class="line"><span class="keyword">flush</span> <span class="keyword">privileges</span>;</span><br></pre></td></tr></table></figure><p>3.查看修改后的时区和当前时间。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">variables</span> <span class="keyword">like</span> <span class="string">&#x27;%time_zone%&#x27;</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">now</span>() <span class="keyword">from</span> dual;</span><br></pre></td></tr></table></figure><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://blog.csdn.net/qq_23167527/article/details/85236999">Centos7 安装mysql 8.0.13(rpm)的步骤，就看这一篇就可以。</a><br><br><br></li></ul>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL8 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTTP协议</title>
      <link href="%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/http/HTTP%E5%8D%8F%E8%AE%AE/"/>
      <url>%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/http/HTTP%E5%8D%8F%E8%AE%AE/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="1、浏览器发起http请求过程"><a href="#1、浏览器发起http请求过程" class="headerlink" title="1、浏览器发起http请求过程"></a>1、浏览器发起http请求过程</h2><ol><li>DNS解析<br> 1.1 浏览器缓存<br> 1.2 查找本地host文件<br> 1.3 接入互联网的应用提供商的服务器<br> 1.4 根域名服务器<br> 1.5 顶级域名服务器  </li><li>TCP连接</li><li>发送HTTP请求</li><li>服务器处理请求并返回HTTP报文</li><li>浏览器解析渲染页面</li><li>连接结束</li></ol><h2 id="2、响应码"><a href="#2、响应码" class="headerlink" title="2、响应码"></a>2、响应码</h2><table><thead><tr><th align="center">响应码</th><th align="center">原因</th></tr></thead><tbody><tr><td align="center">1xx</td><td align="center">指示信息：接收请求正在处理</td></tr><tr><td align="center">2xx</td><td align="center">成功</td></tr><tr><td align="center">3xx</td><td align="center">重定向（Location字段）</td></tr><tr><td align="center">4xx</td><td align="center">客户端错误：报文格式错误</td></tr><tr><td align="center">5xx</td><td align="center">服务端错误：服务器发生未知错误</td></tr></tbody></table><h2 id="3、Get、Post请求的区别"><a href="#3、Get、Post请求的区别" class="headerlink" title="3、Get、Post请求的区别"></a>3、Get、Post请求的区别</h2><table><thead><tr><th align="center"></th><th align="center">GET</th><th align="center">POST</th></tr></thead><tbody><tr><td align="center">请求报文</td><td align="center">url带参数（可携带信息较少）</td><td align="center">请求体（可携带报文较大）</td></tr><tr><td align="center">安全性</td><td align="center">不安全</td><td align="center">相对安全</td></tr><tr><td align="center">数据库幂等性</td><td align="center">符合</td><td align="center">不符合</td></tr><tr><td align="center">其它</td><td align="center">可以被缓存</td><td align="center">不能被缓存</td></tr></tbody></table><h2 id="4、Cookie和Session的区别"><a href="#4、Cookie和Session的区别" class="headerlink" title="4、Cookie和Session的区别"></a>4、Cookie和Session的区别</h2><p>HTTP本身是无状态协议，Cookie和Session是为了保持多次请求在同一个会话中（保持用户状态）。</p><table><thead><tr><th align="center"></th><th align="center">Cookie</th><th align="center">Session</th></tr></thead><tbody><tr><td align="center">存储方式</td><td align="center">客户端以文本方式存储</td><td align="center">服务端</td></tr><tr><td align="center">安全性</td><td align="center">不安全</td><td align="center">相对安全</td></tr><tr><td align="center">服务器压力</td><td align="center">小</td><td align="center">大</td></tr></tbody></table><p><strong>一般Session的使用会依赖于Cookie，因为Session ID存放在Cookie由客户再次请求时带上这个Session ID服务器才能获取到对应的Session。如果浏览器禁用Cookie可以用URL重写把 Session ID直接附加在URL路径的后面。</strong></p><h2 id="5、HTTP1-0和HTTP1-1的区别"><a href="#5、HTTP1-0和HTTP1-1的区别" class="headerlink" title="5、HTTP1.0和HTTP1.1的区别"></a>5、HTTP1.0和HTTP1.1的区别</h2><h4 id="5-1、长连接"><a href="#5-1、长连接" class="headerlink" title="5.1、长连接"></a>5.1、长连接</h4><p>HTTP1.0默认使用短连接即用一次就关闭，打开一个网页需要请求多次静态资源而每次都要重新建立连接进行TCP三次握手四次挥手，这样开销会比较大。所以HTTP1.1默认使用长连接，会在响应头加入这行代码<code>Connection:keep-alive</code>。当然Keep-Alive不会永久保持连接，它有一个保持时间，可以在不同的服务器软件（如Apache）中设定这个时间。实现长连接需要客户端和服务端都支持长连接。<br></p><h4 id="5-2、错误状态响应码"><a href="#5-2、错误状态响应码" class="headerlink" title="5.2、错误状态响应码"></a>5.2、错误状态响应码</h4><p>在HTTP1.1中新增了24个错误状态响应码，如409（Conflict）表示请求的资源与资源的当前状态发生冲突；410（Gone）表示服务器上的某个资源被永久性的删除。<br></p><h4 id="5-3、缓存处理"><a href="#5-3、缓存处理" class="headerlink" title="5.3、缓存处理"></a>5.3、缓存处理</h4><p>在HTTP1.0中主要使用header里的If-Modified-Since,Expires来做为缓存判断的标准，HTTP1.1则引入了更多的缓存控制策略例如Entity tag，If-Unmodified-Since, If-Match, If-None-Match等更多可供选择的缓存头来控制缓存策略。<br></p><h4 id="5-4、带宽优化及网络连接的使用"><a href="#5-4、带宽优化及网络连接的使用" class="headerlink" title="5.4、带宽优化及网络连接的使用"></a>5.4、带宽优化及网络连接的使用</h4><p>HTTP1.0中，存在一些浪费带宽的现象，例如客户端只是需要某个对象的一部分，而服务器却将整个对象送过来了，并且不支持断点续传功能，HTTP1.1则在请求头引入了range头域，它允许只请求资源的某个部分，即返回码是206（Partial Content），这样就方便了开发者自由的选择以便于充分利用带宽和连接。</p><h2 id="6、HTTP和HTTPS的区别"><a href="#6、HTTP和HTTPS的区别" class="headerlink" title="6、HTTP和HTTPS的区别"></a>6、HTTP和HTTPS的区别</h2><table><thead><tr><th align="center"></th><th align="center">HTTP</th><th align="center">HTTPS</th></tr></thead><tbody><tr><td align="center">端口</td><td align="center">默认80端口</td><td align="center">默认443端口</td></tr><tr><td align="center">证书</td><td align="center">不需要</td><td align="center">需要CA证书</td></tr><tr><td align="center">协议</td><td align="center">基于TCP</td><td align="center">基于SSL/TLS的HTTP协议，SSL/TLS又基于TCP协议</td></tr><tr><td align="center">报文</td><td align="center">不加密明文</td><td align="center">加密密文</td></tr><tr><td align="center">安全性</td><td align="center">低</td><td align="center">高</td></tr><tr><td align="center">资源消耗</td><td align="center">低</td><td align="center">高</td></tr><tr><td align="center"><br><br></td><td align="center"></td><td align="center"></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 网络协议 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTTP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TCP的三次握手和四次挥手</title>
      <link href="%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/tcp/TCP%E7%9A%84%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E5%92%8C%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B/"/>
      <url>%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/tcp/TCP%E7%9A%84%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E5%92%8C%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="1、概念"><a href="#1、概念" class="headerlink" title="1、概念"></a>1、概念</h2><ul><li><strong>同步SYN</strong>：建立连接标志。当SYN=1，ACK=0时表示：这是一个连接请求报文段。若同意连接，则在响应报文段中使得SYN=1，ACK=1。因此，SYN=1表示这是一个连接请求，或连接接受报文。SYN这个标志位只有在TCP建产连接时才会被置1，握手完成后SYN标志位被置0。</li><li><strong>终止FIN</strong>：关闭连接标志。FIN=1表示：此报文段的发送方的数据已经发送完毕，并要求释放运输连接。</li><li><strong>确认ACK</strong>：占1位，仅当ACK=1时，确认号字段才有效。ACK=0时，确认号无效。</li><li><strong>序列号seq</strong>：占4个字节，用来标记数据段的顺序，TCP把连接中发送的所有数据字节都编上一个序号，第一个字节的编号由本地随机产生；给字节编上序号后，就给每一个报文段指派一个序号；序列号seq就是这个报文段中的第一个字节的数据编号。</li><li><strong>确认号ack</strong>：占4个字节，期待收到对方下一个报文段的第一个数据字节的序号；序列号表示报文段携带数据的第一个字节的编号。</li></ul><p><strong>ACK、SYN和FIN这些大写的单词表示标志位，其值要么是1，要么是0；ack、seq小写的单词表示序号。</strong></p><h2 id="2、三次握手"><a href="#2、三次握手" class="headerlink" title="2、三次握手"></a>2、三次握手</h2><p><img src="https://zhaoxiaobin.coding.net/p/blog/d/zhaoxiaobin_img/git/raw/master/post/tcp/tcp-1-1.jpg"></p><ol><li>客户端主动发送SYN=1，随机产生seq=x 的数据包到服务器（服务器由SYN=1知道客户端要求建立连接）。客户端进入SYN-SENT状态。</li><li>服务器收到请求后要确认联机信息，向客户端发送SYN=1，ACK=1，随机产生seq=y，ack=x+1。服务端进入SYN-RCVD状态。</li><li>客户端收到后检查ack是否正确，即第一次发送的seq+1，以及位码ACK是否为1。若正确客户端会再次发送 ACK=1，ack=y+1，seq=x+1（如果不携带数据则不消耗seq序列号），服务端收到后确认ack的值与ACK=1，则连接建立成功。</li></ol><h4 id="2-1、SYN攻击"><a href="#2-1、SYN攻击" class="headerlink" title="2.1、SYN攻击"></a>2.1、SYN攻击</h4><p>client在发送第一次握手后就下线，导致server会不断重试发SYN+ACK包（Linux系统默认重试5次，每次时间翻倍，总共63秒才断开），最后服务器的SYN连接队列耗尽导致正常请求不能访问服务器。</p><h4 id="2-2、Linux的防护办法"><a href="#2-2、Linux的防护办法" class="headerlink" title="2.2、Linux的防护办法"></a>2.2、Linux的防护办法</h4><p>在SYN队列满后，会回发SYN Cookie参数给client，正常client则会回发SYN Cookie，直接建立连接。</p><h2 id="3、四次挥手"><a href="#3、四次挥手" class="headerlink" title="3、四次挥手"></a>3、四次挥手</h2><p><img src="https://zhaoxiaobin.coding.net/p/blog/d/zhaoxiaobin_img/git/raw/master/post/tcp/tcp-1-2.jpg"></p><ol><li>客户端进程发出连接释放报文，并且停止发送数据。释放数据报文首部，FIN=1，其序列号为seq=u（等于前面已经传送过来的数据的最后一个字节的序号加1），此时，客户端进入FIN-WAIT-1（终止等待1）状态。 TCP规定，FIN报文段即使不携带数据，也要消耗一个序号。</li><li>服务器收到连接释放报文，发出确认报文，ACK=1，ack=u+1，并且带上自己的序列号seq=v，此时，服务端就进入了CLOSE-WAIT（关闭等待）状态。TCP服务器通知高层的应用进程，客户端向服务器的方向就释放了，这时候处于半关闭状态，即客户端已经没有数据要发送了，但是服务器若发送数据，客户端依然要接受。这个状态还要持续一段时间，也就是整个CLOSE-WAIT状态持续的时间。客户端收到服务器的确认请求后，此时，客户端就进入FIN-WAIT-2（终止等待2）状态，等待服务器发送连接释放报文（在这之前还需要接受服务器发送的最后的数据但不再发送数据给服务器）。</li><li>服务器将最后的数据发送完毕后，就向客户端发送连接释放报文，FIN=1，ack=u+1，由于在半关闭状态，服务器很可能又发送了一些数据，假定此时的序列号为seq=w，此时，服务器就进入了LAST-ACK（最后确认）状态，等待客户端的确认。</li><li>客户端收到服务器的连接释放报文后，必须发出确认，ACK=1，ack=w+1，而自己的序列号是seq=u+1，此时，客户端就进入了TIME-WAIT（时间等待）状态。注意此时TCP连接还没有释放，必须经过2MSL（最长报文段寿命）的时间后，当客户端撤销相应的TCB后，才进入CLOSED状态。但是服务器只要接收到最后一次握手则立即进入CLOSED状态。</li></ol><h2 id="4、问题"><a href="#4、问题" class="headerlink" title="4、问题"></a>4、问题</h2><h4 id="4-1、为什么连接的时候是三次握手，关闭的时候却是四次握手？"><a href="#4-1、为什么连接的时候是三次握手，关闭的时候却是四次握手？" class="headerlink" title="4.1、为什么连接的时候是三次握手，关闭的时候却是四次握手？"></a>4.1、为什么连接的时候是三次握手，关闭的时候却是四次握手？</h4><p>建立连接时，服务器可以直接发送SYN+ACK报文。但是在关闭连接时，服务器不能直接关闭连接，需要等待数据发送完成再通知一次客户端关闭连接，所以会多一次挥手。<br>或者说关闭连接时，客户端和服务器都各需一次请求关闭（FIN）和确认关闭(ACK)。而建立连接时，服务器的那次握手既是对客户端第一次握手的响应也是对客户端建立连接的请求。</p><h4 id="4-2、为什么TIME-WAIT状态需要经过2MSL-最大报文段生存时间-才能返回到CLOSE状态？"><a href="#4-2、为什么TIME-WAIT状态需要经过2MSL-最大报文段生存时间-才能返回到CLOSE状态？" class="headerlink" title="4.2、为什么TIME_WAIT状态需要经过2MSL(最大报文段生存时间)才能返回到CLOSE状态？"></a>4.2、为什么TIME_WAIT状态需要经过2MSL(最大报文段生存时间)才能返回到CLOSE状态？</h4><p>防止客户端最后一次挥手确认服务器没有收到导致服务器不断重试发送FIN报文。等到2MSL后客户端会认为服务器已经关闭了连接这时候才可以放心地去关闭客户端的连接。</p><h4 id="4-3、服务器出现大量CLOES-WAIT的原因？"><a href="#4-3、服务器出现大量CLOES-WAIT的原因？" class="headerlink" title="4.3、服务器出现大量CLOES_WAIT的原因？"></a>4.3、服务器出现大量CLOES_WAIT的原因？</h4><p>代码不合理没有释放资源或者服务器连接池配置不合理。<br>通过命令行查看TCP连接各个状态的数量：<br><code>netstat -n|awk &#39;/^tcp/&#123;++S[$NF]&#125;END&#123;for(a in S) print a, S[a]&#125;&#39;</code></p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://blog.csdn.net/qq_38950316/article/details/81087809">TCP的三次握手与四次挥手理解及面试题</a><br><br><br></li></ul>]]></content>
      
      
      <categories>
          
          <category> 网络协议 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TCP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>事务的传播特性</title>
      <link href="SpringBoot/%E6%95%B0%E6%8D%AE%E5%BA%93/%E4%BA%8B%E5%8A%A1%E7%9A%84%E4%BC%A0%E6%92%AD%E7%89%B9%E6%80%A7/"/>
      <url>SpringBoot/%E6%95%B0%E6%8D%AE%E5%BA%93/%E4%BA%8B%E5%8A%A1%E7%9A%84%E4%BC%A0%E6%92%AD%E7%89%B9%E6%80%A7/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>在一些业务场景中，会涉及到多张表的操作，也就是说会有多个事务存在，如何管理这些事务，就是会利用到spring中的事务传播特性。</p><table><thead><tr><th align="center">Propagation</th><th align="center">传播特性</th></tr></thead><tbody><tr><td align="center">REQUIRED</td><td align="center">有事务则参与事务，没有事务则创建事务</td></tr><tr><td align="center">REQUIRES_NEW</td><td align="center">不管有没有事务，总是创建新事务，两个事务保持独立</td></tr><tr><td align="center">MANDATORY</td><td align="center">有事务则参与事务，没有事务则报错</td></tr><tr><td align="center">NEVER</td><td align="center">必须按非事务方式执行，有事务则报错</td></tr><tr><td align="center">NESTED</td><td align="center">有事务则嵌套事务，没有事务则创建事务</td></tr><tr><td align="center">NOT_SUPPORTED</td><td align="center">无论有无事务总是按照非事务方式执行</td></tr><tr><td align="center">SUPPORTS</td><td align="center">有事务则参与事务，没有事务则按非事务方式执行</td></tr></tbody></table><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><ol><li><strong>嵌套事务</strong>比如A事务嵌套了B事务，B会随着A回滚事务，但A不会随着B回滚事务。</li><li>利用了Spring的面向切面特性(动态代理)，需要跨业务类调用才会使<code>@Transactional</code>注解生效。</li><li><strong>REQUIRES_NEW</strong>和<strong>NOT_SUPPORTED</strong>会挂起当前事务，使用时注意死锁。</li><li>事务的传播特性需要在同一个数据源(事务管理器)下才生效。<br><br><br></li></ol>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>MySQL的事务隔离级别</title>
      <link href="Database/MySQL/MySQL%E7%9A%84%E4%BA%8B%E5%8A%A1%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB/"/>
      <url>Database/MySQL/MySQL%E7%9A%84%E4%BA%8B%E5%8A%A1%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><ul><li>基于MySQL8</li></ul><h2 id="1、并发事务带来的问题"><a href="#1、并发事务带来的问题" class="headerlink" title="1、并发事务带来的问题"></a>1、并发事务带来的问题</h2><ol><li>脏读（Dirty read）</li><li>丢失修改（Lost to modify）</li><li>不可重复读（Unrepeatableread）</li><li>幻读（Phantom read）</li></ol><h2 id="2、事务隔离级别"><a href="#2、事务隔离级别" class="headerlink" title="2、事务隔离级别"></a>2、事务隔离级别</h2><ol><li>**READ-UNCOMMITTED(读取未提交)**：最低的隔离级别，允许读取尚未提交的数据变更，可能会导致脏读、幻读或不可重复读。</li><li>**READ-COMMITTED(读取已提交)**：允许读取并发事务已经提交的数据，可以阻止脏读，但是幻读或不可重复读仍有可能发生。</li><li>**REPEATABLE-READ(可重复读)**：对同一字段的多次读取结果都是一致的，除非数据是被本身事务自己所修改，可以阻止脏读和不可重复读，但幻读仍有可能发生。</li><li>**SERIALIZABLE(可串行化)**：最高的隔离级别，完全服从ACID的隔离级别。所有的事务依次逐个执行，这样事务之间就完全不可能产生干扰，也就是说，该级别可以防止脏读、不可重复读以及幻读。</li></ol><table><thead><tr><th align="center">隔离级别</th><th align="center">脏读</th><th align="center">不可重复读</th><th align="center">幻影读</th><th align="center">update</th><th align="center">insert/delete</th><th align="center">备注</th></tr></thead><tbody><tr><td align="center">READ UNCOMMITTED</td><td align="center">√</td><td align="center">√</td><td align="center">√</td><td align="center">√</td><td align="center">√</td><td align="center"></td></tr><tr><td align="center">READ COMMITTED</td><td align="center">×</td><td align="center">√</td><td align="center">√</td><td align="center">√</td><td align="center">√</td><td align="center"></td></tr><tr><td align="center">REPEATABLE READ</td><td align="center">×</td><td align="center">×</td><td align="center">×</td><td align="center">√</td><td align="center">√</td><td align="center">mysql默认隔离级别也可以防止幻影读</td></tr><tr><td align="center">SERIALIZABLE</td><td align="center">×</td><td align="center">×</td><td align="center">×</td><td align="center">×</td><td align="center">×</td><td align="center">所有事务按顺序进行可以防止丢失修改</td></tr></tbody></table><p><strong>在使用一些持久层框架时，同一个事务多次查询结果一致是因为缓存，而非可重复读的体现。</strong></p><h4 id="2-1、如何防止丢失修改"><a href="#2-1、如何防止丢失修改" class="headerlink" title="2.1、如何防止丢失修改"></a>2.1、如何防止丢失修改</h4><ol><li><strong>SERIALIZABLE</strong> 设置该隔离级别会使CRUD所有操作影响的行数据带上锁(其它隔离级别只有update操作才会上锁)，其它事务必须等待锁释放才可继续执行。</li><li><strong>写锁</strong> 直接使用<code>update table set xx=xx+1</code></li><li><strong>悲观锁</strong> 在查询语句后面加上<code>for update</code>，适合<strong>update</strong>多于<strong>select</strong>操作。</li><li><strong>乐观锁</strong> 在表中维护1个version字段，每次更新+1，如果该条记录version与查询时不一致则回滚当前操作避免丢失修改，适合<strong>select</strong>多于<strong>update</strong>操作。</li></ol><h4 id="2-2、查看事务隔离级别"><a href="#2-2、查看事务隔离级别" class="headerlink" title="2.2、查看事务隔离级别"></a>2.2、查看事务隔离级别</h4><p>MySQL InnoDB 存储引擎的默认支持的隔离级别是 REPEATABLE-READ（可重读）。我们可以通过<code>SELECT @@tx_isolation;</code>命令来查看,MySQL 8.0 该命令改为<code>SELECT @@transaction_isolation;</code></p><h4 id="2-3、设置隔离级别"><a href="#2-3、设置隔离级别" class="headerlink" title="2.3、设置隔离级别"></a>2.3、设置隔离级别</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> [<span class="keyword">SESSION</span>|<span class="keyword">GLOBAL</span>] <span class="keyword">TRANSACTION</span> <span class="keyword">ISOLATION</span> <span class="keyword">LEVEL</span> [<span class="keyword">READ</span> UNCOMMITTED|<span class="keyword">READ</span> COMMITTED|REPEATABLE <span class="keyword">READ</span>|<span class="keyword">SERIALIZABLE</span>]</span><br></pre></td></tr></table></figure><h4 id="2-4、手动控制事务"><a href="#2-4、手动控制事务" class="headerlink" title="2.4、手动控制事务"></a>2.4、手动控制事务</h4><ol><li><code>START TARNSACTION |BEGIN：</code>显式地开启一个事务。</li><li><code>COMMIT：</code>提交事务，使得对数据库做的所有修改成为永久性。</li><li><code>ROLLBACK：</code>回滚会结束用户的事务，并撤销正在进行的所有未提交的修改。</li></ol><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://github.com/Snailclimb/JavaGuide/blob/master/docs/database/%E4%BA%8B%E5%8A%A1%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB(%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3).md">事务隔离级别(图文详解)</a><br><br><br></li></ul>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL8 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot中如何配置多数据源</title>
      <link href="SpringBoot/%E6%95%B0%E6%8D%AE%E5%BA%93/SpringBoot%E4%B8%AD%E5%A6%82%E4%BD%95%E9%85%8D%E7%BD%AE%E5%A4%9A%E6%95%B0%E6%8D%AE%E6%BA%90/"/>
      <url>SpringBoot/%E6%95%B0%E6%8D%AE%E5%BA%93/SpringBoot%E4%B8%AD%E5%A6%82%E4%BD%95%E9%85%8D%E7%BD%AE%E5%A4%9A%E6%95%B0%E6%8D%AE%E6%BA%90/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>当业务数据量达到了一定程度，DBA需要合理配置数据库资源。即配置主库的机器高配置，把核心高频的数据放在主库上；把次要的数据放在从库，低配置。开源节流嘛，就这个意思。把数据放在不同的数据库里，就需要通过不同的数据源进行操作数据。</p><h2 id="1、Maven导包"><a href="#1、Maven导包" class="headerlink" title="1、Maven导包"></a>1、Maven导包</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.15<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2、主库配置"><a href="#2、主库配置" class="headerlink" title="2、主库配置"></a>2、主库配置</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@MapperScan(</span></span><br><span class="line"><span class="meta">        basePackages = &quot;net.zhaoxiaobin.mybatis.dao.master&quot;, // Mapper映射接口，多数据源需要分开</span></span><br><span class="line"><span class="meta">        sqlSessionFactoryRef = &quot;masterSqlSessionFactory&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MasterDataSourceConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数据源配置</span></span><br><span class="line"><span class="comment">     * 多数据源配置的时候必须要有一个主数据源，用<span class="doctag">@Primary</span>标志该Bean</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@Primary</span></span><br><span class="line">    <span class="meta">@ConfigurationProperties(prefix = &quot;master.datasource&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">masterDataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        DruidDataSource dataSource = <span class="keyword">new</span> DruidDataSource();</span><br><span class="line">        <span class="keyword">return</span> dataSource;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 事务管理器</span></span><br><span class="line"><span class="comment">     * 使用代理对象获取数据源创建事务管理器</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@Primary</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSourceTransactionManager <span class="title">masterTransactionManager</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DataSourceTransactionManager(masterDataSource());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建mybatis会话工厂</span></span><br><span class="line"><span class="comment">     * 指定数据源和mybatis映射文件(多数据源需要分开)</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@Primary</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SqlSessionFactory <span class="title">masterSqlSessionFactory</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> SqlSessionFactoryBean sessionFactory = <span class="keyword">new</span> SqlSessionFactoryBean();</span><br><span class="line">        sessionFactory.setDataSource(masterDataSource());</span><br><span class="line">        sessionFactory.setConfigLocation(<span class="keyword">new</span> ClassPathResource(<span class="string">&quot;mybatis-config.xml&quot;</span>));</span><br><span class="line">        sessionFactory.setMapperLocations(<span class="keyword">new</span> PathMatchingResourcePatternResolver().getResources(<span class="string">&quot;classpath:mapper/master/*.xml&quot;</span>));</span><br><span class="line">        <span class="keyword">return</span> sessionFactory.getObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">master:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://148.70.153.63:3306/ttms?useUnicode=true&amp;characterEncoding=UTF-8&amp;allowMultiQueries=true&amp;useSSL=false</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">password</span></span><br><span class="line">    <span class="attr">driverClassName:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">initialSize:</span> <span class="number">5</span></span><br><span class="line">    <span class="attr">maxActive:</span> <span class="number">50</span></span><br><span class="line">    <span class="attr">minIdle:</span> <span class="number">0</span></span><br><span class="line">    <span class="attr">maxWait:</span> <span class="number">60000</span></span><br><span class="line">    <span class="attr">useUnfairLock:</span> <span class="literal">true</span> <span class="comment"># 禁用公平锁</span></span><br></pre></td></tr></table></figure><h2 id="3、从库配置"><a href="#3、从库配置" class="headerlink" title="3、从库配置"></a>3、从库配置</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@MapperScan(</span></span><br><span class="line"><span class="meta">        basePackages = &quot;net.zhaoxiaobin.mybatis.dao.cluster&quot;,</span></span><br><span class="line"><span class="meta">        sqlSessionFactoryRef = &quot;clusterSqlSessionFactory&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClusterDataSourceConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数据源配置</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConfigurationProperties(prefix = &quot;cluster.datasource&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">clusterDataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        DruidDataSource dataSource = <span class="keyword">new</span> DruidDataSource();</span><br><span class="line">        <span class="keyword">return</span> dataSource;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 事务管理器</span></span><br><span class="line"><span class="comment">     * 使用代理对象获取数据源创建事务管理器</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSourceTransactionManager <span class="title">clusterTransactionManager</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DataSourceTransactionManager(clusterDataSource());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建mybatis会话工厂</span></span><br><span class="line"><span class="comment">     * 指定数据源和mybatis映射文件(多数据源需要分开)</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SqlSessionFactory <span class="title">clusterSqlSessionFactory</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> SqlSessionFactoryBean sessionFactory = <span class="keyword">new</span> SqlSessionFactoryBean();</span><br><span class="line">        sessionFactory.setDataSource(clusterDataSource());</span><br><span class="line">        sessionFactory.setConfigLocation(<span class="keyword">new</span> ClassPathResource(<span class="string">&quot;mybatis-config.xml&quot;</span>));</span><br><span class="line">        sessionFactory.setMapperLocations(<span class="keyword">new</span> PathMatchingResourcePatternResolver().getResources(<span class="string">&quot;classpath:mapper/cluster/*.xml&quot;</span>));</span><br><span class="line">        <span class="keyword">return</span> sessionFactory.getObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">cluster:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://148.70.153.63:3306/ttms?useUnicode=true&amp;characterEncoding=UTF-8&amp;allowMultiQueries=true&amp;useSSL=false</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">password</span></span><br><span class="line">    <span class="attr">driverClassName:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">initialSize:</span> <span class="number">1</span></span><br><span class="line">    <span class="attr">maxActive:</span> <span class="number">10</span></span><br><span class="line">    <span class="attr">minIdle:</span> <span class="number">0</span></span><br><span class="line">    <span class="attr">maxWait:</span> <span class="number">60000</span></span><br><span class="line">    <span class="attr">useUnfairLock:</span> <span class="literal">true</span> <span class="comment"># 禁用公平锁</span></span><br></pre></td></tr></table></figure><h2 id="4、工程结构"><a href="#4、工程结构" class="headerlink" title="4、工程结构"></a>4、工程结构</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">├── pom.xml</span><br><span class="line">└── src</span><br><span class="line">    └── main</span><br><span class="line">        ├── java</span><br><span class="line">        │   └── com</span><br><span class="line">        │       └── zxb</span><br><span class="line">        │           └── mybatis</span><br><span class="line">        │               ├── MybatisMutilDataSourceApplication.java</span><br><span class="line">        │               ├── config</span><br><span class="line">        │               │   ├── ClusterDataSourceConfig.java</span><br><span class="line">        │               │   └── MasterDataSourceConfig.java</span><br><span class="line">        │               ├── dao</span><br><span class="line">        │               │   ├── cluster</span><br><span class="line">        │               │   │   └── AuthClientServiceDao.java</span><br><span class="line">        │               │   └── master</span><br><span class="line">        │               │       └── BaseUserDao.java</span><br><span class="line">        │               ├── domain</span><br><span class="line">        │               │   └── bo</span><br><span class="line">        │               │       ├── AuthClientServiceBO.java</span><br><span class="line">        │               │       └── BaseUserBO.java</span><br><span class="line">        │               ├── service</span><br><span class="line">        │               │   ├── MutilDatasourceService.java</span><br><span class="line">        │               │   └── impl</span><br><span class="line">        │               │       └── MutilDatasourceServiceImpl.java</span><br><span class="line">        │               └── web</span><br><span class="line">        │                   └── MutilDatasourceController.java</span><br><span class="line">        └── resources</span><br><span class="line">            ├── application.yml</span><br><span class="line">            ├── logback-spring.xml</span><br><span class="line">            ├── mapper</span><br><span class="line">            │   ├── cluster</span><br><span class="line">            │   │   └── authMapper.xml</span><br><span class="line">            │   └── master</span><br><span class="line">            │       └── userMapper.xml</span><br><span class="line">            ├── mybatis-config.xml</span><br><span class="line">            └── sql</span><br><span class="line">                └── sql.sql</span><br></pre></td></tr></table></figure><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="http://www.spring4all.com/article/272">Spring Boot 整合 Mybatis 实现 Druid 多数据源配置</a></li></ul><h2 id="代码地址"><a href="#代码地址" class="headerlink" title="代码地址"></a>代码地址</h2><ul><li>github：<a href="https://github.com/senlinmu1008/spring-boot/tree/master/mybatis-mutilds">https://github.com/senlinmu1008/spring-boot/tree/master/mybatis-mutilds</a></li><li>gitee：<a href="https://gitee.com/ppbin/spring-boot/tree/master/mybatis-mutilds">https://gitee.com/ppbin/spring-boot/tree/master/mybatis-mutilds</a><br><br><br></li></ul>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot2.x Actuator监控端点使用</title>
      <link href="SpringBoot/%E6%97%A5%E5%BF%97%E7%9B%91%E6%8E%A7/SpringBoot2.x%20Actuator%E7%9B%91%E6%8E%A7%E7%AB%AF%E7%82%B9%E4%BD%BF%E7%94%A8/"/>
      <url>SpringBoot/%E6%97%A5%E5%BF%97%E7%9B%91%E6%8E%A7/SpringBoot2.x%20Actuator%E7%9B%91%E6%8E%A7%E7%AB%AF%E7%82%B9%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p><strong>2.x版本的actuator使用与1.x版本有较大区别，主要有如下规则</strong>：</p><ul><li>SpringBoot2.0要通过actuator暴露端点，必须同时是启用（enabled）和暴露（exposed）的。</li><li>所有除了<code>/health</code>和<code>/info</code>的端点，默认都是不暴露的。</li><li>所有除了<code>/shutdown</code>的端点，默认都是启用的。</li><li>默认访问路径<code>http://ip:port/actuator/xxx</code></li></ul><h2 id="端点配置"><a href="#端点配置" class="headerlink" title="端点配置"></a>端点配置</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoint.shutdown.enabled:</span> <span class="literal">true</span> <span class="comment"># 开启shutdown</span></span><br><span class="line">  <span class="attr">endpoints.web.exposure.include:</span> <span class="string">&quot;*&quot;</span> <span class="comment"># 暴露所有端点</span></span><br><span class="line">  <span class="attr">endpoint.health.show-details:</span> <span class="string">always</span> <span class="comment"># health健康检查显示详细信息</span></span><br><span class="line"><span class="comment">#  endpoints.web.base-path: /monitor # 监控端点url设置（默认是/actuator，2.0之前是/）</span></span><br><span class="line"><span class="comment">#  server.port: 30101 # 监控端点单独配置（默认就是服务端口）</span></span><br></pre></td></tr></table></figure><p>常用端点可以参考SpringBoot1.x版本。</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://www.cnblogs.com/silyvin/p/9598203.html">spring boot 2.0 启动监控端点的方法</a></li><li><a href="https://blog.csdn.net/qq_36666651/article/details/80696810">springboot 2.0 运行状态监控使用 Actuator</a></li></ul><h2 id="代码地址"><a href="#代码地址" class="headerlink" title="代码地址"></a>代码地址</h2><ul><li>github：<a href="https://github.com/senlinmu1008/spring-boot/tree/master/actuator-2x">https://github.com/senlinmu1008/spring-boot/tree/master/actuator-2x</a></li><li>gitee：<a href="https://gitee.com/ppbin/spring-boot/tree/master/actuator-2x">https://gitee.com/ppbin/spring-boot/tree/master/actuator-2x</a><br><br><br></li></ul>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java生成csv文件</title>
      <link href="SpringBoot/%E9%9B%86%E6%88%90%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93%E5%BA%94%E7%94%A8/Java%E7%94%9F%E6%88%90csv%E6%96%87%E4%BB%B6/"/>
      <url>SpringBoot/%E9%9B%86%E6%88%90%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93%E5%BA%94%E7%94%A8/Java%E7%94%9F%E6%88%90csv%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>可以通过字段数组的集合或者通过实体对象集合生成csv文件。</p><h2 id="1、数组集合生成"><a href="#1、数组集合生成" class="headerlink" title="1、数组集合生成"></a>1、数组集合生成</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/writeCsvFile&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">writeCsvFile</span><span class="params">(String filePath)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    List&lt;String[]&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    list.add(<span class="keyword">new</span> String[]&#123;<span class="string">&quot;id&quot;</span>,<span class="string">&quot;short_name&quot;</span>,<span class="string">&quot;name&quot;</span>,<span class="string">&quot;remark&quot;</span>,<span class="string">&quot;parent_id&quot;</span>,<span class="string">&quot;type_name&quot;</span>,<span class="string">&quot;type_id&quot;</span>&#125;);</span><br><span class="line">    list.add(<span class="keyword">new</span> String[]&#123;<span class="string">&quot;1&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="string">&quot;大型汽车号牌&quot;</span>,<span class="string">&quot;1.00&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="string">&quot;号牌种类&quot;</span>,<span class="string">&quot;1&quot;</span>&#125;);</span><br><span class="line">    list.add(<span class="keyword">new</span> String[]&#123;<span class="string">&quot;2&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="string">&quot;小型汽车号牌&quot;</span>,<span class="string">&quot;2.00&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="string">&quot;号牌种类&quot;</span>,<span class="string">&quot;1&quot;</span>&#125;);</span><br><span class="line">    list.add(<span class="keyword">new</span> String[]&#123;<span class="string">&quot;3&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="string">&quot;使馆汽车号牌&quot;</span>,<span class="string">&quot;3.50&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="string">&quot;号牌种类&quot;</span>,<span class="string">&quot;1&quot;</span>&#125;);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Cleanup</span> ICSVWriter icsvWriter = <span class="keyword">new</span> CSVWriterBuilder(<span class="keyword">new</span> FileWriterWithEncoding(filePath, CharsetUtil.CHARSET_GBK))</span><br><span class="line">            .withSeparator(ICSVWriter.DEFAULT_SEPARATOR) <span class="comment">// 分隔符</span></span><br><span class="line">            .withQuoteChar(ICSVWriter.NO_QUOTE_CHARACTER) <span class="comment">// 不使用引号</span></span><br><span class="line">            .build();</span><br><span class="line">    icsvWriter.writeAll(list);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>生成csv文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">id,short_name,name,remark,parent_id,type_name,type_id</span><br><span class="line"><span class="number">1</span>,,大型汽车号牌,<span class="number">1.00</span>,,号牌种类,<span class="number">1</span></span><br><span class="line"><span class="number">2</span>,,小型汽车号牌,<span class="number">2.00</span>,,号牌种类,<span class="number">1</span></span><br><span class="line"><span class="number">3</span>,,使馆汽车号牌,<span class="number">3.50</span>,,号牌种类,<span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="2、DTO集合生成"><a href="#2、DTO集合生成" class="headerlink" title="2、DTO集合生成"></a>2、DTO集合生成</h2><p><strong>2.1、带有文件头，通过字段名映射生成文件头</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/writeCsvFileByName&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">writeCsvFileByName</span><span class="params">(String filePath)</span> <span class="keyword">throws</span> IOException, CsvDataTypeMismatchException, CsvRequiredFieldEmptyException </span>&#123;</span><br><span class="line">    List&lt;CarCsvDTOWriteByName&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    list.add(<span class="keyword">new</span> CarCsvDTOWriteByName()</span><br><span class="line">            .setId(<span class="string">&quot;1&quot;</span>)</span><br><span class="line">            .setName(<span class="string">&quot;大型汽车号牌&quot;</span>)</span><br><span class="line">            .setRemark(<span class="string">&quot;1.00&quot;</span>)</span><br><span class="line">            .setTypeName(<span class="string">&quot;号牌种类&quot;</span>)</span><br><span class="line">            .setTypeId(<span class="string">&quot;1&quot;</span>));</span><br><span class="line">    list.add(<span class="keyword">new</span> CarCsvDTOWriteByName()</span><br><span class="line">            .setId(<span class="string">&quot;2&quot;</span>)</span><br><span class="line">            .setName(<span class="string">&quot;小型汽车号牌&quot;</span>)</span><br><span class="line">            .setRemark(<span class="string">&quot;2.00&quot;</span>)</span><br><span class="line">            .setTypeName(<span class="string">&quot;号牌种类&quot;</span>)</span><br><span class="line">            .setTypeId(<span class="string">&quot;1&quot;</span>));</span><br><span class="line">    list.add(<span class="keyword">new</span> CarCsvDTOWriteByName()</span><br><span class="line">            .setId(<span class="string">&quot;3&quot;</span>)</span><br><span class="line">            .setName(<span class="string">&quot;使馆汽车号牌&quot;</span>)</span><br><span class="line">            .setRemark(<span class="string">&quot;3.50&quot;</span>)</span><br><span class="line">            .setTypeName(<span class="string">&quot;号牌种类&quot;</span>)</span><br><span class="line">            .setTypeId(<span class="string">&quot;1&quot;</span>));</span><br><span class="line"></span><br><span class="line">    HeaderColumnNameMappingStrategy&lt;CarCsvDTOWriteByName&gt; strategy = <span class="keyword">new</span> HeaderColumnNameMappingStrategy&lt;&gt;();</span><br><span class="line">    strategy.setType(CarCsvDTOWriteByName.class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    定义头字段的顺序</span></span><br><span class="line"><span class="comment">    实体类注解中指定的字段名在下面字符串中的位置大小决定头字段的顺序</span></span><br><span class="line"><span class="comment">    必须大写</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    String headers = <span class="string">&quot;ID|SHORT_NAME|NAME|REMARK|PARENT_ID|TYPE_NAME|TYPE_ID&quot;</span>;</span><br><span class="line">    strategy.setColumnOrderOnWrite(Comparator.comparingInt(headers::indexOf));</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Cleanup</span> Writer writer = <span class="keyword">new</span> FileWriterWithEncoding(filePath, CharsetUtil.CHARSET_GBK);</span><br><span class="line">    StatefulBeanToCsv beanToCsv = <span class="keyword">new</span> StatefulBeanToCsvBuilder(writer)</span><br><span class="line">            .withSeparator(ICSVWriter.DEFAULT_SEPARATOR) <span class="comment">// 分隔符</span></span><br><span class="line">            .withQuotechar(ICSVWriter.NO_QUOTE_CHARACTER) <span class="comment">// 不使用引号</span></span><br><span class="line">            .withMappingStrategy(strategy) <span class="comment">// 映射策略</span></span><br><span class="line">            .build();</span><br><span class="line">    beanToCsv.write(list);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Accessors(chain = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CarCsvDTOWriteByName</span> </span>&#123;</span><br><span class="line">    <span class="meta">@CsvBindByName(column = &quot;id&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@CsvBindByName(column = &quot;short_name&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String shortName;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@CsvBindByName(column = &quot;name&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@CsvBindByName(column = &quot;remark&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String remark;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@CsvBindByName(column = &quot;parent_id&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String parentId;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@CsvBindByName(column = &quot;type_name&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String typeName;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@CsvBindByName(column = &quot;type_id&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String typeId;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ID,SHORT_NAME,NAME,REMARK,PARENT_ID,TYPE_NAME,TYPE_ID</span><br><span class="line"><span class="number">1</span>,,大型汽车号牌,<span class="number">1.00</span>,,号牌种类,<span class="number">1</span></span><br><span class="line"><span class="number">2</span>,,小型汽车号牌,<span class="number">2.00</span>,,号牌种类,<span class="number">1</span></span><br><span class="line"><span class="number">3</span>,,使馆汽车号牌,<span class="number">3.50</span>,,号牌种类,<span class="number">1</span></span><br></pre></td></tr></table></figure><p><strong>2.2、不带文件头，指定字段位置</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/writeCsvFileByPosition&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">writeCsvFileByPosition</span><span class="params">(String filePath)</span> <span class="keyword">throws</span> IOException, CsvDataTypeMismatchException, CsvRequiredFieldEmptyException </span>&#123;</span><br><span class="line">    List&lt;CarCsvDTOWriteByPosition&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    list.add(<span class="keyword">new</span> CarCsvDTOWriteByPosition()</span><br><span class="line">            .setId(<span class="string">&quot;1&quot;</span>)</span><br><span class="line">            .setName(<span class="string">&quot;大型汽车号牌&quot;</span>)</span><br><span class="line">            .setRemark(<span class="string">&quot;1.00&quot;</span>)</span><br><span class="line">            .setTypeName(<span class="string">&quot;号牌种类&quot;</span>)</span><br><span class="line">            .setTypeId(<span class="string">&quot;1&quot;</span>));</span><br><span class="line">    list.add(<span class="keyword">new</span> CarCsvDTOWriteByPosition()</span><br><span class="line">            .setId(<span class="string">&quot;2&quot;</span>)</span><br><span class="line">            .setName(<span class="string">&quot;小型汽车号牌&quot;</span>)</span><br><span class="line">            .setRemark(<span class="string">&quot;2.00&quot;</span>)</span><br><span class="line">            .setTypeName(<span class="string">&quot;号牌种类&quot;</span>)</span><br><span class="line">            .setTypeId(<span class="string">&quot;1&quot;</span>));</span><br><span class="line">    list.add(<span class="keyword">new</span> CarCsvDTOWriteByPosition()</span><br><span class="line">            .setId(<span class="string">&quot;3&quot;</span>)</span><br><span class="line">            .setName(<span class="string">&quot;使馆汽车号牌&quot;</span>)</span><br><span class="line">            .setRemark(<span class="string">&quot;3.50&quot;</span>)</span><br><span class="line">            .setTypeName(<span class="string">&quot;号牌种类&quot;</span>)</span><br><span class="line">            .setTypeId(<span class="string">&quot;1&quot;</span>));</span><br><span class="line"></span><br><span class="line">    ColumnPositionMappingStrategy strategy = <span class="keyword">new</span> ColumnPositionMappingStrategy();</span><br><span class="line">    strategy.setType(CarCsvDTOWriteByPosition.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Cleanup</span> Writer writer = <span class="keyword">new</span> FileWriterWithEncoding(filePath, CharsetUtil.CHARSET_GBK);</span><br><span class="line">    StatefulBeanToCsv beanToCsv = <span class="keyword">new</span> StatefulBeanToCsvBuilder(writer)</span><br><span class="line">            .withSeparator(ICSVWriter.DEFAULT_SEPARATOR) <span class="comment">// 分隔符</span></span><br><span class="line">            .withQuotechar(ICSVWriter.NO_QUOTE_CHARACTER) <span class="comment">// 不使用引号</span></span><br><span class="line">            .withMappingStrategy(strategy) <span class="comment">// 映射策略</span></span><br><span class="line">            .build();</span><br><span class="line">    beanToCsv.write(list);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Accessors(chain = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CarCsvDTOWriteByPosition</span> </span>&#123;</span><br><span class="line">    <span class="meta">@CsvBindByPosition(position = 0)</span></span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@CsvBindByPosition(position = 1)</span></span><br><span class="line">    <span class="keyword">private</span> String shortName;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@CsvBindByPosition(position = 2)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@CsvBindByPosition(position = 3)</span></span><br><span class="line">    <span class="keyword">private</span> String remark;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@CsvBindByPosition(position = 4)</span></span><br><span class="line">    <span class="keyword">private</span> String parentId;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@CsvBindByPosition(position = 5)</span></span><br><span class="line">    <span class="keyword">private</span> String typeName;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@CsvBindByPosition(position = 6)</span></span><br><span class="line">    <span class="keyword">private</span> String typeId;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>,,大型汽车号牌,<span class="number">1.00</span>,,号牌种类,<span class="number">1</span></span><br><span class="line"><span class="number">2</span>,,小型汽车号牌,<span class="number">2.00</span>,,号牌种类,<span class="number">1</span></span><br><span class="line"><span class="number">3</span>,,使馆汽车号牌,<span class="number">3.50</span>,,号牌种类,<span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://www.jianshu.com/p/6414185b2f01">csv文件处理——Opencsv</a></li><li><a href="https://blog.csdn.net/vbirdbest/article/details/77923350">CSV类库：OpenCSV</a></li></ul><h2 id="代码地址"><a href="#代码地址" class="headerlink" title="代码地址"></a>代码地址</h2><ul><li>github：<a href="https://github.com/senlinmu1008/spring-boot/tree/master/csv">https://github.com/senlinmu1008/spring-boot/tree/master/csv</a></li><li>gitee：<a href="https://gitee.com/ppbin/spring-boot/tree/master/csv">https://gitee.com/ppbin/spring-boot/tree/master/csv</a><br><br><br></li></ul>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> csv </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JDK8内置的函数接口</title>
      <link href="Java%E5%BC%80%E5%8F%91/Java8/JDK8%E5%86%85%E7%BD%AE%E7%9A%84%E5%87%BD%E6%95%B0%E6%8E%A5%E5%8F%A3/"/>
      <url>Java%E5%BC%80%E5%8F%91/Java8/JDK8%E5%86%85%E7%BD%AE%E7%9A%84%E5%87%BD%E6%95%B0%E6%8E%A5%E5%8F%A3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><ol><li>只包含一个抽象方法的接口，称为函数式接口。</li><li>可以通过Lambda表达式来创建该接口的对象。</li><li>我们可以在任意函数式接口上使用@FunctionalInterface注释，这样做可以检查它是否是一个函数式接口。</li></ol><h2 id="1、JAVA内置四大核心函数式接口"><a href="#1、JAVA内置四大核心函数式接口" class="headerlink" title="1、JAVA内置四大核心函数式接口"></a>1、JAVA内置四大核心函数式接口</h2><table><thead><tr><th align="center">函数式接口</th><th align="center">参数类型</th><th align="center">返回类型</th><th align="center">方法</th></tr></thead><tbody><tr><td align="center">Consumer&lt;T&gt;</td><td align="center">T</td><td align="center">void</td><td align="center">void accept(T t)</td></tr><tr><td align="center">Supplier&lt;T&gt;</td><td align="center">无</td><td align="center">T</td><td align="center">T get()</td></tr><tr><td align="center">Function&lt;T,R&gt;</td><td align="center">T</td><td align="center">R</td><td align="center">R apply(T t)</td></tr><tr><td align="center">Predicate&lt;T&gt;</td><td align="center">T</td><td align="center">boolean</td><td align="center">boolean test(T t)</td></tr></tbody></table><h2 id="2、其它函数式接口"><a href="#2、其它函数式接口" class="headerlink" title="2、其它函数式接口"></a>2、其它函数式接口</h2><table><thead><tr><th align="center">函数式接口</th><th align="center">参数类型</th><th align="center">返回类型</th><th align="center">方法</th></tr></thead><tbody><tr><td align="center">BiFunction&lt;T,U,R&gt;</td><td align="center">T,U</td><td align="center">R</td><td align="center">R apply(T t, U u)</td></tr><tr><td align="center">UnaryOperator&lt;T&gt;<br>(Function子接口)</td><td align="center">T</td><td align="center">T</td><td align="center">T apply(T t)</td></tr><tr><td align="center">BinaryOperator&lt;T&gt;<br>(BiFunction子接口)</td><td align="center">T,T</td><td align="center">T</td><td align="center">T apply(T t1, T t2)</td></tr><tr><td align="center">BiConsumer&lt;T,U&gt;</td><td align="center">T,U</td><td align="center">void</td><td align="center">void accept(T t, U u)</td></tr><tr><td align="center"><br><br></td><td align="center"></td><td align="center"></td><td align="center"></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Java开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Lambda </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java解析csv文件</title>
      <link href="SpringBoot/%E9%9B%86%E6%88%90%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93%E5%BA%94%E7%94%A8/Java%E8%A7%A3%E6%9E%90csv%E6%96%87%E4%BB%B6/"/>
      <url>SpringBoot/%E9%9B%86%E6%88%90%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93%E5%BA%94%E7%94%A8/Java%E8%A7%A3%E6%9E%90csv%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>使用opencsv解析csv文件并进行ORM映射为对象集合，可以指定分隔符，主要有以下几种映射方式。</p><table><thead><tr><th align="center">接口</th><th align="center">策略</th></tr></thead><tbody><tr><td align="center">MappingStrategy</td><td align="center">顶级接口</td></tr><tr><td align="center">HeaderColumnNameMappingStrategy</td><td align="center">基于DTO属性名或注解与csv头进行映射</td></tr><tr><td align="center">ColumnPositionMappingStrategy</td><td align="center">基于DTO属性数组顺序或注解指定顺序进行映射</td></tr><tr><td align="center">HeaderColumnNameTranslateMappingStrategy</td><td align="center">基于csv头和DTO属性的map关系进行映射</td></tr></tbody></table><h2 id="1、Maven导包"><a href="#1、Maven导包" class="headerlink" title="1、Maven导包"></a>1、Maven导包</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.opencsv<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>opencsv<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2、HeaderColumnNameMappingStrategy"><a href="#2、HeaderColumnNameMappingStrategy" class="headerlink" title="2、HeaderColumnNameMappingStrategy"></a>2、HeaderColumnNameMappingStrategy</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">id,short_name,name,remark,parent_id,type_name,type_id</span><br><span class="line"><span class="number">1</span>,,大型汽车号牌,<span class="number">1.00</span>,,号牌种类,<span class="number">1</span></span><br><span class="line"><span class="number">2</span>,,小型汽车号牌,<span class="number">2.00</span>,,号牌种类,<span class="number">1</span></span><br><span class="line"><span class="number">3</span>,,使馆汽车号牌,<span class="number">3.50</span>,,号牌种类,<span class="number">1</span></span><br><span class="line"><span class="number">4</span>,,领馆汽车号牌,,,号牌种类,<span class="number">1</span></span><br><span class="line"><span class="number">5</span>,,境外汽车号牌,,,号牌种类,<span class="number">1</span></span><br><span class="line"><span class="number">6</span>,,外籍汽车号牌,,,号牌种类,<span class="number">1</span></span><br><span class="line"><span class="number">7</span>,,普通摩托车号牌,,,号牌种类,<span class="number">1</span></span><br><span class="line"><span class="number">8</span>,,低速车号牌,,,号牌种类,<span class="number">1</span></span><br><span class="line"><span class="number">9</span>,,拖拉机号牌,,,号牌种类,<span class="number">1</span></span><br><span class="line"><span class="number">10</span>,,挂车号牌,,,号牌种类,<span class="number">1</span></span><br><span class="line"><span class="number">11</span>,,教练汽车号牌,,,号牌种类,<span class="number">1</span></span><br><span class="line"><span class="number">12</span>,,临时行驶车号牌,,,号牌种类,<span class="number">1</span></span><br><span class="line"><span class="number">13</span>,,警用汽车号牌,,,号牌种类,<span class="number">1</span></span><br><span class="line"><span class="number">14</span>,,重型普通半挂车,<span class="number">20</span>,,车辆类型,<span class="number">2</span></span><br><span class="line"><span class="number">15</span>,,重型厢式半挂车,<span class="number">100</span>,,车辆类型,<span class="number">2</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CarCsvDTOByName</span> </span>&#123;</span><br><span class="line">    <span class="meta">@CsvBindByName(column = &quot;id&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@CsvBindByName(column = &quot;short_name&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String shortName;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@CsvBindByName(column = &quot;name&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@CsvBindByName(column = &quot;remark&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String remark;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@CsvBindByName(column = &quot;parent_id&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String parentId;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@CsvBindByName(column = &quot;type_name&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String typeName;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@CsvBindByName(column = &quot;type_id&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String typeId;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/parseByName&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List <span class="title">parseByName</span><span class="params">(MultipartFile file)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    InputStreamReader inputStream = <span class="keyword">new</span> InputStreamReader(file.getInputStream(), CharsetUtil.CHARSET_GBK);</span><br><span class="line">    <span class="comment">// 设置解析策略，csv的头和POJO属性的名称对应，也可以使用@CsvBindByName注解来指定名称</span></span><br><span class="line">    HeaderColumnNameMappingStrategy strategy = <span class="keyword">new</span> HeaderColumnNameMappingStrategy();</span><br><span class="line">    strategy.setType(CarCsvDTOByName.class);</span><br><span class="line"></span><br><span class="line">    CsvToBean csvToBean = <span class="keyword">new</span> CsvToBeanBuilder(inputStream)</span><br><span class="line">            .withMappingStrategy(strategy)</span><br><span class="line">            .build();</span><br><span class="line">    List carCsvDTOList = csvToBean.parse();</span><br><span class="line">    <span class="keyword">return</span> carCsvDTOList;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>默认基于DTO类的属性名和csv文件第一行的header进行映射。</li><li>也可以通过<code>@CsvBindByName</code>注解指定映射字段名。</li></ul><h2 id="3、ColumnPositionMappingStrategy"><a href="#3、ColumnPositionMappingStrategy" class="headerlink" title="3、ColumnPositionMappingStrategy"></a>3、ColumnPositionMappingStrategy</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>,,大型汽车号牌,<span class="number">1.00</span>,,号牌种类,<span class="number">1</span></span><br><span class="line"><span class="number">2</span>,,小型汽车号牌,<span class="number">2.00</span>,,号牌种类,<span class="number">1</span></span><br><span class="line"><span class="number">3</span>,,使馆汽车号牌,<span class="number">3.50</span>,,号牌种类,<span class="number">1</span></span><br><span class="line"><span class="number">4</span>,,领馆汽车号牌,,,号牌种类,<span class="number">1</span></span><br><span class="line"><span class="number">5</span>,,境外汽车号牌,,,号牌种类,<span class="number">1</span></span><br><span class="line"><span class="number">6</span>,,外籍汽车号牌,,,号牌种类,<span class="number">1</span></span><br><span class="line"><span class="number">7</span>,,普通摩托车号牌,,,号牌种类,<span class="number">1</span></span><br><span class="line"><span class="number">8</span>,,低速车号牌,,,号牌种类,<span class="number">1</span></span><br><span class="line"><span class="number">9</span>,,拖拉机号牌,,,号牌种类,<span class="number">1</span></span><br><span class="line"><span class="number">10</span>,,挂车号牌,,,号牌种类,<span class="number">1</span></span><br><span class="line"><span class="number">11</span>,,教练汽车号牌,,,号牌种类,<span class="number">1</span></span><br><span class="line"><span class="number">12</span>,,临时行驶车号牌,,,号牌种类,<span class="number">1</span></span><br><span class="line"><span class="number">13</span>,,警用汽车号牌,,,号牌种类,<span class="number">1</span></span><br><span class="line"><span class="number">14</span>,,重型普通半挂车,<span class="number">20</span>,,车辆类型,<span class="number">2</span></span><br><span class="line"><span class="number">15</span>,,重型厢式半挂车,<span class="number">100</span>,,车辆类型,<span class="number">2</span></span><br></pre></td></tr></table></figure><p><strong>3.1、基于@CsvBindByPosition注解方式的DTO</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CarCsvDTOByPosition</span> </span>&#123;</span><br><span class="line">    <span class="meta">@CsvBindByPosition(position = 0)</span></span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@CsvBindByPosition(position = 1)</span></span><br><span class="line">    <span class="keyword">private</span> String shortName;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@CsvBindByPosition(position = 2)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@CsvBindByPosition(position = 3)</span></span><br><span class="line">    <span class="keyword">private</span> String remark;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@CsvBindByPosition(position = 4)</span></span><br><span class="line">    <span class="keyword">private</span> String parentId;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@CsvBindByPosition(position = 5)</span></span><br><span class="line">    <span class="keyword">private</span> String typeName;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@CsvBindByPosition(position = 6)</span></span><br><span class="line">    <span class="keyword">private</span> String typeId;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/parseByPosition&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List <span class="title">parseByPosition</span><span class="params">(String filePath)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    InputStreamReader inputStream = <span class="keyword">new</span> InputStreamReader(<span class="keyword">new</span> FileInputStream(filePath), CharsetUtil.CHARSET_GBK);</span><br><span class="line">    <span class="comment">// 设置解析策略，使用@CsvBindByPosition注解可以指定字段在csv文件头中的位置，从0开始</span></span><br><span class="line">    ColumnPositionMappingStrategy strategy = <span class="keyword">new</span> ColumnPositionMappingStrategy();</span><br><span class="line">    strategy.setType(CarCsvDTOByPosition.class);</span><br><span class="line"></span><br><span class="line">    CsvToBean csvToBean = <span class="keyword">new</span> CsvToBeanBuilder(inputStream)</span><br><span class="line">            .withMappingStrategy(strategy)</span><br><span class="line">            .build();</span><br><span class="line">    List carCsvDTOList = csvToBean.parse();</span><br><span class="line">    <span class="keyword">return</span> carCsvDTOList;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>3.2、自定义头数组（DTO不需要注解）</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CarCsvDTOByMappingArray</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String shortName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String remark;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String parentId;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String typeName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String typeId;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/parseByMappingArray&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List <span class="title">parseByMappingArray</span><span class="params">(String filePath)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    InputStreamReader inputStream = <span class="keyword">new</span> InputStreamReader(<span class="keyword">new</span> FileInputStream(filePath), CharsetUtil.CHARSET_GBK);</span><br><span class="line">    <span class="comment">// 设置解析策略，csv文件不需要头，由程序指定</span></span><br><span class="line">    ColumnPositionMappingStrategy strategy = <span class="keyword">new</span> ColumnPositionMappingStrategy();</span><br><span class="line">    strategy.setType(CarCsvDTOByMappingArray.class);</span><br><span class="line">    String headers = <span class="string">&quot;id|shortName|name|remark|parentId|typeName|typeId&quot;</span>;</span><br><span class="line">    String[] headerArr = headers.split(<span class="string">&quot;\\|&quot;</span>);</span><br><span class="line">    strategy.setColumnMapping(headerArr);</span><br><span class="line"></span><br><span class="line">    CsvToBean csvToBean = <span class="keyword">new</span> CsvToBeanBuilder(inputStream)</span><br><span class="line">            .withMappingStrategy(strategy)</span><br><span class="line">            .build();</span><br><span class="line">    List carCsvDTOList = csvToBean.parse();</span><br><span class="line">    <span class="keyword">return</span> carCsvDTOList;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>基于<code>@CsvBindByPosition</code>注解指定字段位置来进行映射。</li><li>也可以通过自定义头数组与csv文件内容按顺序进行映射。</li><li>csv文件中不需要有文件头，如果有则需要手动跳过。</li></ul><h2 id="4、HeaderColumnNameTranslateMappingStrategy"><a href="#4、HeaderColumnNameTranslateMappingStrategy" class="headerlink" title="4、HeaderColumnNameTranslateMappingStrategy"></a>4、HeaderColumnNameTranslateMappingStrategy</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">id,short_name,name,remark,parent_id,type_name,type_id</span><br><span class="line"><span class="number">1</span>,,大型汽车号牌,<span class="number">1.00</span>,,号牌种类,<span class="number">1</span></span><br><span class="line"><span class="number">2</span>,,小型汽车号牌,<span class="number">2.00</span>,,号牌种类,<span class="number">1</span></span><br><span class="line"><span class="number">3</span>,,使馆汽车号牌,<span class="number">3.50</span>,,号牌种类,<span class="number">1</span></span><br><span class="line"><span class="number">4</span>,,领馆汽车号牌,,,号牌种类,<span class="number">1</span></span><br><span class="line"><span class="number">5</span>,,境外汽车号牌,,,号牌种类,<span class="number">1</span></span><br><span class="line"><span class="number">6</span>,,外籍汽车号牌,,,号牌种类,<span class="number">1</span></span><br><span class="line"><span class="number">7</span>,,普通摩托车号牌,,,号牌种类,<span class="number">1</span></span><br><span class="line"><span class="number">8</span>,,低速车号牌,,,号牌种类,<span class="number">1</span></span><br><span class="line"><span class="number">9</span>,,拖拉机号牌,,,号牌种类,<span class="number">1</span></span><br><span class="line"><span class="number">10</span>,,挂车号牌,,,号牌种类,<span class="number">1</span></span><br><span class="line"><span class="number">11</span>,,教练汽车号牌,,,号牌种类,<span class="number">1</span></span><br><span class="line"><span class="number">12</span>,,临时行驶车号牌,,,号牌种类,<span class="number">1</span></span><br><span class="line"><span class="number">13</span>,,警用汽车号牌,,,号牌种类,<span class="number">1</span></span><br><span class="line"><span class="number">14</span>,,重型普通半挂车,<span class="number">20</span>,,车辆类型,<span class="number">2</span></span><br><span class="line"><span class="number">15</span>,,重型厢式半挂车,<span class="number">100</span>,,车辆类型,<span class="number">2</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CarCsvDTOByTranslate</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String shortName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String remark;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String parentId;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String typeName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String typeId;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/parseByMappingByTranslate&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List <span class="title">parseByMappingByTranslate</span><span class="params">(String filePath)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    InputStreamReader inputStream = <span class="keyword">new</span> InputStreamReader(<span class="keyword">new</span> FileInputStream(filePath), CharsetUtil.CHARSET_GBK);</span><br><span class="line">    <span class="comment">// 设置解析策略，key-csv的头、value-DTO属性</span></span><br><span class="line">    HeaderColumnNameTranslateMappingStrategy strategy = <span class="keyword">new</span> HeaderColumnNameTranslateMappingStrategy();</span><br><span class="line">    strategy.setType(CarCsvDTOByTranslate.class);</span><br><span class="line">    Map&lt;String, String&gt; columnMapping = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    columnMapping.put(<span class="string">&quot;id&quot;</span>, <span class="string">&quot;id&quot;</span>);</span><br><span class="line">    columnMapping.put(<span class="string">&quot;short_name&quot;</span>, <span class="string">&quot;shortName&quot;</span>);</span><br><span class="line">    columnMapping.put(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;name&quot;</span>);</span><br><span class="line">    columnMapping.put(<span class="string">&quot;remark&quot;</span>, <span class="string">&quot;remark&quot;</span>);</span><br><span class="line">    columnMapping.put(<span class="string">&quot;parent_id&quot;</span>, <span class="string">&quot;parentId&quot;</span>);</span><br><span class="line">    columnMapping.put(<span class="string">&quot;type_name&quot;</span>, <span class="string">&quot;typeName&quot;</span>);</span><br><span class="line">    columnMapping.put(<span class="string">&quot;type_id&quot;</span>, <span class="string">&quot;typeId&quot;</span>);</span><br><span class="line">    strategy.setColumnMapping(columnMapping);</span><br><span class="line"></span><br><span class="line">    CsvToBean csvToBean = <span class="keyword">new</span> CsvToBeanBuilder(inputStream)</span><br><span class="line">            .withMappingStrategy(strategy)</span><br><span class="line">            .build();</span><br><span class="line">    List carCsvDTOList = csvToBean.parse();</span><br><span class="line">    <span class="keyword">return</span> carCsvDTOList;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5、字段类型转换和必输项校验"><a href="#5、字段类型转换和必输项校验" class="headerlink" title="5、字段类型转换和必输项校验"></a>5、字段类型转换和必输项校验</h2><p>下面演示将字符串转为<code>BigDecimal</code>类型，如果解析时id字段为空则抛异常。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">id,short_name,name,remark,parent_id,type_name,type_id</span><br><span class="line"><span class="number">1</span>,,大型汽车号牌,<span class="number">1.00</span>,,号牌种类,<span class="number">1</span></span><br><span class="line"><span class="number">2</span>,,小型汽车号牌,<span class="number">2.00</span>,,号牌种类,<span class="number">1</span></span><br><span class="line"><span class="number">3</span>,,使馆汽车号牌,<span class="number">3.50</span>,,号牌种类,<span class="number">1</span></span><br><span class="line"><span class="number">4</span>,,领馆汽车号牌,,,号牌种类,<span class="number">1</span></span><br><span class="line"><span class="number">5</span>,,境外汽车号牌,,,号牌种类,<span class="number">1</span></span><br><span class="line"><span class="number">6</span>,,外籍汽车号牌,,,号牌种类,<span class="number">1</span></span><br><span class="line"><span class="number">7</span>,,普通摩托车号牌,,,号牌种类,<span class="number">1</span></span><br><span class="line"><span class="number">8</span>,,低速车号牌,,,号牌种类,<span class="number">1</span></span><br><span class="line"><span class="number">9</span>,,拖拉机号牌,,,号牌种类,<span class="number">1</span></span><br><span class="line"><span class="number">10</span>,,挂车号牌,,,号牌种类,<span class="number">1</span></span><br><span class="line"><span class="number">11</span>,,教练汽车号牌,,,号牌种类,<span class="number">1</span></span><br><span class="line"><span class="number">12</span>,,临时行驶车号牌,,,号牌种类,<span class="number">1</span></span><br><span class="line"><span class="number">13</span>,,警用汽车号牌,,,号牌种类,<span class="number">1</span></span><br><span class="line"><span class="number">14</span>,,重型普通半挂车,<span class="number">20</span>,,车辆类型,<span class="number">2</span></span><br><span class="line"><span class="number">15</span>,,重型厢式半挂车,<span class="number">100</span>,,车辆类型,<span class="number">2</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CarCsvDTOConvertAndValid</span> </span>&#123;</span><br><span class="line">    <span class="meta">@CsvBindByName(column = &quot;id&quot;, required = true)</span></span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@CsvBindByName(column = &quot;short_name&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String shortName;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@CsvBindByName(column = &quot;name&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@CsvCustomBindByName(column = &quot;remark&quot;, converter = ConvertToBigDecimal.class)</span></span><br><span class="line">    <span class="keyword">private</span> BigDecimal remark;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@CsvBindByName(column = &quot;parent_id&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String parentId;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@CsvBindByName(column = &quot;type_name&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String typeName;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@CsvBindByName(column = &quot;type_id&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String typeId;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConvertToBigDecimal</span> <span class="keyword">extends</span> <span class="title">AbstractBeanField</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Object <span class="title">convert</span><span class="params">(String value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(StringUtils.isNotBlank(value)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> BigDecimal(value);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BigDecimal(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/convertAndValid&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List <span class="title">convertAndValid</span><span class="params">(String filePath)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    InputStreamReader inputStream = <span class="keyword">new</span> InputStreamReader(<span class="keyword">new</span> FileInputStream(filePath), CharsetUtil.CHARSET_GBK);</span><br><span class="line">    HeaderColumnNameMappingStrategy strategy = <span class="keyword">new</span> HeaderColumnNameMappingStrategy();</span><br><span class="line">    strategy.setType(CarCsvDTOConvertAndValid.class);</span><br><span class="line">    <span class="comment">// 校验必输项以及做类型转换</span></span><br><span class="line">    CsvToBean csvToBean = <span class="keyword">new</span> CsvToBeanBuilder(inputStream)</span><br><span class="line">            .withMappingStrategy(strategy)</span><br><span class="line">            .build();</span><br><span class="line">    List carCsvDTOList = csvToBean.parse();</span><br><span class="line">    <span class="keyword">return</span> carCsvDTOList;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>默认的解析规则只能支持DTO中定义简单类型字段，其它类型可以在注解中指定转换的实现类。</li><li>指定转换类型的注解主要有<code>@CsvCustomBindByName</code>和<code>@CsvCustomBindByPosition</code>这2种，分别对应基于字段名的映射和基于字段位置的映射。</li><li>同时可以在注解中指定必输项，如果解析时为空则抛出异常。</li></ul><h2 id="6、自定义解析"><a href="#6、自定义解析" class="headerlink" title="6、自定义解析"></a>6、自定义解析</h2><ul><li>解析时跳过首部指定行数。</li><li>指定分隔符。</li><li>跳过特定的行不进行解析。</li><li>指定必输项校验不通过抛出异常或是忽略不进行解析。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">=======================跳过此行=======================</span><br><span class="line">=======================跳过此行=======================</span><br><span class="line">id|short_name|name|remark|parent_id|type_name|type_id</span><br><span class="line"><span class="number">1</span>||大型汽车号牌|<span class="number">1.00</span>||号牌种类|<span class="number">1</span></span><br><span class="line"><span class="number">2</span>||小型汽车号牌|<span class="number">2.00</span>||号牌种类|<span class="number">1</span></span><br><span class="line"><span class="number">3</span>||使馆汽车号牌|<span class="number">3.50</span>||号牌种类|<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="number">4</span>||领馆汽车号牌|||号牌种类|<span class="number">1</span></span><br><span class="line"><span class="number">5</span>||境外汽车号牌|||号牌种类|<span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">6</span>||外籍汽车号牌|||号牌种类|<span class="number">1</span></span><br><span class="line"><span class="number">7</span>||普通摩托车号牌|||号牌种类|<span class="number">1</span></span><br><span class="line"><span class="number">8</span>||低速车号牌|||号牌种类|<span class="number">1</span></span><br><span class="line"><span class="number">9</span>||拖拉机号牌|||号牌种类|<span class="number">1</span></span><br><span class="line"><span class="number">10</span>||挂车号牌|||号牌种类|<span class="number">1</span></span><br><span class="line"><span class="number">11</span>||教练汽车号牌|||号牌种类|<span class="number">1</span></span><br><span class="line"><span class="number">12</span>||临时行驶车号牌|||号牌种类|<span class="number">1</span></span><br><span class="line"><span class="number">13</span>||警用汽车号牌|||号牌种类|<span class="number">1</span></span><br><span class="line"><span class="number">14</span>||重型普通半挂车|<span class="number">20</span>||车辆类型|<span class="number">2</span></span><br><span class="line"><span class="number">15</span>||重型厢式半挂车|<span class="number">100</span>||车辆类型|<span class="number">2</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CarCsvDTOConvertAndValid</span> </span>&#123;</span><br><span class="line">    <span class="meta">@CsvBindByName(column = &quot;id&quot;, required = true)</span></span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@CsvBindByName(column = &quot;short_name&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String shortName;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@CsvBindByName(column = &quot;name&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@CsvCustomBindByName(column = &quot;remark&quot;, converter = ConvertToBigDecimal.class)</span></span><br><span class="line">    <span class="keyword">private</span> BigDecimal remark;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@CsvBindByName(column = &quot;parent_id&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String parentId;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@CsvBindByName(column = &quot;type_name&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String typeName;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@CsvBindByName(column = &quot;type_id&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String typeId;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/parseBySelf&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List <span class="title">parseBySelf</span><span class="params">(String filePath)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    InputStreamReader inputStream = <span class="keyword">new</span> InputStreamReader(<span class="keyword">new</span> FileInputStream(filePath), CharsetUtil.CHARSET_GBK);</span><br><span class="line">    HeaderColumnNameMappingStrategy strategy = <span class="keyword">new</span> HeaderColumnNameMappingStrategy();</span><br><span class="line">    strategy.setType(CarCsvDTOConvertAndValid.class);</span><br><span class="line"></span><br><span class="line">    CsvToBean csvToBean = <span class="keyword">new</span> CsvToBeanBuilder(inputStream)</span><br><span class="line">            .withSkipLines(<span class="number">2</span>) <span class="comment">// 跳过行数</span></span><br><span class="line">            .withSeparator(<span class="string">&#x27;|&#x27;</span>) <span class="comment">// 分隔符</span></span><br><span class="line">            .withFilter(<span class="keyword">new</span> SkipLineFilter())</span><br><span class="line">            .withThrowExceptions(<span class="keyword">false</span>) <span class="comment">// 如果有必输项没有，则不抛异常忽略此行</span></span><br><span class="line">            .withMappingStrategy(strategy)</span><br><span class="line">            .build();</span><br><span class="line">    List carCsvDTOList = csvToBean.parse();</span><br><span class="line">    <span class="keyword">return</span> carCsvDTOList;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>跳过特定行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SkipLineFilter</span> <span class="keyword">implements</span> <span class="title">CsvToBeanFilter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">allowLine</span><span class="params">(String[] line)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 首列为空的行过滤掉</span></span><br><span class="line">        <span class="keyword">return</span> StringUtils.isNotBlank(line[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://www.jianshu.com/p/6414185b2f01">csv文件处理——Opencsv</a></li><li><a href="https://blog.csdn.net/vbirdbest/article/details/77923350">CSV类库：OpenCSV</a></li></ul><h2 id="代码地址"><a href="#代码地址" class="headerlink" title="代码地址"></a>代码地址</h2><ul><li>github：<a href="https://github.com/senlinmu1008/spring-boot/tree/master/csv">https://github.com/senlinmu1008/spring-boot/tree/master/csv</a></li><li>gitee：<a href="https://gitee.com/ppbin/spring-boot/tree/master/csv">https://gitee.com/ppbin/spring-boot/tree/master/csv</a><br><br><br></li></ul>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> csv </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>接口测试工具-Swagger应用</title>
      <link href="SpringBoot/%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95/%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7-Swagger%E5%BA%94%E7%94%A8/"/>
      <url>SpringBoot/%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95/%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7-Swagger%E5%BA%94%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>为了减少与其他团队平时开发期间的频繁沟通成本，传统做法我们会创建一份RESTful API文档来记录所有接口细节，然而这样的做法有以下几个问题：</p><ul><li>由于接口众多，并且细节复杂（需要考虑不同的HTTP请求类型、HTTP头部信息、HTTP请求内容等），高质量地创建这份文档本身就是件非常吃力的事，下游的抱怨声不绝于耳。</li><li>随着时间推移，不断修改接口实现的时候都必须同步修改接口文档，而文档与代码又处于两个不同的媒介，除非有严格的管理机制，不然很容易导致不一致现象。</li></ul><p>为了解决上面这样的问题，本文将介绍RESTful API的重磅好伙伴Swagger2，它可以轻松的整合到Spring Boot中，并与Spring MVC程序配合组织出强大RESTful API文档。它既可以减少我们创建文档的工作量，同时说明内容又整合入实现代码中，让维护文档和修改代码整合为一体，可以让我们在修改代码逻辑的同时方便的修改文档说明。另外Swagger2也提供了强大的页面测试功能来调试每个RESTful API。具体效果如下图所示：</p><p><strong>效果1</strong>：<br><img src="https://zhaoxiaobin.coding.net/p/blog/d/zhaoxiaobin_img/git/raw/master/post/springboot/swagger-1.jpg" alt="-w989"></p><p><strong>效果2</strong>：<br><img src="https://zhaoxiaobin.coding.net/p/blog/d/zhaoxiaobin_img/git/raw/master/post/springboot/swagger-2.jpg" alt="-w1667"></p><h2 id="1、Maven导包"><a href="#1、Maven导包" class="headerlink" title="1、Maven导包"></a>1、Maven导包</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.didispace<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-swagger<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.xiaoymin<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>swagger-bootstrap-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2、swagger配置"><a href="#2、swagger配置" class="headerlink" title="2、swagger配置"></a>2、swagger配置</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">swagger:</span></span><br><span class="line">  <span class="attr">docket:</span></span><br><span class="line">    <span class="attr">swagger:</span></span><br><span class="line">      <span class="attr">title:</span> <span class="string">swagger</span></span><br><span class="line">      <span class="attr">description:</span> <span class="string">swagger接口测试</span></span><br><span class="line">      <span class="attr">version:</span> <span class="number">1.0</span></span><br><span class="line">      <span class="attr">contact:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">zhaoxb</span></span><br><span class="line">      <span class="attr">base-package:</span> <span class="string">net.zhaoxiaobin.swagger.web</span></span><br><span class="line">      <span class="attr">base-path:</span> <span class="string">/**</span></span><br><span class="line">      <span class="attr">exclude-path:</span> <span class="string">/error,</span> <span class="string">/ops/**</span></span><br></pre></td></tr></table></figure><h4 id="2-1、启动类添加注解"><a href="#2-1、启动类添加注解" class="headerlink" title="2.1、启动类添加注解"></a>2.1、启动类添加注解</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableSwagger2Doc</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwaggerApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(SwaggerApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-2、controller类添加注解"><a href="#2-2、controller类添加注解" class="headerlink" title="2.2、controller类添加注解"></a>2.2、controller类添加注解</h4><p>类上添加注解<code>@Api</code>，rest接口上添加注解<code>@ApiOperation</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Api(tags = &#123;&quot;swagger报文接口测试&quot;&#125;)</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/swagger&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwaggerController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation(value = &quot;json-mapping&quot;, notes = &quot;测试请求报文字段映射转换-json&quot;)</span></span><br><span class="line">    <span class="meta">@PostMapping(value = &quot;/json&quot;, consumes = MediaType.APPLICATION_JSON_UTF8_VALUE, produces = MediaType.APPLICATION_JSON_UTF8_VALUE)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Resp_Entity <span class="title">json</span><span class="params">(<span class="meta">@RequestBody</span> <span class="meta">@Validated</span> Req_Entity request)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> response(request);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation(value = &quot;xml-mapping&quot;, notes = &quot;测试请求报文字段映射转换-xml&quot;)</span></span><br><span class="line">    <span class="meta">@PostMapping(value = &quot;/xml&quot;, consumes = MediaType.APPLICATION_XML_VALUE, produces = MediaType.APPLICATION_XML_VALUE)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Resp_Entity <span class="title">xml</span><span class="params">(<span class="meta">@RequestBody</span> <span class="meta">@Validated</span> Req_Entity request)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> response(request);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Resp_Entity <span class="title">response</span><span class="params">(Req_Entity request)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;请求报文:\r\n&#123;&#125;&quot;</span>, JSONUtil.toJsonPrettyStr(request));</span><br><span class="line">        <span class="comment">// 转XML</span></span><br><span class="line">        XStream xStream = <span class="keyword">new</span> XStream();</span><br><span class="line">        xStream.processAnnotations(Req_Entity.class);</span><br><span class="line">        String xml = xStream.toXML(request);</span><br><span class="line">        log.info(<span class="string">&quot;请求对象转xml:\r\n&#123;&#125;&quot;</span>, xml);</span><br><span class="line"></span><br><span class="line">        List&lt;Resp_Detail&gt; detailList = IntStream.range(<span class="number">1</span>, <span class="number">6</span>).mapToObj(i -&gt; <span class="keyword">new</span> Resp_Detail().setOrgId(i + <span class="string">&quot;&quot;</span>).setOrgName(<span class="string">&quot;机构名称&quot;</span> + i)).collect(Collectors.toList());</span><br><span class="line">        Resp_Entity respEntity = <span class="keyword">new</span> Resp_Entity()</span><br><span class="line">                .setReturnCode(<span class="string">&quot;000000&quot;</span>)</span><br><span class="line">                .setReturnMsg(<span class="string">&quot;交易成功&quot;</span>)</span><br><span class="line">                .setDetails(detailList);</span><br><span class="line">        log.info(<span class="string">&quot;返回报文:\r\n&#123;&#125;&quot;</span>, JSONUtil.toJsonPrettyStr(respEntity));</span><br><span class="line">        <span class="keyword">return</span> respEntity;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-3、调试页面"><a href="#2-3、调试页面" class="headerlink" title="2.3、调试页面"></a>2.3、调试页面</h4><ol><li>打开<code>http://ip:port/doc.html</code></li><li>或者打开<code>http://ip:port/swagger-ui.html</code></li><li>swagger会自动根据接口的注解生成测试报文。</li></ol><h2 id="代码地址"><a href="#代码地址" class="headerlink" title="代码地址"></a>代码地址</h2><ul><li>github：<a href="https://github.com/senlinmu1008/spring-boot/tree/master/swagger">https://github.com/senlinmu1008/spring-boot/tree/master/swagger</a></li><li>gitee：<a href="https://gitee.com/ppbin/spring-boot/tree/master/swagger">https://gitee.com/ppbin/spring-boot/tree/master/swagger</a><br><br><br></li></ul>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Swagger </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot1.x Actuator监控端点使用</title>
      <link href="SpringBoot/%E6%97%A5%E5%BF%97%E7%9B%91%E6%8E%A7/SpringBoot1.x%20Actuator%E7%9B%91%E6%8E%A7%E7%AB%AF%E7%82%B9%E4%BD%BF%E7%94%A8/"/>
      <url>SpringBoot/%E6%97%A5%E5%BF%97%E7%9B%91%E6%8E%A7/SpringBoot1.x%20Actuator%E7%9B%91%E6%8E%A7%E7%AB%AF%E7%82%B9%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>SpringBoot自带监控功能Actuator，可以帮助实现对程序内部运行情况监控，比如监控状况、Bean加载情况、环境变量、日志信息、线程信息等。</p><h2 id="1、Maven导包"><a href="#1、Maven导包" class="headerlink" title="1、Maven导包"></a>1、Maven导包</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2、关闭授权"><a href="#2、关闭授权" class="headerlink" title="2、关闭授权"></a>2、关闭授权</h2><p>很多端点的访问需要授权才允许访问，可以在配置中关闭授权。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">security.enabled:</span> <span class="literal">false</span> <span class="comment"># 部分端点访问需要授权，关闭授权</span></span><br></pre></td></tr></table></figure><h2 id="3、端点介绍"><a href="#3、端点介绍" class="headerlink" title="3、端点介绍"></a>3、端点介绍</h2><ul><li><code>/health</code></li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;status&quot;</span>: <span class="string">&quot;UP&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;diskSpace&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;status&quot;</span>: <span class="string">&quot;UP&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;total&quot;</span>: <span class="number">250685575168</span>,</span><br><span class="line">        <span class="attr">&quot;free&quot;</span>: <span class="number">155073470464</span>,</span><br><span class="line">        <span class="attr">&quot;threshold&quot;</span>: <span class="number">10485760</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>/env</code></li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;profiles&quot;</span>: [],</span><br><span class="line">    <span class="attr">&quot;server.ports&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;local.server.port&quot;</span>: <span class="number">10500</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;servletContextInitParams&quot;</span>: &#123;&#125;,</span><br><span class="line">    <span class="attr">&quot;systemProperties&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;java.vendor&quot;</span>: <span class="string">&quot;Oracle Corporation&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;jboss.modules.system.pkgs&quot;</span>: <span class="string">&quot;com.intellij.rt&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;sun.java.launcher&quot;</span>: <span class="string">&quot;SUN_STANDARD&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;sun.nio.ch.bugLevel&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;sun.management.compiler&quot;</span>: <span class="string">&quot;HotSpot 64-Bit Tiered Compilers&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;spring.output.ansi.enabled&quot;</span>: <span class="string">&quot;always&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;os.name&quot;</span>: <span class="string">&quot;Mac OS X&quot;</span>,</span><br><span class="line">        ......</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>/mappings</code></li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;&#123;[/health || /health.json],methods=[GET],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]&#125;&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;bean&quot;</span>: <span class="string">&quot;endpointHandlerMapping&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;method&quot;</span>: <span class="string">&quot;public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.HealthMvcEndpoint.invoke(javax.servlet.http.HttpServletRequest,java.security.Principal)&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;&#123;[/metrics || /metrics.json],methods=[GET],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]&#125;&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;bean&quot;</span>: <span class="string">&quot;endpointHandlerMapping&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;method&quot;</span>: <span class="string">&quot;public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EndpointMvcAdapter.invoke()&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;&#123;[/env || /env.json],methods=[GET],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]&#125;&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;bean&quot;</span>: <span class="string">&quot;endpointHandlerMapping&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;method&quot;</span>: <span class="string">&quot;public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EndpointMvcAdapter.invoke()&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;&#123;[/trace || /trace.json],methods=[GET],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]&#125;&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;bean&quot;</span>: <span class="string">&quot;endpointHandlerMapping&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;method&quot;</span>: <span class="string">&quot;public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EndpointMvcAdapter.invoke()&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;&#123;[/dump || /dump.json],methods=[GET],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]&#125;&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;bean&quot;</span>: <span class="string">&quot;endpointHandlerMapping&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;method&quot;</span>: <span class="string">&quot;public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EndpointMvcAdapter.invoke()&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;&#123;[/shutdown || /shutdown.json],methods=[POST],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]&#125;&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;bean&quot;</span>: <span class="string">&quot;endpointHandlerMapping&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;method&quot;</span>: <span class="string">&quot;public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.ShutdownMvcEndpoint.invoke()&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;&#123;[/mappings || /mappings.json],methods=[GET],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]&#125;&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;bean&quot;</span>: <span class="string">&quot;endpointHandlerMapping&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;method&quot;</span>: <span class="string">&quot;public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EndpointMvcAdapter.invoke()&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>/shutdown</code></li></ul><p>关停服务，需要在配置中放开此端点，并且需要POST请求方式</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">endpoints:</span></span><br><span class="line">  <span class="attr">shutdown.enabled:</span> <span class="literal">true</span> <span class="comment"># 开启远程关闭服务</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">2019-11-13 23:48:07,929 [INFO] [Thread-16] [org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext:984] [] Closing org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@517566b: startup date [Wed Nov 13 23:44:15 CST 2019]; root of context hierarchy</span><br><span class="line">2019-11-13 23:48:07,931 [INFO] [Thread-16] [org.springframework.context.support.DefaultLifecycleProcessor:358] [] Stopping beans in phase 0</span><br><span class="line">2019-11-13 23:48:07,933 [INFO] [Thread-16] [org.springframework.boot.actuate.endpoint.jmx.EndpointMBeanExporter:449] [] Unregistering JMX-exposed beans on shutdown</span><br><span class="line">2019-11-13 23:48:07,933 [INFO] [Thread-16] [org.springframework.boot.actuate.endpoint.jmx.EndpointMBeanExporter:241] [] Unregistering JMX-exposed beans</span><br><span class="line">2019-11-13 23:48:07,934 [INFO] [Thread-16] [org.springframework.jmx.export.annotation.AnnotationMBeanExporter:449] [] Unregistering JMX-exposed beans on shutdown</span><br><span class="line">2019-11-13 23:48:07,935 [INFO] [Thread-16] [io.undertow.servlet:360] [] Destroying Spring FrameworkServlet &#39;dispatcherServlet&#39;</span><br></pre></td></tr></table></figure><p><br><br></p>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot AOP的使用</title>
      <link href="SpringBoot/%E6%97%A5%E5%BF%97%E7%9B%91%E6%8E%A7/SpringBoot%20AOP%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>SpringBoot/%E6%97%A5%E5%BF%97%E7%9B%91%E6%8E%A7/SpringBoot%20AOP%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>Spring框架核心之一，面向切面编程。</p><h2 id="1、使用场景"><a href="#1、使用场景" class="headerlink" title="1、使用场景"></a>1、使用场景</h2><ol><li>系统日志处理</li><li>系统事务处理</li><li>系统安全验证</li><li>系统数据缓存</li></ol><h2 id="2、优点"><a href="#2、优点" class="headerlink" title="2、优点"></a>2、优点</h2><ol><li>在不改变原有功能代码的基础上扩展新的功能实现——OCP原则。</li><li>可以简化代码开发提高效率。</li><li>可以将非核心业务代码将业务层抽离。</li></ol><h2 id="3、相关概念"><a href="#3、相关概念" class="headerlink" title="3、相关概念"></a>3、相关概念</h2><ul><li>切面(aspect)：横切面对象,一般为一个具体类对象(可以借助@Aspect声明)，可以理解为要植入的新的业务功能，这个功能交给某个类负责,这个类就是切面。</li><li>切入点(pointcut)：对连接点拦截内容的一种定义，在原有的哪些业务方法上扩展新的业务,可以将切入点理解为方法的集合，可以是1个类或某些类。</li><li>连接点(joinpoint)：程序执行过程中某个特定的点，一般指被拦截到的的方法，可以简单理解为切入点中的一个具体方法。</li><li>通知(advice)：拦截到连接点之后只要执行的方法，可以理解为一个业务中的扩展逻辑的若干步骤，先做什么(before),再做什么(afterReturn),最后做什么。</li><li>目标对象(target)：封装原业务逻辑的对象。</li><li>代理对象(proxy)：负责调用切面中的方法为目标对象植入新的功能。</li></ul><h2 id="4、通知注解"><a href="#4、通知注解" class="headerlink" title="4、通知注解"></a>4、通知注解</h2><table><thead><tr><th align="center">注解</th><th align="center">用途</th></tr></thead><tbody><tr><td align="center">@Pointcut</td><td align="center">定义切入点</td></tr><tr><td align="center">@Before</td><td align="center">目标方法执行之前执行</td></tr><tr><td align="center">@After</td><td align="center">目标方法执行之后必定执行，无论是否报错</td></tr><tr><td align="center">@AfterReturning</td><td align="center">目标方法有返回值且正常返回后执行</td></tr><tr><td align="center">@AfterThrowing</td><td align="center">目标方法抛出异常后执行</td></tr><tr><td align="center">@Around</td><td align="center">可以获取到目标方法的入参和返回值</td></tr></tbody></table><h2 id="5、实现原理"><a href="#5、实现原理" class="headerlink" title="5、实现原理"></a>5、实现原理</h2><ul><li>默认使用 Java 动态代理来创建 AOP 代理，这样就可以为任何接口实例创建代理了。</li><li>当需要代理的类不是代理接口的时候，Spring 会切换为使用 CGLIB 代理。</li></ul><h2 id="6、Maven导包"><a href="#6、Maven导包" class="headerlink" title="6、Maven导包"></a>6、Maven导包</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="7、定义切面"><a href="#7、定义切面" class="headerlink" title="7、定义切面"></a>7、定义切面</h2><ol><li>创建1个切面类。</li><li>在类上添加注解<code>@Aspect</code>、<code>@Component</code>。</li><li>如果有多个切面可以使用<code>@Order</code>注解指定顺序，指定的值越小越先执行。</li></ol><h2 id="8、定义切入点"><a href="#8、定义切入点" class="headerlink" title="8、定义切入点"></a>8、定义切入点</h2><p>可以为指定的beanId或者通过execution表达式来给1个类或某些类定义切入点。并且这两种方式还可以和指定注解一起通过逻辑运算符<code>（||、&amp;&amp;）</code>来决定对连接点是否启用某个通知方法。</p><ul><li><strong>beanId定义切入点</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Order(10)</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogAspect</span> </span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    beanId方式定义切入点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Pointcut(&quot;bean(aopController)&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methods</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    目标方法执行之前执行</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Before(&quot;methods()&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doBefore</span><span class="params">(JoinPoint joinPoint)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;=====Before=====&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 接收到请求，记录请求内容</span></span><br><span class="line">        ServletRequestAttributes attributes = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();</span><br><span class="line">        HttpServletRequest request = attributes.getRequest();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 记录下请求内容</span></span><br><span class="line">        log.info(<span class="string">&quot;URL:[&#123;&#125;]&quot;</span>, request.getRequestURL().toString());</span><br><span class="line">        log.info(<span class="string">&quot;HTTP_METHOD:[&#123;&#125;]&quot;</span>, request.getMethod());</span><br><span class="line">        log.info(<span class="string">&quot;IP:[&#123;&#125;]&quot;</span>, request.getRemoteAddr());</span><br><span class="line">        log.info(<span class="string">&quot;CLASS_METHOD:[&#123;&#125;]&quot;</span>, joinPoint.getSignature().getDeclaringTypeName() + <span class="string">&quot;.&quot;</span> + joinPoint.getSignature().getName());</span><br><span class="line">        log.info(<span class="string">&quot;ARGS:\r\n&#123;&#125;&quot;</span>, JSON.toJSONString(joinPoint.getArgs(), <span class="keyword">true</span>));</span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>execution表达式定义切入点</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Order(1)</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TimeAspect</span> </span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    execution表达式定义切入点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(public * net.zhaoxiaobin.aop.web..*.*(..))&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methods</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around(&quot;methods()&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">doAround</span><span class="params">(ProceedingJoinPoint point)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        Object[] args = point.getArgs();</span><br><span class="line">        log.info(<span class="string">&quot;=====环绕通知开始=====&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Object result;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            result = point.proceed(args);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;=====切面捕获异常=====&quot;</span>, e);</span><br><span class="line">            JSONObject response = <span class="keyword">new</span> JSONObject();</span><br><span class="line">            response.put(<span class="string">&quot;returnCode&quot;</span>, <span class="string">&quot;999999&quot;</span>);</span><br><span class="line">            response.put(<span class="string">&quot;returnMsg&quot;</span>, <span class="string">&quot;失败&quot;</span>);</span><br><span class="line">            response.put(<span class="string">&quot;timestamp&quot;</span>, DateUtil.formatDateTime(<span class="keyword">new</span> Date()));</span><br><span class="line">            result = response;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">&quot;环绕通知结束:\r\n&#123;&#125;&quot;</span>, JSON.toJSONString(result, <span class="keyword">true</span>));</span><br><span class="line">        <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">        log.info(<span class="string">&quot;=====耗时:[&#123;&#125;]ms=====&quot;</span>, end - start);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>execution表达式解释</strong></li></ul><table><thead><tr><th align="center">符号</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">第一个 * 符号</td><td align="center">表示返回值的类型任意</td></tr><tr><td align="center">net.zhaoxiaobin.aop.web</td><td align="center">AOP所切的服务的包名，即需要进行横切的业务类</td></tr><tr><td align="center">包名后面的 ..</td><td align="center">表示当前包及子包</td></tr><tr><td align="center">第二个 *</td><td align="center">表示类名</td></tr><tr><td align="center">.*(..)</td><td align="center">表示任何方法名，括号表示参数，两个点表示任何参数类型</td></tr></tbody></table><ul><li><strong>配合使用注解来启用某个通知方法</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">目标方法执行之后必定执行，无论是否报错</span></span><br><span class="line"><span class="comment">目标方法同时需要@NeedAspect注解的修饰，并且这里（通知）的形参名要与上面注解中的一致</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@After(&quot;methods() &amp;&amp; @annotation(annot)&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doAfter</span><span class="params">(NeedAspect annot)</span> </span>&#123;</span><br><span class="line">    log.info(<span class="string">&quot;=====After=====&quot;</span>);</span><br><span class="line">    log.debug(<span class="string">&quot;=====注解值[&#123;&#125;]=====&quot;</span>, annot.value());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/aop&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AopController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/add&quot;)</span></span><br><span class="line">    <span class="meta">@NeedAspect(&quot;add&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JSONObject <span class="title">add</span><span class="params">(<span class="meta">@RequestBody</span> JSONObject request)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;=====请求报文=====\r\n&#123;&#125;&quot;</span>, JSON.toJSONString(request, <span class="keyword">true</span>));</span><br><span class="line">        <span class="keyword">return</span> success();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="9、说明"><a href="#9、说明" class="headerlink" title="9、说明"></a>9、说明</h2><ul><li><p>不需要添加@EnableAspectJAutoProxy来启用切面，原来SpringMVC中需要在配置中添加<code>&lt;aop:aspectj-autoproxy/&gt;</code>才会使切面生效。SpringBoot只需要导入aop jar包，声明好切面，就自动会为切入点下的所有bean生成代理对象。</p></li><li><p>环绕通知通过切入点的proceed方法向后调用，先执行Before前置通知方法，接着调用目标方法，如果有其它切面的Order比当前切面的Order更大，则执行其它切面的After、AfterReturning(AfterThrowing)方法，最后获取返回值，环绕通知结束后再执行当前切面的After、AfterReturning(AfterThrowing)相关方法。</p></li></ul><p><img src="https://zhaoxiaobin.coding.net/p/blog/d/zhaoxiaobin_img/git/raw/master/post/springboot/aop-1.jpg" alt="-w597"></p><h2 id="代码地址"><a href="#代码地址" class="headerlink" title="代码地址"></a>代码地址</h2><ul><li>github：<a href="https://github.com/senlinmu1008/spring-boot/tree/master/aop">https://github.com/senlinmu1008/spring-boot/tree/master/aop</a></li><li>gitee：<a href="https://gitee.com/ppbin/spring-boot/tree/master/aop">https://gitee.com/ppbin/spring-boot/tree/master/aop</a><br><br><br></li></ul>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AOP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何优雅地启停SpringBoot服务，部署为Unix、Linux系统级服务</title>
      <link href="SpringBoot/%E9%83%A8%E7%BD%B2/%E5%A6%82%E4%BD%95%E4%BC%98%E9%9B%85%E5%9C%B0%E5%90%AF%E5%81%9CSpringBoot%E6%9C%8D%E5%8A%A1%EF%BC%8C%E9%83%A8%E7%BD%B2%E4%B8%BAUnix%E3%80%81Linux%E7%B3%BB%E7%BB%9F%E7%BA%A7%E6%9C%8D%E5%8A%A1/"/>
      <url>SpringBoot/%E9%83%A8%E7%BD%B2/%E5%A6%82%E4%BD%95%E4%BC%98%E9%9B%85%E5%9C%B0%E5%90%AF%E5%81%9CSpringBoot%E6%9C%8D%E5%8A%A1%EF%BC%8C%E9%83%A8%E7%BD%B2%E4%B8%BAUnix%E3%80%81Linux%E7%B3%BB%E7%BB%9F%E7%BA%A7%E6%9C%8D%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>该方式主要借助官方的spring-boot-maven-plugin创建”Fully executable” jar ，这中jar包内置一个shell脚本，可以方便的将该应用设置为Unix/Linux的系统服务（init.d service），官方对该功能在CentOS和Ubuntu进行了测试，对于OS X和FreeBSD，可能需要自定义。</p><h2 id="1、pom-xml添加插件"><a href="#1、pom-xml添加插件" class="headerlink" title="1、pom.xml添加插件"></a>1、pom.xml添加插件</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">executable</span>&gt;</span>true<span class="tag">&lt;/<span class="name">executable</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>然后打jar包</strong></p><h2 id="2、赋予可执行权限"><a href="#2、赋予可执行权限" class="headerlink" title="2、赋予可执行权限"></a>2、赋予可执行权限</h2><p><code>sudo chmod u+x springboot-1.0.jar</code></p><h2 id="3、设置为系统服务"><a href="#3、设置为系统服务" class="headerlink" title="3、设置为系统服务"></a>3、设置为系统服务</h2><p><code>sudo ln -s /home/apps/springboot/springboot-1.0.jar /etc/init.d/springboot</code></p><h2 id="4、自定义参数"><a href="#4、自定义参数" class="headerlink" title="4、自定义参数"></a>4、自定义参数</h2><p>在jar包相同路径下创建一个.conf文件，名称应该与jar包的文件名相同，如<code>springboot-1.0.conf</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> java路径</span></span><br><span class="line">JAVA_HOME=&quot;/home/jdk1.8.0_131&quot;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 虚拟机启动参数</span></span><br><span class="line">JAVA_OPTS=&quot;-server -Xmx256M -Xms256M -Dfile.encoding=UTF-8 -DHOSTNAME=zxb01&quot;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 环境变量配置</span></span><br><span class="line">RUN_ARGS=&quot;--spring.profiles.active=dev&quot;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 日志目录</span></span><br><span class="line">LOG_FOLDER=&quot;/home/log/service/&quot;</span><br><span class="line"><span class="meta">#</span><span class="bash"> pid目录</span></span><br><span class="line">PID_FOLDER=&quot;/home/pids/&quot;</span><br></pre></td></tr></table></figure><h2 id="5、相关命令"><a href="#5、相关命令" class="headerlink" title="5、相关命令"></a>5、相关命令</h2><p>可以通过<code>service springboot</code>查看可以执行的命令参数，比如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 启动</span></span><br><span class="line">service springboot start</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 停止</span></span><br><span class="line">service springboot stop</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 重启</span></span><br><span class="line">service springboot restart</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看运行状态</span></span><br><span class="line">service springboot status</span><br></pre></td></tr></table></figure><p><br><br></p>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webService——Client搭建</title>
      <link href="Java%E5%BC%80%E5%8F%91/webService/webService%E2%80%94%E2%80%94Client%E6%90%AD%E5%BB%BA/"/>
      <url>Java%E5%BC%80%E5%8F%91/webService/webService%E2%80%94%E2%80%94Client%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>基于Axis1搭建的客户端</p><h2 id="1、Maven导包"><a href="#1、Maven导包" class="headerlink" title="1、Maven导包"></a>1、Maven导包</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.axis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>axis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>axis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>axis-jaxrpc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>axis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>axis-wsdl4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-discovery<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.mail<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mail<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2、简单类型调用"><a href="#2、简单类型调用" class="headerlink" title="2、简单类型调用"></a>2、简单类型调用</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleTestCase</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="meta">@SneakyThrows</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAxis1Simple</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// http://ip:port/contextPath/url-pattern/serviceName?wsdl</span></span><br><span class="line">        String webServiceUrl = <span class="string">&quot;http://127.0.0.1:8080/axisServer/v1/call?wsdl&quot;</span>;</span><br><span class="line">        String sum = callSimpleType(webServiceUrl, <span class="string">&quot;sum&quot;</span>, <span class="keyword">new</span> Object[]&#123;<span class="string">&quot;123&quot;</span>, <span class="string">&quot;456&quot;</span>&#125;);</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">&quot;求和结果:[&#123;&#125;]&quot;</span>, sum);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">callSimpleType</span><span class="params">(String webServiceUrl, String methodName, Object[] objects)</span> <span class="keyword">throws</span> ServiceException, RemoteException </span>&#123;</span><br><span class="line">        Service service = <span class="keyword">new</span> Service();</span><br><span class="line">        Call call = (Call) service.createCall();</span><br><span class="line"></span><br><span class="line">        call.setTimeout(<span class="number">30000</span>); <span class="comment">// 设置超时</span></span><br><span class="line">        call.setOperationName(<span class="keyword">new</span> QName(methodName)); <span class="comment">// 设置调用方法名</span></span><br><span class="line">        call.setTargetEndpointAddress(webServiceUrl); <span class="comment">// 设置调用的url</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 执行调用,数组元素与被调用方法的参数列表一一对应，参数可以少传（需要为引用类型按null处理）但不能多传</span></span><br><span class="line">        <span class="keyword">return</span> call.invoke(objects).toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3、复杂类型调用"><a href="#3、复杂类型调用" class="headerlink" title="3、复杂类型调用"></a>3、复杂类型调用</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ComplexTestCase</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="meta">@SneakyThrows</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAxis1Complex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// http://ip:port/contextPath/url-pattern/serviceName?wsdl</span></span><br><span class="line">        String webServiceUrl = <span class="string">&quot;http://127.0.0.1:8080/axisServer/v1/call?wsdl&quot;</span>;</span><br><span class="line"></span><br><span class="line">        CommonDTO requestDTO = <span class="keyword">new</span> CommonDTO();</span><br><span class="line">        requestDTO.setCompany(<span class="string">&quot;ABC&quot;</span>);</span><br><span class="line">        requestDTO.setType(<span class="number">123</span>);</span><br><span class="line">        requestDTO.setServerFlag(<span class="keyword">false</span>);</span><br><span class="line">        List&lt;String&gt; managerList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        managerList.add(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        managerList.add(<span class="string">&quot;李四&quot;</span>);</span><br><span class="line">        managerList.add(<span class="string">&quot;王五&quot;</span>);</span><br><span class="line">        requestDTO.setManagerList(managerList);</span><br><span class="line"></span><br><span class="line">        CommonDTO responseDTO = callComplexType(webServiceUrl, <span class="string">&quot;acceptInfo&quot;</span>, requestDTO);</span><br><span class="line"></span><br><span class="line">        log.info(JSON.toJSONString(responseDTO, <span class="keyword">true</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> CommonDTO <span class="title">callComplexType</span><span class="params">(String webServiceUrl, String methodName, CommonDTO commonDTO)</span> <span class="keyword">throws</span> ServiceException, RemoteException, MalformedURLException </span>&#123;</span><br><span class="line">        Service service = <span class="keyword">new</span> Service();</span><br><span class="line">        Call call = (Call) service.createCall();</span><br><span class="line"></span><br><span class="line">        call.setTimeout(<span class="number">30000</span>); <span class="comment">// 设置超时</span></span><br><span class="line">        call.setOperationName(<span class="keyword">new</span> QName(methodName)); <span class="comment">// 设置调用方法名</span></span><br><span class="line">        call.setTargetEndpointAddress(webServiceUrl); <span class="comment">// 设置调用的url</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//注册实体对象,与server-config.wsdd中的beanMapping配置一致</span></span><br><span class="line">        QName qName = <span class="keyword">new</span> QName(<span class="string">&quot;urn:commonDTO&quot;</span>, <span class="string">&quot;common&quot;</span>);</span><br><span class="line">        call.registerTypeMapping(CommonDTO.class, qName,</span><br><span class="line">                <span class="keyword">new</span> BeanSerializerFactory(CommonDTO.class, qName),</span><br><span class="line">                <span class="keyword">new</span> BeanDeserializerFactory(CommonDTO.class, qName));</span><br><span class="line">        <span class="comment">//设置被调用方法的形参</span></span><br><span class="line">        call.addParameter(<span class="string">&quot;arg1&quot;</span>, qName, ParameterMode.IN);</span><br><span class="line">        <span class="comment">//设置返回值类型</span></span><br><span class="line">        call.setReturnClass(CommonDTO.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 执行调用</span></span><br><span class="line">        <span class="keyword">return</span> (CommonDTO) call.invoke(<span class="keyword">new</span> Object[]&#123;commonDTO&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><ol><li>返回对象在反序列化时设置属性值是通过拼接set方法来实现，要求set方法无返回值，不要使用lombok的@Accessors注解。</li><li>代码地址：<ul><li>github：<a href="https://github.com/senlinmu1008/axis1Client">https://github.com/senlinmu1008/axis1Client</a></li><li>gitee：<a href="https://gitee.com/ppbin/axis1Client">https://gitee.com/ppbin/axis1Client</a><br><br><br></li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> Java开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webService </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webService——Server搭建</title>
      <link href="Java%E5%BC%80%E5%8F%91/webService/webService%E2%80%94%E2%80%94Server%E6%90%AD%E5%BB%BA/"/>
      <url>Java%E5%BC%80%E5%8F%91/webService/webService%E2%80%94%E2%80%94Server%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>基于Axis1搭建的服务端</p><h2 id="1、Maven导包"><a href="#1、Maven导包" class="headerlink" title="1、Maven导包"></a>1、Maven导包</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.axis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>axis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>axis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>axis-jaxrpc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>axis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>axis-wsdl4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-discovery<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.mail<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mail<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2、在web-xml中配置axis监听器"><a href="#2、在web-xml中配置axis监听器" class="headerlink" title="2、在web.xml中配置axis监听器"></a>2、在web.xml中配置axis监听器</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>AxisServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.apache.axis.transport.http.AxisServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>AxisServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/v1/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3、创建前置接收请求的类"><a href="#3、创建前置接收请求的类" class="headerlink" title="3、创建前置接收请求的类"></a>3、创建前置接收请求的类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dispatcher</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 简单类型调用</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sum</span><span class="params">(String num1, String num2)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;参数1:[&#123;&#125;]&quot;</span>, num1);</span><br><span class="line">        log.info(<span class="string">&quot;参数2:[&#123;&#125;]&quot;</span>, num2);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Integer.parseInt(num1) + Integer.parseInt(num2) + <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 复杂类型调用</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommonDTO <span class="title">acceptInfo</span><span class="params">(CommonDTO commonDTO)</span> </span>&#123;</span><br><span class="line">        log.info(JSON.toJSONString(commonDTO, <span class="keyword">true</span>));</span><br><span class="line"></span><br><span class="line">        commonDTO.setServerFlag(<span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">return</span> commonDTO;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4、创建对象传参的DTO-server和client共用"><a href="#4、创建对象传参的DTO-server和client共用" class="headerlink" title="4、创建对象传参的DTO(server和client共用)"></a>4、创建对象传参的DTO(server和client共用)</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommonDTO</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String company;</span><br><span class="line">    <span class="keyword">private</span> Integer type;</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; managerList;</span><br><span class="line">    <span class="keyword">private</span> Boolean serverFlag; <span class="comment">// 是否为服务端</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5、创建配置文件server-config-wsdd"><a href="#5、创建配置文件server-config-wsdd" class="headerlink" title="5、创建配置文件server-config.wsdd"></a>5、创建配置文件server-config.wsdd</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">deployment</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xml.apache.org/axis/wsdd/&quot;</span> <span class="attr">xmlns:java</span>=<span class="string">&quot;http://xml.apache.org/axis/wsdd/providers/java&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">handler</span> <span class="attr">name</span>=<span class="string">&quot;URLMapper&quot;</span> <span class="attr">type</span>=<span class="string">&quot;java:org.apache.axis.handlers.http.URLMapper&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">service</span> <span class="attr">name</span>=<span class="string">&quot;call&quot;</span> <span class="attr">provider</span>=<span class="string">&quot;java:RPC&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--- 允许调用的方法 ---&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">parameter</span> <span class="attr">name</span>=<span class="string">&quot;allowedMethods&quot;</span> <span class="attr">value</span>=<span class="string">&quot;*&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--- 前置接收请求的类 ---&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">parameter</span> <span class="attr">name</span>=<span class="string">&quot;className&quot;</span> <span class="attr">value</span>=<span class="string">&quot;net.zhaoxiaobin.web.Dispatcher&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--- 传递对象 ---&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">beanMapping</span> <span class="attr">qname</span>=<span class="string">&quot;myNS:common&quot;</span> <span class="attr">xmlns:myNS</span>=<span class="string">&quot;urn:commonDTO&quot;</span> <span class="attr">languageSpecificType</span>=<span class="string">&quot;java:net.zhaoxiaobin.domain.CommonDTO&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">service</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">transport</span> <span class="attr">name</span>=<span class="string">&quot;http&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">requestFlow</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">handler</span> <span class="attr">type</span>=<span class="string">&quot;URLMapper&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">requestFlow</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">transport</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">deployment</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="6、启动服务"><a href="#6、启动服务" class="headerlink" title="6、启动服务"></a>6、启动服务</h2><ol><li>url规则：<code>http://ip:port/contextPath/url-pattern/serviceName?wsdl</code></li><li>打开：<code>http://127.0.0.1:8080/axisServer/v1/call?wsdl</code> 可以看到xml页面即为成功。</li></ol><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><ol><li>前置接收请求的类每次调用都会通过反射实例化一次。</li><li>使用对象传参，在反序列化时给对象设置属性值是通过拼接set方法来实现，要求set方法无返回值，不要使用lombok的@Accessors注解。</li><li>代码地址：<ul><li>github：<a href="https://github.com/senlinmu1008/axis1Server">https://github.com/senlinmu1008/axis1Server</a></li><li>gitee：<a href="https://gitee.com/ppbin/axis1Server">https://gitee.com/ppbin/axis1Server</a><br><br><br></li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> Java开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webService </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>logback日志配置</title>
      <link href="SpringBoot/%E6%97%A5%E5%BF%97%E7%9B%91%E6%8E%A7/logback%E6%97%A5%E5%BF%97%E9%85%8D%E7%BD%AE/"/>
      <url>SpringBoot/%E6%97%A5%E5%BF%97%E7%9B%91%E6%8E%A7/logback%E6%97%A5%E5%BF%97%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>SpringBoot默认采用logback作为日志输出。</p><h2 id="1、参数含义"><a href="#1、参数含义" class="headerlink" title="1、参数含义"></a>1、参数含义</h2><table><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td>%date或%d</td><td>日期</td></tr><tr><td>%level或%p</td><td>日志级别，DEBUG、INFO、WARN、ERROR</td></tr><tr><td>%X{var}</td><td>访问MDC中和线程绑定的变量</td></tr><tr><td>%thread或%t</td><td>线程名</td></tr><tr><td>%logger或%c</td><td>类全名</td></tr><tr><td>%line</td><td>行号</td></tr><tr><td>%msg或%m</td><td>输出内容</td></tr><tr><td>%n</td><td>换行符</td></tr></tbody></table><h2 id="2、xml参考配置"><a href="#2、xml参考配置" class="headerlink" title="2、xml参考配置"></a>2、xml参考配置</h2><p>日志配置文件一般命名为<code>logback-spring.xml</code>或<code>logback.xml</code>，日志框架在启动时默认就会读取该配置。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引用配置属性 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">springProperty</span> <span class="attr">scope</span>=<span class="string">&quot;context&quot;</span> <span class="attr">name</span>=<span class="string">&quot;appName&quot;</span> <span class="attr">source</span>=<span class="string">&quot;spring.application.name&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--1. 输出到控制台--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;CONSOLE&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- info级别,也会记录warn和error --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.classic.filter.ThresholdFilter&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">level</span>&gt;</span>info<span class="tag">&lt;/<span class="name">level</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">charset</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">charset</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 输出格式 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Pattern</span>&gt;</span>%d [%p] [%t] [%c:%line] [%X&#123;seq&#125;] %m%n<span class="tag">&lt;/<span class="name">Pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--2. 输出到文件--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 2.1 level为 INFO 日志，时间滚动输出  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;FILE&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 文件路径 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">file</span>&gt;</span>$&#123;user.home&#125;/log/$&#123;appName&#125;.log<span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--日志文档输出格式--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">charset</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">charset</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d [%p] [%t] [%c:%line] [%X&#123;seq&#125;] %m%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 日志记录器的滚动策略，按日期，按大小记录 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 每天日志归档路径以及格式 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>$&#123;user.home&#125;/log/$&#123;appName&#125;.log.%d&#123;yyyyMMdd&#125;.gz<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--日志文档保留天数--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">maxHistory</span>&gt;</span>30<span class="tag">&lt;/<span class="name">maxHistory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 此日志文档只记录info级别的,不记录warn以及error,用作定向输出info日志文件 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;filter class=&quot;ch.qos.logback.classic.filter.LevelFilter&quot;&gt;--&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--&lt;level&gt;info&lt;/level&gt;--&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--&lt;onMatch&gt;ACCEPT&lt;/onMatch&gt;--&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--&lt;onMismatch&gt;DENY&lt;/onMismatch&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;/filter&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- info级别,也会记录warn和error --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.classic.filter.ThresholdFilter&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">level</span>&gt;</span>info<span class="tag">&lt;/<span class="name">level</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--特定输出--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;WarnController&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.classic.filter.ThresholdFilter&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">level</span>&gt;</span>warn<span class="tag">&lt;/<span class="name">level</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">charset</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">charset</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Pattern</span>&gt;</span>%d [%p] [%t] [%c:%line] [%X&#123;seq&#125;] %m%n<span class="tag">&lt;/<span class="name">Pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 单独对某个类或某个包下配置,additivity为false代表不继承root(root中则不再输出此日志)--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;net.zhaoxiaobin.web.WarnController&quot;</span> <span class="attr">level</span>=<span class="string">&quot;warn&quot;</span> <span class="attr">additivity</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;WarnController&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- root节点会把所有日志经过level过滤再输出给appender对应配置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">&quot;debug&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;CONSOLE&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;FILE&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="代码地址"><a href="#代码地址" class="headerlink" title="代码地址"></a>代码地址</h2><ul><li>github：<a href="https://github.com/senlinmu1008/spring-boot/tree/master/logback">https://github.com/senlinmu1008/spring-boot/tree/master/logback</a></li><li>gitee：<a href="https://gitee.com/ppbin/spring-boot/tree/master/logback">https://gitee.com/ppbin/spring-boot/tree/master/logback</a><br><br><br></li></ul>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
